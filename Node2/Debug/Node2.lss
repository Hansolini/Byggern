
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800200  0000147e  00001512  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000147e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080023e  0080023e  00001550  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d0  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000140e  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000abc  00000000  00000000  00002b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dab  00000000  00000000  00003646  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e0  00000000  00000000  000043f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005eb  00000000  00000000  000047d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000aa4  00000000  00000000  00004dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00005863  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cc c2       	rjmp	.+1432   	; 0x636 <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	36 03       	mulsu	r19, r22
      e6:	88 03       	fmulsu	r16, r16
      e8:	88 03       	fmulsu	r16, r16
      ea:	88 03       	fmulsu	r16, r16
      ec:	88 03       	fmulsu	r16, r16
      ee:	88 03       	fmulsu	r16, r16
      f0:	88 03       	fmulsu	r16, r16
      f2:	88 03       	fmulsu	r16, r16
      f4:	36 03       	mulsu	r19, r22
      f6:	88 03       	fmulsu	r16, r16
      f8:	88 03       	fmulsu	r16, r16
      fa:	88 03       	fmulsu	r16, r16
      fc:	88 03       	fmulsu	r16, r16
      fe:	88 03       	fmulsu	r16, r16
     100:	88 03       	fmulsu	r16, r16
     102:	88 03       	fmulsu	r16, r16
     104:	38 03       	fmul	r19, r16
     106:	88 03       	fmulsu	r16, r16
     108:	88 03       	fmulsu	r16, r16
     10a:	88 03       	fmulsu	r16, r16
     10c:	88 03       	fmulsu	r16, r16
     10e:	88 03       	fmulsu	r16, r16
     110:	88 03       	fmulsu	r16, r16
     112:	88 03       	fmulsu	r16, r16
     114:	88 03       	fmulsu	r16, r16
     116:	88 03       	fmulsu	r16, r16
     118:	88 03       	fmulsu	r16, r16
     11a:	88 03       	fmulsu	r16, r16
     11c:	88 03       	fmulsu	r16, r16
     11e:	88 03       	fmulsu	r16, r16
     120:	88 03       	fmulsu	r16, r16
     122:	88 03       	fmulsu	r16, r16
     124:	38 03       	fmul	r19, r16
     126:	88 03       	fmulsu	r16, r16
     128:	88 03       	fmulsu	r16, r16
     12a:	88 03       	fmulsu	r16, r16
     12c:	88 03       	fmulsu	r16, r16
     12e:	88 03       	fmulsu	r16, r16
     130:	88 03       	fmulsu	r16, r16
     132:	88 03       	fmulsu	r16, r16
     134:	88 03       	fmulsu	r16, r16
     136:	88 03       	fmulsu	r16, r16
     138:	88 03       	fmulsu	r16, r16
     13a:	88 03       	fmulsu	r16, r16
     13c:	88 03       	fmulsu	r16, r16
     13e:	88 03       	fmulsu	r16, r16
     140:	88 03       	fmulsu	r16, r16
     142:	88 03       	fmulsu	r16, r16
     144:	84 03       	fmuls	r16, r20
     146:	88 03       	fmulsu	r16, r16
     148:	88 03       	fmulsu	r16, r16
     14a:	88 03       	fmulsu	r16, r16
     14c:	88 03       	fmulsu	r16, r16
     14e:	88 03       	fmulsu	r16, r16
     150:	88 03       	fmulsu	r16, r16
     152:	88 03       	fmulsu	r16, r16
     154:	61 03       	mulsu	r22, r17
     156:	88 03       	fmulsu	r16, r16
     158:	88 03       	fmulsu	r16, r16
     15a:	88 03       	fmulsu	r16, r16
     15c:	88 03       	fmulsu	r16, r16
     15e:	88 03       	fmulsu	r16, r16
     160:	88 03       	fmulsu	r16, r16
     162:	88 03       	fmulsu	r16, r16
     164:	88 03       	fmulsu	r16, r16
     166:	88 03       	fmulsu	r16, r16
     168:	88 03       	fmulsu	r16, r16
     16a:	88 03       	fmulsu	r16, r16
     16c:	88 03       	fmulsu	r16, r16
     16e:	88 03       	fmulsu	r16, r16
     170:	88 03       	fmulsu	r16, r16
     172:	88 03       	fmulsu	r16, r16
     174:	55 03       	mulsu	r21, r21
     176:	88 03       	fmulsu	r16, r16
     178:	88 03       	fmulsu	r16, r16
     17a:	88 03       	fmulsu	r16, r16
     17c:	88 03       	fmulsu	r16, r16
     17e:	88 03       	fmulsu	r16, r16
     180:	88 03       	fmulsu	r16, r16
     182:	88 03       	fmulsu	r16, r16
     184:	73 03       	mulsu	r23, r19

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	ee e7       	ldi	r30, 0x7E	; 126
     19e:	f4 e1       	ldi	r31, 0x14	; 20
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	ae 33       	cpi	r26, 0x3E	; 62
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	22 e0       	ldi	r18, 0x02	; 2
     1b2:	ae e3       	ldi	r26, 0x3E	; 62
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a1 35       	cpi	r26, 0x51	; 81
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	d2 d0       	rcall	.+420    	; 0x366 <main>
     1c2:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <adc_init>:
     1c8:	ea e7       	ldi	r30, 0x7A	; 122
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	80 68       	ori	r24, 0x80	; 128
     1d0:	80 83       	st	Z, r24
     1d2:	ac e7       	ldi	r26, 0x7C	; 124
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	8c 91       	ld	r24, X
     1d8:	80 6c       	ori	r24, 0xC0	; 192
     1da:	8c 93       	st	X, r24
     1dc:	80 81       	ld	r24, Z
     1de:	87 60       	ori	r24, 0x07	; 7
     1e0:	80 83       	st	Z, r24
     1e2:	08 95       	ret

000001e4 <adc_read>:
     1e4:	ea e7       	ldi	r30, 0x7A	; 122
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	80 64       	ori	r24, 0x40	; 64
     1ec:	80 83       	st	Z, r24
     1ee:	80 81       	ld	r24, Z
     1f0:	86 fd       	sbrc	r24, 6
     1f2:	fd cf       	rjmp	.-6      	; 0x1ee <adc_read+0xa>
     1f4:	80 91 78 00 	lds	r24, 0x0078
     1f8:	90 91 79 00 	lds	r25, 0x0079
     1fc:	08 95       	ret

000001fe <can_init>:
	
	mcp_request_to_send(buffer == 2, buffer == 1, buffer == 0);	//Request to send - sending will start as soon as the bus is clear
	
	//TODO: (maybe) print error message?
	//TXBnCTRL.TXERR and the CANINTF.MERRF bits will be set and an interrupt will be generated on the INT pin if the CANINTE.MERRE bit is set
}
     1fe:	cf 93       	push	r28
     200:	c8 2f       	mov	r28, r24
     202:	40 e0       	ldi	r20, 0x00	; 0
     204:	6c e1       	ldi	r22, 0x1C	; 28
     206:	8b e2       	ldi	r24, 0x2B	; 43
     208:	76 d0       	rcall	.+236    	; 0x2f6 <mcp_bit_modify>
     20a:	40 e6       	ldi	r20, 0x60	; 96
     20c:	60 e6       	ldi	r22, 0x60	; 96
     20e:	80 e6       	ldi	r24, 0x60	; 96
     210:	72 d0       	rcall	.+228    	; 0x2f6 <mcp_bit_modify>
     212:	4c 2f       	mov	r20, r28
     214:	6f ef       	ldi	r22, 0xFF	; 255
     216:	8f e0       	ldi	r24, 0x0F	; 15
     218:	6e d0       	rcall	.+220    	; 0x2f6 <mcp_bit_modify>
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <can_receive>:

Msg can_receive(){
     21e:	8f 92       	push	r8
     220:	9f 92       	push	r9
     222:	af 92       	push	r10
     224:	bf 92       	push	r11
     226:	cf 92       	push	r12
     228:	df 92       	push	r13
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	00 d0       	rcall	.+0      	; 0x238 <can_receive+0x1a>
     238:	00 d0       	rcall	.+0      	; 0x23a <can_receive+0x1c>
     23a:	cd b7       	in	r28, 0x3d	; 61
     23c:	de b7       	in	r29, 0x3e	; 62
	int buffer = 0; //n = 1 or 2
	
	Msg msg;
	msg.id = ((int)mcp_read(0x61 + 0x10*buffer) << 3) | (mcp_read(0x62 + 0x10*buffer) >> 5); //Put together RXBnSIDH and RXBnSIDL
     23e:	81 e6       	ldi	r24, 0x61	; 97
     240:	4e d0       	rcall	.+156    	; 0x2de <mcp_read>
     242:	a8 2e       	mov	r10, r24
     244:	82 e6       	ldi	r24, 0x62	; 98
     246:	4b d0       	rcall	.+150    	; 0x2de <mcp_read>
     248:	82 95       	swap	r24
     24a:	86 95       	lsr	r24
     24c:	87 70       	andi	r24, 0x07	; 7
     24e:	b1 2c       	mov	r11, r1
     250:	aa 0c       	add	r10, r10
     252:	bb 1c       	adc	r11, r11
     254:	aa 0c       	add	r10, r10
     256:	bb 1c       	adc	r11, r11
     258:	aa 0c       	add	r10, r10
     25a:	bb 1c       	adc	r11, r11
     25c:	a8 2a       	or	r10, r24
	msg.length = mcp_read(0x65 + 0x10*buffer) & 0b00001111; //RXBnDLC
     25e:	85 e6       	ldi	r24, 0x65	; 101
     260:	3e d0       	rcall	.+124    	; 0x2de <mcp_read>
     262:	8f 70       	andi	r24, 0x0F	; 15
     264:	c8 2e       	mov	r12, r24
     266:	d1 2c       	mov	r13, r1
	msg.data = malloc(msg.length);
     268:	c6 01       	movw	r24, r12
     26a:	a3 d4       	rcall	.+2374   	; 0xbb2 <malloc>
     26c:	98 2e       	mov	r9, r24
     26e:	89 2e       	mov	r8, r25
	
	for(int i = 0; i < msg.length; i++){
     270:	1c 14       	cp	r1, r12
     272:	1d 04       	cpc	r1, r13
     274:	7c f4       	brge	.+30     	; 0x294 <can_receive+0x76>
     276:	e8 2e       	mov	r14, r24
     278:	f9 2e       	mov	r15, r25
     27a:	00 e0       	ldi	r16, 0x00	; 0
     27c:	10 e0       	ldi	r17, 0x00	; 0
		msg.data[i] = mcp_read(0x66 + 0x10*buffer + i);
     27e:	86 e6       	ldi	r24, 0x66	; 102
     280:	80 0f       	add	r24, r16
     282:	2d d0       	rcall	.+90     	; 0x2de <mcp_read>
     284:	f7 01       	movw	r30, r14
     286:	81 93       	st	Z+, r24
     288:	7f 01       	movw	r14, r30
	Msg msg;
	msg.id = ((int)mcp_read(0x61 + 0x10*buffer) << 3) | (mcp_read(0x62 + 0x10*buffer) >> 5); //Put together RXBnSIDH and RXBnSIDL
	msg.length = mcp_read(0x65 + 0x10*buffer) & 0b00001111; //RXBnDLC
	msg.data = malloc(msg.length);
	
	for(int i = 0; i < msg.length; i++){
     28a:	0f 5f       	subi	r16, 0xFF	; 255
     28c:	1f 4f       	sbci	r17, 0xFF	; 255
     28e:	0c 15       	cp	r16, r12
     290:	1d 05       	cpc	r17, r13
     292:	ac f3       	brlt	.-22     	; 0x27e <can_receive+0x60>
		msg.data[i] = mcp_read(0x66 + 0x10*buffer + i);
	}
	
	mcp_bit_modify(0x2C, buffer + 1, 0);	//CANINTF - Sets RX0IF to 0
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	61 e0       	ldi	r22, 0x01	; 1
     298:	8c e2       	ldi	r24, 0x2C	; 44
     29a:	2d d0       	rcall	.+90     	; 0x2f6 <mcp_bit_modify>
	return msg;
     29c:	ba 82       	std	Y+2, r11	; 0x02
     29e:	a9 82       	std	Y+1, r10	; 0x01
     2a0:	dc 82       	std	Y+4, r13	; 0x04
     2a2:	cb 82       	std	Y+3, r12	; 0x03
     2a4:	9d 82       	std	Y+5, r9	; 0x05
     2a6:	8e 82       	std	Y+6, r8	; 0x06
     2a8:	2a 2d       	mov	r18, r10
     2aa:	3a 81       	ldd	r19, Y+2	; 0x02
     2ac:	4c 2d       	mov	r20, r12
     2ae:	5c 81       	ldd	r21, Y+4	; 0x04
     2b0:	69 2d       	mov	r22, r9
     2b2:	78 2d       	mov	r23, r8
}
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	26 96       	adiw	r28, 0x06	; 6
     2ba:	0f b6       	in	r0, 0x3f	; 63
     2bc:	f8 94       	cli
     2be:	de bf       	out	0x3e, r29	; 62
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	cd bf       	out	0x3d, r28	; 61
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	ff 90       	pop	r15
     2ce:	ef 90       	pop	r14
     2d0:	df 90       	pop	r13
     2d2:	cf 90       	pop	r12
     2d4:	bf 90       	pop	r11
     2d6:	af 90       	pop	r10
     2d8:	9f 90       	pop	r9
     2da:	8f 90       	pop	r8
     2dc:	08 95       	ret

000002de <mcp_read>:
	clear_bit(PORTB, PB7);
	spi_master_transmit(MCP_READ_STATUS);
	char status = spi_master_transmit(0x00);
	set_bit(PORTB ,PB7);
	return status;
}
     2de:	cf 93       	push	r28
     2e0:	c8 2f       	mov	r28, r24
     2e2:	2f 98       	cbi	0x05, 7	; 5
     2e4:	83 e0       	ldi	r24, 0x03	; 3
     2e6:	75 d1       	rcall	.+746    	; 0x5d2 <spi_master_transmit>
     2e8:	8c 2f       	mov	r24, r28
     2ea:	73 d1       	rcall	.+742    	; 0x5d2 <spi_master_transmit>
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	71 d1       	rcall	.+738    	; 0x5d2 <spi_master_transmit>
     2f0:	2f 9a       	sbi	0x05, 7	; 5
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <mcp_bit_modify>:

void mcp_bit_modify(char address, char mask, char data){
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	18 2f       	mov	r17, r24
     2fe:	d6 2f       	mov	r29, r22
     300:	c4 2f       	mov	r28, r20
	clear_bit(PORTB, PB7);
     302:	2f 98       	cbi	0x05, 7	; 5
	spi_master_transmit(MCP_BITMOD);
     304:	85 e0       	ldi	r24, 0x05	; 5
     306:	65 d1       	rcall	.+714    	; 0x5d2 <spi_master_transmit>
	spi_master_transmit(address);
     308:	81 2f       	mov	r24, r17
     30a:	63 d1       	rcall	.+710    	; 0x5d2 <spi_master_transmit>
	spi_master_transmit(mask);
     30c:	8d 2f       	mov	r24, r29
     30e:	61 d1       	rcall	.+706    	; 0x5d2 <spi_master_transmit>
	spi_master_transmit(data);
     310:	8c 2f       	mov	r24, r28
     312:	5f d1       	rcall	.+702    	; 0x5d2 <spi_master_transmit>
	set_bit(PORTB, PB7);
     314:	2f 9a       	sbi	0x05, 7	; 5
}
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	1f 91       	pop	r17
     31c:	08 95       	ret

0000031e <mcp_reset>:

void mcp_reset(){
	clear_bit(PORTB, PB7);
     31e:	2f 98       	cbi	0x05, 7	; 5
	spi_master_transmit(MCP_RESET);
     320:	80 ec       	ldi	r24, 0xC0	; 192
     322:	57 d1       	rcall	.+686    	; 0x5d2 <spi_master_transmit>
	set_bit(PORTB, PB7);
     324:	2f 9a       	sbi	0x05, 7	; 5
     326:	08 95       	ret

00000328 <mcp_init>:
} 

void mcp_init(){
	mcp_reset();
     328:	fa cf       	rjmp	.-12     	; 0x31e <mcp_reset>
     32a:	08 95       	ret

0000032c <check_if_scored>:
}

int check_if_scored()
{
	int trigger_value = 200;
	int adc_val = adc_read();
     32c:	5b df       	rcall	.-330    	; 0x1e4 <adc_read>
	//printf("ADC VAL = %d\r\n", adc_val);
	if (adc_val < trigger_value && scoring_allowed){ //Can't score again until the adc value goes up
     32e:	88 3c       	cpi	r24, 0xC8	; 200
     330:	91 05       	cpc	r25, r1
     332:	6c f4       	brge	.+26     	; 0x34e <check_if_scored+0x22>
     334:	80 91 06 02 	lds	r24, 0x0206
     338:	90 91 07 02 	lds	r25, 0x0207
     33c:	89 2b       	or	r24, r25
     33e:	81 f0       	breq	.+32     	; 0x360 <check_if_scored+0x34>
		scoring_allowed = 0;
     340:	10 92 07 02 	sts	0x0207, r1
     344:	10 92 06 02 	sts	0x0206, r1
		return 1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	08 95       	ret
	}
	else if (adc_val >= trigger_value){
		scoring_allowed = 1;
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	90 93 07 02 	sts	0x0207, r25
     356:	80 93 06 02 	sts	0x0206, r24
	}
	return 0;
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	08 95       	ret
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
}
     364:	08 95       	ret

00000366 <main>:
#include "TWI_Master.h"

int scoring_allowed = 1;

int main(void)
{	
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	cd b7       	in	r28, 0x3d	; 61
     36c:	de b7       	in	r29, 0x3e	; 62
     36e:	2c 97       	sbiw	r28, 0x0c	; 12
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
	uart_init(9600, NODE_2);
     37a:	62 e0       	ldi	r22, 0x02	; 2
     37c:	70 e0       	ldi	r23, 0x00	; 0
     37e:	80 e8       	ldi	r24, 0x80	; 128
     380:	95 e2       	ldi	r25, 0x25	; 37
     382:	ec d1       	rcall	.+984    	; 0x75c <uart_init>
	printf("\r\n\x1b[4mReset\x1b[0m \r\n");
     384:	89 e0       	ldi	r24, 0x09	; 9
     386:	92 e0       	ldi	r25, 0x02	; 2
     388:	96 d5       	rcall	.+2860   	; 0xeb6 <puts>
	adc_init();
     38a:	1e df       	rcall	.-452    	; 0x1c8 <adc_init>
	spi_master_init();
     38c:	1a d1       	rcall	.+564    	; 0x5c2 <spi_master_init>
    mcp_init();
     38e:	cc df       	rcall	.-104    	; 0x328 <mcp_init>
	can_init(MODE_NORMAL);
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	34 df       	rcall	.-408    	; 0x1fe <can_init>
	pwm_init();
     396:	fa d0       	rcall	.+500    	; 0x58c <pwm_init>
	TWI_Master_Initialise();
     398:	22 d1       	rcall	.+580    	; 0x5de <TWI_Master_Initialise>
	motor_init();
     39a:	63 d0       	rcall	.+198    	; 0x462 <motor_init>
	sei(); //enable the use of interrupts
     39c:	78 94       	sei
		switch (msg_received.id){
			case 1: //For short strings
				printf("%s",msg_received.data);
				break;
			case 13: //For sending integers
				printf("%d", *(int*)msg_received.data);
     39e:	0f 2e       	mov	r0, r31
     3a0:	fe e1       	ldi	r31, 0x1E	; 30
     3a2:	af 2e       	mov	r10, r31
     3a4:	f2 e0       	ldi	r31, 0x02	; 2
     3a6:	bf 2e       	mov	r11, r31
     3a8:	f0 2d       	mov	r31, r0
				break;
			case 42: //For sending positions
				position_received = *(Position*)msg_received.data;
     3aa:	0f 2e       	mov	r0, r31
     3ac:	f6 e0       	ldi	r31, 0x06	; 6
     3ae:	9f 2e       	mov	r9, r31
     3b0:	f0 2d       	mov	r31, r0
				break;
			default:
				printf("ID unknown\r");
     3b2:	0f 2e       	mov	r0, r31
     3b4:	f1 e2       	ldi	r31, 0x21	; 33
     3b6:	cf 2e       	mov	r12, r31
     3b8:	f2 e0       	ldi	r31, 0x02	; 2
     3ba:	df 2e       	mov	r13, r31
     3bc:	f0 2d       	mov	r31, r0
		Position position_received;
		Msg msg_received = can_receive();
		
		switch (msg_received.id){
			case 1: //For short strings
				printf("%s",msg_received.data);
     3be:	0f 2e       	mov	r0, r31
     3c0:	fb e1       	ldi	r31, 0x1B	; 27
     3c2:	ef 2e       	mov	r14, r31
     3c4:	f2 e0       	ldi	r31, 0x02	; 2
     3c6:	ff 2e       	mov	r15, r31
     3c8:	f0 2d       	mov	r31, r0
	int score = 0;

	while(1)
	{
		Position position_received;
		Msg msg_received = can_receive();
     3ca:	29 df       	rcall	.-430    	; 0x21e <can_receive>
     3cc:	29 83       	std	Y+1, r18	; 0x01
     3ce:	3a 83       	std	Y+2, r19	; 0x02
     3d0:	4b 83       	std	Y+3, r20	; 0x03
     3d2:	5c 83       	std	Y+4, r21	; 0x04
     3d4:	6d 83       	std	Y+5, r22	; 0x05
     3d6:	7e 83       	std	Y+6, r23	; 0x06
     3d8:	0d 81       	ldd	r16, Y+5	; 0x05
     3da:	1e 81       	ldd	r17, Y+6	; 0x06
		
		switch (msg_received.id){
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	9a 81       	ldd	r25, Y+2	; 0x02
     3e0:	8d 30       	cpi	r24, 0x0D	; 13
     3e2:	91 05       	cpc	r25, r1
     3e4:	79 f0       	breq	.+30     	; 0x404 <main+0x9e>
     3e6:	8a 32       	cpi	r24, 0x2A	; 42
     3e8:	91 05       	cpc	r25, r1
     3ea:	c9 f0       	breq	.+50     	; 0x41e <main+0xb8>
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	01 f5       	brne	.+64     	; 0x430 <main+0xca>
			case 1: //For short strings
				printf("%s",msg_received.data);
     3f0:	1f 93       	push	r17
     3f2:	0f 93       	push	r16
     3f4:	ff 92       	push	r15
     3f6:	ef 92       	push	r14
     3f8:	4d d5       	rcall	.+2714   	; 0xe94 <printf>
				break;
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	1b c0       	rjmp	.+54     	; 0x43a <main+0xd4>
			case 13: //For sending integers
				printf("%d", *(int*)msg_received.data);
     404:	f8 01       	movw	r30, r16
     406:	81 81       	ldd	r24, Z+1	; 0x01
     408:	8f 93       	push	r24
     40a:	80 81       	ld	r24, Z
     40c:	8f 93       	push	r24
     40e:	bf 92       	push	r11
     410:	af 92       	push	r10
     412:	40 d5       	rcall	.+2688   	; 0xe94 <printf>
				break;
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0e c0       	rjmp	.+28     	; 0x43a <main+0xd4>
			case 42: //For sending positions
				position_received = *(Position*)msg_received.data;
     41e:	f8 01       	movw	r30, r16
     420:	de 01       	movw	r26, r28
     422:	17 96       	adiw	r26, 0x07	; 7
     424:	89 2d       	mov	r24, r9
     426:	01 90       	ld	r0, Z+
     428:	0d 92       	st	X+, r0
     42a:	8a 95       	dec	r24
     42c:	e1 f7       	brne	.-8      	; 0x426 <main+0xc0>
				break;
     42e:	05 c0       	rjmp	.+10     	; 0x43a <main+0xd4>
			default:
				printf("ID unknown\r");
     430:	df 92       	push	r13
     432:	cf 92       	push	r12
     434:	2f d5       	rcall	.+2654   	; 0xe94 <printf>
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
		}
		free(msg_received.data);
     43a:	c8 01       	movw	r24, r16
     43c:	52 d4       	rcall	.+2212   	; 0xce2 <free>
		
		motor_move_dc(position_received);
     43e:	4f 81       	ldd	r20, Y+7	; 0x07
     440:	58 85       	ldd	r21, Y+8	; 0x08
     442:	69 85       	ldd	r22, Y+9	; 0x09
     444:	7a 85       	ldd	r23, Y+10	; 0x0a
     446:	8b 85       	ldd	r24, Y+11	; 0x0b
     448:	9c 85       	ldd	r25, Y+12	; 0x0c
     44a:	19 d0       	rcall	.+50     	; 0x47e <motor_move_dc>
		score += check_if_scored();
     44c:	6f df       	rcall	.-290    	; 0x32c <check_if_scored>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     44e:	ff ef       	ldi	r31, 0xFF	; 255
     450:	20 e7       	ldi	r18, 0x70	; 112
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	f1 50       	subi	r31, 0x01	; 1
     456:	20 40       	sbci	r18, 0x00	; 0
     458:	80 40       	sbci	r24, 0x00	; 0
     45a:	e1 f7       	brne	.-8      	; 0x454 <main+0xee>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <main+0xf8>
     45e:	00 00       	nop
		//motor_move_servo((((float)position_received.y) * 1.2 / 200.0) + 1.5); //Maps -100,100 to 0.9,2.1
		//printf("x:%4d y:%4d z:%4d\r", position_received.x,position_received.y,position_received.z);
		//printf("SCORE = %d\r\n", score);
		
		_delay_ms(50);
	}
     460:	b4 cf       	rjmp	.-152    	; 0x3ca <main+0x64>

00000462 <motor_init>:
#include "pwm.h"

//Rename files to motor.c and motor.h?

void motor_init(){
	DDRH |= (1 << PH1); //Set motor direction pin as output
     462:	e1 e0       	ldi	r30, 0x01	; 1
     464:	f1 e0       	ldi	r31, 0x01	; 1
     466:	80 81       	ld	r24, Z
     468:	82 60       	ori	r24, 0x02	; 2
     46a:	80 83       	st	Z, r24
	DDRH |= (1 << DDH4); //Set motor enable pin as output
     46c:	80 81       	ld	r24, Z
     46e:	80 61       	ori	r24, 0x10	; 16
     470:	80 83       	st	Z, r24
	PORTH |= (1 << PH4); //Set motor enable pin high
     472:	e2 e0       	ldi	r30, 0x02	; 2
     474:	f1 e0       	ldi	r31, 0x01	; 1
     476:	80 81       	ld	r24, Z
     478:	80 61       	ori	r24, 0x10	; 16
     47a:	80 83       	st	Z, r24
     47c:	08 95       	ret

0000047e <motor_move_dc>:
	//PORTB |= ((1 << PH1) | (1 << PH4)); //This sets pull-up R for SCL and SDA. Is this really needed? Ask the studass?	
}

void motor_move_dc(Position pos){
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
     48a:	29 97       	sbiw	r28, 0x09	; 9
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	de bf       	out	0x3e, r29	; 62
     492:	0f be       	out	0x3f, r0	; 63
     494:	cd bf       	out	0x3d, r28	; 61
     496:	4c 83       	std	Y+4, r20	; 0x04
     498:	5d 83       	std	Y+5, r21	; 0x05
     49a:	6e 83       	std	Y+6, r22	; 0x06
     49c:	7f 83       	std	Y+7, r23	; 0x07
     49e:	88 87       	std	Y+8, r24	; 0x08
     4a0:	99 87       	std	Y+9, r25	; 0x09
     4a2:	0e 81       	ldd	r16, Y+6	; 0x06
     4a4:	1f 81       	ldd	r17, Y+7	; 0x07
	int voltage = 0;
	if (pos.y >= 10){
     4a6:	0a 30       	cpi	r16, 0x0A	; 10
     4a8:	11 05       	cpc	r17, r1
     4aa:	34 f0       	brlt	.+12     	; 0x4b8 <motor_move_dc+0x3a>
		PORTH |= (1 << PH1); //Set direction
     4ac:	e2 e0       	ldi	r30, 0x02	; 2
     4ae:	f1 e0       	ldi	r31, 0x01	; 1
     4b0:	80 81       	ld	r24, Z
     4b2:	82 60       	ori	r24, 0x02	; 2
     4b4:	80 83       	st	Z, r24
     4b6:	0f c0       	rjmp	.+30     	; 0x4d6 <motor_move_dc+0x58>
		voltage = pos.y;
	}
	else if (pos.y <= -10){
     4b8:	07 3f       	cpi	r16, 0xF7	; 247
     4ba:	8f ef       	ldi	r24, 0xFF	; 255
     4bc:	18 07       	cpc	r17, r24
     4be:	4c f4       	brge	.+18     	; 0x4d2 <motor_move_dc+0x54>
		PORTH &= ~(1 << PH1); //Set other direction
     4c0:	e2 e0       	ldi	r30, 0x02	; 2
     4c2:	f1 e0       	ldi	r31, 0x01	; 1
     4c4:	80 81       	ld	r24, Z
     4c6:	8d 7f       	andi	r24, 0xFD	; 253
     4c8:	80 83       	st	Z, r24
		voltage = -pos.y;
     4ca:	11 95       	neg	r17
     4cc:	01 95       	neg	r16
     4ce:	11 09       	sbc	r17, r1
     4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <motor_move_dc+0x58>
	PORTH |= (1 << PH4); //Set motor enable pin high
	//PORTB |= ((1 << PH1) | (1 << PH4)); //This sets pull-up R for SCL and SDA. Is this really needed? Ask the studass?	
}

void motor_move_dc(Position pos){
	int voltage = 0;
     4d2:	00 e0       	ldi	r16, 0x00	; 0
     4d4:	10 e0       	ldi	r17, 0x00	; 0
	else if (pos.y <= -10){
		PORTH &= ~(1 << PH1); //Set other direction
		voltage = -pos.y;
	}
	
	printf("DAC voltage:%d\r\n",voltage);
     4d6:	1f 93       	push	r17
     4d8:	0f 93       	push	r16
     4da:	8d e2       	ldi	r24, 0x2D	; 45
     4dc:	92 e0       	ldi	r25, 0x02	; 2
     4de:	9f 93       	push	r25
     4e0:	8f 93       	push	r24
     4e2:	d8 d4       	rcall	.+2480   	; 0xe94 <printf>
	
	int dac_address = 0b0101000;
	char length = 3;
	char msg[3];
	msg[0] = ((dac_address << 1) | 0); //0 = write, 1 = read
     4e4:	80 e5       	ldi	r24, 0x50	; 80
     4e6:	89 83       	std	Y+1, r24	; 0x01
	msg[1] = 0b00000000; //Command byte: R2, R1, R0, Rst, PD, A2, A1, A0
     4e8:	1a 82       	std	Y+2, r1	; 0x02
	msg[2] = voltage; //Value of 0-255, maps to 0V-5V
     4ea:	0b 83       	std	Y+3, r16	; 0x03
	TWI_Start_Transceiver_With_Data(msg, length);
     4ec:	63 e0       	ldi	r22, 0x03	; 3
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	ce 01       	movw	r24, r28
     4f2:	01 96       	adiw	r24, 0x01	; 1
     4f4:	7e d0       	rcall	.+252    	; 0x5f2 <TWI_Start_Transceiver_With_Data>
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
	
	//Just for fun, no ifs:
	//PORTH |= ((pos.y > 0) << PH1); //Set direction
	//int voltage = (abs(pos.y) > 10) * abs(pos.y); //Set voltage to magnitude of pos.y, or 0
}
     4fe:	29 96       	adiw	r28, 0x09	; 9
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	de bf       	out	0x3e, r29	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	cd bf       	out	0x3d, r28	; 61
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	08 95       	ret

00000514 <pwm_set_duty_cycle>:
	pwm_top = ((uint32_t)F_CPU/(uint16_t)(f * prescaler) - 1);
	ICR1 = pwm_top; //This defines the pwm period length
	pwm_set_duty_cycle(1.5); //Center the servo
}

void pwm_set_duty_cycle(float ms){
     514:	8f 92       	push	r8
     516:	9f 92       	push	r9
     518:	af 92       	push	r10
     51a:	bf 92       	push	r11
     51c:	cf 92       	push	r12
     51e:	df 92       	push	r13
     520:	ef 92       	push	r14
     522:	ff 92       	push	r15
     524:	6b 01       	movw	r12, r22
     526:	7c 01       	movw	r14, r24
	if(ms <= 20 && ms >= 0){
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	40 ea       	ldi	r20, 0xA0	; 160
     52e:	51 e4       	ldi	r21, 0x41	; 65
     530:	4b d1       	rcall	.+662    	; 0x7c8 <__cmpsf2>
     532:	18 16       	cp	r1, r24
     534:	14 f1       	brlt	.+68     	; 0x57a <pwm_set_duty_cycle+0x66>
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	a9 01       	movw	r20, r18
     53c:	c7 01       	movw	r24, r14
     53e:	b6 01       	movw	r22, r12
     540:	8d d2       	rcall	.+1306   	; 0xa5c <__gesf2>
     542:	88 23       	and	r24, r24
     544:	d4 f0       	brlt	.+52     	; 0x57a <pwm_set_duty_cycle+0x66>
		float duty_cycle = ms/20.0;
		OCR1A = (pwm_top*duty_cycle);
     546:	60 91 3e 02 	lds	r22, 0x023E
     54a:	70 91 3f 02 	lds	r23, 0x023F
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	d2 d1       	rcall	.+932    	; 0x8f8 <__floatunsisf>
     554:	4b 01       	movw	r8, r22
     556:	5c 01       	movw	r10, r24
	pwm_set_duty_cycle(1.5); //Center the servo
}

void pwm_set_duty_cycle(float ms){
	if(ms <= 20 && ms >= 0){
		float duty_cycle = ms/20.0;
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	40 ea       	ldi	r20, 0xA0	; 160
     55e:	51 e4       	ldi	r21, 0x41	; 65
     560:	c7 01       	movw	r24, r14
     562:	b6 01       	movw	r22, r12
     564:	35 d1       	rcall	.+618    	; 0x7d0 <__divsf3>
     566:	9b 01       	movw	r18, r22
     568:	ac 01       	movw	r20, r24
		OCR1A = (pwm_top*duty_cycle);
     56a:	c5 01       	movw	r24, r10
     56c:	b4 01       	movw	r22, r8
     56e:	7a d2       	rcall	.+1268   	; 0xa64 <__mulsf3>
     570:	97 d1       	rcall	.+814    	; 0x8a0 <__fixunssfsi>
     572:	70 93 89 00 	sts	0x0089, r23
     576:	60 93 88 00 	sts	0x0088, r22
	}
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	bf 90       	pop	r11
     584:	af 90       	pop	r10
     586:	9f 90       	pop	r9
     588:	8f 90       	pop	r8
     58a:	08 95       	ret

0000058c <pwm_init>:
#include "pwm.h"

uint16_t pwm_top = 0;

void pwm_init(){
	DDRB |= (1 << DDB5); //Set direction for PWM pin to output //PB5 = pin 11 on the Arduino shield
     58c:	25 9a       	sbi	0x04, 5	; 4
	TCCR1A |= (1 << WGM11) | (1 << COM2A1); //Sets mode to fast pwm and prescaler clock 8 //Initial values all 0
     58e:	e0 e8       	ldi	r30, 0x80	; 128
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	80 81       	ld	r24, Z
     594:	82 68       	ori	r24, 0x82	; 130
     596:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) |  (1 << CS11);
     598:	e1 e8       	ldi	r30, 0x81	; 129
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	80 81       	ld	r24, Z
     59e:	8a 61       	ori	r24, 0x1A	; 26
     5a0:	80 83       	st	Z, r24
	
	uint16_t f = 50; //Period 20ms --> f = 1/20ms
	uint16_t prescaler = 8;
	pwm_top = ((uint32_t)F_CPU/(uint16_t)(f * prescaler) - 1);
     5a2:	8f e3       	ldi	r24, 0x3F	; 63
     5a4:	9c e9       	ldi	r25, 0x9C	; 156
     5a6:	90 93 3f 02 	sts	0x023F, r25
     5aa:	80 93 3e 02 	sts	0x023E, r24
	ICR1 = pwm_top; //This defines the pwm period length
     5ae:	90 93 87 00 	sts	0x0087, r25
     5b2:	80 93 86 00 	sts	0x0086, r24
	pwm_set_duty_cycle(1.5); //Center the servo
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	80 ec       	ldi	r24, 0xC0	; 192
     5bc:	9f e3       	ldi	r25, 0x3F	; 63
     5be:	aa cf       	rjmp	.-172    	; 0x514 <pwm_set_duty_cycle>
     5c0:	08 95       	ret

000005c2 <spi_master_init>:
     5c2:	84 b1       	in	r24, 0x04	; 4
     5c4:	87 68       	ori	r24, 0x87	; 135
     5c6:	84 b9       	out	0x04, r24	; 4
     5c8:	23 98       	cbi	0x04, 3	; 4
     5ca:	81 e5       	ldi	r24, 0x51	; 81
     5cc:	8c bd       	out	0x2c, r24	; 44
     5ce:	2f 9a       	sbi	0x05, 7	; 5
     5d0:	08 95       	ret

000005d2 <spi_master_transmit>:
     5d2:	8e bd       	out	0x2e, r24	; 46
     5d4:	0d b4       	in	r0, 0x2d	; 45
     5d6:	07 fe       	sbrs	r0, 7
     5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <spi_master_transmit+0x2>
     5da:	8e b5       	in	r24, 0x2e	; 46
     5dc:	08 95       	ret

000005de <TWI_Master_Initialise>:
     5de:	8c e0       	ldi	r24, 0x0C	; 12
     5e0:	80 93 b8 00 	sts	0x00B8, r24
     5e4:	8f ef       	ldi	r24, 0xFF	; 255
     5e6:	80 93 bb 00 	sts	0x00BB, r24
     5ea:	84 e0       	ldi	r24, 0x04	; 4
     5ec:	80 93 bc 00 	sts	0x00BC, r24
     5f0:	08 95       	ret

000005f2 <TWI_Start_Transceiver_With_Data>:
     5f2:	ec eb       	ldi	r30, 0xBC	; 188
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	20 81       	ld	r18, Z
     5f8:	20 fd       	sbrc	r18, 0
     5fa:	fd cf       	rjmp	.-6      	; 0x5f6 <TWI_Start_Transceiver_With_Data+0x4>
     5fc:	60 93 42 02 	sts	0x0242, r22
     600:	fc 01       	movw	r30, r24
     602:	20 81       	ld	r18, Z
     604:	20 93 43 02 	sts	0x0243, r18
     608:	20 fd       	sbrc	r18, 0
     60a:	0c c0       	rjmp	.+24     	; 0x624 <TWI_Start_Transceiver_With_Data+0x32>
     60c:	62 30       	cpi	r22, 0x02	; 2
     60e:	50 f0       	brcs	.+20     	; 0x624 <TWI_Start_Transceiver_With_Data+0x32>
     610:	dc 01       	movw	r26, r24
     612:	11 96       	adiw	r26, 0x01	; 1
     614:	e4 e4       	ldi	r30, 0x44	; 68
     616:	f2 e0       	ldi	r31, 0x02	; 2
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	9d 91       	ld	r25, X+
     61c:	91 93       	st	Z+, r25
     61e:	8f 5f       	subi	r24, 0xFF	; 255
     620:	86 13       	cpse	r24, r22
     622:	fb cf       	rjmp	.-10     	; 0x61a <TWI_Start_Transceiver_With_Data+0x28>
     624:	10 92 41 02 	sts	0x0241, r1
     628:	88 ef       	ldi	r24, 0xF8	; 248
     62a:	80 93 08 02 	sts	0x0208, r24
     62e:	85 ea       	ldi	r24, 0xA5	; 165
     630:	80 93 bc 00 	sts	0x00BC, r24
     634:	08 95       	ret

00000636 <__vector_39>:
     636:	1f 92       	push	r1
     638:	0f 92       	push	r0
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	0f 92       	push	r0
     63e:	11 24       	eor	r1, r1
     640:	0b b6       	in	r0, 0x3b	; 59
     642:	0f 92       	push	r0
     644:	2f 93       	push	r18
     646:	3f 93       	push	r19
     648:	8f 93       	push	r24
     64a:	9f 93       	push	r25
     64c:	af 93       	push	r26
     64e:	bf 93       	push	r27
     650:	ef 93       	push	r30
     652:	ff 93       	push	r31
     654:	80 91 b9 00 	lds	r24, 0x00B9
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	fc 01       	movw	r30, r24
     65c:	38 97       	sbiw	r30, 0x08	; 8
     65e:	e1 35       	cpi	r30, 0x51	; 81
     660:	f1 05       	cpc	r31, r1
     662:	08 f0       	brcs	.+2      	; 0x666 <__vector_39+0x30>
     664:	55 c0       	rjmp	.+170    	; 0x710 <__vector_39+0xda>
     666:	ee 58       	subi	r30, 0x8E	; 142
     668:	ff 4f       	sbci	r31, 0xFF	; 255
     66a:	7b c2       	rjmp	.+1270   	; 0xb62 <__tablejump2__>
     66c:	10 92 40 02 	sts	0x0240, r1
     670:	e0 91 40 02 	lds	r30, 0x0240
     674:	80 91 42 02 	lds	r24, 0x0242
     678:	e8 17       	cp	r30, r24
     67a:	70 f4       	brcc	.+28     	; 0x698 <__vector_39+0x62>
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	8e 0f       	add	r24, r30
     680:	80 93 40 02 	sts	0x0240, r24
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	ed 5b       	subi	r30, 0xBD	; 189
     688:	fd 4f       	sbci	r31, 0xFD	; 253
     68a:	80 81       	ld	r24, Z
     68c:	80 93 bb 00 	sts	0x00BB, r24
     690:	85 e8       	ldi	r24, 0x85	; 133
     692:	80 93 bc 00 	sts	0x00BC, r24
     696:	43 c0       	rjmp	.+134    	; 0x71e <__vector_39+0xe8>
     698:	80 91 41 02 	lds	r24, 0x0241
     69c:	81 60       	ori	r24, 0x01	; 1
     69e:	80 93 41 02 	sts	0x0241, r24
     6a2:	84 e9       	ldi	r24, 0x94	; 148
     6a4:	80 93 bc 00 	sts	0x00BC, r24
     6a8:	3a c0       	rjmp	.+116    	; 0x71e <__vector_39+0xe8>
     6aa:	e0 91 40 02 	lds	r30, 0x0240
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	8e 0f       	add	r24, r30
     6b2:	80 93 40 02 	sts	0x0240, r24
     6b6:	80 91 bb 00 	lds	r24, 0x00BB
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	ed 5b       	subi	r30, 0xBD	; 189
     6be:	fd 4f       	sbci	r31, 0xFD	; 253
     6c0:	80 83       	st	Z, r24
     6c2:	20 91 40 02 	lds	r18, 0x0240
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	80 91 42 02 	lds	r24, 0x0242
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	28 17       	cp	r18, r24
     6d2:	39 07       	cpc	r19, r25
     6d4:	24 f4       	brge	.+8      	; 0x6de <__vector_39+0xa8>
     6d6:	85 ec       	ldi	r24, 0xC5	; 197
     6d8:	80 93 bc 00 	sts	0x00BC, r24
     6dc:	20 c0       	rjmp	.+64     	; 0x71e <__vector_39+0xe8>
     6de:	85 e8       	ldi	r24, 0x85	; 133
     6e0:	80 93 bc 00 	sts	0x00BC, r24
     6e4:	1c c0       	rjmp	.+56     	; 0x71e <__vector_39+0xe8>
     6e6:	80 91 bb 00 	lds	r24, 0x00BB
     6ea:	e0 91 40 02 	lds	r30, 0x0240
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	ed 5b       	subi	r30, 0xBD	; 189
     6f2:	fd 4f       	sbci	r31, 0xFD	; 253
     6f4:	80 83       	st	Z, r24
     6f6:	80 91 41 02 	lds	r24, 0x0241
     6fa:	81 60       	ori	r24, 0x01	; 1
     6fc:	80 93 41 02 	sts	0x0241, r24
     700:	84 e9       	ldi	r24, 0x94	; 148
     702:	80 93 bc 00 	sts	0x00BC, r24
     706:	0b c0       	rjmp	.+22     	; 0x71e <__vector_39+0xe8>
     708:	85 ea       	ldi	r24, 0xA5	; 165
     70a:	80 93 bc 00 	sts	0x00BC, r24
     70e:	07 c0       	rjmp	.+14     	; 0x71e <__vector_39+0xe8>
     710:	80 91 b9 00 	lds	r24, 0x00B9
     714:	80 93 08 02 	sts	0x0208, r24
     718:	84 e0       	ldi	r24, 0x04	; 4
     71a:	80 93 bc 00 	sts	0x00BC, r24
     71e:	ff 91       	pop	r31
     720:	ef 91       	pop	r30
     722:	bf 91       	pop	r27
     724:	af 91       	pop	r26
     726:	9f 91       	pop	r25
     728:	8f 91       	pop	r24
     72a:	3f 91       	pop	r19
     72c:	2f 91       	pop	r18
     72e:	0f 90       	pop	r0
     730:	0b be       	out	0x3b, r0	; 59
     732:	0f 90       	pop	r0
     734:	0f be       	out	0x3f, r0	; 63
     736:	0f 90       	pop	r0
     738:	1f 90       	pop	r1
     73a:	18 95       	reti

0000073c <uart_putchar>:
	UCSR0C = (((node == NODE_1)<<URSEL0)|(1<<USBS0)|(3<<UCSZ00)); //Set frame format: 2 stop bits, 8 data bits //Asynchronous - No parity (?) //URSEL makes sure we won't access UBRRH during operation, but UCSRC. //URSEL should not be set in node 2
	fdevopen(uart_putchar, uart_getchar);
}

void uart_putchar(char c){
	while (!( UCSR0A & (1<<UDRE0))); //Wait for empty transmit buffer
     73c:	e0 ec       	ldi	r30, 0xC0	; 192
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	90 81       	ld	r25, Z
     742:	95 ff       	sbrs	r25, 5
     744:	fd cf       	rjmp	.-6      	; 0x740 <uart_putchar+0x4>
	UDR0 = c; //Put data into buffer, sends the data
     746:	80 93 c6 00 	sts	0x00C6, r24
     74a:	08 95       	ret

0000074c <uart_getchar>:
}

unsigned char uart_getchar(){
	while (!( UCSR0A & (1<<RXC0)));
     74c:	e0 ec       	ldi	r30, 0xC0	; 192
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	80 81       	ld	r24, Z
     752:	88 23       	and	r24, r24
     754:	ec f7       	brge	.-6      	; 0x750 <uart_getchar+0x4>
	return UDR0;
     756:	80 91 c6 00 	lds	r24, 0x00C6
     75a:	08 95       	ret

0000075c <uart_init>:
#include <stdio.h>
#include <avr/io.h>

#include "uart.h"

void uart_init(int baudRate, int node){
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	eb 01       	movw	r28, r22
	int UBRR = ((long)F_CPU/((long)16*baudRate) - 1);
     762:	aa 27       	eor	r26, r26
     764:	97 fd       	sbrc	r25, 7
     766:	a0 95       	com	r26
     768:	ba 2f       	mov	r27, r26
     76a:	88 0f       	add	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	aa 1f       	adc	r26, r26
     770:	bb 1f       	adc	r27, r27
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	aa 1f       	adc	r26, r26
     778:	bb 1f       	adc	r27, r27
     77a:	9c 01       	movw	r18, r24
     77c:	ad 01       	movw	r20, r26
     77e:	22 0f       	add	r18, r18
     780:	33 1f       	adc	r19, r19
     782:	44 1f       	adc	r20, r20
     784:	55 1f       	adc	r21, r21
     786:	22 0f       	add	r18, r18
     788:	33 1f       	adc	r19, r19
     78a:	44 1f       	adc	r20, r20
     78c:	55 1f       	adc	r21, r21
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	74 e2       	ldi	r23, 0x24	; 36
     792:	84 ef       	ldi	r24, 0xF4	; 244
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	c9 d1       	rcall	.+914    	; 0xb2a <__divmodsi4>
     798:	21 50       	subi	r18, 0x01	; 1
     79a:	31 09       	sbc	r19, r1
	UBRR0L = UBRR;
     79c:	20 93 c4 00 	sts	0x00C4, r18
    UBRR0H = (UBRR>>8);
     7a0:	30 93 c5 00 	sts	0x00C5, r19
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); //Enable receiver and transmitter 
     7a4:	88 e1       	ldi	r24, 0x18	; 24
     7a6:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (((node == NODE_1)<<URSEL0)|(1<<USBS0)|(3<<UCSZ00)); //Set frame format: 2 stop bits, 8 data bits //Asynchronous - No parity (?) //URSEL makes sure we won't access UBRRH during operation, but UCSRC. //URSEL should not be set in node 2
     7aa:	21 97       	sbiw	r28, 0x01	; 1
     7ac:	11 f4       	brne	.+4      	; 0x7b2 <uart_init+0x56>
     7ae:	8e e8       	ldi	r24, 0x8E	; 142
     7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <uart_init+0x58>
     7b2:	8e e0       	ldi	r24, 0x0E	; 14
     7b4:	80 93 c2 00 	sts	0x00C2, r24
	fdevopen(uart_putchar, uart_getchar);
     7b8:	66 ea       	ldi	r22, 0xA6	; 166
     7ba:	73 e0       	ldi	r23, 0x03	; 3
     7bc:	8e e9       	ldi	r24, 0x9E	; 158
     7be:	93 e0       	ldi	r25, 0x03	; 3
     7c0:	1f d3       	rcall	.+1598   	; 0xe00 <fdevopen>
}
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <__cmpsf2>:
     7c8:	d4 d0       	rcall	.+424    	; 0x972 <__fp_cmp>
     7ca:	08 f4       	brcc	.+2      	; 0x7ce <__cmpsf2+0x6>
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	08 95       	ret

000007d0 <__divsf3>:
     7d0:	0c d0       	rcall	.+24     	; 0x7ea <__divsf3x>
     7d2:	0a c1       	rjmp	.+532    	; 0x9e8 <__fp_round>
     7d4:	02 d1       	rcall	.+516    	; 0x9da <__fp_pscB>
     7d6:	40 f0       	brcs	.+16     	; 0x7e8 <__divsf3+0x18>
     7d8:	f9 d0       	rcall	.+498    	; 0x9cc <__fp_pscA>
     7da:	30 f0       	brcs	.+12     	; 0x7e8 <__divsf3+0x18>
     7dc:	21 f4       	brne	.+8      	; 0x7e6 <__divsf3+0x16>
     7de:	5f 3f       	cpi	r21, 0xFF	; 255
     7e0:	19 f0       	breq	.+6      	; 0x7e8 <__divsf3+0x18>
     7e2:	eb c0       	rjmp	.+470    	; 0x9ba <__fp_inf>
     7e4:	51 11       	cpse	r21, r1
     7e6:	34 c1       	rjmp	.+616    	; 0xa50 <__fp_szero>
     7e8:	ee c0       	rjmp	.+476    	; 0x9c6 <__fp_nan>

000007ea <__divsf3x>:
     7ea:	0f d1       	rcall	.+542    	; 0xa0a <__fp_split3>
     7ec:	98 f3       	brcs	.-26     	; 0x7d4 <__divsf3+0x4>

000007ee <__divsf3_pse>:
     7ee:	99 23       	and	r25, r25
     7f0:	c9 f3       	breq	.-14     	; 0x7e4 <__divsf3+0x14>
     7f2:	55 23       	and	r21, r21
     7f4:	b1 f3       	breq	.-20     	; 0x7e2 <__divsf3+0x12>
     7f6:	95 1b       	sub	r25, r21
     7f8:	55 0b       	sbc	r21, r21
     7fa:	bb 27       	eor	r27, r27
     7fc:	aa 27       	eor	r26, r26
     7fe:	62 17       	cp	r22, r18
     800:	73 07       	cpc	r23, r19
     802:	84 07       	cpc	r24, r20
     804:	38 f0       	brcs	.+14     	; 0x814 <__divsf3_pse+0x26>
     806:	9f 5f       	subi	r25, 0xFF	; 255
     808:	5f 4f       	sbci	r21, 0xFF	; 255
     80a:	22 0f       	add	r18, r18
     80c:	33 1f       	adc	r19, r19
     80e:	44 1f       	adc	r20, r20
     810:	aa 1f       	adc	r26, r26
     812:	a9 f3       	breq	.-22     	; 0x7fe <__divsf3_pse+0x10>
     814:	33 d0       	rcall	.+102    	; 0x87c <__divsf3_pse+0x8e>
     816:	0e 2e       	mov	r0, r30
     818:	3a f0       	brmi	.+14     	; 0x828 <__divsf3_pse+0x3a>
     81a:	e0 e8       	ldi	r30, 0x80	; 128
     81c:	30 d0       	rcall	.+96     	; 0x87e <__divsf3_pse+0x90>
     81e:	91 50       	subi	r25, 0x01	; 1
     820:	50 40       	sbci	r21, 0x00	; 0
     822:	e6 95       	lsr	r30
     824:	00 1c       	adc	r0, r0
     826:	ca f7       	brpl	.-14     	; 0x81a <__divsf3_pse+0x2c>
     828:	29 d0       	rcall	.+82     	; 0x87c <__divsf3_pse+0x8e>
     82a:	fe 2f       	mov	r31, r30
     82c:	27 d0       	rcall	.+78     	; 0x87c <__divsf3_pse+0x8e>
     82e:	66 0f       	add	r22, r22
     830:	77 1f       	adc	r23, r23
     832:	88 1f       	adc	r24, r24
     834:	bb 1f       	adc	r27, r27
     836:	26 17       	cp	r18, r22
     838:	37 07       	cpc	r19, r23
     83a:	48 07       	cpc	r20, r24
     83c:	ab 07       	cpc	r26, r27
     83e:	b0 e8       	ldi	r27, 0x80	; 128
     840:	09 f0       	breq	.+2      	; 0x844 <__divsf3_pse+0x56>
     842:	bb 0b       	sbc	r27, r27
     844:	80 2d       	mov	r24, r0
     846:	bf 01       	movw	r22, r30
     848:	ff 27       	eor	r31, r31
     84a:	93 58       	subi	r25, 0x83	; 131
     84c:	5f 4f       	sbci	r21, 0xFF	; 255
     84e:	2a f0       	brmi	.+10     	; 0x85a <__divsf3_pse+0x6c>
     850:	9e 3f       	cpi	r25, 0xFE	; 254
     852:	51 05       	cpc	r21, r1
     854:	68 f0       	brcs	.+26     	; 0x870 <__divsf3_pse+0x82>
     856:	b1 c0       	rjmp	.+354    	; 0x9ba <__fp_inf>
     858:	fb c0       	rjmp	.+502    	; 0xa50 <__fp_szero>
     85a:	5f 3f       	cpi	r21, 0xFF	; 255
     85c:	ec f3       	brlt	.-6      	; 0x858 <__divsf3_pse+0x6a>
     85e:	98 3e       	cpi	r25, 0xE8	; 232
     860:	dc f3       	brlt	.-10     	; 0x858 <__divsf3_pse+0x6a>
     862:	86 95       	lsr	r24
     864:	77 95       	ror	r23
     866:	67 95       	ror	r22
     868:	b7 95       	ror	r27
     86a:	f7 95       	ror	r31
     86c:	9f 5f       	subi	r25, 0xFF	; 255
     86e:	c9 f7       	brne	.-14     	; 0x862 <__divsf3_pse+0x74>
     870:	88 0f       	add	r24, r24
     872:	91 1d       	adc	r25, r1
     874:	96 95       	lsr	r25
     876:	87 95       	ror	r24
     878:	97 f9       	bld	r25, 7
     87a:	08 95       	ret
     87c:	e1 e0       	ldi	r30, 0x01	; 1
     87e:	66 0f       	add	r22, r22
     880:	77 1f       	adc	r23, r23
     882:	88 1f       	adc	r24, r24
     884:	bb 1f       	adc	r27, r27
     886:	62 17       	cp	r22, r18
     888:	73 07       	cpc	r23, r19
     88a:	84 07       	cpc	r24, r20
     88c:	ba 07       	cpc	r27, r26
     88e:	20 f0       	brcs	.+8      	; 0x898 <__divsf3_pse+0xaa>
     890:	62 1b       	sub	r22, r18
     892:	73 0b       	sbc	r23, r19
     894:	84 0b       	sbc	r24, r20
     896:	ba 0b       	sbc	r27, r26
     898:	ee 1f       	adc	r30, r30
     89a:	88 f7       	brcc	.-30     	; 0x87e <__divsf3_pse+0x90>
     89c:	e0 95       	com	r30
     89e:	08 95       	ret

000008a0 <__fixunssfsi>:
     8a0:	bc d0       	rcall	.+376    	; 0xa1a <__fp_splitA>
     8a2:	88 f0       	brcs	.+34     	; 0x8c6 <__fixunssfsi+0x26>
     8a4:	9f 57       	subi	r25, 0x7F	; 127
     8a6:	90 f0       	brcs	.+36     	; 0x8cc <__fixunssfsi+0x2c>
     8a8:	b9 2f       	mov	r27, r25
     8aa:	99 27       	eor	r25, r25
     8ac:	b7 51       	subi	r27, 0x17	; 23
     8ae:	a0 f0       	brcs	.+40     	; 0x8d8 <__fixunssfsi+0x38>
     8b0:	d1 f0       	breq	.+52     	; 0x8e6 <__fixunssfsi+0x46>
     8b2:	66 0f       	add	r22, r22
     8b4:	77 1f       	adc	r23, r23
     8b6:	88 1f       	adc	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	1a f0       	brmi	.+6      	; 0x8c2 <__fixunssfsi+0x22>
     8bc:	ba 95       	dec	r27
     8be:	c9 f7       	brne	.-14     	; 0x8b2 <__fixunssfsi+0x12>
     8c0:	12 c0       	rjmp	.+36     	; 0x8e6 <__fixunssfsi+0x46>
     8c2:	b1 30       	cpi	r27, 0x01	; 1
     8c4:	81 f0       	breq	.+32     	; 0x8e6 <__fixunssfsi+0x46>
     8c6:	c3 d0       	rcall	.+390    	; 0xa4e <__fp_zero>
     8c8:	b1 e0       	ldi	r27, 0x01	; 1
     8ca:	08 95       	ret
     8cc:	c0 c0       	rjmp	.+384    	; 0xa4e <__fp_zero>
     8ce:	67 2f       	mov	r22, r23
     8d0:	78 2f       	mov	r23, r24
     8d2:	88 27       	eor	r24, r24
     8d4:	b8 5f       	subi	r27, 0xF8	; 248
     8d6:	39 f0       	breq	.+14     	; 0x8e6 <__fixunssfsi+0x46>
     8d8:	b9 3f       	cpi	r27, 0xF9	; 249
     8da:	cc f3       	brlt	.-14     	; 0x8ce <__fixunssfsi+0x2e>
     8dc:	86 95       	lsr	r24
     8de:	77 95       	ror	r23
     8e0:	67 95       	ror	r22
     8e2:	b3 95       	inc	r27
     8e4:	d9 f7       	brne	.-10     	; 0x8dc <__fixunssfsi+0x3c>
     8e6:	3e f4       	brtc	.+14     	; 0x8f6 <__fixunssfsi+0x56>
     8e8:	90 95       	com	r25
     8ea:	80 95       	com	r24
     8ec:	70 95       	com	r23
     8ee:	61 95       	neg	r22
     8f0:	7f 4f       	sbci	r23, 0xFF	; 255
     8f2:	8f 4f       	sbci	r24, 0xFF	; 255
     8f4:	9f 4f       	sbci	r25, 0xFF	; 255
     8f6:	08 95       	ret

000008f8 <__floatunsisf>:
     8f8:	e8 94       	clt
     8fa:	09 c0       	rjmp	.+18     	; 0x90e <__floatsisf+0x12>

000008fc <__floatsisf>:
     8fc:	97 fb       	bst	r25, 7
     8fe:	3e f4       	brtc	.+14     	; 0x90e <__floatsisf+0x12>
     900:	90 95       	com	r25
     902:	80 95       	com	r24
     904:	70 95       	com	r23
     906:	61 95       	neg	r22
     908:	7f 4f       	sbci	r23, 0xFF	; 255
     90a:	8f 4f       	sbci	r24, 0xFF	; 255
     90c:	9f 4f       	sbci	r25, 0xFF	; 255
     90e:	99 23       	and	r25, r25
     910:	a9 f0       	breq	.+42     	; 0x93c <__floatsisf+0x40>
     912:	f9 2f       	mov	r31, r25
     914:	96 e9       	ldi	r25, 0x96	; 150
     916:	bb 27       	eor	r27, r27
     918:	93 95       	inc	r25
     91a:	f6 95       	lsr	r31
     91c:	87 95       	ror	r24
     91e:	77 95       	ror	r23
     920:	67 95       	ror	r22
     922:	b7 95       	ror	r27
     924:	f1 11       	cpse	r31, r1
     926:	f8 cf       	rjmp	.-16     	; 0x918 <__floatsisf+0x1c>
     928:	fa f4       	brpl	.+62     	; 0x968 <__floatsisf+0x6c>
     92a:	bb 0f       	add	r27, r27
     92c:	11 f4       	brne	.+4      	; 0x932 <__floatsisf+0x36>
     92e:	60 ff       	sbrs	r22, 0
     930:	1b c0       	rjmp	.+54     	; 0x968 <__floatsisf+0x6c>
     932:	6f 5f       	subi	r22, 0xFF	; 255
     934:	7f 4f       	sbci	r23, 0xFF	; 255
     936:	8f 4f       	sbci	r24, 0xFF	; 255
     938:	9f 4f       	sbci	r25, 0xFF	; 255
     93a:	16 c0       	rjmp	.+44     	; 0x968 <__floatsisf+0x6c>
     93c:	88 23       	and	r24, r24
     93e:	11 f0       	breq	.+4      	; 0x944 <__floatsisf+0x48>
     940:	96 e9       	ldi	r25, 0x96	; 150
     942:	11 c0       	rjmp	.+34     	; 0x966 <__floatsisf+0x6a>
     944:	77 23       	and	r23, r23
     946:	21 f0       	breq	.+8      	; 0x950 <__floatsisf+0x54>
     948:	9e e8       	ldi	r25, 0x8E	; 142
     94a:	87 2f       	mov	r24, r23
     94c:	76 2f       	mov	r23, r22
     94e:	05 c0       	rjmp	.+10     	; 0x95a <__floatsisf+0x5e>
     950:	66 23       	and	r22, r22
     952:	71 f0       	breq	.+28     	; 0x970 <__floatsisf+0x74>
     954:	96 e8       	ldi	r25, 0x86	; 134
     956:	86 2f       	mov	r24, r22
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	2a f0       	brmi	.+10     	; 0x968 <__floatsisf+0x6c>
     95e:	9a 95       	dec	r25
     960:	66 0f       	add	r22, r22
     962:	77 1f       	adc	r23, r23
     964:	88 1f       	adc	r24, r24
     966:	da f7       	brpl	.-10     	; 0x95e <__floatsisf+0x62>
     968:	88 0f       	add	r24, r24
     96a:	96 95       	lsr	r25
     96c:	87 95       	ror	r24
     96e:	97 f9       	bld	r25, 7
     970:	08 95       	ret

00000972 <__fp_cmp>:
     972:	99 0f       	add	r25, r25
     974:	00 08       	sbc	r0, r0
     976:	55 0f       	add	r21, r21
     978:	aa 0b       	sbc	r26, r26
     97a:	e0 e8       	ldi	r30, 0x80	; 128
     97c:	fe ef       	ldi	r31, 0xFE	; 254
     97e:	16 16       	cp	r1, r22
     980:	17 06       	cpc	r1, r23
     982:	e8 07       	cpc	r30, r24
     984:	f9 07       	cpc	r31, r25
     986:	c0 f0       	brcs	.+48     	; 0x9b8 <__fp_cmp+0x46>
     988:	12 16       	cp	r1, r18
     98a:	13 06       	cpc	r1, r19
     98c:	e4 07       	cpc	r30, r20
     98e:	f5 07       	cpc	r31, r21
     990:	98 f0       	brcs	.+38     	; 0x9b8 <__fp_cmp+0x46>
     992:	62 1b       	sub	r22, r18
     994:	73 0b       	sbc	r23, r19
     996:	84 0b       	sbc	r24, r20
     998:	95 0b       	sbc	r25, r21
     99a:	39 f4       	brne	.+14     	; 0x9aa <__fp_cmp+0x38>
     99c:	0a 26       	eor	r0, r26
     99e:	61 f0       	breq	.+24     	; 0x9b8 <__fp_cmp+0x46>
     9a0:	23 2b       	or	r18, r19
     9a2:	24 2b       	or	r18, r20
     9a4:	25 2b       	or	r18, r21
     9a6:	21 f4       	brne	.+8      	; 0x9b0 <__fp_cmp+0x3e>
     9a8:	08 95       	ret
     9aa:	0a 26       	eor	r0, r26
     9ac:	09 f4       	brne	.+2      	; 0x9b0 <__fp_cmp+0x3e>
     9ae:	a1 40       	sbci	r26, 0x01	; 1
     9b0:	a6 95       	lsr	r26
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
     9b4:	81 1d       	adc	r24, r1
     9b6:	81 1d       	adc	r24, r1
     9b8:	08 95       	ret

000009ba <__fp_inf>:
     9ba:	97 f9       	bld	r25, 7
     9bc:	9f 67       	ori	r25, 0x7F	; 127
     9be:	80 e8       	ldi	r24, 0x80	; 128
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	08 95       	ret

000009c6 <__fp_nan>:
     9c6:	9f ef       	ldi	r25, 0xFF	; 255
     9c8:	80 ec       	ldi	r24, 0xC0	; 192
     9ca:	08 95       	ret

000009cc <__fp_pscA>:
     9cc:	00 24       	eor	r0, r0
     9ce:	0a 94       	dec	r0
     9d0:	16 16       	cp	r1, r22
     9d2:	17 06       	cpc	r1, r23
     9d4:	18 06       	cpc	r1, r24
     9d6:	09 06       	cpc	r0, r25
     9d8:	08 95       	ret

000009da <__fp_pscB>:
     9da:	00 24       	eor	r0, r0
     9dc:	0a 94       	dec	r0
     9de:	12 16       	cp	r1, r18
     9e0:	13 06       	cpc	r1, r19
     9e2:	14 06       	cpc	r1, r20
     9e4:	05 06       	cpc	r0, r21
     9e6:	08 95       	ret

000009e8 <__fp_round>:
     9e8:	09 2e       	mov	r0, r25
     9ea:	03 94       	inc	r0
     9ec:	00 0c       	add	r0, r0
     9ee:	11 f4       	brne	.+4      	; 0x9f4 <__fp_round+0xc>
     9f0:	88 23       	and	r24, r24
     9f2:	52 f0       	brmi	.+20     	; 0xa08 <__fp_round+0x20>
     9f4:	bb 0f       	add	r27, r27
     9f6:	40 f4       	brcc	.+16     	; 0xa08 <__fp_round+0x20>
     9f8:	bf 2b       	or	r27, r31
     9fa:	11 f4       	brne	.+4      	; 0xa00 <__fp_round+0x18>
     9fc:	60 ff       	sbrs	r22, 0
     9fe:	04 c0       	rjmp	.+8      	; 0xa08 <__fp_round+0x20>
     a00:	6f 5f       	subi	r22, 0xFF	; 255
     a02:	7f 4f       	sbci	r23, 0xFF	; 255
     a04:	8f 4f       	sbci	r24, 0xFF	; 255
     a06:	9f 4f       	sbci	r25, 0xFF	; 255
     a08:	08 95       	ret

00000a0a <__fp_split3>:
     a0a:	57 fd       	sbrc	r21, 7
     a0c:	90 58       	subi	r25, 0x80	; 128
     a0e:	44 0f       	add	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	59 f0       	breq	.+22     	; 0xa2a <__fp_splitA+0x10>
     a14:	5f 3f       	cpi	r21, 0xFF	; 255
     a16:	71 f0       	breq	.+28     	; 0xa34 <__fp_splitA+0x1a>
     a18:	47 95       	ror	r20

00000a1a <__fp_splitA>:
     a1a:	88 0f       	add	r24, r24
     a1c:	97 fb       	bst	r25, 7
     a1e:	99 1f       	adc	r25, r25
     a20:	61 f0       	breq	.+24     	; 0xa3a <__fp_splitA+0x20>
     a22:	9f 3f       	cpi	r25, 0xFF	; 255
     a24:	79 f0       	breq	.+30     	; 0xa44 <__fp_splitA+0x2a>
     a26:	87 95       	ror	r24
     a28:	08 95       	ret
     a2a:	12 16       	cp	r1, r18
     a2c:	13 06       	cpc	r1, r19
     a2e:	14 06       	cpc	r1, r20
     a30:	55 1f       	adc	r21, r21
     a32:	f2 cf       	rjmp	.-28     	; 0xa18 <__fp_split3+0xe>
     a34:	46 95       	lsr	r20
     a36:	f1 df       	rcall	.-30     	; 0xa1a <__fp_splitA>
     a38:	08 c0       	rjmp	.+16     	; 0xa4a <__fp_splitA+0x30>
     a3a:	16 16       	cp	r1, r22
     a3c:	17 06       	cpc	r1, r23
     a3e:	18 06       	cpc	r1, r24
     a40:	99 1f       	adc	r25, r25
     a42:	f1 cf       	rjmp	.-30     	; 0xa26 <__fp_splitA+0xc>
     a44:	86 95       	lsr	r24
     a46:	71 05       	cpc	r23, r1
     a48:	61 05       	cpc	r22, r1
     a4a:	08 94       	sec
     a4c:	08 95       	ret

00000a4e <__fp_zero>:
     a4e:	e8 94       	clt

00000a50 <__fp_szero>:
     a50:	bb 27       	eor	r27, r27
     a52:	66 27       	eor	r22, r22
     a54:	77 27       	eor	r23, r23
     a56:	cb 01       	movw	r24, r22
     a58:	97 f9       	bld	r25, 7
     a5a:	08 95       	ret

00000a5c <__gesf2>:
     a5c:	8a df       	rcall	.-236    	; 0x972 <__fp_cmp>
     a5e:	08 f4       	brcc	.+2      	; 0xa62 <__gesf2+0x6>
     a60:	8f ef       	ldi	r24, 0xFF	; 255
     a62:	08 95       	ret

00000a64 <__mulsf3>:
     a64:	0b d0       	rcall	.+22     	; 0xa7c <__mulsf3x>
     a66:	c0 cf       	rjmp	.-128    	; 0x9e8 <__fp_round>
     a68:	b1 df       	rcall	.-158    	; 0x9cc <__fp_pscA>
     a6a:	28 f0       	brcs	.+10     	; 0xa76 <__mulsf3+0x12>
     a6c:	b6 df       	rcall	.-148    	; 0x9da <__fp_pscB>
     a6e:	18 f0       	brcs	.+6      	; 0xa76 <__mulsf3+0x12>
     a70:	95 23       	and	r25, r21
     a72:	09 f0       	breq	.+2      	; 0xa76 <__mulsf3+0x12>
     a74:	a2 cf       	rjmp	.-188    	; 0x9ba <__fp_inf>
     a76:	a7 cf       	rjmp	.-178    	; 0x9c6 <__fp_nan>
     a78:	11 24       	eor	r1, r1
     a7a:	ea cf       	rjmp	.-44     	; 0xa50 <__fp_szero>

00000a7c <__mulsf3x>:
     a7c:	c6 df       	rcall	.-116    	; 0xa0a <__fp_split3>
     a7e:	a0 f3       	brcs	.-24     	; 0xa68 <__mulsf3+0x4>

00000a80 <__mulsf3_pse>:
     a80:	95 9f       	mul	r25, r21
     a82:	d1 f3       	breq	.-12     	; 0xa78 <__mulsf3+0x14>
     a84:	95 0f       	add	r25, r21
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	55 1f       	adc	r21, r21
     a8a:	62 9f       	mul	r22, r18
     a8c:	f0 01       	movw	r30, r0
     a8e:	72 9f       	mul	r23, r18
     a90:	bb 27       	eor	r27, r27
     a92:	f0 0d       	add	r31, r0
     a94:	b1 1d       	adc	r27, r1
     a96:	63 9f       	mul	r22, r19
     a98:	aa 27       	eor	r26, r26
     a9a:	f0 0d       	add	r31, r0
     a9c:	b1 1d       	adc	r27, r1
     a9e:	aa 1f       	adc	r26, r26
     aa0:	64 9f       	mul	r22, r20
     aa2:	66 27       	eor	r22, r22
     aa4:	b0 0d       	add	r27, r0
     aa6:	a1 1d       	adc	r26, r1
     aa8:	66 1f       	adc	r22, r22
     aaa:	82 9f       	mul	r24, r18
     aac:	22 27       	eor	r18, r18
     aae:	b0 0d       	add	r27, r0
     ab0:	a1 1d       	adc	r26, r1
     ab2:	62 1f       	adc	r22, r18
     ab4:	73 9f       	mul	r23, r19
     ab6:	b0 0d       	add	r27, r0
     ab8:	a1 1d       	adc	r26, r1
     aba:	62 1f       	adc	r22, r18
     abc:	83 9f       	mul	r24, r19
     abe:	a0 0d       	add	r26, r0
     ac0:	61 1d       	adc	r22, r1
     ac2:	22 1f       	adc	r18, r18
     ac4:	74 9f       	mul	r23, r20
     ac6:	33 27       	eor	r19, r19
     ac8:	a0 0d       	add	r26, r0
     aca:	61 1d       	adc	r22, r1
     acc:	23 1f       	adc	r18, r19
     ace:	84 9f       	mul	r24, r20
     ad0:	60 0d       	add	r22, r0
     ad2:	21 1d       	adc	r18, r1
     ad4:	82 2f       	mov	r24, r18
     ad6:	76 2f       	mov	r23, r22
     ad8:	6a 2f       	mov	r22, r26
     ada:	11 24       	eor	r1, r1
     adc:	9f 57       	subi	r25, 0x7F	; 127
     ade:	50 40       	sbci	r21, 0x00	; 0
     ae0:	8a f0       	brmi	.+34     	; 0xb04 <__mulsf3_pse+0x84>
     ae2:	e1 f0       	breq	.+56     	; 0xb1c <__mulsf3_pse+0x9c>
     ae4:	88 23       	and	r24, r24
     ae6:	4a f0       	brmi	.+18     	; 0xafa <__mulsf3_pse+0x7a>
     ae8:	ee 0f       	add	r30, r30
     aea:	ff 1f       	adc	r31, r31
     aec:	bb 1f       	adc	r27, r27
     aee:	66 1f       	adc	r22, r22
     af0:	77 1f       	adc	r23, r23
     af2:	88 1f       	adc	r24, r24
     af4:	91 50       	subi	r25, 0x01	; 1
     af6:	50 40       	sbci	r21, 0x00	; 0
     af8:	a9 f7       	brne	.-22     	; 0xae4 <__mulsf3_pse+0x64>
     afa:	9e 3f       	cpi	r25, 0xFE	; 254
     afc:	51 05       	cpc	r21, r1
     afe:	70 f0       	brcs	.+28     	; 0xb1c <__mulsf3_pse+0x9c>
     b00:	5c cf       	rjmp	.-328    	; 0x9ba <__fp_inf>
     b02:	a6 cf       	rjmp	.-180    	; 0xa50 <__fp_szero>
     b04:	5f 3f       	cpi	r21, 0xFF	; 255
     b06:	ec f3       	brlt	.-6      	; 0xb02 <__mulsf3_pse+0x82>
     b08:	98 3e       	cpi	r25, 0xE8	; 232
     b0a:	dc f3       	brlt	.-10     	; 0xb02 <__mulsf3_pse+0x82>
     b0c:	86 95       	lsr	r24
     b0e:	77 95       	ror	r23
     b10:	67 95       	ror	r22
     b12:	b7 95       	ror	r27
     b14:	f7 95       	ror	r31
     b16:	e7 95       	ror	r30
     b18:	9f 5f       	subi	r25, 0xFF	; 255
     b1a:	c1 f7       	brne	.-16     	; 0xb0c <__mulsf3_pse+0x8c>
     b1c:	fe 2b       	or	r31, r30
     b1e:	88 0f       	add	r24, r24
     b20:	91 1d       	adc	r25, r1
     b22:	96 95       	lsr	r25
     b24:	87 95       	ror	r24
     b26:	97 f9       	bld	r25, 7
     b28:	08 95       	ret

00000b2a <__divmodsi4>:
     b2a:	05 2e       	mov	r0, r21
     b2c:	97 fb       	bst	r25, 7
     b2e:	16 f4       	brtc	.+4      	; 0xb34 <__divmodsi4+0xa>
     b30:	00 94       	com	r0
     b32:	0f d0       	rcall	.+30     	; 0xb52 <__negsi2>
     b34:	57 fd       	sbrc	r21, 7
     b36:	05 d0       	rcall	.+10     	; 0xb42 <__divmodsi4_neg2>
     b38:	1a d0       	rcall	.+52     	; 0xb6e <__udivmodsi4>
     b3a:	07 fc       	sbrc	r0, 7
     b3c:	02 d0       	rcall	.+4      	; 0xb42 <__divmodsi4_neg2>
     b3e:	46 f4       	brtc	.+16     	; 0xb50 <__divmodsi4_exit>
     b40:	08 c0       	rjmp	.+16     	; 0xb52 <__negsi2>

00000b42 <__divmodsi4_neg2>:
     b42:	50 95       	com	r21
     b44:	40 95       	com	r20
     b46:	30 95       	com	r19
     b48:	21 95       	neg	r18
     b4a:	3f 4f       	sbci	r19, 0xFF	; 255
     b4c:	4f 4f       	sbci	r20, 0xFF	; 255
     b4e:	5f 4f       	sbci	r21, 0xFF	; 255

00000b50 <__divmodsi4_exit>:
     b50:	08 95       	ret

00000b52 <__negsi2>:
     b52:	90 95       	com	r25
     b54:	80 95       	com	r24
     b56:	70 95       	com	r23
     b58:	61 95       	neg	r22
     b5a:	7f 4f       	sbci	r23, 0xFF	; 255
     b5c:	8f 4f       	sbci	r24, 0xFF	; 255
     b5e:	9f 4f       	sbci	r25, 0xFF	; 255
     b60:	08 95       	ret

00000b62 <__tablejump2__>:
     b62:	ee 0f       	add	r30, r30
     b64:	ff 1f       	adc	r31, r31

00000b66 <__tablejump__>:
     b66:	05 90       	lpm	r0, Z+
     b68:	f4 91       	lpm	r31, Z
     b6a:	e0 2d       	mov	r30, r0
     b6c:	19 94       	eijmp

00000b6e <__udivmodsi4>:
     b6e:	a1 e2       	ldi	r26, 0x21	; 33
     b70:	1a 2e       	mov	r1, r26
     b72:	aa 1b       	sub	r26, r26
     b74:	bb 1b       	sub	r27, r27
     b76:	fd 01       	movw	r30, r26
     b78:	0d c0       	rjmp	.+26     	; 0xb94 <__udivmodsi4_ep>

00000b7a <__udivmodsi4_loop>:
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	ee 1f       	adc	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	a2 17       	cp	r26, r18
     b84:	b3 07       	cpc	r27, r19
     b86:	e4 07       	cpc	r30, r20
     b88:	f5 07       	cpc	r31, r21
     b8a:	20 f0       	brcs	.+8      	; 0xb94 <__udivmodsi4_ep>
     b8c:	a2 1b       	sub	r26, r18
     b8e:	b3 0b       	sbc	r27, r19
     b90:	e4 0b       	sbc	r30, r20
     b92:	f5 0b       	sbc	r31, r21

00000b94 <__udivmodsi4_ep>:
     b94:	66 1f       	adc	r22, r22
     b96:	77 1f       	adc	r23, r23
     b98:	88 1f       	adc	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	1a 94       	dec	r1
     b9e:	69 f7       	brne	.-38     	; 0xb7a <__udivmodsi4_loop>
     ba0:	60 95       	com	r22
     ba2:	70 95       	com	r23
     ba4:	80 95       	com	r24
     ba6:	90 95       	com	r25
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	bd 01       	movw	r22, r26
     bae:	cf 01       	movw	r24, r30
     bb0:	08 95       	ret

00000bb2 <malloc>:
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	91 05       	cpc	r25, r1
     bba:	10 f4       	brcc	.+4      	; 0xbc0 <malloc+0xe>
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	e0 91 49 02 	lds	r30, 0x0249
     bc4:	f0 91 4a 02 	lds	r31, 0x024A
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	a0 e0       	ldi	r26, 0x00	; 0
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	30 97       	sbiw	r30, 0x00	; 0
     bd2:	39 f1       	breq	.+78     	; 0xc22 <malloc+0x70>
     bd4:	40 81       	ld	r20, Z
     bd6:	51 81       	ldd	r21, Z+1	; 0x01
     bd8:	48 17       	cp	r20, r24
     bda:	59 07       	cpc	r21, r25
     bdc:	b8 f0       	brcs	.+46     	; 0xc0c <malloc+0x5a>
     bde:	48 17       	cp	r20, r24
     be0:	59 07       	cpc	r21, r25
     be2:	71 f4       	brne	.+28     	; 0xc00 <malloc+0x4e>
     be4:	82 81       	ldd	r24, Z+2	; 0x02
     be6:	93 81       	ldd	r25, Z+3	; 0x03
     be8:	10 97       	sbiw	r26, 0x00	; 0
     bea:	29 f0       	breq	.+10     	; 0xbf6 <malloc+0x44>
     bec:	13 96       	adiw	r26, 0x03	; 3
     bee:	9c 93       	st	X, r25
     bf0:	8e 93       	st	-X, r24
     bf2:	12 97       	sbiw	r26, 0x02	; 2
     bf4:	2c c0       	rjmp	.+88     	; 0xc4e <malloc+0x9c>
     bf6:	90 93 4a 02 	sts	0x024A, r25
     bfa:	80 93 49 02 	sts	0x0249, r24
     bfe:	27 c0       	rjmp	.+78     	; 0xc4e <malloc+0x9c>
     c00:	21 15       	cp	r18, r1
     c02:	31 05       	cpc	r19, r1
     c04:	31 f0       	breq	.+12     	; 0xc12 <malloc+0x60>
     c06:	42 17       	cp	r20, r18
     c08:	53 07       	cpc	r21, r19
     c0a:	18 f0       	brcs	.+6      	; 0xc12 <malloc+0x60>
     c0c:	a9 01       	movw	r20, r18
     c0e:	db 01       	movw	r26, r22
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <malloc+0x62>
     c12:	ef 01       	movw	r28, r30
     c14:	9a 01       	movw	r18, r20
     c16:	bd 01       	movw	r22, r26
     c18:	df 01       	movw	r26, r30
     c1a:	02 80       	ldd	r0, Z+2	; 0x02
     c1c:	f3 81       	ldd	r31, Z+3	; 0x03
     c1e:	e0 2d       	mov	r30, r0
     c20:	d7 cf       	rjmp	.-82     	; 0xbd0 <malloc+0x1e>
     c22:	21 15       	cp	r18, r1
     c24:	31 05       	cpc	r19, r1
     c26:	f9 f0       	breq	.+62     	; 0xc66 <malloc+0xb4>
     c28:	28 1b       	sub	r18, r24
     c2a:	39 0b       	sbc	r19, r25
     c2c:	24 30       	cpi	r18, 0x04	; 4
     c2e:	31 05       	cpc	r19, r1
     c30:	80 f4       	brcc	.+32     	; 0xc52 <malloc+0xa0>
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
     c34:	9b 81       	ldd	r25, Y+3	; 0x03
     c36:	61 15       	cp	r22, r1
     c38:	71 05       	cpc	r23, r1
     c3a:	21 f0       	breq	.+8      	; 0xc44 <malloc+0x92>
     c3c:	fb 01       	movw	r30, r22
     c3e:	93 83       	std	Z+3, r25	; 0x03
     c40:	82 83       	std	Z+2, r24	; 0x02
     c42:	04 c0       	rjmp	.+8      	; 0xc4c <malloc+0x9a>
     c44:	90 93 4a 02 	sts	0x024A, r25
     c48:	80 93 49 02 	sts	0x0249, r24
     c4c:	fe 01       	movw	r30, r28
     c4e:	32 96       	adiw	r30, 0x02	; 2
     c50:	44 c0       	rjmp	.+136    	; 0xcda <malloc+0x128>
     c52:	fe 01       	movw	r30, r28
     c54:	e2 0f       	add	r30, r18
     c56:	f3 1f       	adc	r31, r19
     c58:	81 93       	st	Z+, r24
     c5a:	91 93       	st	Z+, r25
     c5c:	22 50       	subi	r18, 0x02	; 2
     c5e:	31 09       	sbc	r19, r1
     c60:	39 83       	std	Y+1, r19	; 0x01
     c62:	28 83       	st	Y, r18
     c64:	3a c0       	rjmp	.+116    	; 0xcda <malloc+0x128>
     c66:	20 91 47 02 	lds	r18, 0x0247
     c6a:	30 91 48 02 	lds	r19, 0x0248
     c6e:	23 2b       	or	r18, r19
     c70:	41 f4       	brne	.+16     	; 0xc82 <malloc+0xd0>
     c72:	20 91 02 02 	lds	r18, 0x0202
     c76:	30 91 03 02 	lds	r19, 0x0203
     c7a:	30 93 48 02 	sts	0x0248, r19
     c7e:	20 93 47 02 	sts	0x0247, r18
     c82:	20 91 00 02 	lds	r18, 0x0200
     c86:	30 91 01 02 	lds	r19, 0x0201
     c8a:	21 15       	cp	r18, r1
     c8c:	31 05       	cpc	r19, r1
     c8e:	41 f4       	brne	.+16     	; 0xca0 <malloc+0xee>
     c90:	2d b7       	in	r18, 0x3d	; 61
     c92:	3e b7       	in	r19, 0x3e	; 62
     c94:	40 91 04 02 	lds	r20, 0x0204
     c98:	50 91 05 02 	lds	r21, 0x0205
     c9c:	24 1b       	sub	r18, r20
     c9e:	35 0b       	sbc	r19, r21
     ca0:	e0 91 47 02 	lds	r30, 0x0247
     ca4:	f0 91 48 02 	lds	r31, 0x0248
     ca8:	e2 17       	cp	r30, r18
     caa:	f3 07       	cpc	r31, r19
     cac:	a0 f4       	brcc	.+40     	; 0xcd6 <malloc+0x124>
     cae:	2e 1b       	sub	r18, r30
     cb0:	3f 0b       	sbc	r19, r31
     cb2:	28 17       	cp	r18, r24
     cb4:	39 07       	cpc	r19, r25
     cb6:	78 f0       	brcs	.+30     	; 0xcd6 <malloc+0x124>
     cb8:	ac 01       	movw	r20, r24
     cba:	4e 5f       	subi	r20, 0xFE	; 254
     cbc:	5f 4f       	sbci	r21, 0xFF	; 255
     cbe:	24 17       	cp	r18, r20
     cc0:	35 07       	cpc	r19, r21
     cc2:	48 f0       	brcs	.+18     	; 0xcd6 <malloc+0x124>
     cc4:	4e 0f       	add	r20, r30
     cc6:	5f 1f       	adc	r21, r31
     cc8:	50 93 48 02 	sts	0x0248, r21
     ccc:	40 93 47 02 	sts	0x0247, r20
     cd0:	81 93       	st	Z+, r24
     cd2:	91 93       	st	Z+, r25
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <malloc+0x128>
     cd6:	e0 e0       	ldi	r30, 0x00	; 0
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	cf 01       	movw	r24, r30
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <free>:
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	09 f4       	brne	.+2      	; 0xcec <free+0xa>
     cea:	87 c0       	rjmp	.+270    	; 0xdfa <free+0x118>
     cec:	fc 01       	movw	r30, r24
     cee:	32 97       	sbiw	r30, 0x02	; 2
     cf0:	13 82       	std	Z+3, r1	; 0x03
     cf2:	12 82       	std	Z+2, r1	; 0x02
     cf4:	c0 91 49 02 	lds	r28, 0x0249
     cf8:	d0 91 4a 02 	lds	r29, 0x024A
     cfc:	20 97       	sbiw	r28, 0x00	; 0
     cfe:	81 f4       	brne	.+32     	; 0xd20 <free+0x3e>
     d00:	20 81       	ld	r18, Z
     d02:	31 81       	ldd	r19, Z+1	; 0x01
     d04:	28 0f       	add	r18, r24
     d06:	39 1f       	adc	r19, r25
     d08:	80 91 47 02 	lds	r24, 0x0247
     d0c:	90 91 48 02 	lds	r25, 0x0248
     d10:	82 17       	cp	r24, r18
     d12:	93 07       	cpc	r25, r19
     d14:	79 f5       	brne	.+94     	; 0xd74 <free+0x92>
     d16:	f0 93 48 02 	sts	0x0248, r31
     d1a:	e0 93 47 02 	sts	0x0247, r30
     d1e:	6d c0       	rjmp	.+218    	; 0xdfa <free+0x118>
     d20:	de 01       	movw	r26, r28
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	ae 17       	cp	r26, r30
     d28:	bf 07       	cpc	r27, r31
     d2a:	50 f4       	brcc	.+20     	; 0xd40 <free+0x5e>
     d2c:	12 96       	adiw	r26, 0x02	; 2
     d2e:	4d 91       	ld	r20, X+
     d30:	5c 91       	ld	r21, X
     d32:	13 97       	sbiw	r26, 0x03	; 3
     d34:	9d 01       	movw	r18, r26
     d36:	41 15       	cp	r20, r1
     d38:	51 05       	cpc	r21, r1
     d3a:	09 f1       	breq	.+66     	; 0xd7e <free+0x9c>
     d3c:	da 01       	movw	r26, r20
     d3e:	f3 cf       	rjmp	.-26     	; 0xd26 <free+0x44>
     d40:	b3 83       	std	Z+3, r27	; 0x03
     d42:	a2 83       	std	Z+2, r26	; 0x02
     d44:	40 81       	ld	r20, Z
     d46:	51 81       	ldd	r21, Z+1	; 0x01
     d48:	84 0f       	add	r24, r20
     d4a:	95 1f       	adc	r25, r21
     d4c:	8a 17       	cp	r24, r26
     d4e:	9b 07       	cpc	r25, r27
     d50:	71 f4       	brne	.+28     	; 0xd6e <free+0x8c>
     d52:	8d 91       	ld	r24, X+
     d54:	9c 91       	ld	r25, X
     d56:	11 97       	sbiw	r26, 0x01	; 1
     d58:	84 0f       	add	r24, r20
     d5a:	95 1f       	adc	r25, r21
     d5c:	02 96       	adiw	r24, 0x02	; 2
     d5e:	91 83       	std	Z+1, r25	; 0x01
     d60:	80 83       	st	Z, r24
     d62:	12 96       	adiw	r26, 0x02	; 2
     d64:	8d 91       	ld	r24, X+
     d66:	9c 91       	ld	r25, X
     d68:	13 97       	sbiw	r26, 0x03	; 3
     d6a:	93 83       	std	Z+3, r25	; 0x03
     d6c:	82 83       	std	Z+2, r24	; 0x02
     d6e:	21 15       	cp	r18, r1
     d70:	31 05       	cpc	r19, r1
     d72:	29 f4       	brne	.+10     	; 0xd7e <free+0x9c>
     d74:	f0 93 4a 02 	sts	0x024A, r31
     d78:	e0 93 49 02 	sts	0x0249, r30
     d7c:	3e c0       	rjmp	.+124    	; 0xdfa <free+0x118>
     d7e:	d9 01       	movw	r26, r18
     d80:	13 96       	adiw	r26, 0x03	; 3
     d82:	fc 93       	st	X, r31
     d84:	ee 93       	st	-X, r30
     d86:	12 97       	sbiw	r26, 0x02	; 2
     d88:	4d 91       	ld	r20, X+
     d8a:	5d 91       	ld	r21, X+
     d8c:	a4 0f       	add	r26, r20
     d8e:	b5 1f       	adc	r27, r21
     d90:	ea 17       	cp	r30, r26
     d92:	fb 07       	cpc	r31, r27
     d94:	79 f4       	brne	.+30     	; 0xdb4 <free+0xd2>
     d96:	80 81       	ld	r24, Z
     d98:	91 81       	ldd	r25, Z+1	; 0x01
     d9a:	84 0f       	add	r24, r20
     d9c:	95 1f       	adc	r25, r21
     d9e:	02 96       	adiw	r24, 0x02	; 2
     da0:	d9 01       	movw	r26, r18
     da2:	11 96       	adiw	r26, 0x01	; 1
     da4:	9c 93       	st	X, r25
     da6:	8e 93       	st	-X, r24
     da8:	82 81       	ldd	r24, Z+2	; 0x02
     daa:	93 81       	ldd	r25, Z+3	; 0x03
     dac:	13 96       	adiw	r26, 0x03	; 3
     dae:	9c 93       	st	X, r25
     db0:	8e 93       	st	-X, r24
     db2:	12 97       	sbiw	r26, 0x02	; 2
     db4:	e0 e0       	ldi	r30, 0x00	; 0
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	9b 81       	ldd	r25, Y+3	; 0x03
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	19 f0       	breq	.+6      	; 0xdc6 <free+0xe4>
     dc0:	fe 01       	movw	r30, r28
     dc2:	ec 01       	movw	r28, r24
     dc4:	f9 cf       	rjmp	.-14     	; 0xdb8 <free+0xd6>
     dc6:	ce 01       	movw	r24, r28
     dc8:	02 96       	adiw	r24, 0x02	; 2
     dca:	28 81       	ld	r18, Y
     dcc:	39 81       	ldd	r19, Y+1	; 0x01
     dce:	82 0f       	add	r24, r18
     dd0:	93 1f       	adc	r25, r19
     dd2:	20 91 47 02 	lds	r18, 0x0247
     dd6:	30 91 48 02 	lds	r19, 0x0248
     dda:	28 17       	cp	r18, r24
     ddc:	39 07       	cpc	r19, r25
     dde:	69 f4       	brne	.+26     	; 0xdfa <free+0x118>
     de0:	30 97       	sbiw	r30, 0x00	; 0
     de2:	29 f4       	brne	.+10     	; 0xdee <free+0x10c>
     de4:	10 92 4a 02 	sts	0x024A, r1
     de8:	10 92 49 02 	sts	0x0249, r1
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <free+0x110>
     dee:	13 82       	std	Z+3, r1	; 0x03
     df0:	12 82       	std	Z+2, r1	; 0x02
     df2:	d0 93 48 02 	sts	0x0248, r29
     df6:	c0 93 47 02 	sts	0x0247, r28
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <fdevopen>:
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	ec 01       	movw	r28, r24
     e0a:	8b 01       	movw	r16, r22
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	31 f4       	brne	.+12     	; 0xe1c <fdevopen+0x1c>
     e10:	61 15       	cp	r22, r1
     e12:	71 05       	cpc	r23, r1
     e14:	19 f4       	brne	.+6      	; 0xe1c <fdevopen+0x1c>
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	37 c0       	rjmp	.+110    	; 0xe8a <fdevopen+0x8a>
     e1c:	6e e0       	ldi	r22, 0x0E	; 14
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	63 d2       	rcall	.+1222   	; 0x12ec <calloc>
     e26:	fc 01       	movw	r30, r24
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	a9 f3       	breq	.-22     	; 0xe16 <fdevopen+0x16>
     e2c:	80 e8       	ldi	r24, 0x80	; 128
     e2e:	83 83       	std	Z+3, r24	; 0x03
     e30:	01 15       	cp	r16, r1
     e32:	11 05       	cpc	r17, r1
     e34:	71 f0       	breq	.+28     	; 0xe52 <fdevopen+0x52>
     e36:	13 87       	std	Z+11, r17	; 0x0b
     e38:	02 87       	std	Z+10, r16	; 0x0a
     e3a:	81 e8       	ldi	r24, 0x81	; 129
     e3c:	83 83       	std	Z+3, r24	; 0x03
     e3e:	80 91 4b 02 	lds	r24, 0x024B
     e42:	90 91 4c 02 	lds	r25, 0x024C
     e46:	89 2b       	or	r24, r25
     e48:	21 f4       	brne	.+8      	; 0xe52 <fdevopen+0x52>
     e4a:	f0 93 4c 02 	sts	0x024C, r31
     e4e:	e0 93 4b 02 	sts	0x024B, r30
     e52:	20 97       	sbiw	r28, 0x00	; 0
     e54:	c9 f0       	breq	.+50     	; 0xe88 <fdevopen+0x88>
     e56:	d1 87       	std	Z+9, r29	; 0x09
     e58:	c0 87       	std	Z+8, r28	; 0x08
     e5a:	83 81       	ldd	r24, Z+3	; 0x03
     e5c:	82 60       	ori	r24, 0x02	; 2
     e5e:	83 83       	std	Z+3, r24	; 0x03
     e60:	80 91 4d 02 	lds	r24, 0x024D
     e64:	90 91 4e 02 	lds	r25, 0x024E
     e68:	89 2b       	or	r24, r25
     e6a:	71 f4       	brne	.+28     	; 0xe88 <fdevopen+0x88>
     e6c:	f0 93 4e 02 	sts	0x024E, r31
     e70:	e0 93 4d 02 	sts	0x024D, r30
     e74:	80 91 4f 02 	lds	r24, 0x024F
     e78:	90 91 50 02 	lds	r25, 0x0250
     e7c:	89 2b       	or	r24, r25
     e7e:	21 f4       	brne	.+8      	; 0xe88 <fdevopen+0x88>
     e80:	f0 93 50 02 	sts	0x0250, r31
     e84:	e0 93 4f 02 	sts	0x024F, r30
     e88:	cf 01       	movw	r24, r30
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	08 95       	ret

00000e94 <printf>:
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	fe 01       	movw	r30, r28
     e9e:	36 96       	adiw	r30, 0x06	; 6
     ea0:	61 91       	ld	r22, Z+
     ea2:	71 91       	ld	r23, Z+
     ea4:	af 01       	movw	r20, r30
     ea6:	80 91 4d 02 	lds	r24, 0x024D
     eaa:	90 91 4e 02 	lds	r25, 0x024E
     eae:	30 d0       	rcall	.+96     	; 0xf10 <vfprintf>
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <puts>:
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	e0 91 4d 02 	lds	r30, 0x024D
     ec2:	f0 91 4e 02 	lds	r31, 0x024E
     ec6:	23 81       	ldd	r18, Z+3	; 0x03
     ec8:	21 ff       	sbrs	r18, 1
     eca:	1b c0       	rjmp	.+54     	; 0xf02 <puts+0x4c>
     ecc:	ec 01       	movw	r28, r24
     ece:	00 e0       	ldi	r16, 0x00	; 0
     ed0:	10 e0       	ldi	r17, 0x00	; 0
     ed2:	89 91       	ld	r24, Y+
     ed4:	60 91 4d 02 	lds	r22, 0x024D
     ed8:	70 91 4e 02 	lds	r23, 0x024E
     edc:	db 01       	movw	r26, r22
     ede:	18 96       	adiw	r26, 0x08	; 8
     ee0:	ed 91       	ld	r30, X+
     ee2:	fc 91       	ld	r31, X
     ee4:	19 97       	sbiw	r26, 0x09	; 9
     ee6:	88 23       	and	r24, r24
     ee8:	31 f0       	breq	.+12     	; 0xef6 <puts+0x40>
     eea:	19 95       	eicall
     eec:	89 2b       	or	r24, r25
     eee:	89 f3       	breq	.-30     	; 0xed2 <puts+0x1c>
     ef0:	0f ef       	ldi	r16, 0xFF	; 255
     ef2:	1f ef       	ldi	r17, 0xFF	; 255
     ef4:	ee cf       	rjmp	.-36     	; 0xed2 <puts+0x1c>
     ef6:	8a e0       	ldi	r24, 0x0A	; 10
     ef8:	19 95       	eicall
     efa:	89 2b       	or	r24, r25
     efc:	11 f4       	brne	.+4      	; 0xf02 <puts+0x4c>
     efe:	c8 01       	movw	r24, r16
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <puts+0x50>
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	9f ef       	ldi	r25, 0xFF	; 255
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	1f 91       	pop	r17
     f0c:	0f 91       	pop	r16
     f0e:	08 95       	ret

00000f10 <vfprintf>:
     f10:	2f 92       	push	r2
     f12:	3f 92       	push	r3
     f14:	4f 92       	push	r4
     f16:	5f 92       	push	r5
     f18:	6f 92       	push	r6
     f1a:	7f 92       	push	r7
     f1c:	8f 92       	push	r8
     f1e:	9f 92       	push	r9
     f20:	af 92       	push	r10
     f22:	bf 92       	push	r11
     f24:	cf 92       	push	r12
     f26:	df 92       	push	r13
     f28:	ef 92       	push	r14
     f2a:	ff 92       	push	r15
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	2c 97       	sbiw	r28, 0x0c	; 12
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	7c 01       	movw	r14, r24
     f46:	6b 01       	movw	r12, r22
     f48:	8a 01       	movw	r16, r20
     f4a:	fc 01       	movw	r30, r24
     f4c:	17 82       	std	Z+7, r1	; 0x07
     f4e:	16 82       	std	Z+6, r1	; 0x06
     f50:	83 81       	ldd	r24, Z+3	; 0x03
     f52:	81 ff       	sbrs	r24, 1
     f54:	b0 c1       	rjmp	.+864    	; 0x12b6 <vfprintf+0x3a6>
     f56:	ce 01       	movw	r24, r28
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	4c 01       	movw	r8, r24
     f5c:	f7 01       	movw	r30, r14
     f5e:	93 81       	ldd	r25, Z+3	; 0x03
     f60:	f6 01       	movw	r30, r12
     f62:	93 fd       	sbrc	r25, 3
     f64:	85 91       	lpm	r24, Z+
     f66:	93 ff       	sbrs	r25, 3
     f68:	81 91       	ld	r24, Z+
     f6a:	6f 01       	movw	r12, r30
     f6c:	88 23       	and	r24, r24
     f6e:	09 f4       	brne	.+2      	; 0xf72 <vfprintf+0x62>
     f70:	9e c1       	rjmp	.+828    	; 0x12ae <vfprintf+0x39e>
     f72:	85 32       	cpi	r24, 0x25	; 37
     f74:	39 f4       	brne	.+14     	; 0xf84 <vfprintf+0x74>
     f76:	93 fd       	sbrc	r25, 3
     f78:	85 91       	lpm	r24, Z+
     f7a:	93 ff       	sbrs	r25, 3
     f7c:	81 91       	ld	r24, Z+
     f7e:	6f 01       	movw	r12, r30
     f80:	85 32       	cpi	r24, 0x25	; 37
     f82:	21 f4       	brne	.+8      	; 0xf8c <vfprintf+0x7c>
     f84:	b7 01       	movw	r22, r14
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	e8 d1       	rcall	.+976    	; 0x135a <fputc>
     f8a:	e8 cf       	rjmp	.-48     	; 0xf5c <vfprintf+0x4c>
     f8c:	51 2c       	mov	r5, r1
     f8e:	31 2c       	mov	r3, r1
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	20 32       	cpi	r18, 0x20	; 32
     f94:	a0 f4       	brcc	.+40     	; 0xfbe <vfprintf+0xae>
     f96:	8b 32       	cpi	r24, 0x2B	; 43
     f98:	69 f0       	breq	.+26     	; 0xfb4 <vfprintf+0xa4>
     f9a:	30 f4       	brcc	.+12     	; 0xfa8 <vfprintf+0x98>
     f9c:	80 32       	cpi	r24, 0x20	; 32
     f9e:	59 f0       	breq	.+22     	; 0xfb6 <vfprintf+0xa6>
     fa0:	83 32       	cpi	r24, 0x23	; 35
     fa2:	69 f4       	brne	.+26     	; 0xfbe <vfprintf+0xae>
     fa4:	20 61       	ori	r18, 0x10	; 16
     fa6:	2c c0       	rjmp	.+88     	; 0x1000 <vfprintf+0xf0>
     fa8:	8d 32       	cpi	r24, 0x2D	; 45
     faa:	39 f0       	breq	.+14     	; 0xfba <vfprintf+0xaa>
     fac:	80 33       	cpi	r24, 0x30	; 48
     fae:	39 f4       	brne	.+14     	; 0xfbe <vfprintf+0xae>
     fb0:	21 60       	ori	r18, 0x01	; 1
     fb2:	26 c0       	rjmp	.+76     	; 0x1000 <vfprintf+0xf0>
     fb4:	22 60       	ori	r18, 0x02	; 2
     fb6:	24 60       	ori	r18, 0x04	; 4
     fb8:	23 c0       	rjmp	.+70     	; 0x1000 <vfprintf+0xf0>
     fba:	28 60       	ori	r18, 0x08	; 8
     fbc:	21 c0       	rjmp	.+66     	; 0x1000 <vfprintf+0xf0>
     fbe:	27 fd       	sbrc	r18, 7
     fc0:	27 c0       	rjmp	.+78     	; 0x1010 <vfprintf+0x100>
     fc2:	30 ed       	ldi	r19, 0xD0	; 208
     fc4:	38 0f       	add	r19, r24
     fc6:	3a 30       	cpi	r19, 0x0A	; 10
     fc8:	78 f4       	brcc	.+30     	; 0xfe8 <vfprintf+0xd8>
     fca:	26 ff       	sbrs	r18, 6
     fcc:	06 c0       	rjmp	.+12     	; 0xfda <vfprintf+0xca>
     fce:	fa e0       	ldi	r31, 0x0A	; 10
     fd0:	5f 9e       	mul	r5, r31
     fd2:	30 0d       	add	r19, r0
     fd4:	11 24       	eor	r1, r1
     fd6:	53 2e       	mov	r5, r19
     fd8:	13 c0       	rjmp	.+38     	; 0x1000 <vfprintf+0xf0>
     fda:	8a e0       	ldi	r24, 0x0A	; 10
     fdc:	38 9e       	mul	r3, r24
     fde:	30 0d       	add	r19, r0
     fe0:	11 24       	eor	r1, r1
     fe2:	33 2e       	mov	r3, r19
     fe4:	20 62       	ori	r18, 0x20	; 32
     fe6:	0c c0       	rjmp	.+24     	; 0x1000 <vfprintf+0xf0>
     fe8:	8e 32       	cpi	r24, 0x2E	; 46
     fea:	21 f4       	brne	.+8      	; 0xff4 <vfprintf+0xe4>
     fec:	26 fd       	sbrc	r18, 6
     fee:	5f c1       	rjmp	.+702    	; 0x12ae <vfprintf+0x39e>
     ff0:	20 64       	ori	r18, 0x40	; 64
     ff2:	06 c0       	rjmp	.+12     	; 0x1000 <vfprintf+0xf0>
     ff4:	8c 36       	cpi	r24, 0x6C	; 108
     ff6:	11 f4       	brne	.+4      	; 0xffc <vfprintf+0xec>
     ff8:	20 68       	ori	r18, 0x80	; 128
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <vfprintf+0xf0>
     ffc:	88 36       	cpi	r24, 0x68	; 104
     ffe:	41 f4       	brne	.+16     	; 0x1010 <vfprintf+0x100>
    1000:	f6 01       	movw	r30, r12
    1002:	93 fd       	sbrc	r25, 3
    1004:	85 91       	lpm	r24, Z+
    1006:	93 ff       	sbrs	r25, 3
    1008:	81 91       	ld	r24, Z+
    100a:	6f 01       	movw	r12, r30
    100c:	81 11       	cpse	r24, r1
    100e:	c1 cf       	rjmp	.-126    	; 0xf92 <vfprintf+0x82>
    1010:	98 2f       	mov	r25, r24
    1012:	9f 7d       	andi	r25, 0xDF	; 223
    1014:	95 54       	subi	r25, 0x45	; 69
    1016:	93 30       	cpi	r25, 0x03	; 3
    1018:	28 f4       	brcc	.+10     	; 0x1024 <vfprintf+0x114>
    101a:	0c 5f       	subi	r16, 0xFC	; 252
    101c:	1f 4f       	sbci	r17, 0xFF	; 255
    101e:	ff e3       	ldi	r31, 0x3F	; 63
    1020:	f9 83       	std	Y+1, r31	; 0x01
    1022:	0d c0       	rjmp	.+26     	; 0x103e <vfprintf+0x12e>
    1024:	83 36       	cpi	r24, 0x63	; 99
    1026:	31 f0       	breq	.+12     	; 0x1034 <vfprintf+0x124>
    1028:	83 37       	cpi	r24, 0x73	; 115
    102a:	71 f0       	breq	.+28     	; 0x1048 <vfprintf+0x138>
    102c:	83 35       	cpi	r24, 0x53	; 83
    102e:	09 f0       	breq	.+2      	; 0x1032 <vfprintf+0x122>
    1030:	57 c0       	rjmp	.+174    	; 0x10e0 <vfprintf+0x1d0>
    1032:	21 c0       	rjmp	.+66     	; 0x1076 <vfprintf+0x166>
    1034:	f8 01       	movw	r30, r16
    1036:	80 81       	ld	r24, Z
    1038:	89 83       	std	Y+1, r24	; 0x01
    103a:	0e 5f       	subi	r16, 0xFE	; 254
    103c:	1f 4f       	sbci	r17, 0xFF	; 255
    103e:	44 24       	eor	r4, r4
    1040:	43 94       	inc	r4
    1042:	51 2c       	mov	r5, r1
    1044:	54 01       	movw	r10, r8
    1046:	14 c0       	rjmp	.+40     	; 0x1070 <vfprintf+0x160>
    1048:	38 01       	movw	r6, r16
    104a:	f2 e0       	ldi	r31, 0x02	; 2
    104c:	6f 0e       	add	r6, r31
    104e:	71 1c       	adc	r7, r1
    1050:	f8 01       	movw	r30, r16
    1052:	a0 80       	ld	r10, Z
    1054:	b1 80       	ldd	r11, Z+1	; 0x01
    1056:	26 ff       	sbrs	r18, 6
    1058:	03 c0       	rjmp	.+6      	; 0x1060 <vfprintf+0x150>
    105a:	65 2d       	mov	r22, r5
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <vfprintf+0x154>
    1060:	6f ef       	ldi	r22, 0xFF	; 255
    1062:	7f ef       	ldi	r23, 0xFF	; 255
    1064:	c5 01       	movw	r24, r10
    1066:	2c 87       	std	Y+12, r18	; 0x0c
    1068:	6d d1       	rcall	.+730    	; 0x1344 <strnlen>
    106a:	2c 01       	movw	r4, r24
    106c:	83 01       	movw	r16, r6
    106e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1070:	2f 77       	andi	r18, 0x7F	; 127
    1072:	22 2e       	mov	r2, r18
    1074:	16 c0       	rjmp	.+44     	; 0x10a2 <vfprintf+0x192>
    1076:	38 01       	movw	r6, r16
    1078:	f2 e0       	ldi	r31, 0x02	; 2
    107a:	6f 0e       	add	r6, r31
    107c:	71 1c       	adc	r7, r1
    107e:	f8 01       	movw	r30, r16
    1080:	a0 80       	ld	r10, Z
    1082:	b1 80       	ldd	r11, Z+1	; 0x01
    1084:	26 ff       	sbrs	r18, 6
    1086:	03 c0       	rjmp	.+6      	; 0x108e <vfprintf+0x17e>
    1088:	65 2d       	mov	r22, r5
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <vfprintf+0x182>
    108e:	6f ef       	ldi	r22, 0xFF	; 255
    1090:	7f ef       	ldi	r23, 0xFF	; 255
    1092:	c5 01       	movw	r24, r10
    1094:	2c 87       	std	Y+12, r18	; 0x0c
    1096:	44 d1       	rcall	.+648    	; 0x1320 <strnlen_P>
    1098:	2c 01       	movw	r4, r24
    109a:	2c 85       	ldd	r18, Y+12	; 0x0c
    109c:	20 68       	ori	r18, 0x80	; 128
    109e:	22 2e       	mov	r2, r18
    10a0:	83 01       	movw	r16, r6
    10a2:	23 fc       	sbrc	r2, 3
    10a4:	19 c0       	rjmp	.+50     	; 0x10d8 <vfprintf+0x1c8>
    10a6:	83 2d       	mov	r24, r3
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	48 16       	cp	r4, r24
    10ac:	59 06       	cpc	r5, r25
    10ae:	a0 f4       	brcc	.+40     	; 0x10d8 <vfprintf+0x1c8>
    10b0:	b7 01       	movw	r22, r14
    10b2:	80 e2       	ldi	r24, 0x20	; 32
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	51 d1       	rcall	.+674    	; 0x135a <fputc>
    10b8:	3a 94       	dec	r3
    10ba:	f5 cf       	rjmp	.-22     	; 0x10a6 <vfprintf+0x196>
    10bc:	f5 01       	movw	r30, r10
    10be:	27 fc       	sbrc	r2, 7
    10c0:	85 91       	lpm	r24, Z+
    10c2:	27 fe       	sbrs	r2, 7
    10c4:	81 91       	ld	r24, Z+
    10c6:	5f 01       	movw	r10, r30
    10c8:	b7 01       	movw	r22, r14
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	46 d1       	rcall	.+652    	; 0x135a <fputc>
    10ce:	31 10       	cpse	r3, r1
    10d0:	3a 94       	dec	r3
    10d2:	f1 e0       	ldi	r31, 0x01	; 1
    10d4:	4f 1a       	sub	r4, r31
    10d6:	51 08       	sbc	r5, r1
    10d8:	41 14       	cp	r4, r1
    10da:	51 04       	cpc	r5, r1
    10dc:	79 f7       	brne	.-34     	; 0x10bc <vfprintf+0x1ac>
    10de:	de c0       	rjmp	.+444    	; 0x129c <vfprintf+0x38c>
    10e0:	84 36       	cpi	r24, 0x64	; 100
    10e2:	11 f0       	breq	.+4      	; 0x10e8 <vfprintf+0x1d8>
    10e4:	89 36       	cpi	r24, 0x69	; 105
    10e6:	31 f5       	brne	.+76     	; 0x1134 <vfprintf+0x224>
    10e8:	f8 01       	movw	r30, r16
    10ea:	27 ff       	sbrs	r18, 7
    10ec:	07 c0       	rjmp	.+14     	; 0x10fc <vfprintf+0x1ec>
    10ee:	60 81       	ld	r22, Z
    10f0:	71 81       	ldd	r23, Z+1	; 0x01
    10f2:	82 81       	ldd	r24, Z+2	; 0x02
    10f4:	93 81       	ldd	r25, Z+3	; 0x03
    10f6:	0c 5f       	subi	r16, 0xFC	; 252
    10f8:	1f 4f       	sbci	r17, 0xFF	; 255
    10fa:	08 c0       	rjmp	.+16     	; 0x110c <vfprintf+0x1fc>
    10fc:	60 81       	ld	r22, Z
    10fe:	71 81       	ldd	r23, Z+1	; 0x01
    1100:	88 27       	eor	r24, r24
    1102:	77 fd       	sbrc	r23, 7
    1104:	80 95       	com	r24
    1106:	98 2f       	mov	r25, r24
    1108:	0e 5f       	subi	r16, 0xFE	; 254
    110a:	1f 4f       	sbci	r17, 0xFF	; 255
    110c:	2f 76       	andi	r18, 0x6F	; 111
    110e:	b2 2e       	mov	r11, r18
    1110:	97 ff       	sbrs	r25, 7
    1112:	09 c0       	rjmp	.+18     	; 0x1126 <vfprintf+0x216>
    1114:	90 95       	com	r25
    1116:	80 95       	com	r24
    1118:	70 95       	com	r23
    111a:	61 95       	neg	r22
    111c:	7f 4f       	sbci	r23, 0xFF	; 255
    111e:	8f 4f       	sbci	r24, 0xFF	; 255
    1120:	9f 4f       	sbci	r25, 0xFF	; 255
    1122:	20 68       	ori	r18, 0x80	; 128
    1124:	b2 2e       	mov	r11, r18
    1126:	2a e0       	ldi	r18, 0x0A	; 10
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	a4 01       	movw	r20, r8
    112c:	48 d1       	rcall	.+656    	; 0x13be <__ultoa_invert>
    112e:	a8 2e       	mov	r10, r24
    1130:	a8 18       	sub	r10, r8
    1132:	43 c0       	rjmp	.+134    	; 0x11ba <vfprintf+0x2aa>
    1134:	85 37       	cpi	r24, 0x75	; 117
    1136:	29 f4       	brne	.+10     	; 0x1142 <vfprintf+0x232>
    1138:	2f 7e       	andi	r18, 0xEF	; 239
    113a:	b2 2e       	mov	r11, r18
    113c:	2a e0       	ldi	r18, 0x0A	; 10
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	25 c0       	rjmp	.+74     	; 0x118c <vfprintf+0x27c>
    1142:	f2 2f       	mov	r31, r18
    1144:	f9 7f       	andi	r31, 0xF9	; 249
    1146:	bf 2e       	mov	r11, r31
    1148:	8f 36       	cpi	r24, 0x6F	; 111
    114a:	c1 f0       	breq	.+48     	; 0x117c <vfprintf+0x26c>
    114c:	18 f4       	brcc	.+6      	; 0x1154 <vfprintf+0x244>
    114e:	88 35       	cpi	r24, 0x58	; 88
    1150:	79 f0       	breq	.+30     	; 0x1170 <vfprintf+0x260>
    1152:	ad c0       	rjmp	.+346    	; 0x12ae <vfprintf+0x39e>
    1154:	80 37       	cpi	r24, 0x70	; 112
    1156:	19 f0       	breq	.+6      	; 0x115e <vfprintf+0x24e>
    1158:	88 37       	cpi	r24, 0x78	; 120
    115a:	21 f0       	breq	.+8      	; 0x1164 <vfprintf+0x254>
    115c:	a8 c0       	rjmp	.+336    	; 0x12ae <vfprintf+0x39e>
    115e:	2f 2f       	mov	r18, r31
    1160:	20 61       	ori	r18, 0x10	; 16
    1162:	b2 2e       	mov	r11, r18
    1164:	b4 fe       	sbrs	r11, 4
    1166:	0d c0       	rjmp	.+26     	; 0x1182 <vfprintf+0x272>
    1168:	8b 2d       	mov	r24, r11
    116a:	84 60       	ori	r24, 0x04	; 4
    116c:	b8 2e       	mov	r11, r24
    116e:	09 c0       	rjmp	.+18     	; 0x1182 <vfprintf+0x272>
    1170:	24 ff       	sbrs	r18, 4
    1172:	0a c0       	rjmp	.+20     	; 0x1188 <vfprintf+0x278>
    1174:	9f 2f       	mov	r25, r31
    1176:	96 60       	ori	r25, 0x06	; 6
    1178:	b9 2e       	mov	r11, r25
    117a:	06 c0       	rjmp	.+12     	; 0x1188 <vfprintf+0x278>
    117c:	28 e0       	ldi	r18, 0x08	; 8
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	05 c0       	rjmp	.+10     	; 0x118c <vfprintf+0x27c>
    1182:	20 e1       	ldi	r18, 0x10	; 16
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	02 c0       	rjmp	.+4      	; 0x118c <vfprintf+0x27c>
    1188:	20 e1       	ldi	r18, 0x10	; 16
    118a:	32 e0       	ldi	r19, 0x02	; 2
    118c:	f8 01       	movw	r30, r16
    118e:	b7 fe       	sbrs	r11, 7
    1190:	07 c0       	rjmp	.+14     	; 0x11a0 <vfprintf+0x290>
    1192:	60 81       	ld	r22, Z
    1194:	71 81       	ldd	r23, Z+1	; 0x01
    1196:	82 81       	ldd	r24, Z+2	; 0x02
    1198:	93 81       	ldd	r25, Z+3	; 0x03
    119a:	0c 5f       	subi	r16, 0xFC	; 252
    119c:	1f 4f       	sbci	r17, 0xFF	; 255
    119e:	06 c0       	rjmp	.+12     	; 0x11ac <vfprintf+0x29c>
    11a0:	60 81       	ld	r22, Z
    11a2:	71 81       	ldd	r23, Z+1	; 0x01
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0e 5f       	subi	r16, 0xFE	; 254
    11aa:	1f 4f       	sbci	r17, 0xFF	; 255
    11ac:	a4 01       	movw	r20, r8
    11ae:	07 d1       	rcall	.+526    	; 0x13be <__ultoa_invert>
    11b0:	a8 2e       	mov	r10, r24
    11b2:	a8 18       	sub	r10, r8
    11b4:	fb 2d       	mov	r31, r11
    11b6:	ff 77       	andi	r31, 0x7F	; 127
    11b8:	bf 2e       	mov	r11, r31
    11ba:	b6 fe       	sbrs	r11, 6
    11bc:	0b c0       	rjmp	.+22     	; 0x11d4 <vfprintf+0x2c4>
    11be:	2b 2d       	mov	r18, r11
    11c0:	2e 7f       	andi	r18, 0xFE	; 254
    11c2:	a5 14       	cp	r10, r5
    11c4:	50 f4       	brcc	.+20     	; 0x11da <vfprintf+0x2ca>
    11c6:	b4 fe       	sbrs	r11, 4
    11c8:	0a c0       	rjmp	.+20     	; 0x11de <vfprintf+0x2ce>
    11ca:	b2 fc       	sbrc	r11, 2
    11cc:	08 c0       	rjmp	.+16     	; 0x11de <vfprintf+0x2ce>
    11ce:	2b 2d       	mov	r18, r11
    11d0:	2e 7e       	andi	r18, 0xEE	; 238
    11d2:	05 c0       	rjmp	.+10     	; 0x11de <vfprintf+0x2ce>
    11d4:	7a 2c       	mov	r7, r10
    11d6:	2b 2d       	mov	r18, r11
    11d8:	03 c0       	rjmp	.+6      	; 0x11e0 <vfprintf+0x2d0>
    11da:	7a 2c       	mov	r7, r10
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <vfprintf+0x2d0>
    11de:	75 2c       	mov	r7, r5
    11e0:	24 ff       	sbrs	r18, 4
    11e2:	0d c0       	rjmp	.+26     	; 0x11fe <vfprintf+0x2ee>
    11e4:	fe 01       	movw	r30, r28
    11e6:	ea 0d       	add	r30, r10
    11e8:	f1 1d       	adc	r31, r1
    11ea:	80 81       	ld	r24, Z
    11ec:	80 33       	cpi	r24, 0x30	; 48
    11ee:	11 f4       	brne	.+4      	; 0x11f4 <vfprintf+0x2e4>
    11f0:	29 7e       	andi	r18, 0xE9	; 233
    11f2:	09 c0       	rjmp	.+18     	; 0x1206 <vfprintf+0x2f6>
    11f4:	22 ff       	sbrs	r18, 2
    11f6:	06 c0       	rjmp	.+12     	; 0x1204 <vfprintf+0x2f4>
    11f8:	73 94       	inc	r7
    11fa:	73 94       	inc	r7
    11fc:	04 c0       	rjmp	.+8      	; 0x1206 <vfprintf+0x2f6>
    11fe:	82 2f       	mov	r24, r18
    1200:	86 78       	andi	r24, 0x86	; 134
    1202:	09 f0       	breq	.+2      	; 0x1206 <vfprintf+0x2f6>
    1204:	73 94       	inc	r7
    1206:	23 fd       	sbrc	r18, 3
    1208:	12 c0       	rjmp	.+36     	; 0x122e <vfprintf+0x31e>
    120a:	20 ff       	sbrs	r18, 0
    120c:	06 c0       	rjmp	.+12     	; 0x121a <vfprintf+0x30a>
    120e:	5a 2c       	mov	r5, r10
    1210:	73 14       	cp	r7, r3
    1212:	18 f4       	brcc	.+6      	; 0x121a <vfprintf+0x30a>
    1214:	53 0c       	add	r5, r3
    1216:	57 18       	sub	r5, r7
    1218:	73 2c       	mov	r7, r3
    121a:	73 14       	cp	r7, r3
    121c:	60 f4       	brcc	.+24     	; 0x1236 <vfprintf+0x326>
    121e:	b7 01       	movw	r22, r14
    1220:	80 e2       	ldi	r24, 0x20	; 32
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	2c 87       	std	Y+12, r18	; 0x0c
    1226:	99 d0       	rcall	.+306    	; 0x135a <fputc>
    1228:	73 94       	inc	r7
    122a:	2c 85       	ldd	r18, Y+12	; 0x0c
    122c:	f6 cf       	rjmp	.-20     	; 0x121a <vfprintf+0x30a>
    122e:	73 14       	cp	r7, r3
    1230:	10 f4       	brcc	.+4      	; 0x1236 <vfprintf+0x326>
    1232:	37 18       	sub	r3, r7
    1234:	01 c0       	rjmp	.+2      	; 0x1238 <vfprintf+0x328>
    1236:	31 2c       	mov	r3, r1
    1238:	24 ff       	sbrs	r18, 4
    123a:	11 c0       	rjmp	.+34     	; 0x125e <vfprintf+0x34e>
    123c:	b7 01       	movw	r22, r14
    123e:	80 e3       	ldi	r24, 0x30	; 48
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	2c 87       	std	Y+12, r18	; 0x0c
    1244:	8a d0       	rcall	.+276    	; 0x135a <fputc>
    1246:	2c 85       	ldd	r18, Y+12	; 0x0c
    1248:	22 ff       	sbrs	r18, 2
    124a:	16 c0       	rjmp	.+44     	; 0x1278 <vfprintf+0x368>
    124c:	21 ff       	sbrs	r18, 1
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <vfprintf+0x346>
    1250:	88 e5       	ldi	r24, 0x58	; 88
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 c0       	rjmp	.+4      	; 0x125a <vfprintf+0x34a>
    1256:	88 e7       	ldi	r24, 0x78	; 120
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	b7 01       	movw	r22, r14
    125c:	0c c0       	rjmp	.+24     	; 0x1276 <vfprintf+0x366>
    125e:	82 2f       	mov	r24, r18
    1260:	86 78       	andi	r24, 0x86	; 134
    1262:	51 f0       	breq	.+20     	; 0x1278 <vfprintf+0x368>
    1264:	21 fd       	sbrc	r18, 1
    1266:	02 c0       	rjmp	.+4      	; 0x126c <vfprintf+0x35c>
    1268:	80 e2       	ldi	r24, 0x20	; 32
    126a:	01 c0       	rjmp	.+2      	; 0x126e <vfprintf+0x35e>
    126c:	8b e2       	ldi	r24, 0x2B	; 43
    126e:	27 fd       	sbrc	r18, 7
    1270:	8d e2       	ldi	r24, 0x2D	; 45
    1272:	b7 01       	movw	r22, r14
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	71 d0       	rcall	.+226    	; 0x135a <fputc>
    1278:	a5 14       	cp	r10, r5
    127a:	30 f4       	brcc	.+12     	; 0x1288 <vfprintf+0x378>
    127c:	b7 01       	movw	r22, r14
    127e:	80 e3       	ldi	r24, 0x30	; 48
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	6b d0       	rcall	.+214    	; 0x135a <fputc>
    1284:	5a 94       	dec	r5
    1286:	f8 cf       	rjmp	.-16     	; 0x1278 <vfprintf+0x368>
    1288:	aa 94       	dec	r10
    128a:	f4 01       	movw	r30, r8
    128c:	ea 0d       	add	r30, r10
    128e:	f1 1d       	adc	r31, r1
    1290:	80 81       	ld	r24, Z
    1292:	b7 01       	movw	r22, r14
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	61 d0       	rcall	.+194    	; 0x135a <fputc>
    1298:	a1 10       	cpse	r10, r1
    129a:	f6 cf       	rjmp	.-20     	; 0x1288 <vfprintf+0x378>
    129c:	33 20       	and	r3, r3
    129e:	09 f4       	brne	.+2      	; 0x12a2 <vfprintf+0x392>
    12a0:	5d ce       	rjmp	.-838    	; 0xf5c <vfprintf+0x4c>
    12a2:	b7 01       	movw	r22, r14
    12a4:	80 e2       	ldi	r24, 0x20	; 32
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	58 d0       	rcall	.+176    	; 0x135a <fputc>
    12aa:	3a 94       	dec	r3
    12ac:	f7 cf       	rjmp	.-18     	; 0x129c <vfprintf+0x38c>
    12ae:	f7 01       	movw	r30, r14
    12b0:	86 81       	ldd	r24, Z+6	; 0x06
    12b2:	97 81       	ldd	r25, Z+7	; 0x07
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <vfprintf+0x3aa>
    12b6:	8f ef       	ldi	r24, 0xFF	; 255
    12b8:	9f ef       	ldi	r25, 0xFF	; 255
    12ba:	2c 96       	adiw	r28, 0x0c	; 12
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	ff 90       	pop	r15
    12d0:	ef 90       	pop	r14
    12d2:	df 90       	pop	r13
    12d4:	cf 90       	pop	r12
    12d6:	bf 90       	pop	r11
    12d8:	af 90       	pop	r10
    12da:	9f 90       	pop	r9
    12dc:	8f 90       	pop	r8
    12de:	7f 90       	pop	r7
    12e0:	6f 90       	pop	r6
    12e2:	5f 90       	pop	r5
    12e4:	4f 90       	pop	r4
    12e6:	3f 90       	pop	r3
    12e8:	2f 90       	pop	r2
    12ea:	08 95       	ret

000012ec <calloc>:
    12ec:	0f 93       	push	r16
    12ee:	1f 93       	push	r17
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	86 9f       	mul	r24, r22
    12f6:	80 01       	movw	r16, r0
    12f8:	87 9f       	mul	r24, r23
    12fa:	10 0d       	add	r17, r0
    12fc:	96 9f       	mul	r25, r22
    12fe:	10 0d       	add	r17, r0
    1300:	11 24       	eor	r1, r1
    1302:	c8 01       	movw	r24, r16
    1304:	56 dc       	rcall	.-1876   	; 0xbb2 <malloc>
    1306:	ec 01       	movw	r28, r24
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	21 f0       	breq	.+8      	; 0x1314 <calloc+0x28>
    130c:	a8 01       	movw	r20, r16
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	11 d0       	rcall	.+34     	; 0x1336 <memset>
    1314:	ce 01       	movw	r24, r28
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	08 95       	ret

00001320 <strnlen_P>:
    1320:	fc 01       	movw	r30, r24
    1322:	05 90       	lpm	r0, Z+
    1324:	61 50       	subi	r22, 0x01	; 1
    1326:	70 40       	sbci	r23, 0x00	; 0
    1328:	01 10       	cpse	r0, r1
    132a:	d8 f7       	brcc	.-10     	; 0x1322 <strnlen_P+0x2>
    132c:	80 95       	com	r24
    132e:	90 95       	com	r25
    1330:	8e 0f       	add	r24, r30
    1332:	9f 1f       	adc	r25, r31
    1334:	08 95       	ret

00001336 <memset>:
    1336:	dc 01       	movw	r26, r24
    1338:	01 c0       	rjmp	.+2      	; 0x133c <memset+0x6>
    133a:	6d 93       	st	X+, r22
    133c:	41 50       	subi	r20, 0x01	; 1
    133e:	50 40       	sbci	r21, 0x00	; 0
    1340:	e0 f7       	brcc	.-8      	; 0x133a <memset+0x4>
    1342:	08 95       	ret

00001344 <strnlen>:
    1344:	fc 01       	movw	r30, r24
    1346:	61 50       	subi	r22, 0x01	; 1
    1348:	70 40       	sbci	r23, 0x00	; 0
    134a:	01 90       	ld	r0, Z+
    134c:	01 10       	cpse	r0, r1
    134e:	d8 f7       	brcc	.-10     	; 0x1346 <strnlen+0x2>
    1350:	80 95       	com	r24
    1352:	90 95       	com	r25
    1354:	8e 0f       	add	r24, r30
    1356:	9f 1f       	adc	r25, r31
    1358:	08 95       	ret

0000135a <fputc>:
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	18 2f       	mov	r17, r24
    1364:	09 2f       	mov	r16, r25
    1366:	eb 01       	movw	r28, r22
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	81 fd       	sbrc	r24, 1
    136c:	03 c0       	rjmp	.+6      	; 0x1374 <fputc+0x1a>
    136e:	8f ef       	ldi	r24, 0xFF	; 255
    1370:	9f ef       	ldi	r25, 0xFF	; 255
    1372:	20 c0       	rjmp	.+64     	; 0x13b4 <fputc+0x5a>
    1374:	82 ff       	sbrs	r24, 2
    1376:	10 c0       	rjmp	.+32     	; 0x1398 <fputc+0x3e>
    1378:	4e 81       	ldd	r20, Y+6	; 0x06
    137a:	5f 81       	ldd	r21, Y+7	; 0x07
    137c:	2c 81       	ldd	r18, Y+4	; 0x04
    137e:	3d 81       	ldd	r19, Y+5	; 0x05
    1380:	42 17       	cp	r20, r18
    1382:	53 07       	cpc	r21, r19
    1384:	7c f4       	brge	.+30     	; 0x13a4 <fputc+0x4a>
    1386:	e8 81       	ld	r30, Y
    1388:	f9 81       	ldd	r31, Y+1	; 0x01
    138a:	9f 01       	movw	r18, r30
    138c:	2f 5f       	subi	r18, 0xFF	; 255
    138e:	3f 4f       	sbci	r19, 0xFF	; 255
    1390:	39 83       	std	Y+1, r19	; 0x01
    1392:	28 83       	st	Y, r18
    1394:	10 83       	st	Z, r17
    1396:	06 c0       	rjmp	.+12     	; 0x13a4 <fputc+0x4a>
    1398:	e8 85       	ldd	r30, Y+8	; 0x08
    139a:	f9 85       	ldd	r31, Y+9	; 0x09
    139c:	81 2f       	mov	r24, r17
    139e:	19 95       	eicall
    13a0:	89 2b       	or	r24, r25
    13a2:	29 f7       	brne	.-54     	; 0x136e <fputc+0x14>
    13a4:	2e 81       	ldd	r18, Y+6	; 0x06
    13a6:	3f 81       	ldd	r19, Y+7	; 0x07
    13a8:	2f 5f       	subi	r18, 0xFF	; 255
    13aa:	3f 4f       	sbci	r19, 0xFF	; 255
    13ac:	3f 83       	std	Y+7, r19	; 0x07
    13ae:	2e 83       	std	Y+6, r18	; 0x06
    13b0:	81 2f       	mov	r24, r17
    13b2:	90 2f       	mov	r25, r16
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	08 95       	ret

000013be <__ultoa_invert>:
    13be:	fa 01       	movw	r30, r20
    13c0:	aa 27       	eor	r26, r26
    13c2:	28 30       	cpi	r18, 0x08	; 8
    13c4:	51 f1       	breq	.+84     	; 0x141a <__ultoa_invert+0x5c>
    13c6:	20 31       	cpi	r18, 0x10	; 16
    13c8:	81 f1       	breq	.+96     	; 0x142a <__ultoa_invert+0x6c>
    13ca:	e8 94       	clt
    13cc:	6f 93       	push	r22
    13ce:	6e 7f       	andi	r22, 0xFE	; 254
    13d0:	6e 5f       	subi	r22, 0xFE	; 254
    13d2:	7f 4f       	sbci	r23, 0xFF	; 255
    13d4:	8f 4f       	sbci	r24, 0xFF	; 255
    13d6:	9f 4f       	sbci	r25, 0xFF	; 255
    13d8:	af 4f       	sbci	r26, 0xFF	; 255
    13da:	b1 e0       	ldi	r27, 0x01	; 1
    13dc:	3e d0       	rcall	.+124    	; 0x145a <__ultoa_invert+0x9c>
    13de:	b4 e0       	ldi	r27, 0x04	; 4
    13e0:	3c d0       	rcall	.+120    	; 0x145a <__ultoa_invert+0x9c>
    13e2:	67 0f       	add	r22, r23
    13e4:	78 1f       	adc	r23, r24
    13e6:	89 1f       	adc	r24, r25
    13e8:	9a 1f       	adc	r25, r26
    13ea:	a1 1d       	adc	r26, r1
    13ec:	68 0f       	add	r22, r24
    13ee:	79 1f       	adc	r23, r25
    13f0:	8a 1f       	adc	r24, r26
    13f2:	91 1d       	adc	r25, r1
    13f4:	a1 1d       	adc	r26, r1
    13f6:	6a 0f       	add	r22, r26
    13f8:	71 1d       	adc	r23, r1
    13fa:	81 1d       	adc	r24, r1
    13fc:	91 1d       	adc	r25, r1
    13fe:	a1 1d       	adc	r26, r1
    1400:	20 d0       	rcall	.+64     	; 0x1442 <__ultoa_invert+0x84>
    1402:	09 f4       	brne	.+2      	; 0x1406 <__ultoa_invert+0x48>
    1404:	68 94       	set
    1406:	3f 91       	pop	r19
    1408:	2a e0       	ldi	r18, 0x0A	; 10
    140a:	26 9f       	mul	r18, r22
    140c:	11 24       	eor	r1, r1
    140e:	30 19       	sub	r19, r0
    1410:	30 5d       	subi	r19, 0xD0	; 208
    1412:	31 93       	st	Z+, r19
    1414:	de f6       	brtc	.-74     	; 0x13cc <__ultoa_invert+0xe>
    1416:	cf 01       	movw	r24, r30
    1418:	08 95       	ret
    141a:	46 2f       	mov	r20, r22
    141c:	47 70       	andi	r20, 0x07	; 7
    141e:	40 5d       	subi	r20, 0xD0	; 208
    1420:	41 93       	st	Z+, r20
    1422:	b3 e0       	ldi	r27, 0x03	; 3
    1424:	0f d0       	rcall	.+30     	; 0x1444 <__ultoa_invert+0x86>
    1426:	c9 f7       	brne	.-14     	; 0x141a <__ultoa_invert+0x5c>
    1428:	f6 cf       	rjmp	.-20     	; 0x1416 <__ultoa_invert+0x58>
    142a:	46 2f       	mov	r20, r22
    142c:	4f 70       	andi	r20, 0x0F	; 15
    142e:	40 5d       	subi	r20, 0xD0	; 208
    1430:	4a 33       	cpi	r20, 0x3A	; 58
    1432:	18 f0       	brcs	.+6      	; 0x143a <__ultoa_invert+0x7c>
    1434:	49 5d       	subi	r20, 0xD9	; 217
    1436:	31 fd       	sbrc	r19, 1
    1438:	40 52       	subi	r20, 0x20	; 32
    143a:	41 93       	st	Z+, r20
    143c:	02 d0       	rcall	.+4      	; 0x1442 <__ultoa_invert+0x84>
    143e:	a9 f7       	brne	.-22     	; 0x142a <__ultoa_invert+0x6c>
    1440:	ea cf       	rjmp	.-44     	; 0x1416 <__ultoa_invert+0x58>
    1442:	b4 e0       	ldi	r27, 0x04	; 4
    1444:	a6 95       	lsr	r26
    1446:	97 95       	ror	r25
    1448:	87 95       	ror	r24
    144a:	77 95       	ror	r23
    144c:	67 95       	ror	r22
    144e:	ba 95       	dec	r27
    1450:	c9 f7       	brne	.-14     	; 0x1444 <__ultoa_invert+0x86>
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	61 05       	cpc	r22, r1
    1456:	71 05       	cpc	r23, r1
    1458:	08 95       	ret
    145a:	9b 01       	movw	r18, r22
    145c:	ac 01       	movw	r20, r24
    145e:	0a 2e       	mov	r0, r26
    1460:	06 94       	lsr	r0
    1462:	57 95       	ror	r21
    1464:	47 95       	ror	r20
    1466:	37 95       	ror	r19
    1468:	27 95       	ror	r18
    146a:	ba 95       	dec	r27
    146c:	c9 f7       	brne	.-14     	; 0x1460 <__ultoa_invert+0xa2>
    146e:	62 0f       	add	r22, r18
    1470:	73 1f       	adc	r23, r19
    1472:	84 1f       	adc	r24, r20
    1474:	95 1f       	adc	r25, r21
    1476:	a0 1d       	adc	r26, r0
    1478:	08 95       	ret

0000147a <_exit>:
    147a:	f8 94       	cli

0000147c <__stop_program>:
    147c:	ff cf       	rjmp	.-2      	; 0x147c <__stop_program>

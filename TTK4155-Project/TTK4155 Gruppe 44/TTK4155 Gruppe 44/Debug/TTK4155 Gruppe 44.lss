
TTK4155 Gruppe 44.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000210  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000136  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000198  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000048  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001a3  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000020  00000000  00000000  0000086b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 44 00 	call	0x88	; 0x88 <main>
  80:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <main>:

int main(void)
{
	//1 output, 0 input 
	
	TestAle();
  88:	0e 94 49 00 	call	0x92	; 0x92 <TestAle>
		
		printf(x);
		printf("\n");
		
	}*/
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	08 95       	ret

00000092 <TestAle>:
#include <avr/io.h>
#include <util/delay.h>
void TestAle()
{
	//inputs/outputs
	DDRA |= (1<<PA0);
  92:	d0 9a       	sbi	0x1a, 0	; 26
	//Does PE1(ALE) really need to be set to output?
	DDRE |= (1<<PE1);
  94:	31 9a       	sbi	0x06, 1	; 6
	
	
	
	PORTA |= (1<<PA0); //PA0 1
  96:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f e5       	ldi	r18, 0x5F	; 95
  9a:	8c ed       	ldi	r24, 0xDC	; 220
  9c:	9c e2       	ldi	r25, 0x2C	; 44
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <TestAle+0xc>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <TestAle+0x16>
  a8:	00 00       	nop
	_delay_ms(3000);
	PORTE |= (1<<PE1); //LE 1
  aa:	39 9a       	sbi	0x07, 1	; 7
	PORTE &= ~(1<<PE1);//LE 0
  ac:	39 98       	cbi	0x07, 1	; 7
  ae:	2f e5       	ldi	r18, 0x5F	; 95
  b0:	8c ed       	ldi	r24, 0xDC	; 220
  b2:	9c e2       	ldi	r25, 0x2C	; 44
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <TestAle+0x22>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <TestAle+0x2c>
  be:	00 00       	nop
	_delay_ms(3000);
	PORTA &= ~(1<<PA0); //PA0 0
  c0:	d8 98       	cbi	0x1b, 0	; 27
  c2:	2f e5       	ldi	r18, 0x5F	; 95
  c4:	8c ed       	ldi	r24, 0xDC	; 220
  c6:	9c e2       	ldi	r25, 0x2C	; 44
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <TestAle+0x36>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <TestAle+0x40>
  d2:	00 00       	nop
	_delay_ms(3000);
	PORTE |= (1<<PE1); //LE 1
  d4:	39 9a       	sbi	0x07, 1	; 7
	PORTE &= ~(1<<PE1);//LE 0
  d6:	39 98       	cbi	0x07, 1	; 7
  d8:	08 95       	ret

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>

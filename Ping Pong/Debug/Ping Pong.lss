
Ping Pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d0  00800100  00002604  00002698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002604  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  008002d0  008002d0  00002868  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ab0  00000000  00000000  00002a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a04  00000000  00000000  00004504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008b1  00000000  00000000  00004f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004b8  00000000  00000000  000057bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005cf  00000000  00000000  00005c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001213  00000000  00000000  00006243  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00007456  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__ctors_end>
       4:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       8:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      10:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      14:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      18:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      1c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      20:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      24:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      28:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      2c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      30:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      34:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      38:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      3c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      40:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      44:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      48:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      4c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      50:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      54:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      58:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      5c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      60:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      64:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      68:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      6c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	00 5c       	subi	r16, 0xC0	; 192
      a4:	00 00       	nop
      a6:	0c 00       	.word	0x000c	; ????
      a8:	0c 00       	.word	0x000c	; ????
      aa:	7c 28       	or	r7, r12
      ac:	7c 28       	or	r7, r12
      ae:	58 dc       	rcall	.-1872   	; 0xfffff960 <__eeprom_end+0xff7ef960>
      b0:	68 00       	.word	0x0068	; ????
      b2:	24 10       	cpse	r2, r4
      b4:	48 00       	.word	0x0048	; ????
      b6:	28 54       	subi	r18, 0x48	; 72
      b8:	28 40       	sbci	r18, 0x08	; 8
      ba:	00 0c       	add	r0, r0
      bc:	00 00       	nop
      be:	00 78       	andi	r16, 0x80	; 128
      c0:	84 00       	.word	0x0084	; ????
      c2:	84 78       	andi	r24, 0x84	; 132
      c4:	00 00       	nop
      c6:	54 38       	cpi	r21, 0x84	; 132
      c8:	54 00       	.word	0x0054	; ????
      ca:	10 7c       	andi	r17, 0xC0	; 192
      cc:	10 00       	.word	0x0010	; ????
      ce:	80 40       	sbci	r24, 0x00	; 0
      d0:	00 00       	nop
      d2:	10 10       	cpse	r1, r0
      d4:	10 00       	.word	0x0010	; ????
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	00 00       	nop
      da:	60 10       	cpse	r6, r0
      dc:	0c 00       	.word	0x000c	; ????
      de:	38 54       	subi	r19, 0x48	; 72
      e0:	38 00       	.word	0x0038	; ????
      e2:	48 7c       	andi	r20, 0xC8	; 200
      e4:	40 00       	.word	0x0040	; ????
      e6:	48 64       	ori	r20, 0x48	; 72
      e8:	58 00       	.word	0x0058	; ????
      ea:	44 54       	subi	r20, 0x44	; 68
      ec:	2c 00       	.word	0x002c	; ????
      ee:	1c 10       	cpse	r1, r12
      f0:	7c 00       	.word	0x007c	; ????
      f2:	5c 54       	subi	r21, 0x4C	; 76
      f4:	24 00       	.word	0x0024	; ????
      f6:	38 54       	subi	r19, 0x48	; 72
      f8:	24 00       	.word	0x0024	; ????
      fa:	64 14       	cp	r6, r4
      fc:	0c 00       	.word	0x000c	; ????
      fe:	68 54       	subi	r22, 0x48	; 72
     100:	2c 00       	.word	0x002c	; ????
     102:	48 54       	subi	r20, 0x48	; 72
     104:	38 00       	.word	0x0038	; ????
     106:	00 48       	sbci	r16, 0x80	; 128
     108:	00 00       	nop
     10a:	80 48       	sbci	r24, 0x80	; 128
     10c:	00 00       	nop
     10e:	10 28       	or	r1, r0
     110:	44 00       	.word	0x0044	; ????
     112:	28 28       	or	r2, r8
     114:	28 00       	.word	0x0028	; ????
     116:	44 28       	or	r4, r4
     118:	10 00       	.word	0x0010	; ????
     11a:	04 54       	subi	r16, 0x44	; 68
     11c:	08 00       	.word	0x0008	; ????
     11e:	38 44       	sbci	r19, 0x48	; 72
     120:	5c 00       	.word	0x005c	; ????
     122:	78 14       	cp	r7, r8
     124:	78 00       	.word	0x0078	; ????
     126:	7c 54       	subi	r23, 0x4C	; 76
     128:	28 00       	.word	0x0028	; ????
     12a:	38 44       	sbci	r19, 0x48	; 72
     12c:	28 00       	.word	0x0028	; ????
     12e:	7c 44       	sbci	r23, 0x4C	; 76
     130:	38 00       	.word	0x0038	; ????
     132:	7c 54       	subi	r23, 0x4C	; 76
     134:	44 00       	.word	0x0044	; ????
     136:	7c 14       	cp	r7, r12
     138:	04 00       	.word	0x0004	; ????
     13a:	38 44       	sbci	r19, 0x48	; 72
     13c:	74 00       	.word	0x0074	; ????
     13e:	7c 10       	cpse	r7, r12
     140:	7c 00       	.word	0x007c	; ????
     142:	44 7c       	andi	r20, 0xC4	; 196
     144:	44 00       	.word	0x0044	; ????
     146:	20 40       	sbci	r18, 0x00	; 0
     148:	3c 00       	.word	0x003c	; ????
     14a:	7c 10       	cpse	r7, r12
     14c:	6c 00       	.word	0x006c	; ????
     14e:	7c 40       	sbci	r23, 0x0C	; 12
     150:	40 00       	.word	0x0040	; ????
     152:	7c 18       	sub	r7, r12
     154:	7c 00       	.word	0x007c	; ????
     156:	78 10       	cpse	r7, r8
     158:	3c 00       	.word	0x003c	; ????
     15a:	38 44       	sbci	r19, 0x48	; 72
     15c:	38 00       	.word	0x0038	; ????
     15e:	7c 14       	cp	r7, r12
     160:	08 00       	.word	0x0008	; ????
     162:	38 44       	sbci	r19, 0x48	; 72
     164:	b8 00       	.word	0x00b8	; ????
     166:	7c 14       	cp	r7, r12
     168:	68 00       	.word	0x0068	; ????
     16a:	48 54       	subi	r20, 0x48	; 72
     16c:	24 00       	.word	0x0024	; ????
     16e:	04 7c       	andi	r16, 0xC4	; 196
     170:	04 00       	.word	0x0004	; ????
     172:	7c 40       	sbci	r23, 0x0C	; 12
     174:	7c 00       	.word	0x007c	; ????
     176:	3c 60       	ori	r19, 0x0C	; 12
     178:	3c 00       	.word	0x003c	; ????
     17a:	7c 30       	cpi	r23, 0x0C	; 12
     17c:	7c 00       	.word	0x007c	; ????
     17e:	6c 10       	cpse	r6, r12
     180:	6c 00       	.word	0x006c	; ????
     182:	0c 70       	andi	r16, 0x0C	; 12
     184:	0c 00       	.word	0x000c	; ????
     186:	64 54       	subi	r22, 0x44	; 68
     188:	4c 00       	.word	0x004c	; ????
     18a:	00 7c       	andi	r16, 0xC0	; 192
     18c:	44 00       	.word	0x0044	; ????
     18e:	0c 10       	cpse	r0, r12
     190:	60 00       	.word	0x0060	; ????
     192:	44 7c       	andi	r20, 0xC4	; 196
     194:	00 00       	nop
     196:	08 04       	cpc	r0, r8
     198:	08 00       	.word	0x0008	; ????
     19a:	80 80       	ld	r8, Z
     19c:	80 00       	.word	0x0080	; ????
     19e:	00 04       	cpc	r0, r0
     1a0:	08 00       	.word	0x0008	; ????
     1a2:	30 48       	sbci	r19, 0x80	; 128
     1a4:	78 00       	.word	0x0078	; ????
     1a6:	7c 48       	sbci	r23, 0x8C	; 140
     1a8:	30 00       	.word	0x0030	; ????
     1aa:	30 48       	sbci	r19, 0x80	; 128
     1ac:	48 00       	.word	0x0048	; ????
     1ae:	30 48       	sbci	r19, 0x80	; 128
     1b0:	7c 00       	.word	0x007c	; ????
     1b2:	30 68       	ori	r19, 0x80	; 128
     1b4:	50 00       	.word	0x0050	; ????
     1b6:	10 78       	andi	r17, 0x80	; 128
     1b8:	14 00       	.word	0x0014	; ????
     1ba:	90 a8       	ldd	r9, Z+48	; 0x30
     1bc:	78 00       	.word	0x0078	; ????
     1be:	7c 08       	sbc	r7, r12
     1c0:	70 00       	.word	0x0070	; ????
     1c2:	50 74       	andi	r21, 0x40	; 64
     1c4:	40 00       	.word	0x0040	; ????
     1c6:	80 80       	ld	r8, Z
     1c8:	74 00       	.word	0x0074	; ????
     1ca:	7c 10       	cpse	r7, r12
     1cc:	68 00       	.word	0x0068	; ????
     1ce:	44 7c       	andi	r20, 0xC4	; 196
     1d0:	40 00       	.word	0x0040	; ????
     1d2:	78 10       	cpse	r7, r8
     1d4:	78 00       	.word	0x0078	; ????
     1d6:	78 08       	sbc	r7, r8
     1d8:	70 00       	.word	0x0070	; ????
     1da:	30 48       	sbci	r19, 0x80	; 128
     1dc:	30 00       	.word	0x0030	; ????
     1de:	f8 28       	or	r15, r8
     1e0:	10 00       	.word	0x0010	; ????
     1e2:	30 48       	sbci	r19, 0x80	; 128
     1e4:	f8 00       	.word	0x00f8	; ????
     1e6:	78 10       	cpse	r7, r8
     1e8:	08 00       	.word	0x0008	; ????
     1ea:	50 58       	subi	r21, 0x80	; 128
     1ec:	28 00       	.word	0x0028	; ????
     1ee:	08 3c       	cpi	r16, 0xC8	; 200
     1f0:	48 00       	.word	0x0048	; ????
     1f2:	38 40       	sbci	r19, 0x08	; 8
     1f4:	78 00       	.word	0x0078	; ????
     1f6:	38 40       	sbci	r19, 0x08	; 8
     1f8:	38 00       	.word	0x0038	; ????
     1fa:	78 20       	and	r7, r8
     1fc:	78 00       	.word	0x0078	; ????
     1fe:	48 30       	cpi	r20, 0x08	; 8
     200:	48 00       	.word	0x0048	; ????
     202:	98 a0       	ldd	r9, Y+32	; 0x20
     204:	78 00       	.word	0x0078	; ????
     206:	48 68       	ori	r20, 0x88	; 136
     208:	58 00       	.word	0x0058	; ????
     20a:	10 78       	andi	r17, 0x80	; 128
     20c:	84 00       	.word	0x0084	; ????
     20e:	00 7c       	andi	r16, 0xC0	; 192
     210:	00 00       	nop
     212:	84 78       	andi	r24, 0x84	; 132
     214:	10 00       	.word	0x0010	; ????
     216:	08 04       	cpc	r0, r8
     218:	08 04       	cpc	r0, r8

0000021a <font5>:
     21a:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     22a:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     23a:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     24a:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     25a:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     26a:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     27a:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     28a:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     29a:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     2aa:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     2ba:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     2ca:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2da:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2ea:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2fa:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     30a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     31a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     32a:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     33a:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     34a:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     35a:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     36a:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     37a:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     38a:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     39a:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     3aa:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     3ba:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     3ca:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3da:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3ea:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003f5 <font8>:
	...
     3fd:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     40d:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     41d:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     42d:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     43d:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     44d:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     45d:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     46d:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     47d:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     48d:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     49d:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     4ad:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     4bd:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     4cd:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4dd:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4ed:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4fd:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     50d:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     51d:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     52d:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     53d:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     54d:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     55d:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     56d:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     57d:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     58d:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     59d:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     5ad:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     5bd:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     5cd:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5dd:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5ed:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5fd:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     60d:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     61d:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     62d:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     63d:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     64d:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     65d:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     66d:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     67d:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     68d:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     69d:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     6ad:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     6bd:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     6cd:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6dd:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006ee <__ctors_end>:
     6ee:	11 24       	eor	r1, r1
     6f0:	1f be       	out	0x3f, r1	; 63
     6f2:	cf ef       	ldi	r28, 0xFF	; 255
     6f4:	d4 e0       	ldi	r29, 0x04	; 4
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	cd bf       	out	0x3d, r28	; 61

000006fa <__do_copy_data>:
     6fa:	12 e0       	ldi	r17, 0x02	; 2
     6fc:	a0 e0       	ldi	r26, 0x00	; 0
     6fe:	b1 e0       	ldi	r27, 0x01	; 1
     700:	e4 e0       	ldi	r30, 0x04	; 4
     702:	f6 e2       	ldi	r31, 0x26	; 38
     704:	02 c0       	rjmp	.+4      	; 0x70a <__do_copy_data+0x10>
     706:	05 90       	lpm	r0, Z+
     708:	0d 92       	st	X+, r0
     70a:	a0 3d       	cpi	r26, 0xD0	; 208
     70c:	b1 07       	cpc	r27, r17
     70e:	d9 f7       	brne	.-10     	; 0x706 <__do_copy_data+0xc>

00000710 <__do_clear_bss>:
     710:	22 e0       	ldi	r18, 0x02	; 2
     712:	a0 ed       	ldi	r26, 0xD0	; 208
     714:	b2 e0       	ldi	r27, 0x02	; 2
     716:	01 c0       	rjmp	.+2      	; 0x71a <.do_clear_bss_start>

00000718 <.do_clear_bss_loop>:
     718:	1d 92       	st	X+, r1

0000071a <.do_clear_bss_start>:
     71a:	a8 3e       	cpi	r26, 0xE8	; 232
     71c:	b2 07       	cpc	r27, r18
     71e:	e1 f7       	brne	.-8      	; 0x718 <.do_clear_bss_loop>
     720:	0e 94 33 06 	call	0xc66	; 0xc66 <main>
     724:	0c 94 00 13 	jmp	0x2600	; 0x2600 <_exit>

00000728 <__bad_interrupt>:
     728:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000072c <adc_init>:
{
	adcConversionRunning = 0;
}*/

void adc_init(){
	clear_bit(DDRE, PE0); //Set DDR to input for interrupt flag
     72c:	30 98       	cbi	0x06, 0	; 6
     72e:	08 95       	ret

00000730 <adc_read>:
}

uint8_t adc_read(char channel)
{
	volatile char *ext_adc = (char *) 0x1400; 
	if (channel == 'x')
     730:	88 37       	cpi	r24, 0x78	; 120
     732:	21 f4       	brne	.+8      	; 0x73c <adc_read+0xc>
	{
		*ext_adc = 0b0100;
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	80 93 00 14 	sts	0x1400, r24
     73a:	11 c0       	rjmp	.+34     	; 0x75e <adc_read+0x2e>
	}
	
	else if (channel == 'y')
     73c:	89 37       	cpi	r24, 0x79	; 121
     73e:	21 f4       	brne	.+8      	; 0x748 <adc_read+0x18>
	{
		*ext_adc = 0b0101;
     740:	85 e0       	ldi	r24, 0x05	; 5
     742:	80 93 00 14 	sts	0x1400, r24
     746:	0b c0       	rjmp	.+22     	; 0x75e <adc_read+0x2e>
	}
	
	else if (channel == 'l')
     748:	8c 36       	cpi	r24, 0x6C	; 108
     74a:	21 f4       	brne	.+8      	; 0x754 <adc_read+0x24>
	{
		*ext_adc = 0b0110;
     74c:	86 e0       	ldi	r24, 0x06	; 6
     74e:	80 93 00 14 	sts	0x1400, r24
     752:	05 c0       	rjmp	.+10     	; 0x75e <adc_read+0x2e>
	}
	
	else if (channel == 'r')
     754:	82 37       	cpi	r24, 0x72	; 114
     756:	19 f4       	brne	.+6      	; 0x75e <adc_read+0x2e>
	{
		*ext_adc = 0b0111;
     758:	87 e0       	ldi	r24, 0x07	; 7
     75a:	80 93 00 14 	sts	0x1400, r24
	}
	while(test_bit(PINE, PE0));
     75e:	28 99       	sbic	0x05, 0	; 5
     760:	fe cf       	rjmp	.-4      	; 0x75e <adc_read+0x2e>
	return (uint8_t) *ext_adc;
     762:	80 91 00 14 	lds	r24, 0x1400
     766:	08 95       	ret

00000768 <joy_calibrate>:
	printf("Calibrating...\n");
	joy_calibrate();
	printf("Calibrated.\n");
}

void joy_calibrate(){
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
	xmean = adc_read('x');
     76c:	88 e7       	ldi	r24, 0x78	; 120
     76e:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	90 93 d9 02 	sts	0x02D9, r25
     778:	80 93 d8 02 	sts	0x02D8, r24
	ymean = adc_read('y');
     77c:	89 e7       	ldi	r24, 0x79	; 121
     77e:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	90 93 dd 02 	sts	0x02DD, r25
     788:	80 93 dc 02 	sts	0x02DC, r24
	printf("%d", test_bit(PINB, PB2));
     78c:	86 b3       	in	r24, 0x16	; 22
     78e:	84 70       	andi	r24, 0x04	; 4
     790:	1f 92       	push	r1
     792:	8f 93       	push	r24
     794:	86 e1       	ldi	r24, 0x16	; 22
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9f 93       	push	r25
     79a:	8f 93       	push	r24
     79c:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	while (test_bit(PINB, PB2))
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
	{
		x = adc_read('x');
		y = adc_read('y');
		if (x > xmax){
			xmax = x;
			printf("%d \n", xmax);
     7a8:	c9 e1       	ldi	r28, 0x19	; 25
     7aa:	d1 e0       	ldi	r29, 0x01	; 1

void joy_calibrate(){
	xmean = adc_read('x');
	ymean = adc_read('y');
	printf("%d", test_bit(PINB, PB2));
	while (test_bit(PINB, PB2))
     7ac:	74 c0       	rjmp	.+232    	; 0x896 <joy_calibrate+0x12e>
	{
		x = adc_read('x');
     7ae:	88 e7       	ldi	r24, 0x78	; 120
     7b0:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	90 93 d7 02 	sts	0x02D7, r25
     7ba:	80 93 d6 02 	sts	0x02D6, r24
		y = adc_read('y');
     7be:	89 e7       	ldi	r24, 0x79	; 121
     7c0:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	90 93 db 02 	sts	0x02DB, r25
     7ca:	80 93 da 02 	sts	0x02DA, r24
		if (x > xmax){
     7ce:	80 91 d6 02 	lds	r24, 0x02D6
     7d2:	90 91 d7 02 	lds	r25, 0x02D7
     7d6:	20 91 d2 02 	lds	r18, 0x02D2
     7da:	30 91 d3 02 	lds	r19, 0x02D3
     7de:	28 17       	cp	r18, r24
     7e0:	39 07       	cpc	r19, r25
     7e2:	74 f4       	brge	.+28     	; 0x800 <joy_calibrate+0x98>
			xmax = x;
     7e4:	90 93 d3 02 	sts	0x02D3, r25
     7e8:	80 93 d2 02 	sts	0x02D2, r24
			printf("%d \n", xmax);
     7ec:	9f 93       	push	r25
     7ee:	8f 93       	push	r24
     7f0:	df 93       	push	r29
     7f2:	cf 93       	push	r28
     7f4:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
		}
		if (y > ymax){
     800:	80 91 da 02 	lds	r24, 0x02DA
     804:	90 91 db 02 	lds	r25, 0x02DB
     808:	20 91 d0 02 	lds	r18, 0x02D0
     80c:	30 91 d1 02 	lds	r19, 0x02D1
     810:	28 17       	cp	r18, r24
     812:	39 07       	cpc	r19, r25
     814:	74 f4       	brge	.+28     	; 0x832 <joy_calibrate+0xca>
			ymax = y;
     816:	90 93 d1 02 	sts	0x02D1, r25
     81a:	80 93 d0 02 	sts	0x02D0, r24
			printf("%d \n", ymax);
     81e:	9f 93       	push	r25
     820:	8f 93       	push	r24
     822:	df 93       	push	r29
     824:	cf 93       	push	r28
     826:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
		}
		if (x < xmin){
     832:	80 91 d6 02 	lds	r24, 0x02D6
     836:	90 91 d7 02 	lds	r25, 0x02D7
     83a:	20 91 0c 01 	lds	r18, 0x010C
     83e:	30 91 0d 01 	lds	r19, 0x010D
     842:	82 17       	cp	r24, r18
     844:	93 07       	cpc	r25, r19
     846:	74 f4       	brge	.+28     	; 0x864 <joy_calibrate+0xfc>
			xmin = x;
     848:	90 93 0d 01 	sts	0x010D, r25
     84c:	80 93 0c 01 	sts	0x010C, r24
			printf("%d \n", xmin);
     850:	9f 93       	push	r25
     852:	8f 93       	push	r24
     854:	df 93       	push	r29
     856:	cf 93       	push	r28
     858:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
		}
		if (y < ymin){
     864:	80 91 da 02 	lds	r24, 0x02DA
     868:	90 91 db 02 	lds	r25, 0x02DB
     86c:	20 91 0a 01 	lds	r18, 0x010A
     870:	30 91 0b 01 	lds	r19, 0x010B
     874:	82 17       	cp	r24, r18
     876:	93 07       	cpc	r25, r19
     878:	74 f4       	brge	.+28     	; 0x896 <joy_calibrate+0x12e>
			ymin = y;
     87a:	90 93 0b 01 	sts	0x010B, r25
     87e:	80 93 0a 01 	sts	0x010A, r24
			printf("%d \n", ymin);
     882:	9f 93       	push	r25
     884:	8f 93       	push	r24
     886:	df 93       	push	r29
     888:	cf 93       	push	r28
     88a:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0

void joy_calibrate(){
	xmean = adc_read('x');
	ymean = adc_read('y');
	printf("%d", test_bit(PINB, PB2));
	while (test_bit(PINB, PB2))
     896:	b2 99       	sbic	0x16, 2	; 22
     898:	8a cf       	rjmp	.-236    	; 0x7ae <joy_calibrate+0x46>
		if (y < ymin){
			ymin = y;
			printf("%d \n", ymin);
		}
	}
}
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <joy_init>:
int xmin = 255;
int ymax = 0;
int ymin = 255;

void joy_init(){
	clear_bit(DDRB,PB2);	//Set joystick button pin to input
     8a0:	ba 98       	cbi	0x17, 2	; 23
	set_bit(PORTB,PB2);		//Set the internal pull-up resistor needed for the button
     8a2:	c2 9a       	sbi	0x18, 2	; 24
	printf("Calibrating...\n");
     8a4:	8e e1       	ldi	r24, 0x1E	; 30
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <puts>
	joy_calibrate();
     8ac:	0e 94 b4 03 	call	0x768	; 0x768 <joy_calibrate>
	printf("Calibrated.\n");
     8b0:	8d e2       	ldi	r24, 0x2D	; 45
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <puts>
     8b8:	08 95       	ret

000008ba <joy_get_position>:
			printf("%d \n", ymin);
		}
	}
}

Position joy_get_position(){
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <joy_get_position+0x6>
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <joy_get_position+0x8>
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <joy_get_position+0xa>
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
		x = adc_read('x');
     8c8:	88 e7       	ldi	r24, 0x78	; 120
     8ca:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	90 93 d7 02 	sts	0x02D7, r25
     8d4:	80 93 d6 02 	sts	0x02D6, r24
		y = adc_read('y');
     8d8:	89 e7       	ldi	r24, 0x79	; 121
     8da:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     8de:	e8 2f       	mov	r30, r24
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
		if (x > xmean){
     8e2:	80 91 d6 02 	lds	r24, 0x02D6
     8e6:	90 91 d7 02 	lds	r25, 0x02D7
     8ea:	20 91 d8 02 	lds	r18, 0x02D8
     8ee:	30 91 d9 02 	lds	r19, 0x02D9
     8f2:	28 17       	cp	r18, r24
     8f4:	39 07       	cpc	r19, r25
     8f6:	b4 f4       	brge	.+44     	; 0x924 <joy_get_position+0x6a>
			x = ((x - xmean) * 100) / (xmax - xmean);
     8f8:	ac 01       	movw	r20, r24
     8fa:	42 1b       	sub	r20, r18
     8fc:	53 0b       	sbc	r21, r19
     8fe:	64 e6       	ldi	r22, 0x64	; 100
     900:	64 9f       	mul	r22, r20
     902:	c0 01       	movw	r24, r0
     904:	65 9f       	mul	r22, r21
     906:	90 0d       	add	r25, r0
     908:	11 24       	eor	r1, r1
     90a:	60 91 d2 02 	lds	r22, 0x02D2
     90e:	70 91 d3 02 	lds	r23, 0x02D3
     912:	62 1b       	sub	r22, r18
     914:	73 0b       	sbc	r23, r19
     916:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__divmodhi4>
     91a:	70 93 d7 02 	sts	0x02D7, r23
     91e:	60 93 d6 02 	sts	0x02D6, r22
     922:	16 c0       	rjmp	.+44     	; 0x950 <joy_get_position+0x96>
		}
		else{
			x = ((x - xmean) * 100) / (xmean - xmin);
     924:	ac 01       	movw	r20, r24
     926:	42 1b       	sub	r20, r18
     928:	53 0b       	sbc	r21, r19
     92a:	64 e6       	ldi	r22, 0x64	; 100
     92c:	64 9f       	mul	r22, r20
     92e:	c0 01       	movw	r24, r0
     930:	65 9f       	mul	r22, r21
     932:	90 0d       	add	r25, r0
     934:	11 24       	eor	r1, r1
     936:	40 91 0c 01 	lds	r20, 0x010C
     93a:	50 91 0d 01 	lds	r21, 0x010D
     93e:	b9 01       	movw	r22, r18
     940:	64 1b       	sub	r22, r20
     942:	75 0b       	sbc	r23, r21
     944:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__divmodhi4>
     948:	70 93 d7 02 	sts	0x02D7, r23
     94c:	60 93 d6 02 	sts	0x02D6, r22
		}
		if (y > ymean){
     950:	60 91 dc 02 	lds	r22, 0x02DC
     954:	70 91 dd 02 	lds	r23, 0x02DD
     958:	6e 17       	cp	r22, r30
     95a:	7f 07       	cpc	r23, r31
     95c:	bc f4       	brge	.+46     	; 0x98c <joy_get_position+0xd2>
			y = ((y - ymean) * 100) / (ymax - ymean);
     95e:	e6 1b       	sub	r30, r22
     960:	f7 0b       	sbc	r31, r23
     962:	24 e6       	ldi	r18, 0x64	; 100
     964:	2e 9f       	mul	r18, r30
     966:	c0 01       	movw	r24, r0
     968:	2f 9f       	mul	r18, r31
     96a:	90 0d       	add	r25, r0
     96c:	11 24       	eor	r1, r1
     96e:	20 91 d0 02 	lds	r18, 0x02D0
     972:	30 91 d1 02 	lds	r19, 0x02D1
     976:	a9 01       	movw	r20, r18
     978:	46 1b       	sub	r20, r22
     97a:	57 0b       	sbc	r21, r23
     97c:	ba 01       	movw	r22, r20
     97e:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__divmodhi4>
     982:	70 93 db 02 	sts	0x02DB, r23
     986:	60 93 da 02 	sts	0x02DA, r22
     98a:	14 c0       	rjmp	.+40     	; 0x9b4 <joy_get_position+0xfa>
		}
		else{
			y = ((y - ymean)  * 100) / (ymean - ymin);
     98c:	e6 1b       	sub	r30, r22
     98e:	f7 0b       	sbc	r31, r23
     990:	24 e6       	ldi	r18, 0x64	; 100
     992:	2e 9f       	mul	r18, r30
     994:	c0 01       	movw	r24, r0
     996:	2f 9f       	mul	r18, r31
     998:	90 0d       	add	r25, r0
     99a:	11 24       	eor	r1, r1
     99c:	20 91 0a 01 	lds	r18, 0x010A
     9a0:	30 91 0b 01 	lds	r19, 0x010B
     9a4:	62 1b       	sub	r22, r18
     9a6:	73 0b       	sbc	r23, r19
     9a8:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__divmodhi4>
     9ac:	70 93 db 02 	sts	0x02DB, r23
     9b0:	60 93 da 02 	sts	0x02DA, r22
		}
		
		Position pos;
		pos.x = x;
		pos.y = y;
     9b4:	40 91 da 02 	lds	r20, 0x02DA
     9b8:	80 91 db 02 	lds	r24, 0x02DB
		pos.z= !test_bit(PINB, PB2);
     9bc:	66 b3       	in	r22, 0x16	; 22
		return pos;
     9be:	20 91 d6 02 	lds	r18, 0x02D6
     9c2:	90 91 d7 02 	lds	r25, 0x02D7
     9c6:	29 83       	std	Y+1, r18	; 0x01
     9c8:	9a 83       	std	Y+2, r25	; 0x02
     9ca:	4b 83       	std	Y+3, r20	; 0x03
     9cc:	8c 83       	std	Y+4, r24	; 0x04
		}
		
		Position pos;
		pos.x = x;
		pos.y = y;
		pos.z= !test_bit(PINB, PB2);
     9ce:	66 95       	lsr	r22
     9d0:	66 95       	lsr	r22
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	68 27       	eor	r22, r24
     9d6:	61 70       	andi	r22, 0x01	; 1
		return pos;
     9d8:	6d 83       	std	Y+5, r22	; 0x05
     9da:	1e 82       	std	Y+6, r1	; 0x06
     9dc:	39 2f       	mov	r19, r25
     9de:	5c 81       	ldd	r21, Y+4	; 0x04
     9e0:	70 e0       	ldi	r23, 0x00	; 0
}
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	26 96       	adiw	r28, 0x06	; 6
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <joy_get_position_polar>:
		}
	}
	return NEUTRAL;
} 

Position_polar joy_get_position_polar(){
     9f8:	8f 92       	push	r8
     9fa:	9f 92       	push	r9
     9fc:	af 92       	push	r10
     9fe:	bf 92       	push	r11
     a00:	cf 92       	push	r12
     a02:	df 92       	push	r13
     a04:	ef 92       	push	r14
     a06:	ff 92       	push	r15
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	00 d0       	rcall	.+0      	; 0xa0e <joy_get_position_polar+0x16>
     a0e:	00 d0       	rcall	.+0      	; 0xa10 <joy_get_position_polar+0x18>
     a10:	00 d0       	rcall	.+0      	; 0xa12 <joy_get_position_polar+0x1a>
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
	Position pos_cart = joy_get_position();
     a16:	0e 94 5d 04 	call	0x8ba	; 0x8ba <joy_get_position>
     a1a:	29 83       	std	Y+1, r18	; 0x01
     a1c:	3a 83       	std	Y+2, r19	; 0x02
     a1e:	4b 83       	std	Y+3, r20	; 0x03
     a20:	5c 83       	std	Y+4, r21	; 0x04
     a22:	89 80       	ldd	r8, Y+1	; 0x01
     a24:	9a 80       	ldd	r9, Y+2	; 0x02
     a26:	ab 80       	ldd	r10, Y+3	; 0x03
     a28:	bc 80       	ldd	r11, Y+4	; 0x04
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     a2a:	b4 01       	movw	r22, r8
     a2c:	88 27       	eor	r24, r24
     a2e:	77 fd       	sbrc	r23, 7
     a30:	80 95       	com	r24
     a32:	98 2f       	mov	r25, r24
     a34:	0e 94 af 0b 	call	0x175e	; 0x175e <__floatsisf>
     a38:	6b 01       	movw	r12, r22
     a3a:	7c 01       	movw	r14, r24
     a3c:	b5 01       	movw	r22, r10
     a3e:	88 27       	eor	r24, r24
     a40:	77 fd       	sbrc	r23, 7
     a42:	80 95       	com	r24
     a44:	98 2f       	mov	r25, r24
     a46:	0e 94 af 0b 	call	0x175e	; 0x175e <__floatsisf>
     a4a:	a7 01       	movw	r20, r14
     a4c:	96 01       	movw	r18, r12
     a4e:	0e 94 c3 0a 	call	0x1586	; 0x1586 <atan2>
     a52:	6b 01       	movw	r12, r22
     a54:	7c 01       	movw	r14, r24
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     a56:	88 9c       	mul	r8, r8
     a58:	b0 01       	movw	r22, r0
     a5a:	89 9c       	mul	r8, r9
     a5c:	70 0d       	add	r23, r0
     a5e:	70 0d       	add	r23, r0
     a60:	11 24       	eor	r1, r1
     a62:	aa 9c       	mul	r10, r10
     a64:	c0 01       	movw	r24, r0
     a66:	ab 9c       	mul	r10, r11
     a68:	90 0d       	add	r25, r0
     a6a:	90 0d       	add	r25, r0
     a6c:	11 24       	eor	r1, r1
     a6e:	68 0f       	add	r22, r24
     a70:	79 1f       	adc	r23, r25
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 ad 0b 	call	0x175a	; 0x175a <__floatunsisf>
     a7a:	0e 94 ce 0c 	call	0x199c	; 0x199c <sqrt>
     a7e:	4b 01       	movw	r8, r22
     a80:	5c 01       	movw	r10, r24
} 

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     a82:	20 ee       	ldi	r18, 0xE0	; 224
     a84:	3e e2       	ldi	r19, 0x2E	; 46
     a86:	45 e6       	ldi	r20, 0x65	; 101
     a88:	52 e4       	ldi	r21, 0x42	; 66
     a8a:	c7 01       	movw	r24, r14
     a8c:	b6 01       	movw	r22, r12
     a8e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__mulsf3>
     a92:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__fixsfsi>
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
	return pos_pol; 
     a96:	6b 01       	movw	r12, r22

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     a98:	c5 01       	movw	r24, r10
     a9a:	b4 01       	movw	r22, r8
     a9c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__fixsfsi>
	return pos_pol; 
     aa0:	7b 01       	movw	r14, r22
}
     aa2:	c7 01       	movw	r24, r14
     aa4:	b6 01       	movw	r22, r12
     aa6:	26 96       	adiw	r28, 0x06	; 6
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	f8 94       	cli
     aac:	de bf       	out	0x3e, r29	; 62
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	cd bf       	out	0x3d, r28	; 61
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	ff 90       	pop	r15
     ab8:	ef 90       	pop	r14
     aba:	df 90       	pop	r13
     abc:	cf 90       	pop	r12
     abe:	bf 90       	pop	r11
     ac0:	af 90       	pop	r10
     ac2:	9f 90       	pop	r9
     ac4:	8f 90       	pop	r8
     ac6:	08 95       	ret

00000ac8 <joy_get_direction>:
		pos.z= !test_bit(PINB, PB2);
		return pos;
}

Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
     ac8:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <joy_get_position_polar>
     acc:	9b 01       	movw	r18, r22
	
	if(pos_pol.amplitude > 80){
     ace:	81 35       	cpi	r24, 0x51	; 81
     ad0:	91 05       	cpc	r25, r1
     ad2:	7c f0       	brlt	.+30     	; 0xaf2 <joy_get_direction+0x2a>
		if (pos_pol.angle > 135)
     ad4:	68 38       	cpi	r22, 0x88	; 136
     ad6:	71 05       	cpc	r23, r1
     ad8:	74 f4       	brge	.+28     	; 0xaf6 <joy_get_direction+0x2e>
		{
			return LEFT;
		}
		else if(pos_pol.angle > 45)
     ada:	6e 32       	cpi	r22, 0x2E	; 46
     adc:	71 05       	cpc	r23, r1
     ade:	6c f4       	brge	.+26     	; 0xafa <joy_get_direction+0x32>
		{
			return UP;
		}
		else if(pos_pol.angle > -45)
     ae0:	24 3d       	cpi	r18, 0xD4	; 212
     ae2:	8f ef       	ldi	r24, 0xFF	; 255
     ae4:	38 07       	cpc	r19, r24
     ae6:	5c f4       	brge	.+22     	; 0xafe <joy_get_direction+0x36>
		{
			return RIGHT;
		}
		else if(pos_pol.angle > -135)
     ae8:	2a 37       	cpi	r18, 0x7A	; 122
     aea:	3f 4f       	sbci	r19, 0xFF	; 255
     aec:	54 f0       	brlt	.+20     	; 0xb02 <joy_get_direction+0x3a>
		{
			return DOWN;
     aee:	83 e0       	ldi	r24, 0x03	; 3
     af0:	08 95       	ret
		else
		{
			return LEFT;
		}
	}
	return NEUTRAL;
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	08 95       	ret
	Position_polar pos_pol  = joy_get_position_polar();
	
	if(pos_pol.amplitude > 80){
		if (pos_pol.angle > 135)
		{
			return LEFT;
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	08 95       	ret
		}
		else if(pos_pol.angle > 45)
		{
			return UP;
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	08 95       	ret
		}
		else if(pos_pol.angle > -45)
		{
			return RIGHT;
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	08 95       	ret
		{
			return DOWN;
		}
		else
		{
			return LEFT;
     b02:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	return NEUTRAL;
} 
     b04:	08 95       	ret

00000b06 <joy_print>:
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
	return pos_pol; 
}

void joy_print(int all){
     b06:	cf 92       	push	r12
     b08:	df 92       	push	r13
     b0a:	ef 92       	push	r14
     b0c:	ff 92       	push	r15
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	00 d0       	rcall	.+0      	; 0xb18 <joy_print+0x12>
     b18:	00 d0       	rcall	.+0      	; 0xb1a <joy_print+0x14>
     b1a:	00 d0       	rcall	.+0      	; 0xb1c <joy_print+0x16>
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
	if(all){
     b20:	89 2b       	or	r24, r25
     b22:	29 f1       	breq	.+74     	; 0xb6e <joy_print+0x68>
		printf("x = ");
     b24:	89 e3       	ldi	r24, 0x39	; 57
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	9f 93       	push	r25
     b2a:	8f 93       	push	r24
     b2c:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
		printf("%d  ", adc_read('x'));
     b30:	88 e7       	ldi	r24, 0x78	; 120
     b32:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     b36:	1f 92       	push	r1
     b38:	8f 93       	push	r24
     b3a:	0e e3       	ldi	r16, 0x3E	; 62
     b3c:	11 e0       	ldi	r17, 0x01	; 1
     b3e:	1f 93       	push	r17
     b40:	0f 93       	push	r16
     b42:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
		
		printf("y = ");
     b46:	83 e4       	ldi	r24, 0x43	; 67
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	9f 93       	push	r25
     b4c:	8f 93       	push	r24
     b4e:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
		printf("%d  ", adc_read('y'));
     b52:	89 e7       	ldi	r24, 0x79	; 121
     b54:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     b58:	1f 92       	push	r1
     b5a:	8f 93       	push	r24
     b5c:	1f 93       	push	r17
     b5e:	0f 93       	push	r16
     b60:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	f8 94       	cli
     b68:	de bf       	out	0x3e, r29	; 62
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	cd bf       	out	0x3d, r28	; 61
	}
	
	Position pos = joy_get_position();
     b6e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <joy_get_position>
     b72:	29 83       	std	Y+1, r18	; 0x01
     b74:	3a 83       	std	Y+2, r19	; 0x02
     b76:	4b 83       	std	Y+3, r20	; 0x03
     b78:	5c 83       	std	Y+4, r21	; 0x04
     b7a:	6d 83       	std	Y+5, r22	; 0x05
     b7c:	7e 83       	std	Y+6, r23	; 0x06
	Position_polar pos_pol = joy_get_position_polar();
     b7e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <joy_get_position_polar>
     b82:	f6 2e       	mov	r15, r22
     b84:	e7 2e       	mov	r14, r23
     b86:	d8 2e       	mov	r13, r24
     b88:	c9 2e       	mov	r12, r25
	
	printf("X = ");
     b8a:	28 e4       	ldi	r18, 0x48	; 72
     b8c:	31 e0       	ldi	r19, 0x01	; 1
     b8e:	3f 93       	push	r19
     b90:	2f 93       	push	r18
     b92:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	printf("%d  ", pos.x);
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	8f 93       	push	r24
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	8f 93       	push	r24
     b9e:	0e e3       	ldi	r16, 0x3E	; 62
     ba0:	11 e0       	ldi	r17, 0x01	; 1
     ba2:	1f 93       	push	r17
     ba4:	0f 93       	push	r16
     ba6:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	
	printf("Y = ");
     baa:	2d e4       	ldi	r18, 0x4D	; 77
     bac:	31 e0       	ldi	r19, 0x01	; 1
     bae:	3f 93       	push	r19
     bb0:	2f 93       	push	r18
     bb2:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	printf("%d  ", pos.y);
     bb6:	8c 81       	ldd	r24, Y+4	; 0x04
     bb8:	8f 93       	push	r24
     bba:	8b 81       	ldd	r24, Y+3	; 0x03
     bbc:	8f 93       	push	r24
     bbe:	1f 93       	push	r17
     bc0:	0f 93       	push	r16
     bc2:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	
	printf("A = ");
     bc6:	22 e5       	ldi	r18, 0x52	; 82
     bc8:	31 e0       	ldi	r19, 0x01	; 1
     bca:	3f 93       	push	r19
     bcc:	2f 93       	push	r18
     bce:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	printf("%d  ", pos_pol.amplitude);
     bd2:	cf 92       	push	r12
     bd4:	df 92       	push	r13
     bd6:	1f 93       	push	r17
     bd8:	0f 93       	push	r16
     bda:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	
	printf("theta = ");
     bde:	87 e5       	ldi	r24, 0x57	; 87
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	9f 93       	push	r25
     be4:	8f 93       	push	r24
     be6:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	printf("%d  ", pos_pol.angle);
     bea:	ef 92       	push	r14
     bec:	ff 92       	push	r15
     bee:	1f 93       	push	r17
     bf0:	0f 93       	push	r16
     bf2:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	
	printf("Direction = ");
     bf6:	80 e6       	ldi	r24, 0x60	; 96
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	9f 93       	push	r25
     bfc:	8f 93       	push	r24
     bfe:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	printf("%d  ", joy_get_direction());
     c02:	0e 94 64 05 	call	0xac8	; 0xac8 <joy_get_direction>
     c06:	28 2f       	mov	r18, r24
     c08:	33 27       	eor	r19, r19
     c0a:	27 fd       	sbrc	r18, 7
     c0c:	30 95       	com	r19
     c0e:	3f 93       	push	r19
     c10:	8f 93       	push	r24
     c12:	1f 93       	push	r17
     c14:	0f 93       	push	r16
     c16:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	
	printf("Middle button= ");
     c1a:	8d e6       	ldi	r24, 0x6D	; 109
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	9f 93       	push	r25
     c20:	8f 93       	push	r24
     c22:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	printf("%d  ", pos.z);
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	8e 81       	ldd	r24, Y+6	; 0x06
     c32:	8f 93       	push	r24
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	8f 93       	push	r24
     c38:	1f 93       	push	r17
     c3a:	0f 93       	push	r16
     c3c:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
	
     c48:	26 96       	adiw	r28, 0x06	; 6
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	df 90       	pop	r13
     c62:	cf 90       	pop	r12
     c64:	08 95       	ret

00000c66 <main>:

//1 output, 0 input

int main(void)
{
	MCUCR |= (1<<SRE);		//Enable external memory
     c66:	85 b7       	in	r24, 0x35	; 53
     c68:	80 68       	ori	r24, 0x80	; 128
     c6a:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     c6c:	80 b7       	in	r24, 0x30	; 48
     c6e:	80 62       	ori	r24, 0x20	; 32
     c70:	80 bf       	out	0x30, r24	; 48
	
	//Initialization
	uart_init(9600);
     c72:	80 e8       	ldi	r24, 0x80	; 128
     c74:	95 e2       	ldi	r25, 0x25	; 37
     c76:	0e 94 83 0a 	call	0x1506	; 0x1506 <uart_init>
	adc_init();
     c7a:	0e 94 96 03 	call	0x72c	; 0x72c <adc_init>
	oled_init();
     c7e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <oled_init>
	joy_init();
     c82:	0e 94 50 04 	call	0x8a0	; 0x8a0 <joy_init>
	touch_init();
     c86:	0e 94 9d 09 	call	0x133a	; 0x133a <touch_init>
	
	oled_print_string("New Ger",0,0,8,0);
     c8a:	00 e0       	ldi	r16, 0x00	; 0
     c8c:	10 e0       	ldi	r17, 0x00	; 0
     c8e:	28 e0       	ldi	r18, 0x08	; 8
     c90:	40 e0       	ldi	r20, 0x00	; 0
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	8d e7       	ldi	r24, 0x7D	; 125
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	0e 94 58 07 	call	0xeb0	; 0xeb0 <oled_print_string>
	oled_print_string("High score",0,1,8,0);
     c9c:	28 e0       	ldi	r18, 0x08	; 8
     c9e:	41 e0       	ldi	r20, 0x01	; 1
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	85 e8       	ldi	r24, 0x85	; 133
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	0e 94 58 07 	call	0xeb0	; 0xeb0 <oled_print_string>
	oled_print_string("Options",0,2,8,0);
     caa:	28 e0       	ldi	r18, 0x08	; 8
     cac:	42 e0       	ldi	r20, 0x02	; 2
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	80 e9       	ldi	r24, 0x90	; 144
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <oled_print_string>
	oled_refresh();
     cb8:	0e 94 54 08 	call	0x10a8	; 0x10a8 <oled_refresh>
	oled_draw_pixel(50,800);
     cbc:	60 e2       	ldi	r22, 0x20	; 32
     cbe:	73 e0       	ldi	r23, 0x03	; 3
     cc0:	82 e3       	ldi	r24, 0x32	; 50
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 8c 08 	call	0x1118	; 0x1118 <oled_draw_pixel>
	oled_clear_pixel(1,2);
     cc8:	62 e0       	ldi	r22, 0x02	; 2
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <oled_clear_pixel>
	oled_refresh();
     cd4:	0e 94 54 08 	call	0x10a8	; 0x10a8 <oled_refresh>
	
	sram_test();
     cd8:	0e 94 18 09 	call	0x1230	; 0x1230 <sram_test>
	
	while (1)
	{
		joy_print(0);
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 83 05 	call	0xb06	; 0xb06 <joy_print>
		touch_print(0);
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <touch_print>
		printf("\n");
     cec:	8a e0       	ldi	r24, 0x0A	; 10
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <putchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cf4:	8f ef       	ldi	r24, 0xFF	; 255
     cf6:	9f e2       	ldi	r25, 0x2F	; 47
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	f1 f7       	brne	.-4      	; 0xcf8 <main+0x92>
     cfc:	00 c0       	rjmp	.+0      	; 0xcfe <main+0x98>
     cfe:	00 00       	nop
     d00:	ed cf       	rjmp	.-38     	; 0xcdc <main+0x76>

00000d02 <oled_write_data>:
void oled_write_command(char command){
	*oled_command = command;
}

void oled_write_data(char data){
	if(doublebuffering){
     d02:	20 91 0e 01 	lds	r18, 0x010E
     d06:	30 91 0f 01 	lds	r19, 0x010F
     d0a:	23 2b       	or	r18, r19
     d0c:	f9 f0       	breq	.+62     	; 0xd4c <oled_write_data+0x4a>
		if (oled_back_buffer_index > 1023){
     d0e:	20 91 d4 02 	lds	r18, 0x02D4
     d12:	30 91 d5 02 	lds	r19, 0x02D5
     d16:	21 15       	cp	r18, r1
     d18:	94 e0       	ldi	r25, 0x04	; 4
     d1a:	39 07       	cpc	r19, r25
     d1c:	2c f0       	brlt	.+10     	; 0xd28 <oled_write_data+0x26>
			printf("Outside of screen!\n");
     d1e:	88 e9       	ldi	r24, 0x98	; 152
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <puts>
			return -1;
     d26:	08 95       	ret
		}
		oled_back_buffer[oled_back_buffer_index] = data;
     d28:	40 91 12 01 	lds	r20, 0x0112
     d2c:	50 91 13 01 	lds	r21, 0x0113
     d30:	fa 01       	movw	r30, r20
     d32:	e2 0f       	add	r30, r18
     d34:	f3 1f       	adc	r31, r19
     d36:	80 83       	st	Z, r24
		oled_back_buffer_index++;	
     d38:	80 91 d4 02 	lds	r24, 0x02D4
     d3c:	90 91 d5 02 	lds	r25, 0x02D5
     d40:	01 96       	adiw	r24, 0x01	; 1
     d42:	90 93 d5 02 	sts	0x02D5, r25
     d46:	80 93 d4 02 	sts	0x02D4, r24
     d4a:	08 95       	ret
	}
	else{
		*oled_front_buffer = data;
     d4c:	e0 91 10 01 	lds	r30, 0x0110
     d50:	f0 91 11 01 	lds	r31, 0x0111
     d54:	80 83       	st	Z, r24
     d56:	08 95       	ret

00000d58 <oled_print_char>:
			oled_goto_line(line);
		}
	}
}

void oled_print_char(char character, uint8_t font_size, int invert){
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
	int font_address;
	if (font_size == 8){
     d64:	68 30       	cpi	r22, 0x08	; 8
     d66:	59 f4       	brne	.+22     	; 0xd7e <oled_print_char+0x26>
		font_address = &font8[character-' '];
     d68:	08 2f       	mov	r16, r24
     d6a:	10 e0       	ldi	r17, 0x00	; 0
     d6c:	00 0f       	add	r16, r16
     d6e:	11 1f       	adc	r17, r17
     d70:	00 0f       	add	r16, r16
     d72:	11 1f       	adc	r17, r17
     d74:	00 0f       	add	r16, r16
     d76:	11 1f       	adc	r17, r17
     d78:	0b 50       	subi	r16, 0x0B	; 11
     d7a:	1d 4f       	sbci	r17, 0xFD	; 253
     d7c:	1a c0       	rjmp	.+52     	; 0xdb2 <oled_print_char+0x5a>
	}
	else if (font_size == 5){
     d7e:	65 30       	cpi	r22, 0x05	; 5
     d80:	71 f4       	brne	.+28     	; 0xd9e <oled_print_char+0x46>
		font_address = &font5[character-' '];
     d82:	08 2f       	mov	r16, r24
     d84:	10 e0       	ldi	r17, 0x00	; 0
     d86:	00 52       	subi	r16, 0x20	; 32
     d88:	11 09       	sbc	r17, r1
     d8a:	c8 01       	movw	r24, r16
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	08 0f       	add	r16, r24
     d96:	19 1f       	adc	r17, r25
     d98:	06 5e       	subi	r16, 0xE6	; 230
     d9a:	1d 4f       	sbci	r17, 0xFD	; 253
     d9c:	0a c0       	rjmp	.+20     	; 0xdb2 <oled_print_char+0x5a>
	}
	else if (font_size == 4){
     d9e:	64 30       	cpi	r22, 0x04	; 4
     da0:	41 f4       	brne	.+16     	; 0xdb2 <oled_print_char+0x5a>
		font_address = &font4[character-' '];
     da2:	08 2f       	mov	r16, r24
     da4:	10 e0       	ldi	r17, 0x00	; 0
     da6:	00 0f       	add	r16, r16
     da8:	11 1f       	adc	r17, r17
     daa:	00 0f       	add	r16, r16
     dac:	11 1f       	adc	r17, r17
     dae:	02 5e       	subi	r16, 0xE2	; 226
     db0:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	if(!invert){
     db2:	45 2b       	or	r20, r21
     db4:	31 f0       	breq	.+12     	; 0xdc2 <oled_print_char+0x6a>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
     db6:	e6 2e       	mov	r14, r22
     db8:	f1 2c       	mov	r15, r1
     dba:	1e 14       	cp	r1, r14
     dbc:	1f 04       	cpc	r1, r15
     dbe:	9c f0       	brlt	.+38     	; 0xde6 <oled_print_char+0x8e>
     dc0:	1f c0       	rjmp	.+62     	; 0xe00 <oled_print_char+0xa8>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
     dc2:	e6 2e       	mov	r14, r22
     dc4:	f1 2c       	mov	r15, r1
     dc6:	1e 14       	cp	r1, r14
     dc8:	1f 04       	cpc	r1, r15
     dca:	d4 f4       	brge	.+52     	; 0xe00 <oled_print_char+0xa8>
     dcc:	c0 e0       	ldi	r28, 0x00	; 0
     dce:	d0 e0       	ldi	r29, 0x00	; 0
     dd0:	fe 01       	movw	r30, r28
     dd2:	e0 0f       	add	r30, r16
     dd4:	f1 1f       	adc	r31, r17
			oled_write_data(pgm_read_byte(font_address + i));
     dd6:	84 91       	lpm	r24, Z
     dd8:	0e 94 81 06 	call	0xd02	; 0xd02 <oled_write_data>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
     ddc:	21 96       	adiw	r28, 0x01	; 1
     dde:	ce 15       	cp	r28, r14
     de0:	df 05       	cpc	r29, r15
     de2:	b4 f3       	brlt	.-20     	; 0xdd0 <oled_print_char+0x78>
     de4:	0d c0       	rjmp	.+26     	; 0xe00 <oled_print_char+0xa8>
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
     de6:	c0 e0       	ldi	r28, 0x00	; 0
     de8:	d0 e0       	ldi	r29, 0x00	; 0
     dea:	fe 01       	movw	r30, r28
     dec:	e0 0f       	add	r30, r16
     dee:	f1 1f       	adc	r31, r17
			oled_write_data(~pgm_read_byte(font_address + i));
     df0:	84 91       	lpm	r24, Z
     df2:	80 95       	com	r24
     df4:	0e 94 81 06 	call	0xd02	; 0xd02 <oled_write_data>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
     df8:	21 96       	adiw	r28, 0x01	; 1
     dfa:	ce 15       	cp	r28, r14
     dfc:	df 05       	cpc	r29, r15
     dfe:	ac f3       	brlt	.-22     	; 0xdea <oled_print_char+0x92>
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	ef 90       	pop	r14
     e0c:	08 95       	ret

00000e0e <oled_goto_line>:
		*oled_front_buffer = data;
	}	
}

void oled_goto_line(int line){
	if(doublebuffering){
     e0e:	40 91 0e 01 	lds	r20, 0x010E
     e12:	50 91 0f 01 	lds	r21, 0x010F
     e16:	45 2b       	or	r20, r21
     e18:	d1 f0       	breq	.+52     	; 0xe4e <oled_goto_line+0x40>
		oled_back_buffer_index = oled_back_buffer_index % 128 + line*128;	
     e1a:	20 91 d4 02 	lds	r18, 0x02D4
     e1e:	30 91 d5 02 	lds	r19, 0x02D5
     e22:	2f 77       	andi	r18, 0x7F	; 127
     e24:	30 78       	andi	r19, 0x80	; 128
     e26:	33 23       	and	r19, r19
     e28:	34 f4       	brge	.+12     	; 0xe36 <oled_goto_line+0x28>
     e2a:	21 50       	subi	r18, 0x01	; 1
     e2c:	31 09       	sbc	r19, r1
     e2e:	20 68       	ori	r18, 0x80	; 128
     e30:	3f 6f       	ori	r19, 0xFF	; 255
     e32:	2f 5f       	subi	r18, 0xFF	; 255
     e34:	3f 4f       	sbci	r19, 0xFF	; 255
     e36:	96 95       	lsr	r25
     e38:	98 2f       	mov	r25, r24
     e3a:	88 27       	eor	r24, r24
     e3c:	97 95       	ror	r25
     e3e:	87 95       	ror	r24
     e40:	28 0f       	add	r18, r24
     e42:	39 1f       	adc	r19, r25
     e44:	30 93 d5 02 	sts	0x02D5, r19
     e48:	20 93 d4 02 	sts	0x02D4, r18
     e4c:	08 95       	ret
	}
	else{
		oled_write_command(0xB0 + line);
     e4e:	80 55       	subi	r24, 0x50	; 80
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
     e50:	e0 91 14 01 	lds	r30, 0x0114
     e54:	f0 91 15 01 	lds	r31, 0x0115
     e58:	80 83       	st	Z, r24
     e5a:	08 95       	ret

00000e5c <oled_goto_column>:
		oled_write_command(0xB0 + line);
	}
}

void oled_goto_column(int column){ 
	if(doublebuffering){
     e5c:	20 91 0e 01 	lds	r18, 0x010E
     e60:	30 91 0f 01 	lds	r19, 0x010F
     e64:	23 2b       	or	r18, r19
     e66:	c1 f0       	breq	.+48     	; 0xe98 <oled_goto_column+0x3c>
		oled_back_buffer_index = oled_back_buffer_index - oled_back_buffer_index % 128 + column;
     e68:	40 91 d4 02 	lds	r20, 0x02D4
     e6c:	50 91 d5 02 	lds	r21, 0x02D5
     e70:	9a 01       	movw	r18, r20
     e72:	2f 77       	andi	r18, 0x7F	; 127
     e74:	30 78       	andi	r19, 0x80	; 128
     e76:	33 23       	and	r19, r19
     e78:	34 f4       	brge	.+12     	; 0xe86 <oled_goto_column+0x2a>
     e7a:	21 50       	subi	r18, 0x01	; 1
     e7c:	31 09       	sbc	r19, r1
     e7e:	20 68       	ori	r18, 0x80	; 128
     e80:	3f 6f       	ori	r19, 0xFF	; 255
     e82:	2f 5f       	subi	r18, 0xFF	; 255
     e84:	3f 4f       	sbci	r19, 0xFF	; 255
     e86:	42 1b       	sub	r20, r18
     e88:	53 0b       	sbc	r21, r19
     e8a:	84 0f       	add	r24, r20
     e8c:	95 1f       	adc	r25, r21
     e8e:	90 93 d5 02 	sts	0x02D5, r25
     e92:	80 93 d4 02 	sts	0x02D4, r24
     e96:	08 95       	ret
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
     e98:	e0 91 14 01 	lds	r30, 0x0114
     e9c:	f0 91 15 01 	lds	r31, 0x0115
     ea0:	10 82       	st	Z, r1
     ea2:	e0 91 14 01 	lds	r30, 0x0114
     ea6:	f0 91 15 01 	lds	r31, 0x0115
     eaa:	80 e1       	ldi	r24, 0x10	; 16
     eac:	80 83       	st	Z, r24
     eae:	08 95       	ret

00000eb0 <oled_print_string>:
	oled_write_command(0xa6); //set normal display
	oled_write_command(0xaf); // display on
	oled_clear_screen(); //Sets all buffer data to 0
}

void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
     eb0:	6f 92       	push	r6
     eb2:	7f 92       	push	r7
     eb4:	8f 92       	push	r8
     eb6:	9f 92       	push	r9
     eb8:	af 92       	push	r10
     eba:	bf 92       	push	r11
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	ec 01       	movw	r28, r24
     ece:	96 2e       	mov	r9, r22
     ed0:	74 2e       	mov	r7, r20
     ed2:	82 2e       	mov	r8, r18
	oled_goto_column(column);
     ed4:	86 2f       	mov	r24, r22
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 2e 07 	call	0xe5c	; 0xe5c <oled_goto_column>
	oled_goto_line(line);
     edc:	87 2d       	mov	r24, r7
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 07 07 	call	0xe0e	; 0xe0e <oled_goto_line>
	
	int length = strlen(string);
     ee4:	fe 01       	movw	r30, r28
     ee6:	01 90       	ld	r0, Z+
     ee8:	00 20       	and	r0, r0
     eea:	e9 f7       	brne	.-6      	; 0xee6 <oled_print_string+0x36>
     eec:	31 97       	sbiw	r30, 0x01	; 1
     eee:	6f 01       	movw	r12, r30
     ef0:	cc 1a       	sub	r12, r28
     ef2:	dd 0a       	sbc	r13, r29
	for (int i = 0; i < length; i++){
     ef4:	1c 14       	cp	r1, r12
     ef6:	1d 04       	cpc	r1, r13
     ef8:	24 f5       	brge	.+72     	; 0xf42 <oled_print_string+0x92>
     efa:	7e 01       	movw	r14, r28
     efc:	c0 e0       	ldi	r28, 0x00	; 0
     efe:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
     f00:	8f e7       	ldi	r24, 0x7F	; 127
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	5c 01       	movw	r10, r24
     f06:	a8 18       	sub	r10, r8
     f08:	b1 08       	sbc	r11, r1
			column = 0;
     f0a:	61 2c       	mov	r6, r1
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
     f0c:	a8 01       	movw	r20, r16
     f0e:	68 2d       	mov	r22, r8
     f10:	f7 01       	movw	r30, r14
     f12:	81 91       	ld	r24, Z+
     f14:	7f 01       	movw	r14, r30
     f16:	0e 94 ac 06 	call	0xd58	; 0xd58 <oled_print_char>
		column = column + font_size;
     f1a:	98 0c       	add	r9, r8
		if (column > (127 - font_size)){ //if no space for another char
     f1c:	89 2d       	mov	r24, r9
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	a8 16       	cp	r10, r24
     f22:	b9 06       	cpc	r11, r25
     f24:	54 f4       	brge	.+20     	; 0xf3a <oled_print_string+0x8a>
			column = 0;
			line++;
     f26:	73 94       	inc	r7
			oled_goto_column(column);
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <oled_goto_column>
			oled_goto_line(line);
     f30:	87 2d       	mov	r24, r7
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 07 07 	call	0xe0e	; 0xe0e <oled_goto_line>
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
			column = 0;
     f38:	96 2c       	mov	r9, r6
void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
     f3a:	21 96       	adiw	r28, 0x01	; 1
     f3c:	cc 16       	cp	r12, r28
     f3e:	dd 06       	cpc	r13, r29
     f40:	29 f7       	brne	.-54     	; 0xf0c <oled_print_string+0x5c>
			line++;
			oled_goto_column(column);
			oled_goto_line(line);
		}
	}
}
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	df 90       	pop	r13
     f50:	cf 90       	pop	r12
     f52:	bf 90       	pop	r11
     f54:	af 90       	pop	r10
     f56:	9f 90       	pop	r9
     f58:	8f 90       	pop	r8
     f5a:	7f 90       	pop	r7
     f5c:	6f 90       	pop	r6
     f5e:	08 95       	ret

00000f60 <oled_clear_line>:
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
	}
}

void oled_clear_line(int line){
     f60:	cf 93       	push	r28
	oled_goto_line(line);
     f62:	0e 94 07 07 	call	0xe0e	; 0xe0e <oled_goto_line>
	oled_goto_column(0);
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 2e 07 	call	0xe5c	; 0xe5c <oled_goto_column>
	for (uint8_t i = 0; i < 128; i++){
     f6e:	c0 e0       	ldi	r28, 0x00	; 0
		oled_write_data(0x00);
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	0e 94 81 06 	call	0xd02	; 0xd02 <oled_write_data>
}

void oled_clear_line(int line){
	oled_goto_line(line);
	oled_goto_column(0);
	for (uint8_t i = 0; i < 128; i++){
     f76:	cf 5f       	subi	r28, 0xFF	; 255
     f78:	c0 38       	cpi	r28, 0x80	; 128
     f7a:	d1 f7       	brne	.-12     	; 0xf70 <oled_clear_line+0x10>
		oled_write_data(0x00);
	}
}
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <oled_clear_screen>:
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}

void oled_clear_screen(){
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	c0 e0       	ldi	r28, 0x00	; 0
     f86:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
     f88:	ce 01       	movw	r24, r28
     f8a:	0e 94 b0 07 	call	0xf60	; 0xf60 <oled_clear_line>
     f8e:	21 96       	adiw	r28, 0x01	; 1
		}
	}
}

void oled_clear_screen(){
	for (uint8_t line = 0; line < 8; line++){
     f90:	c8 30       	cpi	r28, 0x08	; 8
     f92:	d1 05       	cpc	r29, r1
     f94:	c9 f7       	brne	.-14     	; 0xf88 <oled_clear_screen+0x8>
		oled_clear_line(line);
	}
}
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	08 95       	ret

00000f9c <oled_init>:
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
     f9c:	e0 91 14 01 	lds	r30, 0x0114
     fa0:	f0 91 15 01 	lds	r31, 0x0115
     fa4:	8e ea       	ldi	r24, 0xAE	; 174
     fa6:	80 83       	st	Z, r24
     fa8:	e0 91 14 01 	lds	r30, 0x0114
     fac:	f0 91 15 01 	lds	r31, 0x0115
     fb0:	81 ea       	ldi	r24, 0xA1	; 161
     fb2:	80 83       	st	Z, r24
     fb4:	e0 91 14 01 	lds	r30, 0x0114
     fb8:	f0 91 15 01 	lds	r31, 0x0115
     fbc:	8a ed       	ldi	r24, 0xDA	; 218
     fbe:	80 83       	st	Z, r24
     fc0:	e0 91 14 01 	lds	r30, 0x0114
     fc4:	f0 91 15 01 	lds	r31, 0x0115
     fc8:	82 e1       	ldi	r24, 0x12	; 18
     fca:	80 83       	st	Z, r24
     fcc:	e0 91 14 01 	lds	r30, 0x0114
     fd0:	f0 91 15 01 	lds	r31, 0x0115
     fd4:	88 ec       	ldi	r24, 0xC8	; 200
     fd6:	80 83       	st	Z, r24
     fd8:	e0 91 14 01 	lds	r30, 0x0114
     fdc:	f0 91 15 01 	lds	r31, 0x0115
     fe0:	88 ea       	ldi	r24, 0xA8	; 168
     fe2:	80 83       	st	Z, r24
     fe4:	e0 91 14 01 	lds	r30, 0x0114
     fe8:	f0 91 15 01 	lds	r31, 0x0115
     fec:	8f e3       	ldi	r24, 0x3F	; 63
     fee:	80 83       	st	Z, r24
     ff0:	e0 91 14 01 	lds	r30, 0x0114
     ff4:	f0 91 15 01 	lds	r31, 0x0115
     ff8:	85 ed       	ldi	r24, 0xD5	; 213
     ffa:	80 83       	st	Z, r24
     ffc:	e0 91 14 01 	lds	r30, 0x0114
    1000:	f0 91 15 01 	lds	r31, 0x0115
    1004:	80 e8       	ldi	r24, 0x80	; 128
    1006:	80 83       	st	Z, r24
    1008:	e0 91 14 01 	lds	r30, 0x0114
    100c:	f0 91 15 01 	lds	r31, 0x0115
    1010:	81 e8       	ldi	r24, 0x81	; 129
    1012:	80 83       	st	Z, r24
    1014:	e0 91 14 01 	lds	r30, 0x0114
    1018:	f0 91 15 01 	lds	r31, 0x0115
    101c:	80 e5       	ldi	r24, 0x50	; 80
    101e:	80 83       	st	Z, r24
    1020:	e0 91 14 01 	lds	r30, 0x0114
    1024:	f0 91 15 01 	lds	r31, 0x0115
    1028:	89 ed       	ldi	r24, 0xD9	; 217
    102a:	80 83       	st	Z, r24
    102c:	e0 91 14 01 	lds	r30, 0x0114
    1030:	f0 91 15 01 	lds	r31, 0x0115
    1034:	81 e2       	ldi	r24, 0x21	; 33
    1036:	80 83       	st	Z, r24
    1038:	e0 91 14 01 	lds	r30, 0x0114
    103c:	f0 91 15 01 	lds	r31, 0x0115
    1040:	80 e2       	ldi	r24, 0x20	; 32
    1042:	80 83       	st	Z, r24
    1044:	e0 91 14 01 	lds	r30, 0x0114
    1048:	f0 91 15 01 	lds	r31, 0x0115
    104c:	82 e0       	ldi	r24, 0x02	; 2
    104e:	80 83       	st	Z, r24
    1050:	e0 91 14 01 	lds	r30, 0x0114
    1054:	f0 91 15 01 	lds	r31, 0x0115
    1058:	8b ed       	ldi	r24, 0xDB	; 219
    105a:	80 83       	st	Z, r24
    105c:	e0 91 14 01 	lds	r30, 0x0114
    1060:	f0 91 15 01 	lds	r31, 0x0115
    1064:	80 e3       	ldi	r24, 0x30	; 48
    1066:	80 83       	st	Z, r24
    1068:	e0 91 14 01 	lds	r30, 0x0114
    106c:	f0 91 15 01 	lds	r31, 0x0115
    1070:	8d ea       	ldi	r24, 0xAD	; 173
    1072:	80 83       	st	Z, r24
    1074:	e0 91 14 01 	lds	r30, 0x0114
    1078:	f0 91 15 01 	lds	r31, 0x0115
    107c:	10 82       	st	Z, r1
    107e:	e0 91 14 01 	lds	r30, 0x0114
    1082:	f0 91 15 01 	lds	r31, 0x0115
    1086:	84 ea       	ldi	r24, 0xA4	; 164
    1088:	80 83       	st	Z, r24
    108a:	e0 91 14 01 	lds	r30, 0x0114
    108e:	f0 91 15 01 	lds	r31, 0x0115
    1092:	86 ea       	ldi	r24, 0xA6	; 166
    1094:	80 83       	st	Z, r24
    1096:	e0 91 14 01 	lds	r30, 0x0114
    109a:	f0 91 15 01 	lds	r31, 0x0115
    109e:	8f ea       	ldi	r24, 0xAF	; 175
    10a0:	80 83       	st	Z, r24
	oled_write_command(0xad); //master configuration
	oled_write_command(0x00);
	oled_write_command(0xa4); //out follows RAM content
	oled_write_command(0xa6); //set normal display
	oled_write_command(0xaf); // display on
	oled_clear_screen(); //Sets all buffer data to 0
    10a2:	0e 94 c0 07 	call	0xf80	; 0xf80 <oled_clear_screen>
    10a6:	08 95       	ret

000010a8 <oled_refresh>:
		oled_write_command(lower);
		oled_write_command(0b00010000 | upper);
	}
}

void oled_refresh(){
    10a8:	cf 93       	push	r28
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    10aa:	e0 91 14 01 	lds	r30, 0x0114
    10ae:	f0 91 15 01 	lds	r31, 0x0115
    10b2:	10 82       	st	Z, r1
    10b4:	e0 91 14 01 	lds	r30, 0x0114
    10b8:	f0 91 15 01 	lds	r31, 0x0115
    10bc:	80 e1       	ldi	r24, 0x10	; 16
    10be:	80 83       	st	Z, r24
	uint8_t lower = 0 & 0b00001111; // set column to 0
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
    10c0:	80 91 0e 01 	lds	r24, 0x010E
    10c4:	90 91 0f 01 	lds	r25, 0x010F
    10c8:	89 2b       	or	r24, r25
    10ca:	21 f1       	breq	.+72     	; 0x1114 <oled_refresh+0x6c>
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	60 eb       	ldi	r22, 0xB0	; 176
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    10d2:	c0 e0       	ldi	r28, 0x00	; 0
    10d4:	70 e0       	ldi	r23, 0x00	; 0
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    10d6:	e0 91 14 01 	lds	r30, 0x0114
    10da:	f0 91 15 01 	lds	r31, 0x0115
    10de:	60 83       	st	Z, r22
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    10e0:	8c 2f       	mov	r24, r28
    10e2:	97 2f       	mov	r25, r23
				*oled_front_buffer = oled_back_buffer[column + page*128];
    10e4:	e0 91 10 01 	lds	r30, 0x0110
    10e8:	f0 91 11 01 	lds	r31, 0x0111
    10ec:	9c 01       	movw	r18, r24
    10ee:	24 0f       	add	r18, r20
    10f0:	35 1f       	adc	r19, r21
    10f2:	a0 91 12 01 	lds	r26, 0x0112
    10f6:	b0 91 13 01 	lds	r27, 0x0113
    10fa:	a2 0f       	add	r26, r18
    10fc:	b3 1f       	adc	r27, r19
    10fe:	2c 91       	ld	r18, X
    1100:	20 83       	st	Z, r18
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    1102:	01 96       	adiw	r24, 0x01	; 1
    1104:	80 38       	cpi	r24, 0x80	; 128
    1106:	91 05       	cpc	r25, r1
    1108:	69 f7       	brne	.-38     	; 0x10e4 <oled_refresh+0x3c>
    110a:	6f 5f       	subi	r22, 0xFF	; 255
    110c:	40 58       	subi	r20, 0x80	; 128
    110e:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
    1110:	68 3b       	cpi	r22, 0xB8	; 184
    1112:	09 f7       	brne	.-62     	; 0x10d6 <oled_refresh+0x2e>
			for(int column = 0; column < 128; column++){
				*oled_front_buffer = oled_back_buffer[column + page*128];
			}
		}	
	}
}
    1114:	cf 91       	pop	r28
    1116:	08 95       	ret

00001118 <oled_draw_pixel>:

void oled_draw_pixel(int x, int y){
    1118:	ef 92       	push	r14
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	8c 01       	movw	r16, r24
    1126:	eb 01       	movw	r28, r22
	oled_goto_column(x);
    1128:	0e 94 2e 07 	call	0xe5c	; 0xe5c <oled_goto_column>
	oled_goto_line(y/8);
    112c:	7e 01       	movw	r14, r28
    112e:	dd 23       	and	r29, r29
    1130:	1c f4       	brge	.+6      	; 0x1138 <oled_draw_pixel+0x20>
    1132:	47 e0       	ldi	r20, 0x07	; 7
    1134:	e4 0e       	add	r14, r20
    1136:	f1 1c       	adc	r15, r1
    1138:	f5 94       	asr	r15
    113a:	e7 94       	ror	r14
    113c:	f5 94       	asr	r15
    113e:	e7 94       	ror	r14
    1140:	f5 94       	asr	r15
    1142:	e7 94       	ror	r14
    1144:	c7 01       	movw	r24, r14
    1146:	0e 94 07 07 	call	0xe0e	; 0xe0e <oled_goto_line>
	oled_write_data((1 << (y % 8)) | oled_back_buffer[x + (y/8)*128]);
    114a:	f7 01       	movw	r30, r14
    114c:	f6 95       	lsr	r31
    114e:	fe 2f       	mov	r31, r30
    1150:	ee 27       	eor	r30, r30
    1152:	f7 95       	ror	r31
    1154:	e7 95       	ror	r30
    1156:	0e 0f       	add	r16, r30
    1158:	1f 1f       	adc	r17, r31
    115a:	e0 91 12 01 	lds	r30, 0x0112
    115e:	f0 91 13 01 	lds	r31, 0x0113
    1162:	e0 0f       	add	r30, r16
    1164:	f1 1f       	adc	r31, r17
    1166:	80 81       	ld	r24, Z
    1168:	be 01       	movw	r22, r28
    116a:	67 70       	andi	r22, 0x07	; 7
    116c:	70 78       	andi	r23, 0x80	; 128
    116e:	77 23       	and	r23, r23
    1170:	34 f4       	brge	.+12     	; 0x117e <oled_draw_pixel+0x66>
    1172:	61 50       	subi	r22, 0x01	; 1
    1174:	71 09       	sbc	r23, r1
    1176:	68 6f       	ori	r22, 0xF8	; 248
    1178:	7f 6f       	ori	r23, 0xFF	; 255
    117a:	6f 5f       	subi	r22, 0xFF	; 255
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	21 e0       	ldi	r18, 0x01	; 1
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	a9 01       	movw	r20, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <oled_draw_pixel+0x72>
    1186:	44 0f       	add	r20, r20
    1188:	55 1f       	adc	r21, r21
    118a:	6a 95       	dec	r22
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <oled_draw_pixel+0x6e>
    118e:	84 2b       	or	r24, r20
    1190:	0e 94 81 06 	call	0xd02	; 0xd02 <oled_write_data>
}
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	08 95       	ret

000011a2 <oled_clear_pixel>:

void oled_clear_pixel(int x, int y){
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	8c 01       	movw	r16, r24
    11b0:	eb 01       	movw	r28, r22
	oled_goto_column(x);
    11b2:	0e 94 2e 07 	call	0xe5c	; 0xe5c <oled_goto_column>
	oled_goto_line(y/8);
    11b6:	7e 01       	movw	r14, r28
    11b8:	dd 23       	and	r29, r29
    11ba:	1c f4       	brge	.+6      	; 0x11c2 <oled_clear_pixel+0x20>
    11bc:	47 e0       	ldi	r20, 0x07	; 7
    11be:	e4 0e       	add	r14, r20
    11c0:	f1 1c       	adc	r15, r1
    11c2:	f5 94       	asr	r15
    11c4:	e7 94       	ror	r14
    11c6:	f5 94       	asr	r15
    11c8:	e7 94       	ror	r14
    11ca:	f5 94       	asr	r15
    11cc:	e7 94       	ror	r14
    11ce:	c7 01       	movw	r24, r14
    11d0:	0e 94 07 07 	call	0xe0e	; 0xe0e <oled_goto_line>
	oled_write_data(~(1 << (y % 8)) & oled_back_buffer[x + (y/8)*128]);
    11d4:	f7 01       	movw	r30, r14
    11d6:	f6 95       	lsr	r31
    11d8:	fe 2f       	mov	r31, r30
    11da:	ee 27       	eor	r30, r30
    11dc:	f7 95       	ror	r31
    11de:	e7 95       	ror	r30
    11e0:	0e 0f       	add	r16, r30
    11e2:	1f 1f       	adc	r17, r31
    11e4:	e0 91 12 01 	lds	r30, 0x0112
    11e8:	f0 91 13 01 	lds	r31, 0x0113
    11ec:	e0 0f       	add	r30, r16
    11ee:	f1 1f       	adc	r31, r17
    11f0:	80 81       	ld	r24, Z
    11f2:	be 01       	movw	r22, r28
    11f4:	67 70       	andi	r22, 0x07	; 7
    11f6:	70 78       	andi	r23, 0x80	; 128
    11f8:	77 23       	and	r23, r23
    11fa:	34 f4       	brge	.+12     	; 0x1208 <oled_clear_pixel+0x66>
    11fc:	61 50       	subi	r22, 0x01	; 1
    11fe:	71 09       	sbc	r23, r1
    1200:	68 6f       	ori	r22, 0xF8	; 248
    1202:	7f 6f       	ori	r23, 0xFF	; 255
    1204:	6f 5f       	subi	r22, 0xFF	; 255
    1206:	7f 4f       	sbci	r23, 0xFF	; 255
    1208:	21 e0       	ldi	r18, 0x01	; 1
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	a9 01       	movw	r20, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <oled_clear_pixel+0x72>
    1210:	44 0f       	add	r20, r20
    1212:	55 1f       	adc	r21, r21
    1214:	6a 95       	dec	r22
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <oled_clear_pixel+0x6e>
    1218:	ba 01       	movw	r22, r20
    121a:	60 95       	com	r22
    121c:	86 23       	and	r24, r22
    121e:	0e 94 81 06 	call	0xd02	; 0xd02 <oled_write_data>
}
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	ff 90       	pop	r15
    122c:	ef 90       	pop	r14
    122e:	08 95       	ret

00001230 <sram_test>:
#include <avr/io.h>

void sram_test(void)
{
    1230:	cf 92       	push	r12
    1232:	df 92       	push	r13
    1234:	ef 92       	push	r14
    1236:	ff 92       	push	r15
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
	= 0x400;
	uint16_t write_errors
	= 0;
	uint16_t retrieval_errors
	= 0;
	printf("Starting SRAM test...\n");
    1240:	8b ea       	ldi	r24, 0xAB	; 171
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
    1248:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <rand>
    124c:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
    124e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
    1252:	c0 e0       	ldi	r28, 0x00	; 0
    1254:	d0 e0       	ldi	r29, 0x00	; 0
void sram_test(void)
{
	volatile char *ext_ram = (char *) 0x1C00; // Start address for the SRAM
	uint16_t ext_ram_size
	= 0x400;
	uint16_t write_errors
    1256:	00 e0       	ldi	r16, 0x00	; 0
    1258:	10 e0       	ldi	r17, 0x00	; 0
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		//printf("Write phase : ext_ram[%4d] = %02X (should be %02X)\n", i,retreived_value, some_value);
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,retreived_value, some_value);
    125a:	0f 2e       	mov	r0, r31
    125c:	f1 ec       	ldi	r31, 0xC1	; 193
    125e:	ef 2e       	mov	r14, r31
    1260:	f1 e0       	ldi	r31, 0x01	; 1
    1262:	ff 2e       	mov	r15, r31
    1264:	f0 2d       	mov	r31, r0
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
    1266:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <rand>
    126a:	fe 01       	movw	r30, r28
    126c:	f4 5e       	subi	r31, 0xE4	; 228
		ext_ram[i] = some_value;
    126e:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
    1270:	20 81       	ld	r18, Z
		//printf("Write phase : ext_ram[%4d] = %02X (should be %02X)\n", i,retreived_value, some_value);
		if (retreived_value != some_value) {
    1272:	28 17       	cp	r18, r24
    1274:	a9 f0       	breq	.+42     	; 0x12a0 <sram_test+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,retreived_value, some_value);
    1276:	99 27       	eor	r25, r25
    1278:	9f 93       	push	r25
    127a:	8f 93       	push	r24
    127c:	1f 92       	push	r1
    127e:	2f 93       	push	r18
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	ff 92       	push	r15
    1286:	ef 92       	push	r14
    1288:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
			write_errors++;
    128c:	0f 5f       	subi	r16, 0xFF	; 255
    128e:	1f 4f       	sbci	r17, 0xFF	; 255
    1290:	8d b7       	in	r24, 0x3d	; 61
    1292:	9e b7       	in	r25, 0x3e	; 62
    1294:	08 96       	adiw	r24, 0x08	; 8
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	9e bf       	out	0x3e, r25	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
    12a0:	21 96       	adiw	r28, 0x01	; 1
    12a2:	c1 15       	cp	r28, r1
    12a4:	94 e0       	ldi	r25, 0x04	; 4
    12a6:	d9 07       	cpc	r29, r25
    12a8:	f1 f6       	brne	.-68     	; 0x1266 <sram_test+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
    12aa:	c6 01       	movw	r24, r12
    12ac:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
    12b0:	c0 e0       	ldi	r28, 0x00	; 0
    12b2:	d0 e0       	ldi	r29, 0x00	; 0
	volatile char *ext_ram = (char *) 0x1C00; // Start address for the SRAM
	uint16_t ext_ram_size
	= 0x400;
	uint16_t write_errors
	= 0;
	uint16_t retrieval_errors
    12b4:	e1 2c       	mov	r14, r1
    12b6:	f1 2c       	mov	r15, r1
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
    12b8:	0f 2e       	mov	r0, r31
    12ba:	fa ef       	ldi	r31, 0xFA	; 250
    12bc:	cf 2e       	mov	r12, r31
    12be:	f1 e0       	ldi	r31, 0x01	; 1
    12c0:	df 2e       	mov	r13, r31
    12c2:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
    12c4:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <rand>
    12c8:	fe 01       	movw	r30, r28
    12ca:	f4 5e       	subi	r31, 0xE4	; 228
		uint8_t retreived_value = ext_ram[i];
    12cc:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
    12ce:	28 17       	cp	r18, r24
    12d0:	b1 f0       	breq	.+44     	; 0x12fe <sram_test+0xce>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
    12d2:	99 27       	eor	r25, r25
    12d4:	9f 93       	push	r25
    12d6:	8f 93       	push	r24
    12d8:	1f 92       	push	r1
    12da:	2f 93       	push	r18
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	df 92       	push	r13
    12e2:	cf 92       	push	r12
    12e4:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
			retrieval_errors++;
    12e8:	8f ef       	ldi	r24, 0xFF	; 255
    12ea:	e8 1a       	sub	r14, r24
    12ec:	f8 0a       	sbc	r15, r24
    12ee:	8d b7       	in	r24, 0x3d	; 61
    12f0:	9e b7       	in	r25, 0x3e	; 62
    12f2:	08 96       	adiw	r24, 0x08	; 8
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	9e bf       	out	0x3e, r25	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
    12fe:	21 96       	adiw	r28, 0x01	; 1
    1300:	c1 15       	cp	r28, r1
    1302:	94 e0       	ldi	r25, 0x04	; 4
    1304:	d9 07       	cpc	r29, r25
    1306:	f1 f6       	brne	.-68     	; 0x12c4 <sram_test+0x94>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and\n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
    1308:	ff 92       	push	r15
    130a:	ef 92       	push	r14
    130c:	1f 93       	push	r17
    130e:	0f 93       	push	r16
    1310:	87 e3       	ldi	r24, 0x37	; 55
    1312:	92 e0       	ldi	r25, 0x02	; 2
    1314:	9f 93       	push	r25
    1316:	8f 93       	push	r24
    1318:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
}
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	ff 90       	pop	r15
    1332:	ef 90       	pop	r14
    1334:	df 90       	pop	r13
    1336:	cf 90       	pop	r12
    1338:	08 95       	ret

0000133a <touch_init>:
#include <avr/io.h>

#include "touch.h"

void touch_init(){
	clear_bit(DDRB, PB0); //Set DDR to input for button
    133a:	b8 98       	cbi	0x17, 0	; 23
	clear_bit(DDRB, PB1); //Set DDR to input for button
    133c:	b9 98       	cbi	0x17, 1	; 23
    133e:	08 95       	ret

00001340 <touch_get_positions>:
}

Touch_positions touch_get_positions(){
    1340:	df 92       	push	r13
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	28 97       	sbiw	r28, 0x08	; 8
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	de bf       	out	0x3e, r29	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	cd bf       	out	0x3d, r28	; 61
		Touch_positions pos;
		
		pos.l = adc_read('l');
    135e:	8c e6       	ldi	r24, 0x6C	; 108
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
    1366:	8c 01       	movw	r16, r24
		pos.r = adc_read('r');
    1368:	82 e7       	ldi	r24, 0x72	; 114
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
    1370:	7c 01       	movw	r14, r24
		
		pos.l = (100*pos.l)/255;
		pos.r = (100*pos.r)/255;
		
		pos.lb = !!test_bit(PINB, PB1);
    1372:	d6 b2       	in	r13, 0x16	; 22
		pos.rb = !!test_bit(PINB, PB0);
    1374:	46 b3       	in	r20, 0x16	; 22
		Touch_positions pos;
		
		pos.l = adc_read('l');
		pos.r = adc_read('r');
		
		pos.l = (100*pos.l)/255;
    1376:	34 e6       	ldi	r19, 0x64	; 100
    1378:	30 9f       	mul	r19, r16
    137a:	c0 01       	movw	r24, r0
    137c:	31 9f       	mul	r19, r17
    137e:	90 0d       	add	r25, r0
    1380:	11 24       	eor	r1, r1
    1382:	ef ef       	ldi	r30, 0xFF	; 255
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	bf 01       	movw	r22, r30
    1388:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__divmodhi4>
    138c:	26 2f       	mov	r18, r22
		pos.r = (100*pos.r)/255;
		
		pos.lb = !!test_bit(PINB, PB1);
		pos.rb = !!test_bit(PINB, PB0);
		
		return pos;
    138e:	69 83       	std	Y+1, r22	; 0x01
    1390:	7a 83       	std	Y+2, r23	; 0x02
		
		pos.l = adc_read('l');
		pos.r = adc_read('r');
		
		pos.l = (100*pos.l)/255;
		pos.r = (100*pos.r)/255;
    1392:	3e 9d       	mul	r19, r14
    1394:	c0 01       	movw	r24, r0
    1396:	3f 9d       	mul	r19, r15
    1398:	90 0d       	add	r25, r0
    139a:	11 24       	eor	r1, r1
    139c:	bf 01       	movw	r22, r30
    139e:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__divmodhi4>
		
		pos.lb = !!test_bit(PINB, PB1);
		pos.rb = !!test_bit(PINB, PB0);
		
		return pos;
    13a2:	6b 83       	std	Y+3, r22	; 0x03
    13a4:	7c 83       	std	Y+4, r23	; 0x04
		pos.r = adc_read('r');
		
		pos.l = (100*pos.l)/255;
		pos.r = (100*pos.r)/255;
		
		pos.lb = !!test_bit(PINB, PB1);
    13a6:	d1 fa       	bst	r13, 1
    13a8:	99 27       	eor	r25, r25
    13aa:	90 f9       	bld	r25, 0
		pos.rb = !!test_bit(PINB, PB0);
		
		return pos;
    13ac:	9d 83       	std	Y+5, r25	; 0x05
    13ae:	1e 82       	std	Y+6, r1	; 0x06
		
		pos.l = (100*pos.l)/255;
		pos.r = (100*pos.r)/255;
		
		pos.lb = !!test_bit(PINB, PB1);
		pos.rb = !!test_bit(PINB, PB0);
    13b0:	84 2f       	mov	r24, r20
    13b2:	81 70       	andi	r24, 0x01	; 1
		
		return pos;
    13b4:	8f 83       	std	Y+7, r24	; 0x07
    13b6:	18 86       	std	Y+8, r1	; 0x08
    13b8:	3a 81       	ldd	r19, Y+2	; 0x02
    13ba:	46 2f       	mov	r20, r22
    13bc:	57 2f       	mov	r21, r23
    13be:	69 2f       	mov	r22, r25
    13c0:	70 e0       	ldi	r23, 0x00	; 0
}
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	28 96       	adiw	r28, 0x08	; 8
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	df 90       	pop	r13
    13de:	08 95       	ret

000013e0 <touch_print>:

void touch_print(int all){
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	28 97       	sbiw	r28, 0x08	; 8
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
	if (all){
    13f8:	89 2b       	or	r24, r25
    13fa:	39 f1       	breq	.+78     	; 0x144a <touch_print+0x6a>
		printf("l = ");
    13fc:	8f e8       	ldi	r24, 0x8F	; 143
    13fe:	92 e0       	ldi	r25, 0x02	; 2
    1400:	9f 93       	push	r25
    1402:	8f 93       	push	r24
    1404:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
		printf("%d  ", adc_read('l'));
    1408:	8c e6       	ldi	r24, 0x6C	; 108
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
    1410:	9f 93       	push	r25
    1412:	8f 93       	push	r24
    1414:	0e e3       	ldi	r16, 0x3E	; 62
    1416:	11 e0       	ldi	r17, 0x01	; 1
    1418:	1f 93       	push	r17
    141a:	0f 93       	push	r16
    141c:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
		
		printf("r = ");
    1420:	8e e9       	ldi	r24, 0x9E	; 158
    1422:	92 e0       	ldi	r25, 0x02	; 2
    1424:	9f 93       	push	r25
    1426:	8f 93       	push	r24
    1428:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
		printf("%d  ", adc_read('r'));
    142c:	82 e7       	ldi	r24, 0x72	; 114
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
    1434:	9f 93       	push	r25
    1436:	8f 93       	push	r24
    1438:	1f 93       	push	r17
    143a:	0f 93       	push	r16
    143c:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
	}
	
	Touch_positions pos = touch_get_positions();
    144a:	0e 94 a0 09 	call	0x1340	; 0x1340 <touch_get_positions>
    144e:	29 83       	std	Y+1, r18	; 0x01
    1450:	3a 83       	std	Y+2, r19	; 0x02
    1452:	4b 83       	std	Y+3, r20	; 0x03
    1454:	5c 83       	std	Y+4, r21	; 0x04
    1456:	6d 83       	std	Y+5, r22	; 0x05
    1458:	7e 83       	std	Y+6, r23	; 0x06
    145a:	8f 83       	std	Y+7, r24	; 0x07
    145c:	98 87       	std	Y+8, r25	; 0x08
	
	printf("Left slider = ");
    145e:	84 e9       	ldi	r24, 0x94	; 148
    1460:	92 e0       	ldi	r25, 0x02	; 2
    1462:	9f 93       	push	r25
    1464:	8f 93       	push	r24
    1466:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	printf("%d  ",pos.l);
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	8f 93       	push	r24
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	8f 93       	push	r24
    1472:	0e e3       	ldi	r16, 0x3E	; 62
    1474:	11 e0       	ldi	r17, 0x01	; 1
    1476:	1f 93       	push	r17
    1478:	0f 93       	push	r16
    147a:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>

	printf("Right slider = ");
    147e:	83 ea       	ldi	r24, 0xA3	; 163
    1480:	92 e0       	ldi	r25, 0x02	; 2
    1482:	9f 93       	push	r25
    1484:	8f 93       	push	r24
    1486:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	printf("%d  ", pos.r);
    148a:	8c 81       	ldd	r24, Y+4	; 0x04
    148c:	8f 93       	push	r24
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	8f 93       	push	r24
    1492:	1f 93       	push	r17
    1494:	0f 93       	push	r16
    1496:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	
	printf("Left button= ");
    149a:	83 eb       	ldi	r24, 0xB3	; 179
    149c:	92 e0       	ldi	r25, 0x02	; 2
    149e:	9f 93       	push	r25
    14a0:	8f 93       	push	r24
    14a2:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	printf("%d  ", pos.lb);
    14a6:	8e 81       	ldd	r24, Y+6	; 0x06
    14a8:	8f 93       	push	r24
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	8f 93       	push	r24
    14ae:	1f 93       	push	r17
    14b0:	0f 93       	push	r16
    14b2:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	
	printf("Right button= ");
    14b6:	81 ec       	ldi	r24, 0xC1	; 193
    14b8:	92 e0       	ldi	r25, 0x02	; 2
    14ba:	9f 93       	push	r25
    14bc:	8f 93       	push	r24
    14be:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
	printf("%d  ", pos.rb);
    14c2:	88 85       	ldd	r24, Y+8	; 0x08
    14c4:	8f 93       	push	r24
    14c6:	8f 81       	ldd	r24, Y+7	; 0x07
    14c8:	8f 93       	push	r24
    14ca:	1f 93       	push	r17
    14cc:	0f 93       	push	r16
    14ce:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <printf>
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
    14dc:	28 96       	adiw	r28, 0x08	; 8
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	08 95       	ret

000014f2 <uart_putchar>:
#include <avr/io.h>
#include <stdio.h>

int uart_putchar(char c){
	//Wait for empty transmit buffer
	while (!( UCSR0A & (1<<UDRE0)));
    14f2:	5d 9b       	sbis	0x0b, 5	; 11
    14f4:	fe cf       	rjmp	.-4      	; 0x14f2 <uart_putchar>
	//Put data into buffer, sends the data
	UDR0 = c;
    14f6:	8c b9       	out	0x0c, r24	; 12
	return 1;
}
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	08 95       	ret

000014fe <uart_getchar>:

unsigned char uart_getchar(){
	while (!( UCSR0A & (1<<RXC0)));
    14fe:	5f 9b       	sbis	0x0b, 7	; 11
    1500:	fe cf       	rjmp	.-4      	; 0x14fe <uart_getchar>
	return UDR0;
    1502:	8c b1       	in	r24, 0x0c	; 12
}
    1504:	08 95       	ret

00001506 <uart_init>:

int uart_init(int baudRate){
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
	int UBRR = ((long)4915200/((long)16*baudRate) - 1);
    150a:	aa 27       	eor	r26, r26
    150c:	97 fd       	sbrc	r25, 7
    150e:	a0 95       	com	r26
    1510:	ba 2f       	mov	r27, r26
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	aa 1f       	adc	r26, r26
    1518:	bb 1f       	adc	r27, r27
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	aa 1f       	adc	r26, r26
    1520:	bb 1f       	adc	r27, r27
    1522:	9c 01       	movw	r18, r24
    1524:	ad 01       	movw	r20, r26
    1526:	22 0f       	add	r18, r18
    1528:	33 1f       	adc	r19, r19
    152a:	44 1f       	adc	r20, r20
    152c:	55 1f       	adc	r21, r21
    152e:	22 0f       	add	r18, r18
    1530:	33 1f       	adc	r19, r19
    1532:	44 1f       	adc	r20, r20
    1534:	55 1f       	adc	r21, r21
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	8b e4       	ldi	r24, 0x4B	; 75
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__divmodsi4>
    1542:	e9 01       	movw	r28, r18
    1544:	21 97       	sbiw	r28, 0x01	; 1
	//Enable printf
	fdevopen(uart_putchar, uart_getchar);
    1546:	6f e7       	ldi	r22, 0x7F	; 127
    1548:	7a e0       	ldi	r23, 0x0A	; 10
    154a:	89 e7       	ldi	r24, 0x79	; 121
    154c:	9a e0       	ldi	r25, 0x0A	; 10
    154e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <fdevopen>
	//Setting
	UBRR0L = UBRR;
    1552:	c9 b9       	out	0x09, r28	; 9
    UBRR0H = (UBRR>>8);
    1554:	d0 bd       	out	0x20, r29	; 32
    //Enable receiver and transmitter 
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1556:	88 e1       	ldi	r24, 0x18	; 24
    1558:	8a b9       	out	0x0a, r24	; 10
    //Set frame format: 8data, 2stop bit  
    UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    155a:	8e e8       	ldi	r24, 0x8E	; 142
    155c:	80 bd       	out	0x20, r24	; 32
    return 1;
}
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	08 95       	ret
    1568:	63 d1       	rcall	.+710    	; 0x1830 <__fp_pscA>
    156a:	58 f0       	brcs	.+22     	; 0x1582 <uart_init+0x7c>
    156c:	80 e8       	ldi	r24, 0x80	; 128
    156e:	91 e0       	ldi	r25, 0x01	; 1
    1570:	09 f4       	brne	.+2      	; 0x1574 <uart_init+0x6e>
    1572:	9e ef       	ldi	r25, 0xFE	; 254
    1574:	64 d1       	rcall	.+712    	; 0x183e <__fp_pscB>
    1576:	28 f0       	brcs	.+10     	; 0x1582 <uart_init+0x7c>
    1578:	40 e8       	ldi	r20, 0x80	; 128
    157a:	51 e0       	ldi	r21, 0x01	; 1
    157c:	59 f4       	brne	.+22     	; 0x1594 <atan2+0xe>
    157e:	5e ef       	ldi	r21, 0xFE	; 254
    1580:	09 c0       	rjmp	.+18     	; 0x1594 <atan2+0xe>
    1582:	2e c1       	rjmp	.+604    	; 0x17e0 <__fp_nan>
    1584:	96 c1       	rjmp	.+812    	; 0x18b2 <__fp_zero>

00001586 <atan2>:
    1586:	e9 2f       	mov	r30, r25
    1588:	e0 78       	andi	r30, 0x80	; 128
    158a:	71 d1       	rcall	.+738    	; 0x186e <__fp_split3>
    158c:	68 f3       	brcs	.-38     	; 0x1568 <uart_init+0x62>
    158e:	09 2e       	mov	r0, r25
    1590:	05 2a       	or	r0, r21
    1592:	c1 f3       	breq	.-16     	; 0x1584 <uart_init+0x7e>
    1594:	26 17       	cp	r18, r22
    1596:	37 07       	cpc	r19, r23
    1598:	48 07       	cpc	r20, r24
    159a:	59 07       	cpc	r21, r25
    159c:	38 f0       	brcs	.+14     	; 0x15ac <atan2+0x26>
    159e:	0e 2e       	mov	r0, r30
    15a0:	07 f8       	bld	r0, 7
    15a2:	e0 25       	eor	r30, r0
    15a4:	69 f0       	breq	.+26     	; 0x15c0 <atan2+0x3a>
    15a6:	e0 25       	eor	r30, r0
    15a8:	e0 64       	ori	r30, 0x40	; 64
    15aa:	0a c0       	rjmp	.+20     	; 0x15c0 <atan2+0x3a>
    15ac:	ef 63       	ori	r30, 0x3F	; 63
    15ae:	07 f8       	bld	r0, 7
    15b0:	00 94       	com	r0
    15b2:	07 fa       	bst	r0, 7
    15b4:	db 01       	movw	r26, r22
    15b6:	b9 01       	movw	r22, r18
    15b8:	9d 01       	movw	r18, r26
    15ba:	dc 01       	movw	r26, r24
    15bc:	ca 01       	movw	r24, r20
    15be:	ad 01       	movw	r20, r26
    15c0:	ef 93       	push	r30
    15c2:	41 d0       	rcall	.+130    	; 0x1646 <__divsf3_pse>
    15c4:	43 d1       	rcall	.+646    	; 0x184c <__fp_round>
    15c6:	0a d0       	rcall	.+20     	; 0x15dc <atan>
    15c8:	5f 91       	pop	r21
    15ca:	55 23       	and	r21, r21
    15cc:	31 f0       	breq	.+12     	; 0x15da <atan2+0x54>
    15ce:	2b ed       	ldi	r18, 0xDB	; 219
    15d0:	3f e0       	ldi	r19, 0x0F	; 15
    15d2:	49 e4       	ldi	r20, 0x49	; 73
    15d4:	50 fd       	sbrc	r21, 0
    15d6:	49 ec       	ldi	r20, 0xC9	; 201
    15d8:	23 c2       	rjmp	.+1094   	; 0x1a20 <__addsf3>
    15da:	08 95       	ret

000015dc <atan>:
    15dc:	df 93       	push	r29
    15de:	dd 27       	eor	r29, r29
    15e0:	b9 2f       	mov	r27, r25
    15e2:	bf 77       	andi	r27, 0x7F	; 127
    15e4:	40 e8       	ldi	r20, 0x80	; 128
    15e6:	5f e3       	ldi	r21, 0x3F	; 63
    15e8:	16 16       	cp	r1, r22
    15ea:	17 06       	cpc	r1, r23
    15ec:	48 07       	cpc	r20, r24
    15ee:	5b 07       	cpc	r21, r27
    15f0:	10 f4       	brcc	.+4      	; 0x15f6 <atan+0x1a>
    15f2:	d9 2f       	mov	r29, r25
    15f4:	65 d1       	rcall	.+714    	; 0x18c0 <inverse>
    15f6:	9f 93       	push	r25
    15f8:	8f 93       	push	r24
    15fa:	7f 93       	push	r23
    15fc:	6f 93       	push	r22
    15fe:	0c d2       	rcall	.+1048   	; 0x1a18 <square>
    1600:	e0 e7       	ldi	r30, 0x70	; 112
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	f0 d0       	rcall	.+480    	; 0x17e6 <__fp_powser>
    1606:	22 d1       	rcall	.+580    	; 0x184c <__fp_round>
    1608:	2f 91       	pop	r18
    160a:	3f 91       	pop	r19
    160c:	4f 91       	pop	r20
    160e:	5f 91       	pop	r21
    1610:	6a d1       	rcall	.+724    	; 0x18e6 <__mulsf3x>
    1612:	dd 23       	and	r29, r29
    1614:	49 f0       	breq	.+18     	; 0x1628 <atan+0x4c>
    1616:	90 58       	subi	r25, 0x80	; 128
    1618:	a2 ea       	ldi	r26, 0xA2	; 162
    161a:	2a ed       	ldi	r18, 0xDA	; 218
    161c:	3f e0       	ldi	r19, 0x0F	; 15
    161e:	49 ec       	ldi	r20, 0xC9	; 201
    1620:	5f e3       	ldi	r21, 0x3F	; 63
    1622:	d0 78       	andi	r29, 0x80	; 128
    1624:	5d 27       	eor	r21, r29
    1626:	0d d2       	rcall	.+1050   	; 0x1a42 <__addsf3x>
    1628:	df 91       	pop	r29
    162a:	10 c1       	rjmp	.+544    	; 0x184c <__fp_round>
    162c:	08 d1       	rcall	.+528    	; 0x183e <__fp_pscB>
    162e:	40 f0       	brcs	.+16     	; 0x1640 <atan+0x64>
    1630:	ff d0       	rcall	.+510    	; 0x1830 <__fp_pscA>
    1632:	30 f0       	brcs	.+12     	; 0x1640 <atan+0x64>
    1634:	21 f4       	brne	.+8      	; 0x163e <atan+0x62>
    1636:	5f 3f       	cpi	r21, 0xFF	; 255
    1638:	19 f0       	breq	.+6      	; 0x1640 <atan+0x64>
    163a:	cc c0       	rjmp	.+408    	; 0x17d4 <__fp_inf>
    163c:	51 11       	cpse	r21, r1
    163e:	3a c1       	rjmp	.+628    	; 0x18b4 <__fp_szero>
    1640:	cf c0       	rjmp	.+414    	; 0x17e0 <__fp_nan>

00001642 <__divsf3x>:
    1642:	15 d1       	rcall	.+554    	; 0x186e <__fp_split3>
    1644:	98 f3       	brcs	.-26     	; 0x162c <atan+0x50>

00001646 <__divsf3_pse>:
    1646:	99 23       	and	r25, r25
    1648:	c9 f3       	breq	.-14     	; 0x163c <atan+0x60>
    164a:	55 23       	and	r21, r21
    164c:	b1 f3       	breq	.-20     	; 0x163a <atan+0x5e>
    164e:	95 1b       	sub	r25, r21
    1650:	55 0b       	sbc	r21, r21
    1652:	bb 27       	eor	r27, r27
    1654:	aa 27       	eor	r26, r26
    1656:	62 17       	cp	r22, r18
    1658:	73 07       	cpc	r23, r19
    165a:	84 07       	cpc	r24, r20
    165c:	38 f0       	brcs	.+14     	; 0x166c <__divsf3_pse+0x26>
    165e:	9f 5f       	subi	r25, 0xFF	; 255
    1660:	5f 4f       	sbci	r21, 0xFF	; 255
    1662:	22 0f       	add	r18, r18
    1664:	33 1f       	adc	r19, r19
    1666:	44 1f       	adc	r20, r20
    1668:	aa 1f       	adc	r26, r26
    166a:	a9 f3       	breq	.-22     	; 0x1656 <__divsf3_pse+0x10>
    166c:	33 d0       	rcall	.+102    	; 0x16d4 <__divsf3_pse+0x8e>
    166e:	0e 2e       	mov	r0, r30
    1670:	3a f0       	brmi	.+14     	; 0x1680 <__divsf3_pse+0x3a>
    1672:	e0 e8       	ldi	r30, 0x80	; 128
    1674:	30 d0       	rcall	.+96     	; 0x16d6 <__divsf3_pse+0x90>
    1676:	91 50       	subi	r25, 0x01	; 1
    1678:	50 40       	sbci	r21, 0x00	; 0
    167a:	e6 95       	lsr	r30
    167c:	00 1c       	adc	r0, r0
    167e:	ca f7       	brpl	.-14     	; 0x1672 <__divsf3_pse+0x2c>
    1680:	29 d0       	rcall	.+82     	; 0x16d4 <__divsf3_pse+0x8e>
    1682:	fe 2f       	mov	r31, r30
    1684:	27 d0       	rcall	.+78     	; 0x16d4 <__divsf3_pse+0x8e>
    1686:	66 0f       	add	r22, r22
    1688:	77 1f       	adc	r23, r23
    168a:	88 1f       	adc	r24, r24
    168c:	bb 1f       	adc	r27, r27
    168e:	26 17       	cp	r18, r22
    1690:	37 07       	cpc	r19, r23
    1692:	48 07       	cpc	r20, r24
    1694:	ab 07       	cpc	r26, r27
    1696:	b0 e8       	ldi	r27, 0x80	; 128
    1698:	09 f0       	breq	.+2      	; 0x169c <__divsf3_pse+0x56>
    169a:	bb 0b       	sbc	r27, r27
    169c:	80 2d       	mov	r24, r0
    169e:	bf 01       	movw	r22, r30
    16a0:	ff 27       	eor	r31, r31
    16a2:	93 58       	subi	r25, 0x83	; 131
    16a4:	5f 4f       	sbci	r21, 0xFF	; 255
    16a6:	2a f0       	brmi	.+10     	; 0x16b2 <__divsf3_pse+0x6c>
    16a8:	9e 3f       	cpi	r25, 0xFE	; 254
    16aa:	51 05       	cpc	r21, r1
    16ac:	68 f0       	brcs	.+26     	; 0x16c8 <__divsf3_pse+0x82>
    16ae:	92 c0       	rjmp	.+292    	; 0x17d4 <__fp_inf>
    16b0:	01 c1       	rjmp	.+514    	; 0x18b4 <__fp_szero>
    16b2:	5f 3f       	cpi	r21, 0xFF	; 255
    16b4:	ec f3       	brlt	.-6      	; 0x16b0 <__divsf3_pse+0x6a>
    16b6:	98 3e       	cpi	r25, 0xE8	; 232
    16b8:	dc f3       	brlt	.-10     	; 0x16b0 <__divsf3_pse+0x6a>
    16ba:	86 95       	lsr	r24
    16bc:	77 95       	ror	r23
    16be:	67 95       	ror	r22
    16c0:	b7 95       	ror	r27
    16c2:	f7 95       	ror	r31
    16c4:	9f 5f       	subi	r25, 0xFF	; 255
    16c6:	c9 f7       	brne	.-14     	; 0x16ba <__divsf3_pse+0x74>
    16c8:	88 0f       	add	r24, r24
    16ca:	91 1d       	adc	r25, r1
    16cc:	96 95       	lsr	r25
    16ce:	87 95       	ror	r24
    16d0:	97 f9       	bld	r25, 7
    16d2:	08 95       	ret
    16d4:	e1 e0       	ldi	r30, 0x01	; 1
    16d6:	66 0f       	add	r22, r22
    16d8:	77 1f       	adc	r23, r23
    16da:	88 1f       	adc	r24, r24
    16dc:	bb 1f       	adc	r27, r27
    16de:	62 17       	cp	r22, r18
    16e0:	73 07       	cpc	r23, r19
    16e2:	84 07       	cpc	r24, r20
    16e4:	ba 07       	cpc	r27, r26
    16e6:	20 f0       	brcs	.+8      	; 0x16f0 <__divsf3_pse+0xaa>
    16e8:	62 1b       	sub	r22, r18
    16ea:	73 0b       	sbc	r23, r19
    16ec:	84 0b       	sbc	r24, r20
    16ee:	ba 0b       	sbc	r27, r26
    16f0:	ee 1f       	adc	r30, r30
    16f2:	88 f7       	brcc	.-30     	; 0x16d6 <__divsf3_pse+0x90>
    16f4:	e0 95       	com	r30
    16f6:	08 95       	ret

000016f8 <__fixsfsi>:
    16f8:	04 d0       	rcall	.+8      	; 0x1702 <__fixunssfsi>
    16fa:	68 94       	set
    16fc:	b1 11       	cpse	r27, r1
    16fe:	da c0       	rjmp	.+436    	; 0x18b4 <__fp_szero>
    1700:	08 95       	ret

00001702 <__fixunssfsi>:
    1702:	bd d0       	rcall	.+378    	; 0x187e <__fp_splitA>
    1704:	88 f0       	brcs	.+34     	; 0x1728 <__fixunssfsi+0x26>
    1706:	9f 57       	subi	r25, 0x7F	; 127
    1708:	90 f0       	brcs	.+36     	; 0x172e <__fixunssfsi+0x2c>
    170a:	b9 2f       	mov	r27, r25
    170c:	99 27       	eor	r25, r25
    170e:	b7 51       	subi	r27, 0x17	; 23
    1710:	a0 f0       	brcs	.+40     	; 0x173a <__fixunssfsi+0x38>
    1712:	d1 f0       	breq	.+52     	; 0x1748 <__fixunssfsi+0x46>
    1714:	66 0f       	add	r22, r22
    1716:	77 1f       	adc	r23, r23
    1718:	88 1f       	adc	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	1a f0       	brmi	.+6      	; 0x1724 <__fixunssfsi+0x22>
    171e:	ba 95       	dec	r27
    1720:	c9 f7       	brne	.-14     	; 0x1714 <__fixunssfsi+0x12>
    1722:	12 c0       	rjmp	.+36     	; 0x1748 <__fixunssfsi+0x46>
    1724:	b1 30       	cpi	r27, 0x01	; 1
    1726:	81 f0       	breq	.+32     	; 0x1748 <__fixunssfsi+0x46>
    1728:	c4 d0       	rcall	.+392    	; 0x18b2 <__fp_zero>
    172a:	b1 e0       	ldi	r27, 0x01	; 1
    172c:	08 95       	ret
    172e:	c1 c0       	rjmp	.+386    	; 0x18b2 <__fp_zero>
    1730:	67 2f       	mov	r22, r23
    1732:	78 2f       	mov	r23, r24
    1734:	88 27       	eor	r24, r24
    1736:	b8 5f       	subi	r27, 0xF8	; 248
    1738:	39 f0       	breq	.+14     	; 0x1748 <__fixunssfsi+0x46>
    173a:	b9 3f       	cpi	r27, 0xF9	; 249
    173c:	cc f3       	brlt	.-14     	; 0x1730 <__fixunssfsi+0x2e>
    173e:	86 95       	lsr	r24
    1740:	77 95       	ror	r23
    1742:	67 95       	ror	r22
    1744:	b3 95       	inc	r27
    1746:	d9 f7       	brne	.-10     	; 0x173e <__fixunssfsi+0x3c>
    1748:	3e f4       	brtc	.+14     	; 0x1758 <__fixunssfsi+0x56>
    174a:	90 95       	com	r25
    174c:	80 95       	com	r24
    174e:	70 95       	com	r23
    1750:	61 95       	neg	r22
    1752:	7f 4f       	sbci	r23, 0xFF	; 255
    1754:	8f 4f       	sbci	r24, 0xFF	; 255
    1756:	9f 4f       	sbci	r25, 0xFF	; 255
    1758:	08 95       	ret

0000175a <__floatunsisf>:
    175a:	e8 94       	clt
    175c:	09 c0       	rjmp	.+18     	; 0x1770 <__floatsisf+0x12>

0000175e <__floatsisf>:
    175e:	97 fb       	bst	r25, 7
    1760:	3e f4       	brtc	.+14     	; 0x1770 <__floatsisf+0x12>
    1762:	90 95       	com	r25
    1764:	80 95       	com	r24
    1766:	70 95       	com	r23
    1768:	61 95       	neg	r22
    176a:	7f 4f       	sbci	r23, 0xFF	; 255
    176c:	8f 4f       	sbci	r24, 0xFF	; 255
    176e:	9f 4f       	sbci	r25, 0xFF	; 255
    1770:	99 23       	and	r25, r25
    1772:	a9 f0       	breq	.+42     	; 0x179e <__floatsisf+0x40>
    1774:	f9 2f       	mov	r31, r25
    1776:	96 e9       	ldi	r25, 0x96	; 150
    1778:	bb 27       	eor	r27, r27
    177a:	93 95       	inc	r25
    177c:	f6 95       	lsr	r31
    177e:	87 95       	ror	r24
    1780:	77 95       	ror	r23
    1782:	67 95       	ror	r22
    1784:	b7 95       	ror	r27
    1786:	f1 11       	cpse	r31, r1
    1788:	f8 cf       	rjmp	.-16     	; 0x177a <__floatsisf+0x1c>
    178a:	fa f4       	brpl	.+62     	; 0x17ca <__floatsisf+0x6c>
    178c:	bb 0f       	add	r27, r27
    178e:	11 f4       	brne	.+4      	; 0x1794 <__floatsisf+0x36>
    1790:	60 ff       	sbrs	r22, 0
    1792:	1b c0       	rjmp	.+54     	; 0x17ca <__floatsisf+0x6c>
    1794:	6f 5f       	subi	r22, 0xFF	; 255
    1796:	7f 4f       	sbci	r23, 0xFF	; 255
    1798:	8f 4f       	sbci	r24, 0xFF	; 255
    179a:	9f 4f       	sbci	r25, 0xFF	; 255
    179c:	16 c0       	rjmp	.+44     	; 0x17ca <__floatsisf+0x6c>
    179e:	88 23       	and	r24, r24
    17a0:	11 f0       	breq	.+4      	; 0x17a6 <__floatsisf+0x48>
    17a2:	96 e9       	ldi	r25, 0x96	; 150
    17a4:	11 c0       	rjmp	.+34     	; 0x17c8 <__floatsisf+0x6a>
    17a6:	77 23       	and	r23, r23
    17a8:	21 f0       	breq	.+8      	; 0x17b2 <__floatsisf+0x54>
    17aa:	9e e8       	ldi	r25, 0x8E	; 142
    17ac:	87 2f       	mov	r24, r23
    17ae:	76 2f       	mov	r23, r22
    17b0:	05 c0       	rjmp	.+10     	; 0x17bc <__floatsisf+0x5e>
    17b2:	66 23       	and	r22, r22
    17b4:	71 f0       	breq	.+28     	; 0x17d2 <__floatsisf+0x74>
    17b6:	96 e8       	ldi	r25, 0x86	; 134
    17b8:	86 2f       	mov	r24, r22
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	2a f0       	brmi	.+10     	; 0x17ca <__floatsisf+0x6c>
    17c0:	9a 95       	dec	r25
    17c2:	66 0f       	add	r22, r22
    17c4:	77 1f       	adc	r23, r23
    17c6:	88 1f       	adc	r24, r24
    17c8:	da f7       	brpl	.-10     	; 0x17c0 <__floatsisf+0x62>
    17ca:	88 0f       	add	r24, r24
    17cc:	96 95       	lsr	r25
    17ce:	87 95       	ror	r24
    17d0:	97 f9       	bld	r25, 7
    17d2:	08 95       	ret

000017d4 <__fp_inf>:
    17d4:	97 f9       	bld	r25, 7
    17d6:	9f 67       	ori	r25, 0x7F	; 127
    17d8:	80 e8       	ldi	r24, 0x80	; 128
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	08 95       	ret

000017e0 <__fp_nan>:
    17e0:	9f ef       	ldi	r25, 0xFF	; 255
    17e2:	80 ec       	ldi	r24, 0xC0	; 192
    17e4:	08 95       	ret

000017e6 <__fp_powser>:
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	1f 93       	push	r17
    17ec:	0f 93       	push	r16
    17ee:	ff 92       	push	r15
    17f0:	ef 92       	push	r14
    17f2:	df 92       	push	r13
    17f4:	7b 01       	movw	r14, r22
    17f6:	8c 01       	movw	r16, r24
    17f8:	68 94       	set
    17fa:	05 c0       	rjmp	.+10     	; 0x1806 <__fp_powser+0x20>
    17fc:	da 2e       	mov	r13, r26
    17fe:	ef 01       	movw	r28, r30
    1800:	72 d0       	rcall	.+228    	; 0x18e6 <__mulsf3x>
    1802:	fe 01       	movw	r30, r28
    1804:	e8 94       	clt
    1806:	a5 91       	lpm	r26, Z+
    1808:	25 91       	lpm	r18, Z+
    180a:	35 91       	lpm	r19, Z+
    180c:	45 91       	lpm	r20, Z+
    180e:	55 91       	lpm	r21, Z+
    1810:	ae f3       	brts	.-22     	; 0x17fc <__fp_powser+0x16>
    1812:	ef 01       	movw	r28, r30
    1814:	16 d1       	rcall	.+556    	; 0x1a42 <__addsf3x>
    1816:	fe 01       	movw	r30, r28
    1818:	97 01       	movw	r18, r14
    181a:	a8 01       	movw	r20, r16
    181c:	da 94       	dec	r13
    181e:	79 f7       	brne	.-34     	; 0x17fe <__fp_powser+0x18>
    1820:	df 90       	pop	r13
    1822:	ef 90       	pop	r14
    1824:	ff 90       	pop	r15
    1826:	0f 91       	pop	r16
    1828:	1f 91       	pop	r17
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <__fp_pscA>:
    1830:	00 24       	eor	r0, r0
    1832:	0a 94       	dec	r0
    1834:	16 16       	cp	r1, r22
    1836:	17 06       	cpc	r1, r23
    1838:	18 06       	cpc	r1, r24
    183a:	09 06       	cpc	r0, r25
    183c:	08 95       	ret

0000183e <__fp_pscB>:
    183e:	00 24       	eor	r0, r0
    1840:	0a 94       	dec	r0
    1842:	12 16       	cp	r1, r18
    1844:	13 06       	cpc	r1, r19
    1846:	14 06       	cpc	r1, r20
    1848:	05 06       	cpc	r0, r21
    184a:	08 95       	ret

0000184c <__fp_round>:
    184c:	09 2e       	mov	r0, r25
    184e:	03 94       	inc	r0
    1850:	00 0c       	add	r0, r0
    1852:	11 f4       	brne	.+4      	; 0x1858 <__fp_round+0xc>
    1854:	88 23       	and	r24, r24
    1856:	52 f0       	brmi	.+20     	; 0x186c <__fp_round+0x20>
    1858:	bb 0f       	add	r27, r27
    185a:	40 f4       	brcc	.+16     	; 0x186c <__fp_round+0x20>
    185c:	bf 2b       	or	r27, r31
    185e:	11 f4       	brne	.+4      	; 0x1864 <__fp_round+0x18>
    1860:	60 ff       	sbrs	r22, 0
    1862:	04 c0       	rjmp	.+8      	; 0x186c <__fp_round+0x20>
    1864:	6f 5f       	subi	r22, 0xFF	; 255
    1866:	7f 4f       	sbci	r23, 0xFF	; 255
    1868:	8f 4f       	sbci	r24, 0xFF	; 255
    186a:	9f 4f       	sbci	r25, 0xFF	; 255
    186c:	08 95       	ret

0000186e <__fp_split3>:
    186e:	57 fd       	sbrc	r21, 7
    1870:	90 58       	subi	r25, 0x80	; 128
    1872:	44 0f       	add	r20, r20
    1874:	55 1f       	adc	r21, r21
    1876:	59 f0       	breq	.+22     	; 0x188e <__fp_splitA+0x10>
    1878:	5f 3f       	cpi	r21, 0xFF	; 255
    187a:	71 f0       	breq	.+28     	; 0x1898 <__fp_splitA+0x1a>
    187c:	47 95       	ror	r20

0000187e <__fp_splitA>:
    187e:	88 0f       	add	r24, r24
    1880:	97 fb       	bst	r25, 7
    1882:	99 1f       	adc	r25, r25
    1884:	61 f0       	breq	.+24     	; 0x189e <__fp_splitA+0x20>
    1886:	9f 3f       	cpi	r25, 0xFF	; 255
    1888:	79 f0       	breq	.+30     	; 0x18a8 <__fp_splitA+0x2a>
    188a:	87 95       	ror	r24
    188c:	08 95       	ret
    188e:	12 16       	cp	r1, r18
    1890:	13 06       	cpc	r1, r19
    1892:	14 06       	cpc	r1, r20
    1894:	55 1f       	adc	r21, r21
    1896:	f2 cf       	rjmp	.-28     	; 0x187c <__fp_split3+0xe>
    1898:	46 95       	lsr	r20
    189a:	f1 df       	rcall	.-30     	; 0x187e <__fp_splitA>
    189c:	08 c0       	rjmp	.+16     	; 0x18ae <__fp_splitA+0x30>
    189e:	16 16       	cp	r1, r22
    18a0:	17 06       	cpc	r1, r23
    18a2:	18 06       	cpc	r1, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	f1 cf       	rjmp	.-30     	; 0x188a <__fp_splitA+0xc>
    18a8:	86 95       	lsr	r24
    18aa:	71 05       	cpc	r23, r1
    18ac:	61 05       	cpc	r22, r1
    18ae:	08 94       	sec
    18b0:	08 95       	ret

000018b2 <__fp_zero>:
    18b2:	e8 94       	clt

000018b4 <__fp_szero>:
    18b4:	bb 27       	eor	r27, r27
    18b6:	66 27       	eor	r22, r22
    18b8:	77 27       	eor	r23, r23
    18ba:	cb 01       	movw	r24, r22
    18bc:	97 f9       	bld	r25, 7
    18be:	08 95       	ret

000018c0 <inverse>:
    18c0:	9b 01       	movw	r18, r22
    18c2:	ac 01       	movw	r20, r24
    18c4:	60 e0       	ldi	r22, 0x00	; 0
    18c6:	70 e0       	ldi	r23, 0x00	; 0
    18c8:	80 e8       	ldi	r24, 0x80	; 128
    18ca:	9f e3       	ldi	r25, 0x3F	; 63
    18cc:	0d c1       	rjmp	.+538    	; 0x1ae8 <__divsf3>

000018ce <__mulsf3>:
    18ce:	0b d0       	rcall	.+22     	; 0x18e6 <__mulsf3x>
    18d0:	bd cf       	rjmp	.-134    	; 0x184c <__fp_round>
    18d2:	ae df       	rcall	.-164    	; 0x1830 <__fp_pscA>
    18d4:	28 f0       	brcs	.+10     	; 0x18e0 <__mulsf3+0x12>
    18d6:	b3 df       	rcall	.-154    	; 0x183e <__fp_pscB>
    18d8:	18 f0       	brcs	.+6      	; 0x18e0 <__mulsf3+0x12>
    18da:	95 23       	and	r25, r21
    18dc:	09 f0       	breq	.+2      	; 0x18e0 <__mulsf3+0x12>
    18de:	7a cf       	rjmp	.-268    	; 0x17d4 <__fp_inf>
    18e0:	7f cf       	rjmp	.-258    	; 0x17e0 <__fp_nan>
    18e2:	11 24       	eor	r1, r1
    18e4:	e7 cf       	rjmp	.-50     	; 0x18b4 <__fp_szero>

000018e6 <__mulsf3x>:
    18e6:	c3 df       	rcall	.-122    	; 0x186e <__fp_split3>
    18e8:	a0 f3       	brcs	.-24     	; 0x18d2 <__mulsf3+0x4>

000018ea <__mulsf3_pse>:
    18ea:	95 9f       	mul	r25, r21
    18ec:	d1 f3       	breq	.-12     	; 0x18e2 <__mulsf3+0x14>
    18ee:	95 0f       	add	r25, r21
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	55 1f       	adc	r21, r21
    18f4:	62 9f       	mul	r22, r18
    18f6:	f0 01       	movw	r30, r0
    18f8:	72 9f       	mul	r23, r18
    18fa:	bb 27       	eor	r27, r27
    18fc:	f0 0d       	add	r31, r0
    18fe:	b1 1d       	adc	r27, r1
    1900:	63 9f       	mul	r22, r19
    1902:	aa 27       	eor	r26, r26
    1904:	f0 0d       	add	r31, r0
    1906:	b1 1d       	adc	r27, r1
    1908:	aa 1f       	adc	r26, r26
    190a:	64 9f       	mul	r22, r20
    190c:	66 27       	eor	r22, r22
    190e:	b0 0d       	add	r27, r0
    1910:	a1 1d       	adc	r26, r1
    1912:	66 1f       	adc	r22, r22
    1914:	82 9f       	mul	r24, r18
    1916:	22 27       	eor	r18, r18
    1918:	b0 0d       	add	r27, r0
    191a:	a1 1d       	adc	r26, r1
    191c:	62 1f       	adc	r22, r18
    191e:	73 9f       	mul	r23, r19
    1920:	b0 0d       	add	r27, r0
    1922:	a1 1d       	adc	r26, r1
    1924:	62 1f       	adc	r22, r18
    1926:	83 9f       	mul	r24, r19
    1928:	a0 0d       	add	r26, r0
    192a:	61 1d       	adc	r22, r1
    192c:	22 1f       	adc	r18, r18
    192e:	74 9f       	mul	r23, r20
    1930:	33 27       	eor	r19, r19
    1932:	a0 0d       	add	r26, r0
    1934:	61 1d       	adc	r22, r1
    1936:	23 1f       	adc	r18, r19
    1938:	84 9f       	mul	r24, r20
    193a:	60 0d       	add	r22, r0
    193c:	21 1d       	adc	r18, r1
    193e:	82 2f       	mov	r24, r18
    1940:	76 2f       	mov	r23, r22
    1942:	6a 2f       	mov	r22, r26
    1944:	11 24       	eor	r1, r1
    1946:	9f 57       	subi	r25, 0x7F	; 127
    1948:	50 40       	sbci	r21, 0x00	; 0
    194a:	8a f0       	brmi	.+34     	; 0x196e <__mulsf3_pse+0x84>
    194c:	e1 f0       	breq	.+56     	; 0x1986 <__mulsf3_pse+0x9c>
    194e:	88 23       	and	r24, r24
    1950:	4a f0       	brmi	.+18     	; 0x1964 <__mulsf3_pse+0x7a>
    1952:	ee 0f       	add	r30, r30
    1954:	ff 1f       	adc	r31, r31
    1956:	bb 1f       	adc	r27, r27
    1958:	66 1f       	adc	r22, r22
    195a:	77 1f       	adc	r23, r23
    195c:	88 1f       	adc	r24, r24
    195e:	91 50       	subi	r25, 0x01	; 1
    1960:	50 40       	sbci	r21, 0x00	; 0
    1962:	a9 f7       	brne	.-22     	; 0x194e <__mulsf3_pse+0x64>
    1964:	9e 3f       	cpi	r25, 0xFE	; 254
    1966:	51 05       	cpc	r21, r1
    1968:	70 f0       	brcs	.+28     	; 0x1986 <__mulsf3_pse+0x9c>
    196a:	34 cf       	rjmp	.-408    	; 0x17d4 <__fp_inf>
    196c:	a3 cf       	rjmp	.-186    	; 0x18b4 <__fp_szero>
    196e:	5f 3f       	cpi	r21, 0xFF	; 255
    1970:	ec f3       	brlt	.-6      	; 0x196c <__mulsf3_pse+0x82>
    1972:	98 3e       	cpi	r25, 0xE8	; 232
    1974:	dc f3       	brlt	.-10     	; 0x196c <__mulsf3_pse+0x82>
    1976:	86 95       	lsr	r24
    1978:	77 95       	ror	r23
    197a:	67 95       	ror	r22
    197c:	b7 95       	ror	r27
    197e:	f7 95       	ror	r31
    1980:	e7 95       	ror	r30
    1982:	9f 5f       	subi	r25, 0xFF	; 255
    1984:	c1 f7       	brne	.-16     	; 0x1976 <__mulsf3_pse+0x8c>
    1986:	fe 2b       	or	r31, r30
    1988:	88 0f       	add	r24, r24
    198a:	91 1d       	adc	r25, r1
    198c:	96 95       	lsr	r25
    198e:	87 95       	ror	r24
    1990:	97 f9       	bld	r25, 7
    1992:	08 95       	ret
    1994:	11 f4       	brne	.+4      	; 0x199a <__mulsf3_pse+0xb0>
    1996:	0e f4       	brtc	.+2      	; 0x199a <__mulsf3_pse+0xb0>
    1998:	23 cf       	rjmp	.-442    	; 0x17e0 <__fp_nan>
    199a:	a8 c0       	rjmp	.+336    	; 0x1aec <__fp_mpack>

0000199c <sqrt>:
    199c:	70 df       	rcall	.-288    	; 0x187e <__fp_splitA>
    199e:	d0 f3       	brcs	.-12     	; 0x1994 <__mulsf3_pse+0xaa>
    19a0:	99 23       	and	r25, r25
    19a2:	d9 f3       	breq	.-10     	; 0x199a <__mulsf3_pse+0xb0>
    19a4:	ce f3       	brts	.-14     	; 0x1998 <__mulsf3_pse+0xae>
    19a6:	9f 57       	subi	r25, 0x7F	; 127
    19a8:	55 0b       	sbc	r21, r21
    19aa:	87 ff       	sbrs	r24, 7
    19ac:	ad d0       	rcall	.+346    	; 0x1b08 <__fp_norm2>
    19ae:	00 24       	eor	r0, r0
    19b0:	a0 e6       	ldi	r26, 0x60	; 96
    19b2:	40 ea       	ldi	r20, 0xA0	; 160
    19b4:	90 01       	movw	r18, r0
    19b6:	80 58       	subi	r24, 0x80	; 128
    19b8:	56 95       	lsr	r21
    19ba:	97 95       	ror	r25
    19bc:	28 f4       	brcc	.+10     	; 0x19c8 <sqrt+0x2c>
    19be:	80 5c       	subi	r24, 0xC0	; 192
    19c0:	66 0f       	add	r22, r22
    19c2:	77 1f       	adc	r23, r23
    19c4:	88 1f       	adc	r24, r24
    19c6:	20 f0       	brcs	.+8      	; 0x19d0 <sqrt+0x34>
    19c8:	26 17       	cp	r18, r22
    19ca:	37 07       	cpc	r19, r23
    19cc:	48 07       	cpc	r20, r24
    19ce:	30 f4       	brcc	.+12     	; 0x19dc <sqrt+0x40>
    19d0:	62 1b       	sub	r22, r18
    19d2:	73 0b       	sbc	r23, r19
    19d4:	84 0b       	sbc	r24, r20
    19d6:	20 29       	or	r18, r0
    19d8:	31 29       	or	r19, r1
    19da:	4a 2b       	or	r20, r26
    19dc:	a6 95       	lsr	r26
    19de:	17 94       	ror	r1
    19e0:	07 94       	ror	r0
    19e2:	20 25       	eor	r18, r0
    19e4:	31 25       	eor	r19, r1
    19e6:	4a 27       	eor	r20, r26
    19e8:	58 f7       	brcc	.-42     	; 0x19c0 <sqrt+0x24>
    19ea:	66 0f       	add	r22, r22
    19ec:	77 1f       	adc	r23, r23
    19ee:	88 1f       	adc	r24, r24
    19f0:	20 f0       	brcs	.+8      	; 0x19fa <sqrt+0x5e>
    19f2:	26 17       	cp	r18, r22
    19f4:	37 07       	cpc	r19, r23
    19f6:	48 07       	cpc	r20, r24
    19f8:	30 f4       	brcc	.+12     	; 0x1a06 <sqrt+0x6a>
    19fa:	62 0b       	sbc	r22, r18
    19fc:	73 0b       	sbc	r23, r19
    19fe:	84 0b       	sbc	r24, r20
    1a00:	20 0d       	add	r18, r0
    1a02:	31 1d       	adc	r19, r1
    1a04:	41 1d       	adc	r20, r1
    1a06:	a0 95       	com	r26
    1a08:	81 f7       	brne	.-32     	; 0x19ea <sqrt+0x4e>
    1a0a:	b9 01       	movw	r22, r18
    1a0c:	84 2f       	mov	r24, r20
    1a0e:	91 58       	subi	r25, 0x81	; 129
    1a10:	88 0f       	add	r24, r24
    1a12:	96 95       	lsr	r25
    1a14:	87 95       	ror	r24
    1a16:	08 95       	ret

00001a18 <square>:
    1a18:	9b 01       	movw	r18, r22
    1a1a:	ac 01       	movw	r20, r24
    1a1c:	58 cf       	rjmp	.-336    	; 0x18ce <__mulsf3>

00001a1e <__subsf3>:
    1a1e:	50 58       	subi	r21, 0x80	; 128

00001a20 <__addsf3>:
    1a20:	bb 27       	eor	r27, r27
    1a22:	aa 27       	eor	r26, r26
    1a24:	0e d0       	rcall	.+28     	; 0x1a42 <__addsf3x>
    1a26:	12 cf       	rjmp	.-476    	; 0x184c <__fp_round>
    1a28:	03 df       	rcall	.-506    	; 0x1830 <__fp_pscA>
    1a2a:	30 f0       	brcs	.+12     	; 0x1a38 <__addsf3+0x18>
    1a2c:	08 df       	rcall	.-496    	; 0x183e <__fp_pscB>
    1a2e:	20 f0       	brcs	.+8      	; 0x1a38 <__addsf3+0x18>
    1a30:	31 f4       	brne	.+12     	; 0x1a3e <__addsf3+0x1e>
    1a32:	9f 3f       	cpi	r25, 0xFF	; 255
    1a34:	11 f4       	brne	.+4      	; 0x1a3a <__addsf3+0x1a>
    1a36:	1e f4       	brtc	.+6      	; 0x1a3e <__addsf3+0x1e>
    1a38:	d3 ce       	rjmp	.-602    	; 0x17e0 <__fp_nan>
    1a3a:	0e f4       	brtc	.+2      	; 0x1a3e <__addsf3+0x1e>
    1a3c:	e0 95       	com	r30
    1a3e:	e7 fb       	bst	r30, 7
    1a40:	c9 ce       	rjmp	.-622    	; 0x17d4 <__fp_inf>

00001a42 <__addsf3x>:
    1a42:	e9 2f       	mov	r30, r25
    1a44:	14 df       	rcall	.-472    	; 0x186e <__fp_split3>
    1a46:	80 f3       	brcs	.-32     	; 0x1a28 <__addsf3+0x8>
    1a48:	ba 17       	cp	r27, r26
    1a4a:	62 07       	cpc	r22, r18
    1a4c:	73 07       	cpc	r23, r19
    1a4e:	84 07       	cpc	r24, r20
    1a50:	95 07       	cpc	r25, r21
    1a52:	18 f0       	brcs	.+6      	; 0x1a5a <__addsf3x+0x18>
    1a54:	71 f4       	brne	.+28     	; 0x1a72 <__addsf3x+0x30>
    1a56:	9e f5       	brtc	.+102    	; 0x1abe <__addsf3x+0x7c>
    1a58:	2c cf       	rjmp	.-424    	; 0x18b2 <__fp_zero>
    1a5a:	0e f4       	brtc	.+2      	; 0x1a5e <__addsf3x+0x1c>
    1a5c:	e0 95       	com	r30
    1a5e:	0b 2e       	mov	r0, r27
    1a60:	ba 2f       	mov	r27, r26
    1a62:	a0 2d       	mov	r26, r0
    1a64:	0b 01       	movw	r0, r22
    1a66:	b9 01       	movw	r22, r18
    1a68:	90 01       	movw	r18, r0
    1a6a:	0c 01       	movw	r0, r24
    1a6c:	ca 01       	movw	r24, r20
    1a6e:	a0 01       	movw	r20, r0
    1a70:	11 24       	eor	r1, r1
    1a72:	ff 27       	eor	r31, r31
    1a74:	59 1b       	sub	r21, r25
    1a76:	99 f0       	breq	.+38     	; 0x1a9e <__addsf3x+0x5c>
    1a78:	59 3f       	cpi	r21, 0xF9	; 249
    1a7a:	50 f4       	brcc	.+20     	; 0x1a90 <__addsf3x+0x4e>
    1a7c:	50 3e       	cpi	r21, 0xE0	; 224
    1a7e:	68 f1       	brcs	.+90     	; 0x1ada <__addsf3x+0x98>
    1a80:	1a 16       	cp	r1, r26
    1a82:	f0 40       	sbci	r31, 0x00	; 0
    1a84:	a2 2f       	mov	r26, r18
    1a86:	23 2f       	mov	r18, r19
    1a88:	34 2f       	mov	r19, r20
    1a8a:	44 27       	eor	r20, r20
    1a8c:	58 5f       	subi	r21, 0xF8	; 248
    1a8e:	f3 cf       	rjmp	.-26     	; 0x1a76 <__addsf3x+0x34>
    1a90:	46 95       	lsr	r20
    1a92:	37 95       	ror	r19
    1a94:	27 95       	ror	r18
    1a96:	a7 95       	ror	r26
    1a98:	f0 40       	sbci	r31, 0x00	; 0
    1a9a:	53 95       	inc	r21
    1a9c:	c9 f7       	brne	.-14     	; 0x1a90 <__addsf3x+0x4e>
    1a9e:	7e f4       	brtc	.+30     	; 0x1abe <__addsf3x+0x7c>
    1aa0:	1f 16       	cp	r1, r31
    1aa2:	ba 0b       	sbc	r27, r26
    1aa4:	62 0b       	sbc	r22, r18
    1aa6:	73 0b       	sbc	r23, r19
    1aa8:	84 0b       	sbc	r24, r20
    1aaa:	ba f0       	brmi	.+46     	; 0x1ada <__addsf3x+0x98>
    1aac:	91 50       	subi	r25, 0x01	; 1
    1aae:	a1 f0       	breq	.+40     	; 0x1ad8 <__addsf3x+0x96>
    1ab0:	ff 0f       	add	r31, r31
    1ab2:	bb 1f       	adc	r27, r27
    1ab4:	66 1f       	adc	r22, r22
    1ab6:	77 1f       	adc	r23, r23
    1ab8:	88 1f       	adc	r24, r24
    1aba:	c2 f7       	brpl	.-16     	; 0x1aac <__addsf3x+0x6a>
    1abc:	0e c0       	rjmp	.+28     	; 0x1ada <__addsf3x+0x98>
    1abe:	ba 0f       	add	r27, r26
    1ac0:	62 1f       	adc	r22, r18
    1ac2:	73 1f       	adc	r23, r19
    1ac4:	84 1f       	adc	r24, r20
    1ac6:	48 f4       	brcc	.+18     	; 0x1ada <__addsf3x+0x98>
    1ac8:	87 95       	ror	r24
    1aca:	77 95       	ror	r23
    1acc:	67 95       	ror	r22
    1ace:	b7 95       	ror	r27
    1ad0:	f7 95       	ror	r31
    1ad2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ad4:	08 f0       	brcs	.+2      	; 0x1ad8 <__addsf3x+0x96>
    1ad6:	b3 cf       	rjmp	.-154    	; 0x1a3e <__addsf3+0x1e>
    1ad8:	93 95       	inc	r25
    1ada:	88 0f       	add	r24, r24
    1adc:	08 f0       	brcs	.+2      	; 0x1ae0 <__addsf3x+0x9e>
    1ade:	99 27       	eor	r25, r25
    1ae0:	ee 0f       	add	r30, r30
    1ae2:	97 95       	ror	r25
    1ae4:	87 95       	ror	r24
    1ae6:	08 95       	ret

00001ae8 <__divsf3>:
    1ae8:	ac dd       	rcall	.-1192   	; 0x1642 <__divsf3x>
    1aea:	b0 ce       	rjmp	.-672    	; 0x184c <__fp_round>

00001aec <__fp_mpack>:
    1aec:	9f 3f       	cpi	r25, 0xFF	; 255
    1aee:	31 f0       	breq	.+12     	; 0x1afc <__fp_mpack_finite+0xc>

00001af0 <__fp_mpack_finite>:
    1af0:	91 50       	subi	r25, 0x01	; 1
    1af2:	20 f4       	brcc	.+8      	; 0x1afc <__fp_mpack_finite+0xc>
    1af4:	87 95       	ror	r24
    1af6:	77 95       	ror	r23
    1af8:	67 95       	ror	r22
    1afa:	b7 95       	ror	r27
    1afc:	88 0f       	add	r24, r24
    1afe:	91 1d       	adc	r25, r1
    1b00:	96 95       	lsr	r25
    1b02:	87 95       	ror	r24
    1b04:	97 f9       	bld	r25, 7
    1b06:	08 95       	ret

00001b08 <__fp_norm2>:
    1b08:	91 50       	subi	r25, 0x01	; 1
    1b0a:	50 40       	sbci	r21, 0x00	; 0
    1b0c:	66 0f       	add	r22, r22
    1b0e:	77 1f       	adc	r23, r23
    1b10:	88 1f       	adc	r24, r24
    1b12:	d2 f7       	brpl	.-12     	; 0x1b08 <__fp_norm2>
    1b14:	08 95       	ret

00001b16 <__divmodhi4>:
    1b16:	97 fb       	bst	r25, 7
    1b18:	07 2e       	mov	r0, r23
    1b1a:	16 f4       	brtc	.+4      	; 0x1b20 <__divmodhi4+0xa>
    1b1c:	00 94       	com	r0
    1b1e:	07 d0       	rcall	.+14     	; 0x1b2e <__divmodhi4_neg1>
    1b20:	77 fd       	sbrc	r23, 7
    1b22:	09 d0       	rcall	.+18     	; 0x1b36 <__divmodhi4_neg2>
    1b24:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__udivmodhi4>
    1b28:	07 fc       	sbrc	r0, 7
    1b2a:	05 d0       	rcall	.+10     	; 0x1b36 <__divmodhi4_neg2>
    1b2c:	3e f4       	brtc	.+14     	; 0x1b3c <__divmodhi4_exit>

00001b2e <__divmodhi4_neg1>:
    1b2e:	90 95       	com	r25
    1b30:	81 95       	neg	r24
    1b32:	9f 4f       	sbci	r25, 0xFF	; 255
    1b34:	08 95       	ret

00001b36 <__divmodhi4_neg2>:
    1b36:	70 95       	com	r23
    1b38:	61 95       	neg	r22
    1b3a:	7f 4f       	sbci	r23, 0xFF	; 255

00001b3c <__divmodhi4_exit>:
    1b3c:	08 95       	ret

00001b3e <__divmodsi4>:
    1b3e:	05 2e       	mov	r0, r21
    1b40:	97 fb       	bst	r25, 7
    1b42:	1e f4       	brtc	.+6      	; 0x1b4a <__divmodsi4+0xc>
    1b44:	00 94       	com	r0
    1b46:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__negsi2>
    1b4a:	57 fd       	sbrc	r21, 7
    1b4c:	07 d0       	rcall	.+14     	; 0x1b5c <__divmodsi4_neg2>
    1b4e:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__udivmodsi4>
    1b52:	07 fc       	sbrc	r0, 7
    1b54:	03 d0       	rcall	.+6      	; 0x1b5c <__divmodsi4_neg2>
    1b56:	4e f4       	brtc	.+18     	; 0x1b6a <__divmodsi4_exit>
    1b58:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <__negsi2>

00001b5c <__divmodsi4_neg2>:
    1b5c:	50 95       	com	r21
    1b5e:	40 95       	com	r20
    1b60:	30 95       	com	r19
    1b62:	21 95       	neg	r18
    1b64:	3f 4f       	sbci	r19, 0xFF	; 255
    1b66:	4f 4f       	sbci	r20, 0xFF	; 255
    1b68:	5f 4f       	sbci	r21, 0xFF	; 255

00001b6a <__divmodsi4_exit>:
    1b6a:	08 95       	ret

00001b6c <__negsi2>:
    1b6c:	90 95       	com	r25
    1b6e:	80 95       	com	r24
    1b70:	70 95       	com	r23
    1b72:	61 95       	neg	r22
    1b74:	7f 4f       	sbci	r23, 0xFF	; 255
    1b76:	8f 4f       	sbci	r24, 0xFF	; 255
    1b78:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7a:	08 95       	ret

00001b7c <__udivmodhi4>:
    1b7c:	aa 1b       	sub	r26, r26
    1b7e:	bb 1b       	sub	r27, r27
    1b80:	51 e1       	ldi	r21, 0x11	; 17
    1b82:	07 c0       	rjmp	.+14     	; 0x1b92 <__udivmodhi4_ep>

00001b84 <__udivmodhi4_loop>:
    1b84:	aa 1f       	adc	r26, r26
    1b86:	bb 1f       	adc	r27, r27
    1b88:	a6 17       	cp	r26, r22
    1b8a:	b7 07       	cpc	r27, r23
    1b8c:	10 f0       	brcs	.+4      	; 0x1b92 <__udivmodhi4_ep>
    1b8e:	a6 1b       	sub	r26, r22
    1b90:	b7 0b       	sbc	r27, r23

00001b92 <__udivmodhi4_ep>:
    1b92:	88 1f       	adc	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	5a 95       	dec	r21
    1b98:	a9 f7       	brne	.-22     	; 0x1b84 <__udivmodhi4_loop>
    1b9a:	80 95       	com	r24
    1b9c:	90 95       	com	r25
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	cd 01       	movw	r24, r26
    1ba2:	08 95       	ret

00001ba4 <__udivmodsi4>:
    1ba4:	a1 e2       	ldi	r26, 0x21	; 33
    1ba6:	1a 2e       	mov	r1, r26
    1ba8:	aa 1b       	sub	r26, r26
    1baa:	bb 1b       	sub	r27, r27
    1bac:	fd 01       	movw	r30, r26
    1bae:	0d c0       	rjmp	.+26     	; 0x1bca <__udivmodsi4_ep>

00001bb0 <__udivmodsi4_loop>:
    1bb0:	aa 1f       	adc	r26, r26
    1bb2:	bb 1f       	adc	r27, r27
    1bb4:	ee 1f       	adc	r30, r30
    1bb6:	ff 1f       	adc	r31, r31
    1bb8:	a2 17       	cp	r26, r18
    1bba:	b3 07       	cpc	r27, r19
    1bbc:	e4 07       	cpc	r30, r20
    1bbe:	f5 07       	cpc	r31, r21
    1bc0:	20 f0       	brcs	.+8      	; 0x1bca <__udivmodsi4_ep>
    1bc2:	a2 1b       	sub	r26, r18
    1bc4:	b3 0b       	sbc	r27, r19
    1bc6:	e4 0b       	sbc	r30, r20
    1bc8:	f5 0b       	sbc	r31, r21

00001bca <__udivmodsi4_ep>:
    1bca:	66 1f       	adc	r22, r22
    1bcc:	77 1f       	adc	r23, r23
    1bce:	88 1f       	adc	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	1a 94       	dec	r1
    1bd4:	69 f7       	brne	.-38     	; 0x1bb0 <__udivmodsi4_loop>
    1bd6:	60 95       	com	r22
    1bd8:	70 95       	com	r23
    1bda:	80 95       	com	r24
    1bdc:	90 95       	com	r25
    1bde:	9b 01       	movw	r18, r22
    1be0:	ac 01       	movw	r20, r24
    1be2:	bd 01       	movw	r22, r26
    1be4:	cf 01       	movw	r24, r30
    1be6:	08 95       	ret

00001be8 <do_rand>:
    1be8:	8f 92       	push	r8
    1bea:	9f 92       	push	r9
    1bec:	af 92       	push	r10
    1bee:	bf 92       	push	r11
    1bf0:	cf 92       	push	r12
    1bf2:	df 92       	push	r13
    1bf4:	ef 92       	push	r14
    1bf6:	ff 92       	push	r15
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	ec 01       	movw	r28, r24
    1bfe:	68 81       	ld	r22, Y
    1c00:	79 81       	ldd	r23, Y+1	; 0x01
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	9b 81       	ldd	r25, Y+3	; 0x03
    1c06:	61 15       	cp	r22, r1
    1c08:	71 05       	cpc	r23, r1
    1c0a:	81 05       	cpc	r24, r1
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	21 f4       	brne	.+8      	; 0x1c18 <do_rand+0x30>
    1c10:	64 e2       	ldi	r22, 0x24	; 36
    1c12:	79 ed       	ldi	r23, 0xD9	; 217
    1c14:	8b e5       	ldi	r24, 0x5B	; 91
    1c16:	97 e0       	ldi	r25, 0x07	; 7
    1c18:	2d e1       	ldi	r18, 0x1D	; 29
    1c1a:	33 ef       	ldi	r19, 0xF3	; 243
    1c1c:	41 e0       	ldi	r20, 0x01	; 1
    1c1e:	50 e0       	ldi	r21, 0x00	; 0
    1c20:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__divmodsi4>
    1c24:	49 01       	movw	r8, r18
    1c26:	5a 01       	movw	r10, r20
    1c28:	9b 01       	movw	r18, r22
    1c2a:	ac 01       	movw	r20, r24
    1c2c:	a7 ea       	ldi	r26, 0xA7	; 167
    1c2e:	b1 e4       	ldi	r27, 0x41	; 65
    1c30:	0e 94 a7 12 	call	0x254e	; 0x254e <__muluhisi3>
    1c34:	6b 01       	movw	r12, r22
    1c36:	7c 01       	movw	r14, r24
    1c38:	ac ee       	ldi	r26, 0xEC	; 236
    1c3a:	b4 ef       	ldi	r27, 0xF4	; 244
    1c3c:	a5 01       	movw	r20, r10
    1c3e:	94 01       	movw	r18, r8
    1c40:	0e 94 b5 12 	call	0x256a	; 0x256a <__mulohisi3>
    1c44:	c6 0e       	add	r12, r22
    1c46:	d7 1e       	adc	r13, r23
    1c48:	e8 1e       	adc	r14, r24
    1c4a:	f9 1e       	adc	r15, r25
    1c4c:	f7 fe       	sbrs	r15, 7
    1c4e:	06 c0       	rjmp	.+12     	; 0x1c5c <do_rand+0x74>
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	c8 1a       	sub	r12, r24
    1c54:	d1 08       	sbc	r13, r1
    1c56:	e1 08       	sbc	r14, r1
    1c58:	80 e8       	ldi	r24, 0x80	; 128
    1c5a:	f8 0a       	sbc	r15, r24
    1c5c:	c8 82       	st	Y, r12
    1c5e:	d9 82       	std	Y+1, r13	; 0x01
    1c60:	ea 82       	std	Y+2, r14	; 0x02
    1c62:	fb 82       	std	Y+3, r15	; 0x03
    1c64:	c6 01       	movw	r24, r12
    1c66:	9f 77       	andi	r25, 0x7F	; 127
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	ff 90       	pop	r15
    1c6e:	ef 90       	pop	r14
    1c70:	df 90       	pop	r13
    1c72:	cf 90       	pop	r12
    1c74:	bf 90       	pop	r11
    1c76:	af 90       	pop	r10
    1c78:	9f 90       	pop	r9
    1c7a:	8f 90       	pop	r8
    1c7c:	08 95       	ret

00001c7e <rand_r>:
    1c7e:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <do_rand>
    1c82:	08 95       	ret

00001c84 <rand>:
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	91 e0       	ldi	r25, 0x01	; 1
    1c88:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <do_rand>
    1c8c:	08 95       	ret

00001c8e <srand>:
    1c8e:	a0 e0       	ldi	r26, 0x00	; 0
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	80 93 00 01 	sts	0x0100, r24
    1c96:	90 93 01 01 	sts	0x0101, r25
    1c9a:	a0 93 02 01 	sts	0x0102, r26
    1c9e:	b0 93 03 01 	sts	0x0103, r27
    1ca2:	08 95       	ret

00001ca4 <fdevopen>:
    1ca4:	0f 93       	push	r16
    1ca6:	1f 93       	push	r17
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	ec 01       	movw	r28, r24
    1cae:	8b 01       	movw	r16, r22
    1cb0:	00 97       	sbiw	r24, 0x00	; 0
    1cb2:	31 f4       	brne	.+12     	; 0x1cc0 <fdevopen+0x1c>
    1cb4:	61 15       	cp	r22, r1
    1cb6:	71 05       	cpc	r23, r1
    1cb8:	19 f4       	brne	.+6      	; 0x1cc0 <fdevopen+0x1c>
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	38 c0       	rjmp	.+112    	; 0x1d30 <fdevopen+0x8c>
    1cc0:	6e e0       	ldi	r22, 0x0E	; 14
    1cc2:	70 e0       	ldi	r23, 0x00	; 0
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 94 b7 10 	call	0x216e	; 0x216e <calloc>
    1ccc:	fc 01       	movw	r30, r24
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	a1 f3       	breq	.-24     	; 0x1cba <fdevopen+0x16>
    1cd2:	80 e8       	ldi	r24, 0x80	; 128
    1cd4:	83 83       	std	Z+3, r24	; 0x03
    1cd6:	01 15       	cp	r16, r1
    1cd8:	11 05       	cpc	r17, r1
    1cda:	71 f0       	breq	.+28     	; 0x1cf8 <fdevopen+0x54>
    1cdc:	13 87       	std	Z+11, r17	; 0x0b
    1cde:	02 87       	std	Z+10, r16	; 0x0a
    1ce0:	81 e8       	ldi	r24, 0x81	; 129
    1ce2:	83 83       	std	Z+3, r24	; 0x03
    1ce4:	80 91 de 02 	lds	r24, 0x02DE
    1ce8:	90 91 df 02 	lds	r25, 0x02DF
    1cec:	89 2b       	or	r24, r25
    1cee:	21 f4       	brne	.+8      	; 0x1cf8 <fdevopen+0x54>
    1cf0:	f0 93 df 02 	sts	0x02DF, r31
    1cf4:	e0 93 de 02 	sts	0x02DE, r30
    1cf8:	20 97       	sbiw	r28, 0x00	; 0
    1cfa:	c9 f0       	breq	.+50     	; 0x1d2e <fdevopen+0x8a>
    1cfc:	d1 87       	std	Z+9, r29	; 0x09
    1cfe:	c0 87       	std	Z+8, r28	; 0x08
    1d00:	83 81       	ldd	r24, Z+3	; 0x03
    1d02:	82 60       	ori	r24, 0x02	; 2
    1d04:	83 83       	std	Z+3, r24	; 0x03
    1d06:	80 91 e0 02 	lds	r24, 0x02E0
    1d0a:	90 91 e1 02 	lds	r25, 0x02E1
    1d0e:	89 2b       	or	r24, r25
    1d10:	71 f4       	brne	.+28     	; 0x1d2e <fdevopen+0x8a>
    1d12:	f0 93 e1 02 	sts	0x02E1, r31
    1d16:	e0 93 e0 02 	sts	0x02E0, r30
    1d1a:	80 91 e2 02 	lds	r24, 0x02E2
    1d1e:	90 91 e3 02 	lds	r25, 0x02E3
    1d22:	89 2b       	or	r24, r25
    1d24:	21 f4       	brne	.+8      	; 0x1d2e <fdevopen+0x8a>
    1d26:	f0 93 e3 02 	sts	0x02E3, r31
    1d2a:	e0 93 e2 02 	sts	0x02E2, r30
    1d2e:	cf 01       	movw	r24, r30
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	1f 91       	pop	r17
    1d36:	0f 91       	pop	r16
    1d38:	08 95       	ret

00001d3a <printf>:
    1d3a:	a0 e0       	ldi	r26, 0x00	; 0
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e3 ea       	ldi	r30, 0xA3	; 163
    1d40:	fe e0       	ldi	r31, 0x0E	; 14
    1d42:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__prologue_saves__+0x20>
    1d46:	fe 01       	movw	r30, r28
    1d48:	35 96       	adiw	r30, 0x05	; 5
    1d4a:	61 91       	ld	r22, Z+
    1d4c:	71 91       	ld	r23, Z+
    1d4e:	af 01       	movw	r20, r30
    1d50:	80 91 e0 02 	lds	r24, 0x02E0
    1d54:	90 91 e1 02 	lds	r25, 0x02E1
    1d58:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <vfprintf>
    1d5c:	e2 e0       	ldi	r30, 0x02	; 2
    1d5e:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <__epilogue_restores__+0x20>

00001d62 <putchar>:
    1d62:	60 91 e0 02 	lds	r22, 0x02E0
    1d66:	70 91 e1 02 	lds	r23, 0x02E1
    1d6a:	0e 94 17 12 	call	0x242e	; 0x242e <fputc>
    1d6e:	08 95       	ret

00001d70 <puts>:
    1d70:	0f 93       	push	r16
    1d72:	1f 93       	push	r17
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	e0 91 e0 02 	lds	r30, 0x02E0
    1d7c:	f0 91 e1 02 	lds	r31, 0x02E1
    1d80:	23 81       	ldd	r18, Z+3	; 0x03
    1d82:	21 ff       	sbrs	r18, 1
    1d84:	1b c0       	rjmp	.+54     	; 0x1dbc <puts+0x4c>
    1d86:	ec 01       	movw	r28, r24
    1d88:	00 e0       	ldi	r16, 0x00	; 0
    1d8a:	10 e0       	ldi	r17, 0x00	; 0
    1d8c:	89 91       	ld	r24, Y+
    1d8e:	60 91 e0 02 	lds	r22, 0x02E0
    1d92:	70 91 e1 02 	lds	r23, 0x02E1
    1d96:	db 01       	movw	r26, r22
    1d98:	18 96       	adiw	r26, 0x08	; 8
    1d9a:	ed 91       	ld	r30, X+
    1d9c:	fc 91       	ld	r31, X
    1d9e:	19 97       	sbiw	r26, 0x09	; 9
    1da0:	88 23       	and	r24, r24
    1da2:	31 f0       	breq	.+12     	; 0x1db0 <puts+0x40>
    1da4:	09 95       	icall
    1da6:	89 2b       	or	r24, r25
    1da8:	89 f3       	breq	.-30     	; 0x1d8c <puts+0x1c>
    1daa:	0f ef       	ldi	r16, 0xFF	; 255
    1dac:	1f ef       	ldi	r17, 0xFF	; 255
    1dae:	ee cf       	rjmp	.-36     	; 0x1d8c <puts+0x1c>
    1db0:	8a e0       	ldi	r24, 0x0A	; 10
    1db2:	09 95       	icall
    1db4:	89 2b       	or	r24, r25
    1db6:	11 f4       	brne	.+4      	; 0x1dbc <puts+0x4c>
    1db8:	c8 01       	movw	r24, r16
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <puts+0x50>
    1dbc:	8f ef       	ldi	r24, 0xFF	; 255
    1dbe:	9f ef       	ldi	r25, 0xFF	; 255
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	1f 91       	pop	r17
    1dc6:	0f 91       	pop	r16
    1dc8:	08 95       	ret

00001dca <vfprintf>:
    1dca:	ac e0       	ldi	r26, 0x0C	; 12
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	eb ee       	ldi	r30, 0xEB	; 235
    1dd0:	fe e0       	ldi	r31, 0x0E	; 14
    1dd2:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <__prologue_saves__>
    1dd6:	7c 01       	movw	r14, r24
    1dd8:	6b 01       	movw	r12, r22
    1dda:	8a 01       	movw	r16, r20
    1ddc:	fc 01       	movw	r30, r24
    1dde:	17 82       	std	Z+7, r1	; 0x07
    1de0:	16 82       	std	Z+6, r1	; 0x06
    1de2:	83 81       	ldd	r24, Z+3	; 0x03
    1de4:	81 ff       	sbrs	r24, 1
    1de6:	bd c1       	rjmp	.+890    	; 0x2162 <vfprintf+0x398>
    1de8:	ce 01       	movw	r24, r28
    1dea:	01 96       	adiw	r24, 0x01	; 1
    1dec:	4c 01       	movw	r8, r24
    1dee:	f7 01       	movw	r30, r14
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	f6 01       	movw	r30, r12
    1df4:	93 fd       	sbrc	r25, 3
    1df6:	85 91       	lpm	r24, Z+
    1df8:	93 ff       	sbrs	r25, 3
    1dfa:	81 91       	ld	r24, Z+
    1dfc:	6f 01       	movw	r12, r30
    1dfe:	88 23       	and	r24, r24
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <vfprintf+0x3a>
    1e02:	ab c1       	rjmp	.+854    	; 0x215a <vfprintf+0x390>
    1e04:	85 32       	cpi	r24, 0x25	; 37
    1e06:	39 f4       	brne	.+14     	; 0x1e16 <vfprintf+0x4c>
    1e08:	93 fd       	sbrc	r25, 3
    1e0a:	85 91       	lpm	r24, Z+
    1e0c:	93 ff       	sbrs	r25, 3
    1e0e:	81 91       	ld	r24, Z+
    1e10:	6f 01       	movw	r12, r30
    1e12:	85 32       	cpi	r24, 0x25	; 37
    1e14:	29 f4       	brne	.+10     	; 0x1e20 <vfprintf+0x56>
    1e16:	b7 01       	movw	r22, r14
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0e 94 17 12 	call	0x242e	; 0x242e <fputc>
    1e1e:	e7 cf       	rjmp	.-50     	; 0x1dee <vfprintf+0x24>
    1e20:	51 2c       	mov	r5, r1
    1e22:	31 2c       	mov	r3, r1
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	20 32       	cpi	r18, 0x20	; 32
    1e28:	a0 f4       	brcc	.+40     	; 0x1e52 <vfprintf+0x88>
    1e2a:	8b 32       	cpi	r24, 0x2B	; 43
    1e2c:	69 f0       	breq	.+26     	; 0x1e48 <vfprintf+0x7e>
    1e2e:	30 f4       	brcc	.+12     	; 0x1e3c <vfprintf+0x72>
    1e30:	80 32       	cpi	r24, 0x20	; 32
    1e32:	59 f0       	breq	.+22     	; 0x1e4a <vfprintf+0x80>
    1e34:	83 32       	cpi	r24, 0x23	; 35
    1e36:	69 f4       	brne	.+26     	; 0x1e52 <vfprintf+0x88>
    1e38:	20 61       	ori	r18, 0x10	; 16
    1e3a:	2c c0       	rjmp	.+88     	; 0x1e94 <vfprintf+0xca>
    1e3c:	8d 32       	cpi	r24, 0x2D	; 45
    1e3e:	39 f0       	breq	.+14     	; 0x1e4e <vfprintf+0x84>
    1e40:	80 33       	cpi	r24, 0x30	; 48
    1e42:	39 f4       	brne	.+14     	; 0x1e52 <vfprintf+0x88>
    1e44:	21 60       	ori	r18, 0x01	; 1
    1e46:	26 c0       	rjmp	.+76     	; 0x1e94 <vfprintf+0xca>
    1e48:	22 60       	ori	r18, 0x02	; 2
    1e4a:	24 60       	ori	r18, 0x04	; 4
    1e4c:	23 c0       	rjmp	.+70     	; 0x1e94 <vfprintf+0xca>
    1e4e:	28 60       	ori	r18, 0x08	; 8
    1e50:	21 c0       	rjmp	.+66     	; 0x1e94 <vfprintf+0xca>
    1e52:	27 fd       	sbrc	r18, 7
    1e54:	27 c0       	rjmp	.+78     	; 0x1ea4 <vfprintf+0xda>
    1e56:	30 ed       	ldi	r19, 0xD0	; 208
    1e58:	38 0f       	add	r19, r24
    1e5a:	3a 30       	cpi	r19, 0x0A	; 10
    1e5c:	78 f4       	brcc	.+30     	; 0x1e7c <vfprintf+0xb2>
    1e5e:	26 ff       	sbrs	r18, 6
    1e60:	06 c0       	rjmp	.+12     	; 0x1e6e <vfprintf+0xa4>
    1e62:	fa e0       	ldi	r31, 0x0A	; 10
    1e64:	5f 9e       	mul	r5, r31
    1e66:	30 0d       	add	r19, r0
    1e68:	11 24       	eor	r1, r1
    1e6a:	53 2e       	mov	r5, r19
    1e6c:	13 c0       	rjmp	.+38     	; 0x1e94 <vfprintf+0xca>
    1e6e:	8a e0       	ldi	r24, 0x0A	; 10
    1e70:	38 9e       	mul	r3, r24
    1e72:	30 0d       	add	r19, r0
    1e74:	11 24       	eor	r1, r1
    1e76:	33 2e       	mov	r3, r19
    1e78:	20 62       	ori	r18, 0x20	; 32
    1e7a:	0c c0       	rjmp	.+24     	; 0x1e94 <vfprintf+0xca>
    1e7c:	8e 32       	cpi	r24, 0x2E	; 46
    1e7e:	21 f4       	brne	.+8      	; 0x1e88 <vfprintf+0xbe>
    1e80:	26 fd       	sbrc	r18, 6
    1e82:	6b c1       	rjmp	.+726    	; 0x215a <vfprintf+0x390>
    1e84:	20 64       	ori	r18, 0x40	; 64
    1e86:	06 c0       	rjmp	.+12     	; 0x1e94 <vfprintf+0xca>
    1e88:	8c 36       	cpi	r24, 0x6C	; 108
    1e8a:	11 f4       	brne	.+4      	; 0x1e90 <vfprintf+0xc6>
    1e8c:	20 68       	ori	r18, 0x80	; 128
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <vfprintf+0xca>
    1e90:	88 36       	cpi	r24, 0x68	; 104
    1e92:	41 f4       	brne	.+16     	; 0x1ea4 <vfprintf+0xda>
    1e94:	f6 01       	movw	r30, r12
    1e96:	93 fd       	sbrc	r25, 3
    1e98:	85 91       	lpm	r24, Z+
    1e9a:	93 ff       	sbrs	r25, 3
    1e9c:	81 91       	ld	r24, Z+
    1e9e:	6f 01       	movw	r12, r30
    1ea0:	81 11       	cpse	r24, r1
    1ea2:	c1 cf       	rjmp	.-126    	; 0x1e26 <vfprintf+0x5c>
    1ea4:	98 2f       	mov	r25, r24
    1ea6:	9f 7d       	andi	r25, 0xDF	; 223
    1ea8:	95 54       	subi	r25, 0x45	; 69
    1eaa:	93 30       	cpi	r25, 0x03	; 3
    1eac:	28 f4       	brcc	.+10     	; 0x1eb8 <vfprintf+0xee>
    1eae:	0c 5f       	subi	r16, 0xFC	; 252
    1eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb2:	ff e3       	ldi	r31, 0x3F	; 63
    1eb4:	f9 83       	std	Y+1, r31	; 0x01
    1eb6:	0d c0       	rjmp	.+26     	; 0x1ed2 <vfprintf+0x108>
    1eb8:	83 36       	cpi	r24, 0x63	; 99
    1eba:	31 f0       	breq	.+12     	; 0x1ec8 <vfprintf+0xfe>
    1ebc:	83 37       	cpi	r24, 0x73	; 115
    1ebe:	71 f0       	breq	.+28     	; 0x1edc <vfprintf+0x112>
    1ec0:	83 35       	cpi	r24, 0x53	; 83
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <vfprintf+0xfc>
    1ec4:	5b c0       	rjmp	.+182    	; 0x1f7c <vfprintf+0x1b2>
    1ec6:	22 c0       	rjmp	.+68     	; 0x1f0c <vfprintf+0x142>
    1ec8:	f8 01       	movw	r30, r16
    1eca:	80 81       	ld	r24, Z
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	0e 5f       	subi	r16, 0xFE	; 254
    1ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed2:	44 24       	eor	r4, r4
    1ed4:	43 94       	inc	r4
    1ed6:	51 2c       	mov	r5, r1
    1ed8:	54 01       	movw	r10, r8
    1eda:	15 c0       	rjmp	.+42     	; 0x1f06 <vfprintf+0x13c>
    1edc:	38 01       	movw	r6, r16
    1ede:	f2 e0       	ldi	r31, 0x02	; 2
    1ee0:	6f 0e       	add	r6, r31
    1ee2:	71 1c       	adc	r7, r1
    1ee4:	f8 01       	movw	r30, r16
    1ee6:	a0 80       	ld	r10, Z
    1ee8:	b1 80       	ldd	r11, Z+1	; 0x01
    1eea:	26 ff       	sbrs	r18, 6
    1eec:	03 c0       	rjmp	.+6      	; 0x1ef4 <vfprintf+0x12a>
    1eee:	65 2d       	mov	r22, r5
    1ef0:	70 e0       	ldi	r23, 0x00	; 0
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <vfprintf+0x12e>
    1ef4:	6f ef       	ldi	r22, 0xFF	; 255
    1ef6:	7f ef       	ldi	r23, 0xFF	; 255
    1ef8:	c5 01       	movw	r24, r10
    1efa:	2c 87       	std	Y+12, r18	; 0x0c
    1efc:	0e 94 0c 12 	call	0x2418	; 0x2418 <strnlen>
    1f00:	2c 01       	movw	r4, r24
    1f02:	83 01       	movw	r16, r6
    1f04:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f06:	2f 77       	andi	r18, 0x7F	; 127
    1f08:	22 2e       	mov	r2, r18
    1f0a:	17 c0       	rjmp	.+46     	; 0x1f3a <vfprintf+0x170>
    1f0c:	38 01       	movw	r6, r16
    1f0e:	f2 e0       	ldi	r31, 0x02	; 2
    1f10:	6f 0e       	add	r6, r31
    1f12:	71 1c       	adc	r7, r1
    1f14:	f8 01       	movw	r30, r16
    1f16:	a0 80       	ld	r10, Z
    1f18:	b1 80       	ldd	r11, Z+1	; 0x01
    1f1a:	26 ff       	sbrs	r18, 6
    1f1c:	03 c0       	rjmp	.+6      	; 0x1f24 <vfprintf+0x15a>
    1f1e:	65 2d       	mov	r22, r5
    1f20:	70 e0       	ldi	r23, 0x00	; 0
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <vfprintf+0x15e>
    1f24:	6f ef       	ldi	r22, 0xFF	; 255
    1f26:	7f ef       	ldi	r23, 0xFF	; 255
    1f28:	c5 01       	movw	r24, r10
    1f2a:	2c 87       	std	Y+12, r18	; 0x0c
    1f2c:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <strnlen_P>
    1f30:	2c 01       	movw	r4, r24
    1f32:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f34:	20 68       	ori	r18, 0x80	; 128
    1f36:	22 2e       	mov	r2, r18
    1f38:	83 01       	movw	r16, r6
    1f3a:	23 fc       	sbrc	r2, 3
    1f3c:	1b c0       	rjmp	.+54     	; 0x1f74 <vfprintf+0x1aa>
    1f3e:	83 2d       	mov	r24, r3
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	48 16       	cp	r4, r24
    1f44:	59 06       	cpc	r5, r25
    1f46:	b0 f4       	brcc	.+44     	; 0x1f74 <vfprintf+0x1aa>
    1f48:	b7 01       	movw	r22, r14
    1f4a:	80 e2       	ldi	r24, 0x20	; 32
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	0e 94 17 12 	call	0x242e	; 0x242e <fputc>
    1f52:	3a 94       	dec	r3
    1f54:	f4 cf       	rjmp	.-24     	; 0x1f3e <vfprintf+0x174>
    1f56:	f5 01       	movw	r30, r10
    1f58:	27 fc       	sbrc	r2, 7
    1f5a:	85 91       	lpm	r24, Z+
    1f5c:	27 fe       	sbrs	r2, 7
    1f5e:	81 91       	ld	r24, Z+
    1f60:	5f 01       	movw	r10, r30
    1f62:	b7 01       	movw	r22, r14
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	0e 94 17 12 	call	0x242e	; 0x242e <fputc>
    1f6a:	31 10       	cpse	r3, r1
    1f6c:	3a 94       	dec	r3
    1f6e:	f1 e0       	ldi	r31, 0x01	; 1
    1f70:	4f 1a       	sub	r4, r31
    1f72:	51 08       	sbc	r5, r1
    1f74:	41 14       	cp	r4, r1
    1f76:	51 04       	cpc	r5, r1
    1f78:	71 f7       	brne	.-36     	; 0x1f56 <vfprintf+0x18c>
    1f7a:	e5 c0       	rjmp	.+458    	; 0x2146 <vfprintf+0x37c>
    1f7c:	84 36       	cpi	r24, 0x64	; 100
    1f7e:	11 f0       	breq	.+4      	; 0x1f84 <vfprintf+0x1ba>
    1f80:	89 36       	cpi	r24, 0x69	; 105
    1f82:	39 f5       	brne	.+78     	; 0x1fd2 <vfprintf+0x208>
    1f84:	f8 01       	movw	r30, r16
    1f86:	27 ff       	sbrs	r18, 7
    1f88:	07 c0       	rjmp	.+14     	; 0x1f98 <vfprintf+0x1ce>
    1f8a:	60 81       	ld	r22, Z
    1f8c:	71 81       	ldd	r23, Z+1	; 0x01
    1f8e:	82 81       	ldd	r24, Z+2	; 0x02
    1f90:	93 81       	ldd	r25, Z+3	; 0x03
    1f92:	0c 5f       	subi	r16, 0xFC	; 252
    1f94:	1f 4f       	sbci	r17, 0xFF	; 255
    1f96:	08 c0       	rjmp	.+16     	; 0x1fa8 <vfprintf+0x1de>
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	88 27       	eor	r24, r24
    1f9e:	77 fd       	sbrc	r23, 7
    1fa0:	80 95       	com	r24
    1fa2:	98 2f       	mov	r25, r24
    1fa4:	0e 5f       	subi	r16, 0xFE	; 254
    1fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa8:	2f 76       	andi	r18, 0x6F	; 111
    1faa:	b2 2e       	mov	r11, r18
    1fac:	97 ff       	sbrs	r25, 7
    1fae:	09 c0       	rjmp	.+18     	; 0x1fc2 <vfprintf+0x1f8>
    1fb0:	90 95       	com	r25
    1fb2:	80 95       	com	r24
    1fb4:	70 95       	com	r23
    1fb6:	61 95       	neg	r22
    1fb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fba:	8f 4f       	sbci	r24, 0xFF	; 255
    1fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fbe:	20 68       	ori	r18, 0x80	; 128
    1fc0:	b2 2e       	mov	r11, r18
    1fc2:	2a e0       	ldi	r18, 0x0A	; 10
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	a4 01       	movw	r20, r8
    1fc8:	0e 94 49 12 	call	0x2492	; 0x2492 <__ultoa_invert>
    1fcc:	a8 2e       	mov	r10, r24
    1fce:	a8 18       	sub	r10, r8
    1fd0:	44 c0       	rjmp	.+136    	; 0x205a <vfprintf+0x290>
    1fd2:	85 37       	cpi	r24, 0x75	; 117
    1fd4:	29 f4       	brne	.+10     	; 0x1fe0 <vfprintf+0x216>
    1fd6:	2f 7e       	andi	r18, 0xEF	; 239
    1fd8:	b2 2e       	mov	r11, r18
    1fda:	2a e0       	ldi	r18, 0x0A	; 10
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	25 c0       	rjmp	.+74     	; 0x202a <vfprintf+0x260>
    1fe0:	f2 2f       	mov	r31, r18
    1fe2:	f9 7f       	andi	r31, 0xF9	; 249
    1fe4:	bf 2e       	mov	r11, r31
    1fe6:	8f 36       	cpi	r24, 0x6F	; 111
    1fe8:	c1 f0       	breq	.+48     	; 0x201a <vfprintf+0x250>
    1fea:	18 f4       	brcc	.+6      	; 0x1ff2 <vfprintf+0x228>
    1fec:	88 35       	cpi	r24, 0x58	; 88
    1fee:	79 f0       	breq	.+30     	; 0x200e <vfprintf+0x244>
    1ff0:	b4 c0       	rjmp	.+360    	; 0x215a <vfprintf+0x390>
    1ff2:	80 37       	cpi	r24, 0x70	; 112
    1ff4:	19 f0       	breq	.+6      	; 0x1ffc <vfprintf+0x232>
    1ff6:	88 37       	cpi	r24, 0x78	; 120
    1ff8:	21 f0       	breq	.+8      	; 0x2002 <vfprintf+0x238>
    1ffa:	af c0       	rjmp	.+350    	; 0x215a <vfprintf+0x390>
    1ffc:	2f 2f       	mov	r18, r31
    1ffe:	20 61       	ori	r18, 0x10	; 16
    2000:	b2 2e       	mov	r11, r18
    2002:	b4 fe       	sbrs	r11, 4
    2004:	0d c0       	rjmp	.+26     	; 0x2020 <vfprintf+0x256>
    2006:	8b 2d       	mov	r24, r11
    2008:	84 60       	ori	r24, 0x04	; 4
    200a:	b8 2e       	mov	r11, r24
    200c:	09 c0       	rjmp	.+18     	; 0x2020 <vfprintf+0x256>
    200e:	24 ff       	sbrs	r18, 4
    2010:	0a c0       	rjmp	.+20     	; 0x2026 <vfprintf+0x25c>
    2012:	9f 2f       	mov	r25, r31
    2014:	96 60       	ori	r25, 0x06	; 6
    2016:	b9 2e       	mov	r11, r25
    2018:	06 c0       	rjmp	.+12     	; 0x2026 <vfprintf+0x25c>
    201a:	28 e0       	ldi	r18, 0x08	; 8
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	05 c0       	rjmp	.+10     	; 0x202a <vfprintf+0x260>
    2020:	20 e1       	ldi	r18, 0x10	; 16
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	02 c0       	rjmp	.+4      	; 0x202a <vfprintf+0x260>
    2026:	20 e1       	ldi	r18, 0x10	; 16
    2028:	32 e0       	ldi	r19, 0x02	; 2
    202a:	f8 01       	movw	r30, r16
    202c:	b7 fe       	sbrs	r11, 7
    202e:	07 c0       	rjmp	.+14     	; 0x203e <vfprintf+0x274>
    2030:	60 81       	ld	r22, Z
    2032:	71 81       	ldd	r23, Z+1	; 0x01
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	0c 5f       	subi	r16, 0xFC	; 252
    203a:	1f 4f       	sbci	r17, 0xFF	; 255
    203c:	06 c0       	rjmp	.+12     	; 0x204a <vfprintf+0x280>
    203e:	60 81       	ld	r22, Z
    2040:	71 81       	ldd	r23, Z+1	; 0x01
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	0e 5f       	subi	r16, 0xFE	; 254
    2048:	1f 4f       	sbci	r17, 0xFF	; 255
    204a:	a4 01       	movw	r20, r8
    204c:	0e 94 49 12 	call	0x2492	; 0x2492 <__ultoa_invert>
    2050:	a8 2e       	mov	r10, r24
    2052:	a8 18       	sub	r10, r8
    2054:	fb 2d       	mov	r31, r11
    2056:	ff 77       	andi	r31, 0x7F	; 127
    2058:	bf 2e       	mov	r11, r31
    205a:	b6 fe       	sbrs	r11, 6
    205c:	0b c0       	rjmp	.+22     	; 0x2074 <vfprintf+0x2aa>
    205e:	2b 2d       	mov	r18, r11
    2060:	2e 7f       	andi	r18, 0xFE	; 254
    2062:	a5 14       	cp	r10, r5
    2064:	50 f4       	brcc	.+20     	; 0x207a <vfprintf+0x2b0>
    2066:	b4 fe       	sbrs	r11, 4
    2068:	0a c0       	rjmp	.+20     	; 0x207e <vfprintf+0x2b4>
    206a:	b2 fc       	sbrc	r11, 2
    206c:	08 c0       	rjmp	.+16     	; 0x207e <vfprintf+0x2b4>
    206e:	2b 2d       	mov	r18, r11
    2070:	2e 7e       	andi	r18, 0xEE	; 238
    2072:	05 c0       	rjmp	.+10     	; 0x207e <vfprintf+0x2b4>
    2074:	7a 2c       	mov	r7, r10
    2076:	2b 2d       	mov	r18, r11
    2078:	03 c0       	rjmp	.+6      	; 0x2080 <vfprintf+0x2b6>
    207a:	7a 2c       	mov	r7, r10
    207c:	01 c0       	rjmp	.+2      	; 0x2080 <vfprintf+0x2b6>
    207e:	75 2c       	mov	r7, r5
    2080:	24 ff       	sbrs	r18, 4
    2082:	0d c0       	rjmp	.+26     	; 0x209e <vfprintf+0x2d4>
    2084:	fe 01       	movw	r30, r28
    2086:	ea 0d       	add	r30, r10
    2088:	f1 1d       	adc	r31, r1
    208a:	80 81       	ld	r24, Z
    208c:	80 33       	cpi	r24, 0x30	; 48
    208e:	11 f4       	brne	.+4      	; 0x2094 <vfprintf+0x2ca>
    2090:	29 7e       	andi	r18, 0xE9	; 233
    2092:	09 c0       	rjmp	.+18     	; 0x20a6 <vfprintf+0x2dc>
    2094:	22 ff       	sbrs	r18, 2
    2096:	06 c0       	rjmp	.+12     	; 0x20a4 <vfprintf+0x2da>
    2098:	73 94       	inc	r7
    209a:	73 94       	inc	r7
    209c:	04 c0       	rjmp	.+8      	; 0x20a6 <vfprintf+0x2dc>
    209e:	82 2f       	mov	r24, r18
    20a0:	86 78       	andi	r24, 0x86	; 134
    20a2:	09 f0       	breq	.+2      	; 0x20a6 <vfprintf+0x2dc>
    20a4:	73 94       	inc	r7
    20a6:	23 fd       	sbrc	r18, 3
    20a8:	13 c0       	rjmp	.+38     	; 0x20d0 <vfprintf+0x306>
    20aa:	20 ff       	sbrs	r18, 0
    20ac:	06 c0       	rjmp	.+12     	; 0x20ba <vfprintf+0x2f0>
    20ae:	5a 2c       	mov	r5, r10
    20b0:	73 14       	cp	r7, r3
    20b2:	18 f4       	brcc	.+6      	; 0x20ba <vfprintf+0x2f0>
    20b4:	53 0c       	add	r5, r3
    20b6:	57 18       	sub	r5, r7
    20b8:	73 2c       	mov	r7, r3
    20ba:	73 14       	cp	r7, r3
    20bc:	68 f4       	brcc	.+26     	; 0x20d8 <vfprintf+0x30e>
    20be:	b7 01       	movw	r22, r14
    20c0:	80 e2       	ldi	r24, 0x20	; 32
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	2c 87       	std	Y+12, r18	; 0x0c
    20c6:	0e 94 17 12 	call	0x242e	; 0x242e <fputc>
    20ca:	73 94       	inc	r7
    20cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    20ce:	f5 cf       	rjmp	.-22     	; 0x20ba <vfprintf+0x2f0>
    20d0:	73 14       	cp	r7, r3
    20d2:	10 f4       	brcc	.+4      	; 0x20d8 <vfprintf+0x30e>
    20d4:	37 18       	sub	r3, r7
    20d6:	01 c0       	rjmp	.+2      	; 0x20da <vfprintf+0x310>
    20d8:	31 2c       	mov	r3, r1
    20da:	24 ff       	sbrs	r18, 4
    20dc:	12 c0       	rjmp	.+36     	; 0x2102 <vfprintf+0x338>
    20de:	b7 01       	movw	r22, r14
    20e0:	80 e3       	ldi	r24, 0x30	; 48
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	2c 87       	std	Y+12, r18	; 0x0c
    20e6:	0e 94 17 12 	call	0x242e	; 0x242e <fputc>
    20ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    20ec:	22 ff       	sbrs	r18, 2
    20ee:	17 c0       	rjmp	.+46     	; 0x211e <vfprintf+0x354>
    20f0:	21 ff       	sbrs	r18, 1
    20f2:	03 c0       	rjmp	.+6      	; 0x20fa <vfprintf+0x330>
    20f4:	88 e5       	ldi	r24, 0x58	; 88
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <vfprintf+0x334>
    20fa:	88 e7       	ldi	r24, 0x78	; 120
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	b7 01       	movw	r22, r14
    2100:	0c c0       	rjmp	.+24     	; 0x211a <vfprintf+0x350>
    2102:	82 2f       	mov	r24, r18
    2104:	86 78       	andi	r24, 0x86	; 134
    2106:	59 f0       	breq	.+22     	; 0x211e <vfprintf+0x354>
    2108:	21 fd       	sbrc	r18, 1
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <vfprintf+0x346>
    210c:	80 e2       	ldi	r24, 0x20	; 32
    210e:	01 c0       	rjmp	.+2      	; 0x2112 <vfprintf+0x348>
    2110:	8b e2       	ldi	r24, 0x2B	; 43
    2112:	27 fd       	sbrc	r18, 7
    2114:	8d e2       	ldi	r24, 0x2D	; 45
    2116:	b7 01       	movw	r22, r14
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 17 12 	call	0x242e	; 0x242e <fputc>
    211e:	a5 14       	cp	r10, r5
    2120:	38 f4       	brcc	.+14     	; 0x2130 <vfprintf+0x366>
    2122:	b7 01       	movw	r22, r14
    2124:	80 e3       	ldi	r24, 0x30	; 48
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	0e 94 17 12 	call	0x242e	; 0x242e <fputc>
    212c:	5a 94       	dec	r5
    212e:	f7 cf       	rjmp	.-18     	; 0x211e <vfprintf+0x354>
    2130:	aa 94       	dec	r10
    2132:	f4 01       	movw	r30, r8
    2134:	ea 0d       	add	r30, r10
    2136:	f1 1d       	adc	r31, r1
    2138:	80 81       	ld	r24, Z
    213a:	b7 01       	movw	r22, r14
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	0e 94 17 12 	call	0x242e	; 0x242e <fputc>
    2142:	a1 10       	cpse	r10, r1
    2144:	f5 cf       	rjmp	.-22     	; 0x2130 <vfprintf+0x366>
    2146:	33 20       	and	r3, r3
    2148:	09 f4       	brne	.+2      	; 0x214c <vfprintf+0x382>
    214a:	51 ce       	rjmp	.-862    	; 0x1dee <vfprintf+0x24>
    214c:	b7 01       	movw	r22, r14
    214e:	80 e2       	ldi	r24, 0x20	; 32
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	0e 94 17 12 	call	0x242e	; 0x242e <fputc>
    2156:	3a 94       	dec	r3
    2158:	f6 cf       	rjmp	.-20     	; 0x2146 <vfprintf+0x37c>
    215a:	f7 01       	movw	r30, r14
    215c:	86 81       	ldd	r24, Z+6	; 0x06
    215e:	97 81       	ldd	r25, Z+7	; 0x07
    2160:	02 c0       	rjmp	.+4      	; 0x2166 <vfprintf+0x39c>
    2162:	8f ef       	ldi	r24, 0xFF	; 255
    2164:	9f ef       	ldi	r25, 0xFF	; 255
    2166:	2c 96       	adiw	r28, 0x0c	; 12
    2168:	e2 e1       	ldi	r30, 0x12	; 18
    216a:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__epilogue_restores__>

0000216e <calloc>:
    216e:	0f 93       	push	r16
    2170:	1f 93       	push	r17
    2172:	cf 93       	push	r28
    2174:	df 93       	push	r29
    2176:	86 9f       	mul	r24, r22
    2178:	80 01       	movw	r16, r0
    217a:	87 9f       	mul	r24, r23
    217c:	10 0d       	add	r17, r0
    217e:	96 9f       	mul	r25, r22
    2180:	10 0d       	add	r17, r0
    2182:	11 24       	eor	r1, r1
    2184:	c8 01       	movw	r24, r16
    2186:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <malloc>
    218a:	ec 01       	movw	r28, r24
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	29 f0       	breq	.+10     	; 0x219a <calloc+0x2c>
    2190:	a8 01       	movw	r20, r16
    2192:	60 e0       	ldi	r22, 0x00	; 0
    2194:	70 e0       	ldi	r23, 0x00	; 0
    2196:	0e 94 05 12 	call	0x240a	; 0x240a <memset>
    219a:	ce 01       	movw	r24, r28
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	1f 91       	pop	r17
    21a2:	0f 91       	pop	r16
    21a4:	08 95       	ret

000021a6 <malloc>:
    21a6:	cf 93       	push	r28
    21a8:	df 93       	push	r29
    21aa:	82 30       	cpi	r24, 0x02	; 2
    21ac:	91 05       	cpc	r25, r1
    21ae:	10 f4       	brcc	.+4      	; 0x21b4 <malloc+0xe>
    21b0:	82 e0       	ldi	r24, 0x02	; 2
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	e0 91 e6 02 	lds	r30, 0x02E6
    21b8:	f0 91 e7 02 	lds	r31, 0x02E7
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	a0 e0       	ldi	r26, 0x00	; 0
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	30 97       	sbiw	r30, 0x00	; 0
    21c6:	39 f1       	breq	.+78     	; 0x2216 <malloc+0x70>
    21c8:	40 81       	ld	r20, Z
    21ca:	51 81       	ldd	r21, Z+1	; 0x01
    21cc:	48 17       	cp	r20, r24
    21ce:	59 07       	cpc	r21, r25
    21d0:	b8 f0       	brcs	.+46     	; 0x2200 <malloc+0x5a>
    21d2:	48 17       	cp	r20, r24
    21d4:	59 07       	cpc	r21, r25
    21d6:	71 f4       	brne	.+28     	; 0x21f4 <malloc+0x4e>
    21d8:	82 81       	ldd	r24, Z+2	; 0x02
    21da:	93 81       	ldd	r25, Z+3	; 0x03
    21dc:	10 97       	sbiw	r26, 0x00	; 0
    21de:	29 f0       	breq	.+10     	; 0x21ea <malloc+0x44>
    21e0:	13 96       	adiw	r26, 0x03	; 3
    21e2:	9c 93       	st	X, r25
    21e4:	8e 93       	st	-X, r24
    21e6:	12 97       	sbiw	r26, 0x02	; 2
    21e8:	2c c0       	rjmp	.+88     	; 0x2242 <malloc+0x9c>
    21ea:	90 93 e7 02 	sts	0x02E7, r25
    21ee:	80 93 e6 02 	sts	0x02E6, r24
    21f2:	27 c0       	rjmp	.+78     	; 0x2242 <malloc+0x9c>
    21f4:	21 15       	cp	r18, r1
    21f6:	31 05       	cpc	r19, r1
    21f8:	31 f0       	breq	.+12     	; 0x2206 <malloc+0x60>
    21fa:	42 17       	cp	r20, r18
    21fc:	53 07       	cpc	r21, r19
    21fe:	18 f0       	brcs	.+6      	; 0x2206 <malloc+0x60>
    2200:	a9 01       	movw	r20, r18
    2202:	db 01       	movw	r26, r22
    2204:	01 c0       	rjmp	.+2      	; 0x2208 <malloc+0x62>
    2206:	ef 01       	movw	r28, r30
    2208:	9a 01       	movw	r18, r20
    220a:	bd 01       	movw	r22, r26
    220c:	df 01       	movw	r26, r30
    220e:	02 80       	ldd	r0, Z+2	; 0x02
    2210:	f3 81       	ldd	r31, Z+3	; 0x03
    2212:	e0 2d       	mov	r30, r0
    2214:	d7 cf       	rjmp	.-82     	; 0x21c4 <malloc+0x1e>
    2216:	21 15       	cp	r18, r1
    2218:	31 05       	cpc	r19, r1
    221a:	f9 f0       	breq	.+62     	; 0x225a <malloc+0xb4>
    221c:	28 1b       	sub	r18, r24
    221e:	39 0b       	sbc	r19, r25
    2220:	24 30       	cpi	r18, 0x04	; 4
    2222:	31 05       	cpc	r19, r1
    2224:	80 f4       	brcc	.+32     	; 0x2246 <malloc+0xa0>
    2226:	8a 81       	ldd	r24, Y+2	; 0x02
    2228:	9b 81       	ldd	r25, Y+3	; 0x03
    222a:	61 15       	cp	r22, r1
    222c:	71 05       	cpc	r23, r1
    222e:	21 f0       	breq	.+8      	; 0x2238 <malloc+0x92>
    2230:	fb 01       	movw	r30, r22
    2232:	93 83       	std	Z+3, r25	; 0x03
    2234:	82 83       	std	Z+2, r24	; 0x02
    2236:	04 c0       	rjmp	.+8      	; 0x2240 <malloc+0x9a>
    2238:	90 93 e7 02 	sts	0x02E7, r25
    223c:	80 93 e6 02 	sts	0x02E6, r24
    2240:	fe 01       	movw	r30, r28
    2242:	32 96       	adiw	r30, 0x02	; 2
    2244:	44 c0       	rjmp	.+136    	; 0x22ce <malloc+0x128>
    2246:	fe 01       	movw	r30, r28
    2248:	e2 0f       	add	r30, r18
    224a:	f3 1f       	adc	r31, r19
    224c:	81 93       	st	Z+, r24
    224e:	91 93       	st	Z+, r25
    2250:	22 50       	subi	r18, 0x02	; 2
    2252:	31 09       	sbc	r19, r1
    2254:	39 83       	std	Y+1, r19	; 0x01
    2256:	28 83       	st	Y, r18
    2258:	3a c0       	rjmp	.+116    	; 0x22ce <malloc+0x128>
    225a:	20 91 e4 02 	lds	r18, 0x02E4
    225e:	30 91 e5 02 	lds	r19, 0x02E5
    2262:	23 2b       	or	r18, r19
    2264:	41 f4       	brne	.+16     	; 0x2276 <malloc+0xd0>
    2266:	20 91 06 01 	lds	r18, 0x0106
    226a:	30 91 07 01 	lds	r19, 0x0107
    226e:	30 93 e5 02 	sts	0x02E5, r19
    2272:	20 93 e4 02 	sts	0x02E4, r18
    2276:	20 91 04 01 	lds	r18, 0x0104
    227a:	30 91 05 01 	lds	r19, 0x0105
    227e:	21 15       	cp	r18, r1
    2280:	31 05       	cpc	r19, r1
    2282:	41 f4       	brne	.+16     	; 0x2294 <malloc+0xee>
    2284:	2d b7       	in	r18, 0x3d	; 61
    2286:	3e b7       	in	r19, 0x3e	; 62
    2288:	40 91 08 01 	lds	r20, 0x0108
    228c:	50 91 09 01 	lds	r21, 0x0109
    2290:	24 1b       	sub	r18, r20
    2292:	35 0b       	sbc	r19, r21
    2294:	e0 91 e4 02 	lds	r30, 0x02E4
    2298:	f0 91 e5 02 	lds	r31, 0x02E5
    229c:	e2 17       	cp	r30, r18
    229e:	f3 07       	cpc	r31, r19
    22a0:	a0 f4       	brcc	.+40     	; 0x22ca <malloc+0x124>
    22a2:	2e 1b       	sub	r18, r30
    22a4:	3f 0b       	sbc	r19, r31
    22a6:	28 17       	cp	r18, r24
    22a8:	39 07       	cpc	r19, r25
    22aa:	78 f0       	brcs	.+30     	; 0x22ca <malloc+0x124>
    22ac:	ac 01       	movw	r20, r24
    22ae:	4e 5f       	subi	r20, 0xFE	; 254
    22b0:	5f 4f       	sbci	r21, 0xFF	; 255
    22b2:	24 17       	cp	r18, r20
    22b4:	35 07       	cpc	r19, r21
    22b6:	48 f0       	brcs	.+18     	; 0x22ca <malloc+0x124>
    22b8:	4e 0f       	add	r20, r30
    22ba:	5f 1f       	adc	r21, r31
    22bc:	50 93 e5 02 	sts	0x02E5, r21
    22c0:	40 93 e4 02 	sts	0x02E4, r20
    22c4:	81 93       	st	Z+, r24
    22c6:	91 93       	st	Z+, r25
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <malloc+0x128>
    22ca:	e0 e0       	ldi	r30, 0x00	; 0
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	cf 01       	movw	r24, r30
    22d0:	df 91       	pop	r29
    22d2:	cf 91       	pop	r28
    22d4:	08 95       	ret

000022d6 <free>:
    22d6:	cf 93       	push	r28
    22d8:	df 93       	push	r29
    22da:	00 97       	sbiw	r24, 0x00	; 0
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <free+0xa>
    22de:	87 c0       	rjmp	.+270    	; 0x23ee <free+0x118>
    22e0:	fc 01       	movw	r30, r24
    22e2:	32 97       	sbiw	r30, 0x02	; 2
    22e4:	13 82       	std	Z+3, r1	; 0x03
    22e6:	12 82       	std	Z+2, r1	; 0x02
    22e8:	c0 91 e6 02 	lds	r28, 0x02E6
    22ec:	d0 91 e7 02 	lds	r29, 0x02E7
    22f0:	20 97       	sbiw	r28, 0x00	; 0
    22f2:	81 f4       	brne	.+32     	; 0x2314 <free+0x3e>
    22f4:	20 81       	ld	r18, Z
    22f6:	31 81       	ldd	r19, Z+1	; 0x01
    22f8:	28 0f       	add	r18, r24
    22fa:	39 1f       	adc	r19, r25
    22fc:	80 91 e4 02 	lds	r24, 0x02E4
    2300:	90 91 e5 02 	lds	r25, 0x02E5
    2304:	82 17       	cp	r24, r18
    2306:	93 07       	cpc	r25, r19
    2308:	79 f5       	brne	.+94     	; 0x2368 <free+0x92>
    230a:	f0 93 e5 02 	sts	0x02E5, r31
    230e:	e0 93 e4 02 	sts	0x02E4, r30
    2312:	6d c0       	rjmp	.+218    	; 0x23ee <free+0x118>
    2314:	de 01       	movw	r26, r28
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	ae 17       	cp	r26, r30
    231c:	bf 07       	cpc	r27, r31
    231e:	50 f4       	brcc	.+20     	; 0x2334 <free+0x5e>
    2320:	12 96       	adiw	r26, 0x02	; 2
    2322:	4d 91       	ld	r20, X+
    2324:	5c 91       	ld	r21, X
    2326:	13 97       	sbiw	r26, 0x03	; 3
    2328:	9d 01       	movw	r18, r26
    232a:	41 15       	cp	r20, r1
    232c:	51 05       	cpc	r21, r1
    232e:	09 f1       	breq	.+66     	; 0x2372 <free+0x9c>
    2330:	da 01       	movw	r26, r20
    2332:	f3 cf       	rjmp	.-26     	; 0x231a <free+0x44>
    2334:	b3 83       	std	Z+3, r27	; 0x03
    2336:	a2 83       	std	Z+2, r26	; 0x02
    2338:	40 81       	ld	r20, Z
    233a:	51 81       	ldd	r21, Z+1	; 0x01
    233c:	84 0f       	add	r24, r20
    233e:	95 1f       	adc	r25, r21
    2340:	8a 17       	cp	r24, r26
    2342:	9b 07       	cpc	r25, r27
    2344:	71 f4       	brne	.+28     	; 0x2362 <free+0x8c>
    2346:	8d 91       	ld	r24, X+
    2348:	9c 91       	ld	r25, X
    234a:	11 97       	sbiw	r26, 0x01	; 1
    234c:	84 0f       	add	r24, r20
    234e:	95 1f       	adc	r25, r21
    2350:	02 96       	adiw	r24, 0x02	; 2
    2352:	91 83       	std	Z+1, r25	; 0x01
    2354:	80 83       	st	Z, r24
    2356:	12 96       	adiw	r26, 0x02	; 2
    2358:	8d 91       	ld	r24, X+
    235a:	9c 91       	ld	r25, X
    235c:	13 97       	sbiw	r26, 0x03	; 3
    235e:	93 83       	std	Z+3, r25	; 0x03
    2360:	82 83       	std	Z+2, r24	; 0x02
    2362:	21 15       	cp	r18, r1
    2364:	31 05       	cpc	r19, r1
    2366:	29 f4       	brne	.+10     	; 0x2372 <free+0x9c>
    2368:	f0 93 e7 02 	sts	0x02E7, r31
    236c:	e0 93 e6 02 	sts	0x02E6, r30
    2370:	3e c0       	rjmp	.+124    	; 0x23ee <free+0x118>
    2372:	d9 01       	movw	r26, r18
    2374:	13 96       	adiw	r26, 0x03	; 3
    2376:	fc 93       	st	X, r31
    2378:	ee 93       	st	-X, r30
    237a:	12 97       	sbiw	r26, 0x02	; 2
    237c:	4d 91       	ld	r20, X+
    237e:	5d 91       	ld	r21, X+
    2380:	a4 0f       	add	r26, r20
    2382:	b5 1f       	adc	r27, r21
    2384:	ea 17       	cp	r30, r26
    2386:	fb 07       	cpc	r31, r27
    2388:	79 f4       	brne	.+30     	; 0x23a8 <free+0xd2>
    238a:	80 81       	ld	r24, Z
    238c:	91 81       	ldd	r25, Z+1	; 0x01
    238e:	84 0f       	add	r24, r20
    2390:	95 1f       	adc	r25, r21
    2392:	02 96       	adiw	r24, 0x02	; 2
    2394:	d9 01       	movw	r26, r18
    2396:	11 96       	adiw	r26, 0x01	; 1
    2398:	9c 93       	st	X, r25
    239a:	8e 93       	st	-X, r24
    239c:	82 81       	ldd	r24, Z+2	; 0x02
    239e:	93 81       	ldd	r25, Z+3	; 0x03
    23a0:	13 96       	adiw	r26, 0x03	; 3
    23a2:	9c 93       	st	X, r25
    23a4:	8e 93       	st	-X, r24
    23a6:	12 97       	sbiw	r26, 0x02	; 2
    23a8:	e0 e0       	ldi	r30, 0x00	; 0
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	9b 81       	ldd	r25, Y+3	; 0x03
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	19 f0       	breq	.+6      	; 0x23ba <free+0xe4>
    23b4:	fe 01       	movw	r30, r28
    23b6:	ec 01       	movw	r28, r24
    23b8:	f9 cf       	rjmp	.-14     	; 0x23ac <free+0xd6>
    23ba:	ce 01       	movw	r24, r28
    23bc:	02 96       	adiw	r24, 0x02	; 2
    23be:	28 81       	ld	r18, Y
    23c0:	39 81       	ldd	r19, Y+1	; 0x01
    23c2:	82 0f       	add	r24, r18
    23c4:	93 1f       	adc	r25, r19
    23c6:	20 91 e4 02 	lds	r18, 0x02E4
    23ca:	30 91 e5 02 	lds	r19, 0x02E5
    23ce:	28 17       	cp	r18, r24
    23d0:	39 07       	cpc	r19, r25
    23d2:	69 f4       	brne	.+26     	; 0x23ee <free+0x118>
    23d4:	30 97       	sbiw	r30, 0x00	; 0
    23d6:	29 f4       	brne	.+10     	; 0x23e2 <free+0x10c>
    23d8:	10 92 e7 02 	sts	0x02E7, r1
    23dc:	10 92 e6 02 	sts	0x02E6, r1
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <free+0x110>
    23e2:	13 82       	std	Z+3, r1	; 0x03
    23e4:	12 82       	std	Z+2, r1	; 0x02
    23e6:	d0 93 e5 02 	sts	0x02E5, r29
    23ea:	c0 93 e4 02 	sts	0x02E4, r28
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	08 95       	ret

000023f4 <strnlen_P>:
    23f4:	fc 01       	movw	r30, r24
    23f6:	05 90       	lpm	r0, Z+
    23f8:	61 50       	subi	r22, 0x01	; 1
    23fa:	70 40       	sbci	r23, 0x00	; 0
    23fc:	01 10       	cpse	r0, r1
    23fe:	d8 f7       	brcc	.-10     	; 0x23f6 <strnlen_P+0x2>
    2400:	80 95       	com	r24
    2402:	90 95       	com	r25
    2404:	8e 0f       	add	r24, r30
    2406:	9f 1f       	adc	r25, r31
    2408:	08 95       	ret

0000240a <memset>:
    240a:	dc 01       	movw	r26, r24
    240c:	01 c0       	rjmp	.+2      	; 0x2410 <memset+0x6>
    240e:	6d 93       	st	X+, r22
    2410:	41 50       	subi	r20, 0x01	; 1
    2412:	50 40       	sbci	r21, 0x00	; 0
    2414:	e0 f7       	brcc	.-8      	; 0x240e <memset+0x4>
    2416:	08 95       	ret

00002418 <strnlen>:
    2418:	fc 01       	movw	r30, r24
    241a:	61 50       	subi	r22, 0x01	; 1
    241c:	70 40       	sbci	r23, 0x00	; 0
    241e:	01 90       	ld	r0, Z+
    2420:	01 10       	cpse	r0, r1
    2422:	d8 f7       	brcc	.-10     	; 0x241a <strnlen+0x2>
    2424:	80 95       	com	r24
    2426:	90 95       	com	r25
    2428:	8e 0f       	add	r24, r30
    242a:	9f 1f       	adc	r25, r31
    242c:	08 95       	ret

0000242e <fputc>:
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	18 2f       	mov	r17, r24
    2438:	09 2f       	mov	r16, r25
    243a:	eb 01       	movw	r28, r22
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	81 fd       	sbrc	r24, 1
    2440:	03 c0       	rjmp	.+6      	; 0x2448 <fputc+0x1a>
    2442:	8f ef       	ldi	r24, 0xFF	; 255
    2444:	9f ef       	ldi	r25, 0xFF	; 255
    2446:	20 c0       	rjmp	.+64     	; 0x2488 <fputc+0x5a>
    2448:	82 ff       	sbrs	r24, 2
    244a:	10 c0       	rjmp	.+32     	; 0x246c <fputc+0x3e>
    244c:	4e 81       	ldd	r20, Y+6	; 0x06
    244e:	5f 81       	ldd	r21, Y+7	; 0x07
    2450:	2c 81       	ldd	r18, Y+4	; 0x04
    2452:	3d 81       	ldd	r19, Y+5	; 0x05
    2454:	42 17       	cp	r20, r18
    2456:	53 07       	cpc	r21, r19
    2458:	7c f4       	brge	.+30     	; 0x2478 <fputc+0x4a>
    245a:	e8 81       	ld	r30, Y
    245c:	f9 81       	ldd	r31, Y+1	; 0x01
    245e:	9f 01       	movw	r18, r30
    2460:	2f 5f       	subi	r18, 0xFF	; 255
    2462:	3f 4f       	sbci	r19, 0xFF	; 255
    2464:	39 83       	std	Y+1, r19	; 0x01
    2466:	28 83       	st	Y, r18
    2468:	10 83       	st	Z, r17
    246a:	06 c0       	rjmp	.+12     	; 0x2478 <fputc+0x4a>
    246c:	e8 85       	ldd	r30, Y+8	; 0x08
    246e:	f9 85       	ldd	r31, Y+9	; 0x09
    2470:	81 2f       	mov	r24, r17
    2472:	09 95       	icall
    2474:	89 2b       	or	r24, r25
    2476:	29 f7       	brne	.-54     	; 0x2442 <fputc+0x14>
    2478:	2e 81       	ldd	r18, Y+6	; 0x06
    247a:	3f 81       	ldd	r19, Y+7	; 0x07
    247c:	2f 5f       	subi	r18, 0xFF	; 255
    247e:	3f 4f       	sbci	r19, 0xFF	; 255
    2480:	3f 83       	std	Y+7, r19	; 0x07
    2482:	2e 83       	std	Y+6, r18	; 0x06
    2484:	81 2f       	mov	r24, r17
    2486:	90 2f       	mov	r25, r16
    2488:	df 91       	pop	r29
    248a:	cf 91       	pop	r28
    248c:	1f 91       	pop	r17
    248e:	0f 91       	pop	r16
    2490:	08 95       	ret

00002492 <__ultoa_invert>:
    2492:	fa 01       	movw	r30, r20
    2494:	aa 27       	eor	r26, r26
    2496:	28 30       	cpi	r18, 0x08	; 8
    2498:	51 f1       	breq	.+84     	; 0x24ee <__ultoa_invert+0x5c>
    249a:	20 31       	cpi	r18, 0x10	; 16
    249c:	81 f1       	breq	.+96     	; 0x24fe <__ultoa_invert+0x6c>
    249e:	e8 94       	clt
    24a0:	6f 93       	push	r22
    24a2:	6e 7f       	andi	r22, 0xFE	; 254
    24a4:	6e 5f       	subi	r22, 0xFE	; 254
    24a6:	7f 4f       	sbci	r23, 0xFF	; 255
    24a8:	8f 4f       	sbci	r24, 0xFF	; 255
    24aa:	9f 4f       	sbci	r25, 0xFF	; 255
    24ac:	af 4f       	sbci	r26, 0xFF	; 255
    24ae:	b1 e0       	ldi	r27, 0x01	; 1
    24b0:	3e d0       	rcall	.+124    	; 0x252e <__ultoa_invert+0x9c>
    24b2:	b4 e0       	ldi	r27, 0x04	; 4
    24b4:	3c d0       	rcall	.+120    	; 0x252e <__ultoa_invert+0x9c>
    24b6:	67 0f       	add	r22, r23
    24b8:	78 1f       	adc	r23, r24
    24ba:	89 1f       	adc	r24, r25
    24bc:	9a 1f       	adc	r25, r26
    24be:	a1 1d       	adc	r26, r1
    24c0:	68 0f       	add	r22, r24
    24c2:	79 1f       	adc	r23, r25
    24c4:	8a 1f       	adc	r24, r26
    24c6:	91 1d       	adc	r25, r1
    24c8:	a1 1d       	adc	r26, r1
    24ca:	6a 0f       	add	r22, r26
    24cc:	71 1d       	adc	r23, r1
    24ce:	81 1d       	adc	r24, r1
    24d0:	91 1d       	adc	r25, r1
    24d2:	a1 1d       	adc	r26, r1
    24d4:	20 d0       	rcall	.+64     	; 0x2516 <__ultoa_invert+0x84>
    24d6:	09 f4       	brne	.+2      	; 0x24da <__ultoa_invert+0x48>
    24d8:	68 94       	set
    24da:	3f 91       	pop	r19
    24dc:	2a e0       	ldi	r18, 0x0A	; 10
    24de:	26 9f       	mul	r18, r22
    24e0:	11 24       	eor	r1, r1
    24e2:	30 19       	sub	r19, r0
    24e4:	30 5d       	subi	r19, 0xD0	; 208
    24e6:	31 93       	st	Z+, r19
    24e8:	de f6       	brtc	.-74     	; 0x24a0 <__ultoa_invert+0xe>
    24ea:	cf 01       	movw	r24, r30
    24ec:	08 95       	ret
    24ee:	46 2f       	mov	r20, r22
    24f0:	47 70       	andi	r20, 0x07	; 7
    24f2:	40 5d       	subi	r20, 0xD0	; 208
    24f4:	41 93       	st	Z+, r20
    24f6:	b3 e0       	ldi	r27, 0x03	; 3
    24f8:	0f d0       	rcall	.+30     	; 0x2518 <__ultoa_invert+0x86>
    24fa:	c9 f7       	brne	.-14     	; 0x24ee <__ultoa_invert+0x5c>
    24fc:	f6 cf       	rjmp	.-20     	; 0x24ea <__ultoa_invert+0x58>
    24fe:	46 2f       	mov	r20, r22
    2500:	4f 70       	andi	r20, 0x0F	; 15
    2502:	40 5d       	subi	r20, 0xD0	; 208
    2504:	4a 33       	cpi	r20, 0x3A	; 58
    2506:	18 f0       	brcs	.+6      	; 0x250e <__ultoa_invert+0x7c>
    2508:	49 5d       	subi	r20, 0xD9	; 217
    250a:	31 fd       	sbrc	r19, 1
    250c:	40 52       	subi	r20, 0x20	; 32
    250e:	41 93       	st	Z+, r20
    2510:	02 d0       	rcall	.+4      	; 0x2516 <__ultoa_invert+0x84>
    2512:	a9 f7       	brne	.-22     	; 0x24fe <__ultoa_invert+0x6c>
    2514:	ea cf       	rjmp	.-44     	; 0x24ea <__ultoa_invert+0x58>
    2516:	b4 e0       	ldi	r27, 0x04	; 4
    2518:	a6 95       	lsr	r26
    251a:	97 95       	ror	r25
    251c:	87 95       	ror	r24
    251e:	77 95       	ror	r23
    2520:	67 95       	ror	r22
    2522:	ba 95       	dec	r27
    2524:	c9 f7       	brne	.-14     	; 0x2518 <__ultoa_invert+0x86>
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	61 05       	cpc	r22, r1
    252a:	71 05       	cpc	r23, r1
    252c:	08 95       	ret
    252e:	9b 01       	movw	r18, r22
    2530:	ac 01       	movw	r20, r24
    2532:	0a 2e       	mov	r0, r26
    2534:	06 94       	lsr	r0
    2536:	57 95       	ror	r21
    2538:	47 95       	ror	r20
    253a:	37 95       	ror	r19
    253c:	27 95       	ror	r18
    253e:	ba 95       	dec	r27
    2540:	c9 f7       	brne	.-14     	; 0x2534 <__ultoa_invert+0xa2>
    2542:	62 0f       	add	r22, r18
    2544:	73 1f       	adc	r23, r19
    2546:	84 1f       	adc	r24, r20
    2548:	95 1f       	adc	r25, r21
    254a:	a0 1d       	adc	r26, r0
    254c:	08 95       	ret

0000254e <__muluhisi3>:
    254e:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__umulhisi3>
    2552:	a5 9f       	mul	r26, r21
    2554:	90 0d       	add	r25, r0
    2556:	b4 9f       	mul	r27, r20
    2558:	90 0d       	add	r25, r0
    255a:	a4 9f       	mul	r26, r20
    255c:	80 0d       	add	r24, r0
    255e:	91 1d       	adc	r25, r1
    2560:	11 24       	eor	r1, r1
    2562:	08 95       	ret

00002564 <__mulshisi3>:
    2564:	b7 ff       	sbrs	r27, 7
    2566:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__muluhisi3>

0000256a <__mulohisi3>:
    256a:	0e 94 a7 12 	call	0x254e	; 0x254e <__muluhisi3>
    256e:	82 1b       	sub	r24, r18
    2570:	93 0b       	sbc	r25, r19
    2572:	08 95       	ret

00002574 <__prologue_saves__>:
    2574:	2f 92       	push	r2
    2576:	3f 92       	push	r3
    2578:	4f 92       	push	r4
    257a:	5f 92       	push	r5
    257c:	6f 92       	push	r6
    257e:	7f 92       	push	r7
    2580:	8f 92       	push	r8
    2582:	9f 92       	push	r9
    2584:	af 92       	push	r10
    2586:	bf 92       	push	r11
    2588:	cf 92       	push	r12
    258a:	df 92       	push	r13
    258c:	ef 92       	push	r14
    258e:	ff 92       	push	r15
    2590:	0f 93       	push	r16
    2592:	1f 93       	push	r17
    2594:	cf 93       	push	r28
    2596:	df 93       	push	r29
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
    259c:	ca 1b       	sub	r28, r26
    259e:	db 0b       	sbc	r29, r27
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	f8 94       	cli
    25a4:	de bf       	out	0x3e, r29	; 62
    25a6:	0f be       	out	0x3f, r0	; 63
    25a8:	cd bf       	out	0x3d, r28	; 61
    25aa:	09 94       	ijmp

000025ac <__epilogue_restores__>:
    25ac:	2a 88       	ldd	r2, Y+18	; 0x12
    25ae:	39 88       	ldd	r3, Y+17	; 0x11
    25b0:	48 88       	ldd	r4, Y+16	; 0x10
    25b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    25b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    25b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    25b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    25ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    25bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    25be:	b9 84       	ldd	r11, Y+9	; 0x09
    25c0:	c8 84       	ldd	r12, Y+8	; 0x08
    25c2:	df 80       	ldd	r13, Y+7	; 0x07
    25c4:	ee 80       	ldd	r14, Y+6	; 0x06
    25c6:	fd 80       	ldd	r15, Y+5	; 0x05
    25c8:	0c 81       	ldd	r16, Y+4	; 0x04
    25ca:	1b 81       	ldd	r17, Y+3	; 0x03
    25cc:	aa 81       	ldd	r26, Y+2	; 0x02
    25ce:	b9 81       	ldd	r27, Y+1	; 0x01
    25d0:	ce 0f       	add	r28, r30
    25d2:	d1 1d       	adc	r29, r1
    25d4:	0f b6       	in	r0, 0x3f	; 63
    25d6:	f8 94       	cli
    25d8:	de bf       	out	0x3e, r29	; 62
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	cd bf       	out	0x3d, r28	; 61
    25de:	ed 01       	movw	r28, r26
    25e0:	08 95       	ret

000025e2 <__umulhisi3>:
    25e2:	a2 9f       	mul	r26, r18
    25e4:	b0 01       	movw	r22, r0
    25e6:	b3 9f       	mul	r27, r19
    25e8:	c0 01       	movw	r24, r0
    25ea:	a3 9f       	mul	r26, r19
    25ec:	70 0d       	add	r23, r0
    25ee:	81 1d       	adc	r24, r1
    25f0:	11 24       	eor	r1, r1
    25f2:	91 1d       	adc	r25, r1
    25f4:	b2 9f       	mul	r27, r18
    25f6:	70 0d       	add	r23, r0
    25f8:	81 1d       	adc	r24, r1
    25fa:	11 24       	eor	r1, r1
    25fc:	91 1d       	adc	r25, r1
    25fe:	08 95       	ret

00002600 <_exit>:
    2600:	f8 94       	cli

00002602 <__stop_program>:
    2602:	ff cf       	rjmp	.-2      	; 0x2602 <__stop_program>

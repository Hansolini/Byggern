
Ping Pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c0  00800100  00002800  00002894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002800  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  008002c0  008002c0  00002a54  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002a54  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  00002ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000022ca  00000000  00000000  00002cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b70  00000000  00000000  00004f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a4f  00000000  00000000  00005aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005f4  00000000  00000000  0000653c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006ad  00000000  00000000  00006b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000183b  00000000  00000000  000071dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  00008a18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__ctors_end>
       4:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       8:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      10:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      14:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      18:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      1c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      20:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      24:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      28:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      2c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      30:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      34:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      38:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      3c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      40:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      44:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      48:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      4c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      50:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      54:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      58:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      5c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      60:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      64:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      68:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      6c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	00 5c       	subi	r16, 0xC0	; 192
      a4:	00 00       	nop
      a6:	0c 00       	.word	0x000c	; ????
      a8:	0c 00       	.word	0x000c	; ????
      aa:	7c 28       	or	r7, r12
      ac:	7c 28       	or	r7, r12
      ae:	58 dc       	rcall	.-1872   	; 0xfffff960 <__eeprom_end+0xff7ef960>
      b0:	68 00       	.word	0x0068	; ????
      b2:	24 10       	cpse	r2, r4
      b4:	48 00       	.word	0x0048	; ????
      b6:	28 54       	subi	r18, 0x48	; 72
      b8:	28 40       	sbci	r18, 0x08	; 8
      ba:	00 0c       	add	r0, r0
      bc:	00 00       	nop
      be:	00 78       	andi	r16, 0x80	; 128
      c0:	84 00       	.word	0x0084	; ????
      c2:	84 78       	andi	r24, 0x84	; 132
      c4:	00 00       	nop
      c6:	54 38       	cpi	r21, 0x84	; 132
      c8:	54 00       	.word	0x0054	; ????
      ca:	10 7c       	andi	r17, 0xC0	; 192
      cc:	10 00       	.word	0x0010	; ????
      ce:	80 40       	sbci	r24, 0x00	; 0
      d0:	00 00       	nop
      d2:	10 10       	cpse	r1, r0
      d4:	10 00       	.word	0x0010	; ????
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	00 00       	nop
      da:	60 10       	cpse	r6, r0
      dc:	0c 00       	.word	0x000c	; ????
      de:	38 54       	subi	r19, 0x48	; 72
      e0:	38 00       	.word	0x0038	; ????
      e2:	48 7c       	andi	r20, 0xC8	; 200
      e4:	40 00       	.word	0x0040	; ????
      e6:	48 64       	ori	r20, 0x48	; 72
      e8:	58 00       	.word	0x0058	; ????
      ea:	44 54       	subi	r20, 0x44	; 68
      ec:	2c 00       	.word	0x002c	; ????
      ee:	1c 10       	cpse	r1, r12
      f0:	7c 00       	.word	0x007c	; ????
      f2:	5c 54       	subi	r21, 0x4C	; 76
      f4:	24 00       	.word	0x0024	; ????
      f6:	38 54       	subi	r19, 0x48	; 72
      f8:	24 00       	.word	0x0024	; ????
      fa:	64 14       	cp	r6, r4
      fc:	0c 00       	.word	0x000c	; ????
      fe:	68 54       	subi	r22, 0x48	; 72
     100:	2c 00       	.word	0x002c	; ????
     102:	48 54       	subi	r20, 0x48	; 72
     104:	38 00       	.word	0x0038	; ????
     106:	00 48       	sbci	r16, 0x80	; 128
     108:	00 00       	nop
     10a:	80 48       	sbci	r24, 0x80	; 128
     10c:	00 00       	nop
     10e:	10 28       	or	r1, r0
     110:	44 00       	.word	0x0044	; ????
     112:	28 28       	or	r2, r8
     114:	28 00       	.word	0x0028	; ????
     116:	44 28       	or	r4, r4
     118:	10 00       	.word	0x0010	; ????
     11a:	04 54       	subi	r16, 0x44	; 68
     11c:	08 00       	.word	0x0008	; ????
     11e:	38 44       	sbci	r19, 0x48	; 72
     120:	5c 00       	.word	0x005c	; ????
     122:	78 14       	cp	r7, r8
     124:	78 00       	.word	0x0078	; ????
     126:	7c 54       	subi	r23, 0x4C	; 76
     128:	28 00       	.word	0x0028	; ????
     12a:	38 44       	sbci	r19, 0x48	; 72
     12c:	28 00       	.word	0x0028	; ????
     12e:	7c 44       	sbci	r23, 0x4C	; 76
     130:	38 00       	.word	0x0038	; ????
     132:	7c 54       	subi	r23, 0x4C	; 76
     134:	44 00       	.word	0x0044	; ????
     136:	7c 14       	cp	r7, r12
     138:	04 00       	.word	0x0004	; ????
     13a:	38 44       	sbci	r19, 0x48	; 72
     13c:	74 00       	.word	0x0074	; ????
     13e:	7c 10       	cpse	r7, r12
     140:	7c 00       	.word	0x007c	; ????
     142:	44 7c       	andi	r20, 0xC4	; 196
     144:	44 00       	.word	0x0044	; ????
     146:	20 40       	sbci	r18, 0x00	; 0
     148:	3c 00       	.word	0x003c	; ????
     14a:	7c 10       	cpse	r7, r12
     14c:	6c 00       	.word	0x006c	; ????
     14e:	7c 40       	sbci	r23, 0x0C	; 12
     150:	40 00       	.word	0x0040	; ????
     152:	7c 18       	sub	r7, r12
     154:	7c 00       	.word	0x007c	; ????
     156:	78 10       	cpse	r7, r8
     158:	3c 00       	.word	0x003c	; ????
     15a:	38 44       	sbci	r19, 0x48	; 72
     15c:	38 00       	.word	0x0038	; ????
     15e:	7c 14       	cp	r7, r12
     160:	08 00       	.word	0x0008	; ????
     162:	38 44       	sbci	r19, 0x48	; 72
     164:	b8 00       	.word	0x00b8	; ????
     166:	7c 14       	cp	r7, r12
     168:	68 00       	.word	0x0068	; ????
     16a:	48 54       	subi	r20, 0x48	; 72
     16c:	24 00       	.word	0x0024	; ????
     16e:	04 7c       	andi	r16, 0xC4	; 196
     170:	04 00       	.word	0x0004	; ????
     172:	7c 40       	sbci	r23, 0x0C	; 12
     174:	7c 00       	.word	0x007c	; ????
     176:	3c 60       	ori	r19, 0x0C	; 12
     178:	3c 00       	.word	0x003c	; ????
     17a:	7c 30       	cpi	r23, 0x0C	; 12
     17c:	7c 00       	.word	0x007c	; ????
     17e:	6c 10       	cpse	r6, r12
     180:	6c 00       	.word	0x006c	; ????
     182:	0c 70       	andi	r16, 0x0C	; 12
     184:	0c 00       	.word	0x000c	; ????
     186:	64 54       	subi	r22, 0x44	; 68
     188:	4c 00       	.word	0x004c	; ????
     18a:	00 7c       	andi	r16, 0xC0	; 192
     18c:	44 00       	.word	0x0044	; ????
     18e:	0c 10       	cpse	r0, r12
     190:	60 00       	.word	0x0060	; ????
     192:	44 7c       	andi	r20, 0xC4	; 196
     194:	00 00       	nop
     196:	08 04       	cpc	r0, r8
     198:	08 00       	.word	0x0008	; ????
     19a:	80 80       	ld	r8, Z
     19c:	80 00       	.word	0x0080	; ????
     19e:	00 04       	cpc	r0, r0
     1a0:	08 00       	.word	0x0008	; ????
     1a2:	30 48       	sbci	r19, 0x80	; 128
     1a4:	78 00       	.word	0x0078	; ????
     1a6:	7c 48       	sbci	r23, 0x8C	; 140
     1a8:	30 00       	.word	0x0030	; ????
     1aa:	30 48       	sbci	r19, 0x80	; 128
     1ac:	48 00       	.word	0x0048	; ????
     1ae:	30 48       	sbci	r19, 0x80	; 128
     1b0:	7c 00       	.word	0x007c	; ????
     1b2:	30 68       	ori	r19, 0x80	; 128
     1b4:	50 00       	.word	0x0050	; ????
     1b6:	10 78       	andi	r17, 0x80	; 128
     1b8:	14 00       	.word	0x0014	; ????
     1ba:	90 a8       	ldd	r9, Z+48	; 0x30
     1bc:	78 00       	.word	0x0078	; ????
     1be:	7c 08       	sbc	r7, r12
     1c0:	70 00       	.word	0x0070	; ????
     1c2:	50 74       	andi	r21, 0x40	; 64
     1c4:	40 00       	.word	0x0040	; ????
     1c6:	80 80       	ld	r8, Z
     1c8:	74 00       	.word	0x0074	; ????
     1ca:	7c 10       	cpse	r7, r12
     1cc:	68 00       	.word	0x0068	; ????
     1ce:	44 7c       	andi	r20, 0xC4	; 196
     1d0:	40 00       	.word	0x0040	; ????
     1d2:	78 10       	cpse	r7, r8
     1d4:	78 00       	.word	0x0078	; ????
     1d6:	78 08       	sbc	r7, r8
     1d8:	70 00       	.word	0x0070	; ????
     1da:	30 48       	sbci	r19, 0x80	; 128
     1dc:	30 00       	.word	0x0030	; ????
     1de:	f8 28       	or	r15, r8
     1e0:	10 00       	.word	0x0010	; ????
     1e2:	30 48       	sbci	r19, 0x80	; 128
     1e4:	f8 00       	.word	0x00f8	; ????
     1e6:	78 10       	cpse	r7, r8
     1e8:	08 00       	.word	0x0008	; ????
     1ea:	50 58       	subi	r21, 0x80	; 128
     1ec:	28 00       	.word	0x0028	; ????
     1ee:	08 3c       	cpi	r16, 0xC8	; 200
     1f0:	48 00       	.word	0x0048	; ????
     1f2:	38 40       	sbci	r19, 0x08	; 8
     1f4:	78 00       	.word	0x0078	; ????
     1f6:	38 40       	sbci	r19, 0x08	; 8
     1f8:	38 00       	.word	0x0038	; ????
     1fa:	78 20       	and	r7, r8
     1fc:	78 00       	.word	0x0078	; ????
     1fe:	48 30       	cpi	r20, 0x08	; 8
     200:	48 00       	.word	0x0048	; ????
     202:	98 a0       	ldd	r9, Y+32	; 0x20
     204:	78 00       	.word	0x0078	; ????
     206:	48 68       	ori	r20, 0x88	; 136
     208:	58 00       	.word	0x0058	; ????
     20a:	10 78       	andi	r17, 0x80	; 128
     20c:	84 00       	.word	0x0084	; ????
     20e:	00 7c       	andi	r16, 0xC0	; 192
     210:	00 00       	nop
     212:	84 78       	andi	r24, 0x84	; 132
     214:	10 00       	.word	0x0010	; ????
     216:	08 04       	cpc	r0, r8
     218:	08 04       	cpc	r0, r8

0000021a <font5>:
     21a:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     22a:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     23a:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     24a:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     25a:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     26a:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     27a:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     28a:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     29a:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     2aa:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     2ba:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     2ca:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2da:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2ea:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2fa:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     30a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     31a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     32a:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     33a:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     34a:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     35a:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     36a:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     37a:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     38a:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     39a:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     3aa:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     3ba:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     3ca:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3da:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3ea:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003f5 <font8>:
	...
     3fd:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     40d:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     41d:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     42d:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     43d:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     44d:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     45d:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     46d:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     47d:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     48d:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     49d:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     4ad:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     4bd:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     4cd:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4dd:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4ed:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4fd:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     50d:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     51d:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     52d:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     53d:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     54d:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     55d:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     56d:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     57d:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     58d:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     59d:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     5ad:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     5bd:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     5cd:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5dd:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5ed:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5fd:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     60d:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     61d:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     62d:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     63d:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     64d:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     65d:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     66d:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     67d:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     68d:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     69d:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     6ad:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     6bd:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     6cd:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6dd:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006ee <__ctors_end>:
     6ee:	11 24       	eor	r1, r1
     6f0:	1f be       	out	0x3f, r1	; 63
     6f2:	cf ef       	ldi	r28, 0xFF	; 255
     6f4:	d4 e0       	ldi	r29, 0x04	; 4
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	cd bf       	out	0x3d, r28	; 61

000006fa <__do_copy_data>:
     6fa:	12 e0       	ldi	r17, 0x02	; 2
     6fc:	a0 e0       	ldi	r26, 0x00	; 0
     6fe:	b1 e0       	ldi	r27, 0x01	; 1
     700:	e0 e0       	ldi	r30, 0x00	; 0
     702:	f8 e2       	ldi	r31, 0x28	; 40
     704:	02 c0       	rjmp	.+4      	; 0x70a <__do_copy_data+0x10>
     706:	05 90       	lpm	r0, Z+
     708:	0d 92       	st	X+, r0
     70a:	a0 3c       	cpi	r26, 0xC0	; 192
     70c:	b1 07       	cpc	r27, r17
     70e:	d9 f7       	brne	.-10     	; 0x706 <__do_copy_data+0xc>

00000710 <__do_clear_bss>:
     710:	22 e0       	ldi	r18, 0x02	; 2
     712:	a0 ec       	ldi	r26, 0xC0	; 192
     714:	b2 e0       	ldi	r27, 0x02	; 2
     716:	01 c0       	rjmp	.+2      	; 0x71a <.do_clear_bss_start>

00000718 <.do_clear_bss_loop>:
     718:	1d 92       	st	X+, r1

0000071a <.do_clear_bss_start>:
     71a:	aa 3d       	cpi	r26, 0xDA	; 218
     71c:	b2 07       	cpc	r27, r18
     71e:	e1 f7       	brne	.-8      	; 0x718 <.do_clear_bss_loop>
     720:	0e 94 83 05 	call	0xb06	; 0xb06 <main>
     724:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <_exit>

00000728 <__bad_interrupt>:
     728:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000072c <adc_init>:
{
	adcConversionRunning = 0;
}*/

void adc_init(){
	clear_bit(DDRE, PE0); //Set DDR to input for interrupt flag
     72c:	30 98       	cbi	0x06, 0	; 6
     72e:	08 95       	ret

00000730 <adc_read>:
}

uint8_t adc_read(char channel)
{
	volatile char *ext_adc = (char *) 0x1400; 
	if (channel == 'x')
     730:	88 37       	cpi	r24, 0x78	; 120
     732:	21 f4       	brne	.+8      	; 0x73c <adc_read+0xc>
	{
		*ext_adc = 0b0100;
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	80 93 00 14 	sts	0x1400, r24
     73a:	11 c0       	rjmp	.+34     	; 0x75e <adc_read+0x2e>
	}
	
	else if (channel == 'y')
     73c:	89 37       	cpi	r24, 0x79	; 121
     73e:	21 f4       	brne	.+8      	; 0x748 <adc_read+0x18>
	{
		*ext_adc = 0b0101;
     740:	85 e0       	ldi	r24, 0x05	; 5
     742:	80 93 00 14 	sts	0x1400, r24
     746:	0b c0       	rjmp	.+22     	; 0x75e <adc_read+0x2e>
	}
	
	else if (channel == 'l')
     748:	8c 36       	cpi	r24, 0x6C	; 108
     74a:	21 f4       	brne	.+8      	; 0x754 <adc_read+0x24>
	{
		*ext_adc = 0b0110;
     74c:	86 e0       	ldi	r24, 0x06	; 6
     74e:	80 93 00 14 	sts	0x1400, r24
     752:	05 c0       	rjmp	.+10     	; 0x75e <adc_read+0x2e>
	}
	
	else if (channel == 'r')
     754:	82 37       	cpi	r24, 0x72	; 114
     756:	19 f4       	brne	.+6      	; 0x75e <adc_read+0x2e>
	{
		*ext_adc = 0b0111;
     758:	87 e0       	ldi	r24, 0x07	; 7
     75a:	80 93 00 14 	sts	0x1400, r24
	}
	while(test_bit(PINE, PE0));
     75e:	28 99       	sbic	0x05, 0	; 5
     760:	fe cf       	rjmp	.-4      	; 0x75e <adc_read+0x2e>
	return (uint8_t) *ext_adc;
     762:	80 91 00 14 	lds	r24, 0x1400
     766:	08 95       	ret

00000768 <joy_calibrate>:
	printf("Calibrating...\n");
	joy_calibrate();
	printf("Calibrated.\n");
}

void joy_calibrate(){
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
	xmean = adc_read('x');
     76c:	88 e7       	ldi	r24, 0x78	; 120
     76e:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	90 93 cb 02 	sts	0x02CB, r25
     778:	80 93 ca 02 	sts	0x02CA, r24
	ymean = adc_read('y');
     77c:	89 e7       	ldi	r24, 0x79	; 121
     77e:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	90 93 cf 02 	sts	0x02CF, r25
     788:	80 93 ce 02 	sts	0x02CE, r24
	printf("%d", test_bit(PINB, PB2));
     78c:	86 b3       	in	r24, 0x16	; 22
     78e:	84 70       	andi	r24, 0x04	; 4
     790:	1f 92       	push	r1
     792:	8f 93       	push	r24
     794:	82 e8       	ldi	r24, 0x82	; 130
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9f 93       	push	r25
     79a:	8f 93       	push	r24
     79c:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <printf>
	while (test_bit(PINB, PB2))
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
	{
		x = adc_read('x');
		y = adc_read('y');
		if (x > xmax){
			xmax = x;
			printf("%d \n", xmax);
     7a8:	c5 e8       	ldi	r28, 0x85	; 133
     7aa:	d1 e0       	ldi	r29, 0x01	; 1

void joy_calibrate(){
	xmean = adc_read('x');
	ymean = adc_read('y');
	printf("%d", test_bit(PINB, PB2));
	while (test_bit(PINB, PB2))
     7ac:	74 c0       	rjmp	.+232    	; 0x896 <joy_calibrate+0x12e>
	{
		x = adc_read('x');
     7ae:	88 e7       	ldi	r24, 0x78	; 120
     7b0:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	90 93 c9 02 	sts	0x02C9, r25
     7ba:	80 93 c8 02 	sts	0x02C8, r24
		y = adc_read('y');
     7be:	89 e7       	ldi	r24, 0x79	; 121
     7c0:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	90 93 cd 02 	sts	0x02CD, r25
     7ca:	80 93 cc 02 	sts	0x02CC, r24
		if (x > xmax){
     7ce:	80 91 c8 02 	lds	r24, 0x02C8
     7d2:	90 91 c9 02 	lds	r25, 0x02C9
     7d6:	20 91 c2 02 	lds	r18, 0x02C2
     7da:	30 91 c3 02 	lds	r19, 0x02C3
     7de:	28 17       	cp	r18, r24
     7e0:	39 07       	cpc	r19, r25
     7e2:	74 f4       	brge	.+28     	; 0x800 <joy_calibrate+0x98>
			xmax = x;
     7e4:	90 93 c3 02 	sts	0x02C3, r25
     7e8:	80 93 c2 02 	sts	0x02C2, r24
			printf("%d \n", xmax);
     7ec:	9f 93       	push	r25
     7ee:	8f 93       	push	r24
     7f0:	df 93       	push	r29
     7f2:	cf 93       	push	r28
     7f4:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <printf>
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
		}
		if (y > ymax){
     800:	80 91 cc 02 	lds	r24, 0x02CC
     804:	90 91 cd 02 	lds	r25, 0x02CD
     808:	20 91 c0 02 	lds	r18, 0x02C0
     80c:	30 91 c1 02 	lds	r19, 0x02C1
     810:	28 17       	cp	r18, r24
     812:	39 07       	cpc	r19, r25
     814:	74 f4       	brge	.+28     	; 0x832 <joy_calibrate+0xca>
			ymax = y;
     816:	90 93 c1 02 	sts	0x02C1, r25
     81a:	80 93 c0 02 	sts	0x02C0, r24
			printf("%d \n", ymax);
     81e:	9f 93       	push	r25
     820:	8f 93       	push	r24
     822:	df 93       	push	r29
     824:	cf 93       	push	r28
     826:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <printf>
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
		}
		if (x < xmin){
     832:	80 91 c8 02 	lds	r24, 0x02C8
     836:	90 91 c9 02 	lds	r25, 0x02C9
     83a:	20 91 08 01 	lds	r18, 0x0108
     83e:	30 91 09 01 	lds	r19, 0x0109
     842:	82 17       	cp	r24, r18
     844:	93 07       	cpc	r25, r19
     846:	74 f4       	brge	.+28     	; 0x864 <joy_calibrate+0xfc>
			xmin = x;
     848:	90 93 09 01 	sts	0x0109, r25
     84c:	80 93 08 01 	sts	0x0108, r24
			printf("%d \n", xmin);
     850:	9f 93       	push	r25
     852:	8f 93       	push	r24
     854:	df 93       	push	r29
     856:	cf 93       	push	r28
     858:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <printf>
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
		}
		if (y < ymin){
     864:	80 91 cc 02 	lds	r24, 0x02CC
     868:	90 91 cd 02 	lds	r25, 0x02CD
     86c:	20 91 06 01 	lds	r18, 0x0106
     870:	30 91 07 01 	lds	r19, 0x0107
     874:	82 17       	cp	r24, r18
     876:	93 07       	cpc	r25, r19
     878:	74 f4       	brge	.+28     	; 0x896 <joy_calibrate+0x12e>
			ymin = y;
     87a:	90 93 07 01 	sts	0x0107, r25
     87e:	80 93 06 01 	sts	0x0106, r24
			printf("%d \n", ymin);
     882:	9f 93       	push	r25
     884:	8f 93       	push	r24
     886:	df 93       	push	r29
     888:	cf 93       	push	r28
     88a:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <printf>
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0

void joy_calibrate(){
	xmean = adc_read('x');
	ymean = adc_read('y');
	printf("%d", test_bit(PINB, PB2));
	while (test_bit(PINB, PB2))
     896:	b2 99       	sbic	0x16, 2	; 22
     898:	8a cf       	rjmp	.-236    	; 0x7ae <joy_calibrate+0x46>
		if (y < ymin){
			ymin = y;
			printf("%d \n", ymin);
		}
	}
}
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <joy_init>:
int xmin = 255;
int ymax = 0;
int ymin = 255;

void joy_init(){
	clear_bit(DDRB,PB2);	//Set joystick button pin to input
     8a0:	ba 98       	cbi	0x17, 2	; 23
	set_bit(PORTB,PB2);		//Set the internal pull-up resistor needed for the button
     8a2:	c2 9a       	sbi	0x18, 2	; 24
	printf("Calibrating...\n");
     8a4:	8a e8       	ldi	r24, 0x8A	; 138
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	0e 94 ff 10 	call	0x21fe	; 0x21fe <puts>
	joy_calibrate();
     8ac:	0e 94 b4 03 	call	0x768	; 0x768 <joy_calibrate>
	printf("Calibrated.\n");
     8b0:	89 e9       	ldi	r24, 0x99	; 153
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	0e 94 ff 10 	call	0x21fe	; 0x21fe <puts>
     8b8:	08 95       	ret

000008ba <joy_get_position>:
			printf("%d \n", ymin);
		}
	}
}

Position joy_get_position(){
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <joy_get_position+0x6>
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <joy_get_position+0x8>
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <joy_get_position+0xa>
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
		x = adc_read('x');
     8c8:	88 e7       	ldi	r24, 0x78	; 120
     8ca:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	90 93 c9 02 	sts	0x02C9, r25
     8d4:	80 93 c8 02 	sts	0x02C8, r24
		y = adc_read('y');
     8d8:	89 e7       	ldi	r24, 0x79	; 121
     8da:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     8de:	e8 2f       	mov	r30, r24
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
		if (x > xmean){
     8e2:	80 91 c8 02 	lds	r24, 0x02C8
     8e6:	90 91 c9 02 	lds	r25, 0x02C9
     8ea:	20 91 ca 02 	lds	r18, 0x02CA
     8ee:	30 91 cb 02 	lds	r19, 0x02CB
     8f2:	28 17       	cp	r18, r24
     8f4:	39 07       	cpc	r19, r25
     8f6:	b4 f4       	brge	.+44     	; 0x924 <joy_get_position+0x6a>
			x = ((x - xmean) * 100) / (xmax - xmean);
     8f8:	ac 01       	movw	r20, r24
     8fa:	42 1b       	sub	r20, r18
     8fc:	53 0b       	sbc	r21, r19
     8fe:	64 e6       	ldi	r22, 0x64	; 100
     900:	64 9f       	mul	r22, r20
     902:	c0 01       	movw	r24, r0
     904:	65 9f       	mul	r22, r21
     906:	90 0d       	add	r25, r0
     908:	11 24       	eor	r1, r1
     90a:	60 91 c2 02 	lds	r22, 0x02C2
     90e:	70 91 c3 02 	lds	r23, 0x02C3
     912:	62 1b       	sub	r22, r18
     914:	73 0b       	sbc	r23, r19
     916:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <__divmodhi4>
     91a:	70 93 c9 02 	sts	0x02C9, r23
     91e:	60 93 c8 02 	sts	0x02C8, r22
     922:	16 c0       	rjmp	.+44     	; 0x950 <joy_get_position+0x96>
		}
		else{
			x = ((x - xmean) * 100) / (xmean - xmin);
     924:	ac 01       	movw	r20, r24
     926:	42 1b       	sub	r20, r18
     928:	53 0b       	sbc	r21, r19
     92a:	64 e6       	ldi	r22, 0x64	; 100
     92c:	64 9f       	mul	r22, r20
     92e:	c0 01       	movw	r24, r0
     930:	65 9f       	mul	r22, r21
     932:	90 0d       	add	r25, r0
     934:	11 24       	eor	r1, r1
     936:	40 91 08 01 	lds	r20, 0x0108
     93a:	50 91 09 01 	lds	r21, 0x0109
     93e:	b9 01       	movw	r22, r18
     940:	64 1b       	sub	r22, r20
     942:	75 0b       	sbc	r23, r21
     944:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <__divmodhi4>
     948:	70 93 c9 02 	sts	0x02C9, r23
     94c:	60 93 c8 02 	sts	0x02C8, r22
		}
		if (y > ymean){
     950:	60 91 ce 02 	lds	r22, 0x02CE
     954:	70 91 cf 02 	lds	r23, 0x02CF
     958:	6e 17       	cp	r22, r30
     95a:	7f 07       	cpc	r23, r31
     95c:	bc f4       	brge	.+46     	; 0x98c <joy_get_position+0xd2>
			y = ((y - ymean) * 100) / (ymax - ymean);
     95e:	e6 1b       	sub	r30, r22
     960:	f7 0b       	sbc	r31, r23
     962:	24 e6       	ldi	r18, 0x64	; 100
     964:	2e 9f       	mul	r18, r30
     966:	c0 01       	movw	r24, r0
     968:	2f 9f       	mul	r18, r31
     96a:	90 0d       	add	r25, r0
     96c:	11 24       	eor	r1, r1
     96e:	20 91 c0 02 	lds	r18, 0x02C0
     972:	30 91 c1 02 	lds	r19, 0x02C1
     976:	a9 01       	movw	r20, r18
     978:	46 1b       	sub	r20, r22
     97a:	57 0b       	sbc	r21, r23
     97c:	ba 01       	movw	r22, r20
     97e:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <__divmodhi4>
     982:	70 93 cd 02 	sts	0x02CD, r23
     986:	60 93 cc 02 	sts	0x02CC, r22
     98a:	14 c0       	rjmp	.+40     	; 0x9b4 <joy_get_position+0xfa>
		}
		else{
			y = ((y - ymean)  * 100) / (ymean - ymin);
     98c:	e6 1b       	sub	r30, r22
     98e:	f7 0b       	sbc	r31, r23
     990:	24 e6       	ldi	r18, 0x64	; 100
     992:	2e 9f       	mul	r18, r30
     994:	c0 01       	movw	r24, r0
     996:	2f 9f       	mul	r18, r31
     998:	90 0d       	add	r25, r0
     99a:	11 24       	eor	r1, r1
     99c:	20 91 06 01 	lds	r18, 0x0106
     9a0:	30 91 07 01 	lds	r19, 0x0107
     9a4:	62 1b       	sub	r22, r18
     9a6:	73 0b       	sbc	r23, r19
     9a8:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <__divmodhi4>
     9ac:	70 93 cd 02 	sts	0x02CD, r23
     9b0:	60 93 cc 02 	sts	0x02CC, r22
		}
		
		Position pos;
		pos.x = x;
		pos.y = y;
     9b4:	40 91 cc 02 	lds	r20, 0x02CC
     9b8:	80 91 cd 02 	lds	r24, 0x02CD
		pos.z= !test_bit(PINB, PB2);
     9bc:	66 b3       	in	r22, 0x16	; 22
		return pos;
     9be:	20 91 c8 02 	lds	r18, 0x02C8
     9c2:	90 91 c9 02 	lds	r25, 0x02C9
     9c6:	29 83       	std	Y+1, r18	; 0x01
     9c8:	9a 83       	std	Y+2, r25	; 0x02
     9ca:	4b 83       	std	Y+3, r20	; 0x03
     9cc:	8c 83       	std	Y+4, r24	; 0x04
		}
		
		Position pos;
		pos.x = x;
		pos.y = y;
		pos.z= !test_bit(PINB, PB2);
     9ce:	66 95       	lsr	r22
     9d0:	66 95       	lsr	r22
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	68 27       	eor	r22, r24
     9d6:	61 70       	andi	r22, 0x01	; 1
		return pos;
     9d8:	6d 83       	std	Y+5, r22	; 0x05
     9da:	1e 82       	std	Y+6, r1	; 0x06
     9dc:	39 2f       	mov	r19, r25
     9de:	5c 81       	ldd	r21, Y+4	; 0x04
     9e0:	70 e0       	ldi	r23, 0x00	; 0
}
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	26 96       	adiw	r28, 0x06	; 6
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <joy_get_position_polar>:
		}
	}
	return NEUTRAL;
} 

Position_polar joy_get_position_polar(){
     9f8:	8f 92       	push	r8
     9fa:	9f 92       	push	r9
     9fc:	af 92       	push	r10
     9fe:	bf 92       	push	r11
     a00:	cf 92       	push	r12
     a02:	df 92       	push	r13
     a04:	ef 92       	push	r14
     a06:	ff 92       	push	r15
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	00 d0       	rcall	.+0      	; 0xa0e <joy_get_position_polar+0x16>
     a0e:	00 d0       	rcall	.+0      	; 0xa10 <joy_get_position_polar+0x18>
     a10:	00 d0       	rcall	.+0      	; 0xa12 <joy_get_position_polar+0x1a>
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
	Position pos_cart = joy_get_position();
     a16:	0e 94 5d 04 	call	0x8ba	; 0x8ba <joy_get_position>
     a1a:	29 83       	std	Y+1, r18	; 0x01
     a1c:	3a 83       	std	Y+2, r19	; 0x02
     a1e:	4b 83       	std	Y+3, r20	; 0x03
     a20:	5c 83       	std	Y+4, r21	; 0x04
     a22:	89 80       	ldd	r8, Y+1	; 0x01
     a24:	9a 80       	ldd	r9, Y+2	; 0x02
     a26:	ab 80       	ldd	r10, Y+3	; 0x03
     a28:	bc 80       	ldd	r11, Y+4	; 0x04
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     a2a:	b4 01       	movw	r22, r8
     a2c:	88 27       	eor	r24, r24
     a2e:	77 fd       	sbrc	r23, 7
     a30:	80 95       	com	r24
     a32:	98 2f       	mov	r25, r24
     a34:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__floatsisf>
     a38:	6b 01       	movw	r12, r22
     a3a:	7c 01       	movw	r14, r24
     a3c:	b5 01       	movw	r22, r10
     a3e:	88 27       	eor	r24, r24
     a40:	77 fd       	sbrc	r23, 7
     a42:	80 95       	com	r24
     a44:	98 2f       	mov	r25, r24
     a46:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__floatsisf>
     a4a:	a7 01       	movw	r20, r14
     a4c:	96 01       	movw	r18, r12
     a4e:	0e 94 75 0b 	call	0x16ea	; 0x16ea <atan2>
     a52:	6b 01       	movw	r12, r22
     a54:	7c 01       	movw	r14, r24
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     a56:	88 9c       	mul	r8, r8
     a58:	b0 01       	movw	r22, r0
     a5a:	89 9c       	mul	r8, r9
     a5c:	70 0d       	add	r23, r0
     a5e:	70 0d       	add	r23, r0
     a60:	11 24       	eor	r1, r1
     a62:	aa 9c       	mul	r10, r10
     a64:	c0 01       	movw	r24, r0
     a66:	ab 9c       	mul	r10, r11
     a68:	90 0d       	add	r25, r0
     a6a:	90 0d       	add	r25, r0
     a6c:	11 24       	eor	r1, r1
     a6e:	68 0f       	add	r22, r24
     a70:	79 1f       	adc	r23, r25
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 5f 0c 	call	0x18be	; 0x18be <__floatunsisf>
     a7a:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <sqrt>
     a7e:	4b 01       	movw	r8, r22
     a80:	5c 01       	movw	r10, r24
} 

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     a82:	20 ee       	ldi	r18, 0xE0	; 224
     a84:	3e e2       	ldi	r19, 0x2E	; 46
     a86:	45 e6       	ldi	r20, 0x65	; 101
     a88:	52 e4       	ldi	r21, 0x42	; 66
     a8a:	c7 01       	movw	r24, r14
     a8c:	b6 01       	movw	r22, r12
     a8e:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__mulsf3>
     a92:	0e 94 2e 0c 	call	0x185c	; 0x185c <__fixsfsi>
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
	return pos_pol; 
     a96:	6b 01       	movw	r12, r22

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     a98:	c5 01       	movw	r24, r10
     a9a:	b4 01       	movw	r22, r8
     a9c:	0e 94 2e 0c 	call	0x185c	; 0x185c <__fixsfsi>
	return pos_pol; 
     aa0:	7b 01       	movw	r14, r22
}
     aa2:	c7 01       	movw	r24, r14
     aa4:	b6 01       	movw	r22, r12
     aa6:	26 96       	adiw	r28, 0x06	; 6
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	f8 94       	cli
     aac:	de bf       	out	0x3e, r29	; 62
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	cd bf       	out	0x3d, r28	; 61
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	ff 90       	pop	r15
     ab8:	ef 90       	pop	r14
     aba:	df 90       	pop	r13
     abc:	cf 90       	pop	r12
     abe:	bf 90       	pop	r11
     ac0:	af 90       	pop	r10
     ac2:	9f 90       	pop	r9
     ac4:	8f 90       	pop	r8
     ac6:	08 95       	ret

00000ac8 <joy_get_direction>:
		pos.z= !test_bit(PINB, PB2);
		return pos;
}

Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
     ac8:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <joy_get_position_polar>
     acc:	9b 01       	movw	r18, r22
	
	if(pos_pol.amplitude > 80){
     ace:	81 35       	cpi	r24, 0x51	; 81
     ad0:	91 05       	cpc	r25, r1
     ad2:	7c f0       	brlt	.+30     	; 0xaf2 <joy_get_direction+0x2a>
		if (pos_pol.angle > 135)
     ad4:	68 38       	cpi	r22, 0x88	; 136
     ad6:	71 05       	cpc	r23, r1
     ad8:	74 f4       	brge	.+28     	; 0xaf6 <joy_get_direction+0x2e>
		{
			return LEFT;
		}
		else if(pos_pol.angle > 45)
     ada:	6e 32       	cpi	r22, 0x2E	; 46
     adc:	71 05       	cpc	r23, r1
     ade:	6c f4       	brge	.+26     	; 0xafa <joy_get_direction+0x32>
		{
			return UP;
		}
		else if(pos_pol.angle > -45)
     ae0:	24 3d       	cpi	r18, 0xD4	; 212
     ae2:	8f ef       	ldi	r24, 0xFF	; 255
     ae4:	38 07       	cpc	r19, r24
     ae6:	5c f4       	brge	.+22     	; 0xafe <joy_get_direction+0x36>
		{
			return RIGHT;
		}
		else if(pos_pol.angle > -135)
     ae8:	2a 37       	cpi	r18, 0x7A	; 122
     aea:	3f 4f       	sbci	r19, 0xFF	; 255
     aec:	54 f0       	brlt	.+20     	; 0xb02 <joy_get_direction+0x3a>
		{
			return DOWN;
     aee:	83 e0       	ldi	r24, 0x03	; 3
     af0:	08 95       	ret
		else
		{
			return LEFT;
		}
	}
	return NEUTRAL;
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	08 95       	ret
	Position_polar pos_pol  = joy_get_position_polar();
	
	if(pos_pol.amplitude > 80){
		if (pos_pol.angle > 135)
		{
			return LEFT;
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	08 95       	ret
		}
		else if(pos_pol.angle > 45)
		{
			return UP;
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	08 95       	ret
		}
		else if(pos_pol.angle > -45)
		{
			return RIGHT;
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	08 95       	ret
		{
			return DOWN;
		}
		else
		{
			return LEFT;
     b02:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	return NEUTRAL;
} 
     b04:	08 95       	ret

00000b06 <main>:

//1 output, 0 input

int main(void)
{
	MCUCR |= (1<<SRE);		//Enable external memory
     b06:	85 b7       	in	r24, 0x35	; 53
     b08:	80 68       	ori	r24, 0x80	; 128
     b0a:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     b0c:	80 b7       	in	r24, 0x30	; 48
     b0e:	80 62       	ori	r24, 0x20	; 32
     b10:	80 bf       	out	0x30, r24	; 48
	
	//Initialization
	uart_init(9600);
     b12:	80 e8       	ldi	r24, 0x80	; 128
     b14:	95 e2       	ldi	r25, 0x25	; 37
     b16:	0e 94 35 0b 	call	0x166a	; 0x166a <uart_init>
	adc_init();
     b1a:	0e 94 96 03 	call	0x72c	; 0x72c <adc_init>
	oled_init();
     b1e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <oled_init>
	oled_print_string("Please calibrate joystick!",0,0,8,0);
     b22:	00 e0       	ldi	r16, 0x00	; 0
     b24:	10 e0       	ldi	r17, 0x00	; 0
     b26:	28 e0       	ldi	r18, 0x08	; 8
     b28:	40 e0       	ldi	r20, 0x00	; 0
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	89 ee       	ldi	r24, 0xE9	; 233
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	0e 94 83 09 	call	0x1306	; 0x1306 <oled_print_string>
	oled_refresh();
     b34:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <oled_refresh>
	joy_init();
     b38:	0e 94 50 04 	call	0x8a0	; 0x8a0 <joy_init>
	touch_init();
     b3c:	0e 94 28 0b 	call	0x1650	; 0x1650 <touch_init>
	menu_init();
     b40:	0e 94 14 08 	call	0x1028	; 0x1028 <menu_init>
	spi_master_init();
     b44:	0e 94 19 0b 	call	0x1632	; 0x1632 <spi_master_init>
	
	
	
	oled_clear_screen();
     b48:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <oled_clear_screen>
	oled_refresh();
     b4c:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <oled_refresh>
	while (1)
	{
		//printf("\n");
		//menu_run_display();
		char k = (spi_master_transmit('a'));
		printf("%d",k);
     b50:	c2 e8       	ldi	r28, 0x82	; 130
     b52:	d1 e0       	ldi	r29, 0x01	; 1
	
	while (1)
	{
		//printf("\n");
		//menu_run_display();
		char k = (spi_master_transmit('a'));
     b54:	81 e6       	ldi	r24, 0x61	; 97
     b56:	0e 94 21 0b 	call	0x1642	; 0x1642 <spi_master_transmit>
		printf("%d",k);
     b5a:	1f 92       	push	r1
     b5c:	8f 93       	push	r24
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <printf>
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	f2 cf       	rjmp	.-28     	; 0xb54 <main+0x4e>

00000b70 <draw_list>:
	}
	

	return self;
}
Menu* draw_list(Menu* self){
     b70:	ef 92       	push	r14
     b72:	ff 92       	push	r15
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	7c 01       	movw	r14, r24

	for(int i = 0; i < self->num_of_entries; i++){
     b7e:	dc 01       	movw	r26, r24
     b80:	14 96       	adiw	r26, 0x04	; 4
     b82:	8d 91       	ld	r24, X+
     b84:	9c 91       	ld	r25, X
     b86:	15 97       	sbiw	r26, 0x05	; 5
     b88:	18 16       	cp	r1, r24
     b8a:	19 06       	cpc	r1, r25
     b8c:	e4 f4       	brge	.+56     	; 0xbc6 <draw_list+0x56>
     b8e:	c0 e0       	ldi	r28, 0x00	; 0
     b90:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_string(self->entries[i],0,i,5,0);
     b92:	ce 01       	movw	r24, r28
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	d7 01       	movw	r26, r14
     b9a:	12 96       	adiw	r26, 0x02	; 2
     b9c:	ed 91       	ld	r30, X+
     b9e:	fc 91       	ld	r31, X
     ba0:	13 97       	sbiw	r26, 0x03	; 3
     ba2:	e8 0f       	add	r30, r24
     ba4:	f9 1f       	adc	r31, r25
     ba6:	00 e0       	ldi	r16, 0x00	; 0
     ba8:	10 e0       	ldi	r17, 0x00	; 0
     baa:	25 e0       	ldi	r18, 0x05	; 5
     bac:	4c 2f       	mov	r20, r28
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	91 81       	ldd	r25, Z+1	; 0x01
     bb4:	0e 94 83 09 	call	0x1306	; 0x1306 <oled_print_string>

	return self;
}
Menu* draw_list(Menu* self){

	for(int i = 0; i < self->num_of_entries; i++){
     bb8:	21 96       	adiw	r28, 0x01	; 1
     bba:	f7 01       	movw	r30, r14
     bbc:	84 81       	ldd	r24, Z+4	; 0x04
     bbe:	95 81       	ldd	r25, Z+5	; 0x05
     bc0:	c8 17       	cp	r28, r24
     bc2:	d9 07       	cpc	r29, r25
     bc4:	34 f3       	brlt	.-52     	; 0xb92 <draw_list+0x22>
		oled_print_string(self->entries[i],0,i,5,0);
	}

	//Where to go next
	Direction dir = joy_get_direction();
     bc6:	0e 94 64 05 	call	0xac8	; 0xac8 <joy_get_direction>
	if(!joy_moved){//THIS IS NEW
     bca:	20 91 c4 02 	lds	r18, 0x02C4
     bce:	30 91 c5 02 	lds	r19, 0x02C5
     bd2:	23 2b       	or	r18, r19
     bd4:	d9 f4       	brne	.+54     	; 0xc0c <draw_list+0x9c>
		if((dir == LEFT) & (self->super_menu != NULL)){
     bd6:	d7 01       	movw	r26, r14
     bd8:	18 96       	adiw	r26, 0x08	; 8
     bda:	2d 91       	ld	r18, X+
     bdc:	3c 91       	ld	r19, X
     bde:	19 97       	sbiw	r26, 0x09	; 9
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	82 30       	cpi	r24, 0x02	; 2
     be4:	09 f0       	breq	.+2      	; 0xbe8 <draw_list+0x78>
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	99 23       	and	r25, r25
     bea:	39 f0       	breq	.+14     	; 0xbfa <draw_list+0x8a>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	21 15       	cp	r18, r1
     bf0:	31 05       	cpc	r19, r1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <draw_list+0x86>
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	81 11       	cpse	r24, r1
     bf8:	01 c0       	rjmp	.+2      	; 0xbfc <draw_list+0x8c>
     bfa:	97 01       	movw	r18, r14
			self = self->super_menu;
		}
		joy_moved = 1;		
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	90 93 c5 02 	sts	0x02C5, r25
     c04:	80 93 c4 02 	sts	0x02C4, r24
     c08:	79 01       	movw	r14, r18
     c0a:	06 c0       	rjmp	.+12     	; 0xc18 <draw_list+0xa8>
	}
	else if (dir == NEUTRAL){ //THIS IS NEW
     c0c:	8f 3f       	cpi	r24, 0xFF	; 255
     c0e:	21 f4       	brne	.+8      	; 0xc18 <draw_list+0xa8>
		joy_moved = 0;
     c10:	10 92 c5 02 	sts	0x02C5, r1
     c14:	10 92 c4 02 	sts	0x02C4, r1
	}
	
	return self;
}
     c18:	c7 01       	movw	r24, r14
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	1f 91       	pop	r17
     c20:	0f 91       	pop	r16
     c22:	ff 90       	pop	r15
     c24:	ef 90       	pop	r14
     c26:	08 95       	ret

00000c28 <draw_menu>:
	super->entries[super->num_of_entries - 1] = malloc(strlen(sub->name) * sizeof(char));
	super->entries[super->num_of_entries - 1] = sub->name;
}

//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	7c 01       	movw	r14, r24
	
	for(int i = 0; i < self->num_of_entries; i++){
     c36:	dc 01       	movw	r26, r24
     c38:	14 96       	adiw	r26, 0x04	; 4
     c3a:	8d 91       	ld	r24, X+
     c3c:	9c 91       	ld	r25, X
     c3e:	15 97       	sbiw	r26, 0x05	; 5
     c40:	18 16       	cp	r1, r24
     c42:	19 06       	cpc	r1, r25
     c44:	e4 f4       	brge	.+56     	; 0xc7e <draw_menu+0x56>
     c46:	c0 e0       	ldi	r28, 0x00	; 0
     c48:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_string(self->entries[i],0,i,5,0);
     c4a:	ce 01       	movw	r24, r28
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	d7 01       	movw	r26, r14
     c52:	12 96       	adiw	r26, 0x02	; 2
     c54:	ed 91       	ld	r30, X+
     c56:	fc 91       	ld	r31, X
     c58:	13 97       	sbiw	r26, 0x03	; 3
     c5a:	e8 0f       	add	r30, r24
     c5c:	f9 1f       	adc	r31, r25
     c5e:	00 e0       	ldi	r16, 0x00	; 0
     c60:	10 e0       	ldi	r17, 0x00	; 0
     c62:	25 e0       	ldi	r18, 0x05	; 5
     c64:	4c 2f       	mov	r20, r28
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	0e 94 83 09 	call	0x1306	; 0x1306 <oled_print_string>
}

//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
	
	for(int i = 0; i < self->num_of_entries; i++){
     c70:	21 96       	adiw	r28, 0x01	; 1
     c72:	f7 01       	movw	r30, r14
     c74:	84 81       	ldd	r24, Z+4	; 0x04
     c76:	95 81       	ldd	r25, Z+5	; 0x05
     c78:	c8 17       	cp	r28, r24
     c7a:	d9 07       	cpc	r29, r25
     c7c:	34 f3       	brlt	.-52     	; 0xc4a <draw_menu+0x22>
		oled_print_string(self->entries[i],0,i,5,0);
	}
	oled_invert_rectangle(0,8*(self->cursor),64,8*((self->cursor) + 1));
     c7e:	d7 01       	movw	r26, r14
     c80:	16 96       	adiw	r26, 0x06	; 6
     c82:	2d 91       	ld	r18, X+
     c84:	3c 91       	ld	r19, X
     c86:	17 97       	sbiw	r26, 0x07	; 7
     c88:	2f 5f       	subi	r18, 0xFF	; 255
     c8a:	3f 4f       	sbci	r19, 0xFF	; 255
     c8c:	22 0f       	add	r18, r18
     c8e:	33 1f       	adc	r19, r19
     c90:	22 0f       	add	r18, r18
     c92:	33 1f       	adc	r19, r19
     c94:	22 0f       	add	r18, r18
     c96:	33 1f       	adc	r19, r19
     c98:	b9 01       	movw	r22, r18
     c9a:	68 50       	subi	r22, 0x08	; 8
     c9c:	71 09       	sbc	r23, r1
     c9e:	40 e4       	ldi	r20, 0x40	; 64
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <oled_invert_rectangle>
	
	//Where to go next
	Direction dir = joy_get_direction();
     caa:	0e 94 64 05 	call	0xac8	; 0xac8 <joy_get_direction>
	if(1){	//THIS IS NEW
		if((dir == UP) & (self->cursor != 0)){
     cae:	f7 01       	movw	r30, r14
     cb0:	26 81       	ldd	r18, Z+6	; 0x06
     cb2:	37 81       	ldd	r19, Z+7	; 0x07
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	09 f0       	breq	.+2      	; 0xcbc <draw_menu+0x94>
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	99 23       	and	r25, r25
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <draw_menu+0x9a>
     cc0:	4f c0       	rjmp	.+158    	; 0xd60 <draw_menu+0x138>
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	21 15       	cp	r18, r1
     cc6:	31 05       	cpc	r19, r1
     cc8:	09 f4       	brne	.+2      	; 0xccc <draw_menu+0xa4>
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	99 23       	and	r25, r25
     cce:	09 f4       	brne	.+2      	; 0xcd2 <draw_menu+0xaa>
     cd0:	47 c0       	rjmp	.+142    	; 0xd60 <draw_menu+0x138>
     cd2:	c0 e0       	ldi	r28, 0x00	; 0
     cd4:	d0 e0       	ldi	r29, 0x00	; 0
			for (int i = 0; i < 8; i++,i++){
				oled_invert_rectangle(0,8*(self->cursor) - i - 2,64,8*((self->cursor) + 1) - i - 2);
     cd6:	d7 01       	movw	r26, r14
     cd8:	16 96       	adiw	r26, 0x06	; 6
     cda:	6d 91       	ld	r22, X+
     cdc:	7c 91       	ld	r23, X
     cde:	17 97       	sbiw	r26, 0x07	; 7
     ce0:	6f 5f       	subi	r22, 0xFF	; 255
     ce2:	7f 4f       	sbci	r23, 0xFF	; 255
     ce4:	66 0f       	add	r22, r22
     ce6:	77 1f       	adc	r23, r23
     ce8:	66 0f       	add	r22, r22
     cea:	77 1f       	adc	r23, r23
     cec:	66 0f       	add	r22, r22
     cee:	77 1f       	adc	r23, r23
     cf0:	9b 01       	movw	r18, r22
     cf2:	2c 1b       	sub	r18, r28
     cf4:	3d 0b       	sbc	r19, r29
     cf6:	22 50       	subi	r18, 0x02	; 2
     cf8:	31 09       	sbc	r19, r1
     cfa:	6c 1b       	sub	r22, r28
     cfc:	7d 0b       	sbc	r23, r29
     cfe:	6a 50       	subi	r22, 0x0A	; 10
     d00:	71 09       	sbc	r23, r1
     d02:	40 e4       	ldi	r20, 0x40	; 64
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <oled_invert_rectangle>
				oled_invert_rectangle(0,8*(self->cursor) - i,64,8*((self->cursor) + 1) - i);
     d0e:	f7 01       	movw	r30, r14
     d10:	66 81       	ldd	r22, Z+6	; 0x06
     d12:	77 81       	ldd	r23, Z+7	; 0x07
     d14:	6f 5f       	subi	r22, 0xFF	; 255
     d16:	7f 4f       	sbci	r23, 0xFF	; 255
     d18:	66 0f       	add	r22, r22
     d1a:	77 1f       	adc	r23, r23
     d1c:	66 0f       	add	r22, r22
     d1e:	77 1f       	adc	r23, r23
     d20:	66 0f       	add	r22, r22
     d22:	77 1f       	adc	r23, r23
     d24:	9b 01       	movw	r18, r22
     d26:	2c 1b       	sub	r18, r28
     d28:	3d 0b       	sbc	r19, r29
     d2a:	68 50       	subi	r22, 0x08	; 8
     d2c:	71 09       	sbc	r23, r1
     d2e:	6c 1b       	sub	r22, r28
     d30:	7d 0b       	sbc	r23, r29
     d32:	40 e4       	ldi	r20, 0x40	; 64
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <oled_invert_rectangle>
				oled_refresh();
     d3e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <oled_refresh>
	
	//Where to go next
	Direction dir = joy_get_direction();
	if(1){	//THIS IS NEW
		if((dir == UP) & (self->cursor != 0)){
			for (int i = 0; i < 8; i++,i++){
     d42:	22 96       	adiw	r28, 0x02	; 2
     d44:	c8 30       	cpi	r28, 0x08	; 8
     d46:	d1 05       	cpc	r29, r1
     d48:	31 f6       	brne	.-116    	; 0xcd6 <draw_menu+0xae>
				oled_invert_rectangle(0,8*(self->cursor) - i - 2,64,8*((self->cursor) + 1) - i - 2);
				oled_invert_rectangle(0,8*(self->cursor) - i,64,8*((self->cursor) + 1) - i);
				oled_refresh();
			}
			self->cursor--;
     d4a:	d7 01       	movw	r26, r14
     d4c:	16 96       	adiw	r26, 0x06	; 6
     d4e:	8d 91       	ld	r24, X+
     d50:	9c 91       	ld	r25, X
     d52:	17 97       	sbiw	r26, 0x07	; 7
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	17 96       	adiw	r26, 0x07	; 7
     d58:	9c 93       	st	X, r25
     d5a:	8e 93       	st	-X, r24
     d5c:	16 97       	sbiw	r26, 0x06	; 6
     d5e:	88 c0       	rjmp	.+272    	; 0xe70 <draw_menu+0x248>
		}
		else if((dir == DOWN) & (self->cursor != (self->num_of_entries - 1))){
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	83 30       	cpi	r24, 0x03	; 3
     d64:	09 f0       	breq	.+2      	; 0xd68 <draw_menu+0x140>
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	99 23       	and	r25, r25
     d6a:	09 f4       	brne	.+2      	; 0xd6e <draw_menu+0x146>
     d6c:	54 c0       	rjmp	.+168    	; 0xe16 <draw_menu+0x1ee>
     d6e:	f7 01       	movw	r30, r14
     d70:	44 81       	ldd	r20, Z+4	; 0x04
     d72:	55 81       	ldd	r21, Z+5	; 0x05
     d74:	41 50       	subi	r20, 0x01	; 1
     d76:	51 09       	sbc	r21, r1
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	24 17       	cp	r18, r20
     d7c:	35 07       	cpc	r19, r21
     d7e:	09 f4       	brne	.+2      	; 0xd82 <draw_menu+0x15a>
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	99 23       	and	r25, r25
     d84:	09 f4       	brne	.+2      	; 0xd88 <draw_menu+0x160>
     d86:	47 c0       	rjmp	.+142    	; 0xe16 <draw_menu+0x1ee>
     d88:	c0 e0       	ldi	r28, 0x00	; 0
     d8a:	d0 e0       	ldi	r29, 0x00	; 0
			
			//---NEW--- ANIMATION FOR DOWNWARDS MOVEMENT
			for (int i = 0; i < 8; i++,i++){
				oled_invert_rectangle(0,8*(self->cursor) + i,64,8*((self->cursor) + 1) + i);
     d8c:	d7 01       	movw	r26, r14
     d8e:	16 96       	adiw	r26, 0x06	; 6
     d90:	6d 91       	ld	r22, X+
     d92:	7c 91       	ld	r23, X
     d94:	17 97       	sbiw	r26, 0x07	; 7
     d96:	6f 5f       	subi	r22, 0xFF	; 255
     d98:	7f 4f       	sbci	r23, 0xFF	; 255
     d9a:	66 0f       	add	r22, r22
     d9c:	77 1f       	adc	r23, r23
     d9e:	66 0f       	add	r22, r22
     da0:	77 1f       	adc	r23, r23
     da2:	66 0f       	add	r22, r22
     da4:	77 1f       	adc	r23, r23
     da6:	9b 01       	movw	r18, r22
     da8:	2c 0f       	add	r18, r28
     daa:	3d 1f       	adc	r19, r29
     dac:	68 50       	subi	r22, 0x08	; 8
     dae:	71 09       	sbc	r23, r1
     db0:	6c 0f       	add	r22, r28
     db2:	7d 1f       	adc	r23, r29
     db4:	40 e4       	ldi	r20, 0x40	; 64
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <oled_invert_rectangle>
				oled_invert_rectangle(0,8*(self->cursor) + i + 2,64,8*((self->cursor) + 1) + i + 2);
     dc0:	f7 01       	movw	r30, r14
     dc2:	66 81       	ldd	r22, Z+6	; 0x06
     dc4:	77 81       	ldd	r23, Z+7	; 0x07
     dc6:	6f 5f       	subi	r22, 0xFF	; 255
     dc8:	7f 4f       	sbci	r23, 0xFF	; 255
     dca:	66 0f       	add	r22, r22
     dcc:	77 1f       	adc	r23, r23
     dce:	66 0f       	add	r22, r22
     dd0:	77 1f       	adc	r23, r23
     dd2:	66 0f       	add	r22, r22
     dd4:	77 1f       	adc	r23, r23
     dd6:	9b 01       	movw	r18, r22
     dd8:	2c 0f       	add	r18, r28
     dda:	3d 1f       	adc	r19, r29
     ddc:	2e 5f       	subi	r18, 0xFE	; 254
     dde:	3f 4f       	sbci	r19, 0xFF	; 255
     de0:	6c 0f       	add	r22, r28
     de2:	7d 1f       	adc	r23, r29
     de4:	66 50       	subi	r22, 0x06	; 6
     de6:	71 09       	sbc	r23, r1
     de8:	40 e4       	ldi	r20, 0x40	; 64
     dea:	50 e0       	ldi	r21, 0x00	; 0
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <oled_invert_rectangle>
				oled_refresh();
     df4:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <oled_refresh>
			self->cursor--;
		}
		else if((dir == DOWN) & (self->cursor != (self->num_of_entries - 1))){
			
			//---NEW--- ANIMATION FOR DOWNWARDS MOVEMENT
			for (int i = 0; i < 8; i++,i++){
     df8:	22 96       	adiw	r28, 0x02	; 2
     dfa:	c8 30       	cpi	r28, 0x08	; 8
     dfc:	d1 05       	cpc	r29, r1
     dfe:	31 f6       	brne	.-116    	; 0xd8c <draw_menu+0x164>
				oled_invert_rectangle(0,8*(self->cursor) + i + 2,64,8*((self->cursor) + 1) + i + 2);
				oled_refresh();
			}
			//-------------
			
			self->cursor++;
     e00:	d7 01       	movw	r26, r14
     e02:	16 96       	adiw	r26, 0x06	; 6
     e04:	8d 91       	ld	r24, X+
     e06:	9c 91       	ld	r25, X
     e08:	17 97       	sbiw	r26, 0x07	; 7
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	17 96       	adiw	r26, 0x07	; 7
     e0e:	9c 93       	st	X, r25
     e10:	8e 93       	st	-X, r24
     e12:	16 97       	sbiw	r26, 0x06	; 6
     e14:	2d c0       	rjmp	.+90     	; 0xe70 <draw_menu+0x248>
		}
		else if((dir == RIGHT) & (self->sub_menus[self->cursor]->num_of_entries != 0)){ //THIS IS CHANGED
     e16:	22 0f       	add	r18, r18
     e18:	33 1f       	adc	r19, r19
     e1a:	d7 01       	movw	r26, r14
     e1c:	1a 96       	adiw	r26, 0x0a	; 10
     e1e:	ed 91       	ld	r30, X+
     e20:	fc 91       	ld	r31, X
     e22:	1b 97       	sbiw	r26, 0x0b	; 11
     e24:	e2 0f       	add	r30, r18
     e26:	f3 1f       	adc	r31, r19
     e28:	01 90       	ld	r0, Z+
     e2a:	f0 81       	ld	r31, Z
     e2c:	e0 2d       	mov	r30, r0
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	81 11       	cpse	r24, r1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	99 23       	and	r25, r25
     e36:	41 f0       	breq	.+16     	; 0xe48 <draw_menu+0x220>
     e38:	91 e0       	ldi	r25, 0x01	; 1
     e3a:	24 81       	ldd	r18, Z+4	; 0x04
     e3c:	35 81       	ldd	r19, Z+5	; 0x05
     e3e:	23 2b       	or	r18, r19
     e40:	09 f4       	brne	.+2      	; 0xe44 <draw_menu+0x21c>
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	91 11       	cpse	r25, r1
     e46:	11 c0       	rjmp	.+34     	; 0xe6a <draw_menu+0x242>
			self = self->sub_menus[self->cursor];
		}
		else if((dir == LEFT) & (self->super_menu != NULL)){
     e48:	f7 01       	movw	r30, r14
     e4a:	20 85       	ldd	r18, Z+8	; 0x08
     e4c:	31 85       	ldd	r19, Z+9	; 0x09
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	82 30       	cpi	r24, 0x02	; 2
     e52:	09 f0       	breq	.+2      	; 0xe56 <draw_menu+0x22e>
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	99 23       	and	r25, r25
     e58:	59 f0       	breq	.+22     	; 0xe70 <draw_menu+0x248>
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	21 15       	cp	r18, r1
     e5e:	31 05       	cpc	r19, r1
     e60:	09 f4       	brne	.+2      	; 0xe64 <draw_menu+0x23c>
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	81 11       	cpse	r24, r1
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <draw_menu+0x246>
     e68:	03 c0       	rjmp	.+6      	; 0xe70 <draw_menu+0x248>
			//-------------
			
			self->cursor++;
		}
		else if((dir == RIGHT) & (self->sub_menus[self->cursor]->num_of_entries != 0)){ //THIS IS CHANGED
			self = self->sub_menus[self->cursor];
     e6a:	7f 01       	movw	r14, r30
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <draw_menu+0x248>
		}
		else if((dir == LEFT) & (self->super_menu != NULL)){
			self = self->super_menu;
     e6e:	79 01       	movw	r14, r18
		}
		joy_moved = 1;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	90 93 c5 02 	sts	0x02C5, r25
     e78:	80 93 c4 02 	sts	0x02C4, r24
		joy_moved = 0;
	}
	

	return self;
}
     e7c:	c7 01       	movw	r24, r14
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	ff 90       	pop	r15
     e88:	ef 90       	pop	r14
     e8a:	08 95       	ret

00000e8c <add_entries>:
	
}
//----------NO NEED TO CHANGE THINGS BEYOND THIS----------

//Functions for adding entries and nodes
void add_entries(Menu* menu, char* entries[], int num_of_new_entries){
     e8c:	af 92       	push	r10
     e8e:	bf 92       	push	r11
     e90:	cf 92       	push	r12
     e92:	df 92       	push	r13
     e94:	ef 92       	push	r14
     e96:	ff 92       	push	r15
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	8c 01       	movw	r16, r24
     ea2:	e6 2e       	mov	r14, r22
     ea4:	f7 2e       	mov	r15, r23
     ea6:	ea 01       	movw	r28, r20
	
	menu->entries = malloc(num_of_new_entries * sizeof(char*));	//Correct size of double pointer
     ea8:	6a 01       	movw	r12, r20
     eaa:	cc 0c       	add	r12, r12
     eac:	dd 1c       	adc	r13, r13
     eae:	c6 01       	movw	r24, r12
     eb0:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <malloc>
     eb4:	d8 01       	movw	r26, r16
     eb6:	13 96       	adiw	r26, 0x03	; 3
     eb8:	9c 93       	st	X, r25
     eba:	8e 93       	st	-X, r24
     ebc:	12 97       	sbiw	r26, 0x02	; 2
	
	for(int i = 0; i < num_of_new_entries; i++){
     ebe:	1c 16       	cp	r1, r28
     ec0:	1d 06       	cpc	r1, r29
     ec2:	9c f5       	brge	.+102    	; 0xf2a <add_entries+0x9e>
     ec4:	ae 2c       	mov	r10, r14
     ec6:	bf 2c       	mov	r11, r15
     ec8:	c0 e0       	ldi	r28, 0x00	; 0
     eca:	d0 e0       	ldi	r29, 0x00	; 0
		menu->entries[i] = malloc(strlen(entries[i]) * sizeof(char)); //Allocate space for each string
     ecc:	f8 01       	movw	r30, r16
     ece:	e2 80       	ldd	r14, Z+2	; 0x02
     ed0:	f3 80       	ldd	r15, Z+3	; 0x03
     ed2:	ec 0e       	add	r14, r28
     ed4:	fd 1e       	adc	r15, r29
     ed6:	f5 01       	movw	r30, r10
     ed8:	a0 81       	ld	r26, Z
     eda:	b1 81       	ldd	r27, Z+1	; 0x01
     edc:	fd 01       	movw	r30, r26
     ede:	01 90       	ld	r0, Z+
     ee0:	00 20       	and	r0, r0
     ee2:	e9 f7       	brne	.-6      	; 0xede <add_entries+0x52>
     ee4:	31 97       	sbiw	r30, 0x01	; 1
     ee6:	cf 01       	movw	r24, r30
     ee8:	8a 1b       	sub	r24, r26
     eea:	9b 0b       	sbc	r25, r27
     eec:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <malloc>
     ef0:	d7 01       	movw	r26, r14
     ef2:	8d 93       	st	X+, r24
     ef4:	9c 93       	st	X, r25
		menu->entries[i] =  entries[i];								  //Adds each string
     ef6:	f5 01       	movw	r30, r10
     ef8:	81 91       	ld	r24, Z+
     efa:	91 91       	ld	r25, Z+
     efc:	5f 01       	movw	r10, r30
     efe:	d8 01       	movw	r26, r16
     f00:	12 96       	adiw	r26, 0x02	; 2
     f02:	ed 91       	ld	r30, X+
     f04:	fc 91       	ld	r31, X
     f06:	13 97       	sbiw	r26, 0x03	; 3
     f08:	ec 0f       	add	r30, r28
     f0a:	fd 1f       	adc	r31, r29
     f0c:	91 83       	std	Z+1, r25	; 0x01
     f0e:	80 83       	st	Z, r24
		//Menu* empty;
		//empty = malloc(sizeof(Menu));
		//empty->name = malloc(strlen(entries[i]) * sizeof(char));
		//empty->name = entries[i];
		//add_sub_menu(menu, empty);
		menu->num_of_entries+=1;
     f10:	14 96       	adiw	r26, 0x04	; 4
     f12:	8d 91       	ld	r24, X+
     f14:	9c 91       	ld	r25, X
     f16:	15 97       	sbiw	r26, 0x05	; 5
     f18:	01 96       	adiw	r24, 0x01	; 1
     f1a:	15 96       	adiw	r26, 0x05	; 5
     f1c:	9c 93       	st	X, r25
     f1e:	8e 93       	st	-X, r24
     f20:	14 97       	sbiw	r26, 0x04	; 4
     f22:	22 96       	adiw	r28, 0x02	; 2
//Functions for adding entries and nodes
void add_entries(Menu* menu, char* entries[], int num_of_new_entries){
	
	menu->entries = malloc(num_of_new_entries * sizeof(char*));	//Correct size of double pointer
	
	for(int i = 0; i < num_of_new_entries; i++){
     f24:	cc 16       	cp	r12, r28
     f26:	dd 06       	cpc	r13, r29
     f28:	89 f6       	brne	.-94     	; 0xecc <add_entries+0x40>
		//empty->name = entries[i];
		//add_sub_menu(menu, empty);
		menu->num_of_entries+=1;
	}
	//menu->num_of_entries = num_of_new_entries;
	menu->cursor = 0; //To make sure the cursor is not something else
     f2a:	f8 01       	movw	r30, r16
     f2c:	17 82       	std	Z+7, r1	; 0x07
     f2e:	16 82       	std	Z+6, r1	; 0x06
}
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	df 90       	pop	r13
     f3e:	cf 90       	pop	r12
     f40:	bf 90       	pop	r11
     f42:	af 90       	pop	r10
     f44:	08 95       	ret

00000f46 <add_sub_menu>:

void add_sub_menu(Menu* super, Menu* sub){
     f46:	ef 92       	push	r14
     f48:	ff 92       	push	r15
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	ec 01       	movw	r28, r24
     f54:	8b 01       	movw	r16, r22
	super->num_of_entries += 1;		//Num of entries in super are updated
     f56:	8c 81       	ldd	r24, Y+4	; 0x04
     f58:	9d 81       	ldd	r25, Y+5	; 0x05
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	9d 83       	std	Y+5, r25	; 0x05
     f5e:	8c 83       	std	Y+4, r24	; 0x04
	
	//Pointers to and from the menus are set correctly
	sub->super_menu = super;
     f60:	fb 01       	movw	r30, r22
     f62:	d1 87       	std	Z+9, r29	; 0x09
     f64:	c0 87       	std	Z+8, r28	; 0x08
	super->sub_menus = realloc(super->sub_menus, super->num_of_entries * sizeof(Menu*));
     f66:	6c 81       	ldd	r22, Y+4	; 0x04
     f68:	7d 81       	ldd	r23, Y+5	; 0x05
     f6a:	66 0f       	add	r22, r22
     f6c:	77 1f       	adc	r23, r23
     f6e:	8a 85       	ldd	r24, Y+10	; 0x0a
     f70:	9b 85       	ldd	r25, Y+11	; 0x0b
     f72:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <realloc>
     f76:	9b 87       	std	Y+11, r25	; 0x0b
     f78:	8a 87       	std	Y+10, r24	; 0x0a
	super->sub_menus[super->num_of_entries - 1] = malloc(sizeof(Menu));
     f7a:	ec 80       	ldd	r14, Y+4	; 0x04
     f7c:	fd 80       	ldd	r15, Y+5	; 0x05
     f7e:	f1 e0       	ldi	r31, 0x01	; 1
     f80:	ef 1a       	sub	r14, r31
     f82:	f0 e8       	ldi	r31, 0x80	; 128
     f84:	ff 0a       	sbc	r15, r31
     f86:	ee 0c       	add	r14, r14
     f88:	ff 1c       	adc	r15, r15
     f8a:	e8 0e       	add	r14, r24
     f8c:	f9 1e       	adc	r15, r25
     f8e:	8e e0       	ldi	r24, 0x0E	; 14
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <malloc>
     f96:	f7 01       	movw	r30, r14
     f98:	91 83       	std	Z+1, r25	; 0x01
     f9a:	80 83       	st	Z, r24
	super->sub_menus[super->num_of_entries - 1] = sub;
     f9c:	ec 81       	ldd	r30, Y+4	; 0x04
     f9e:	fd 81       	ldd	r31, Y+5	; 0x05
     fa0:	e1 50       	subi	r30, 0x01	; 1
     fa2:	f0 48       	sbci	r31, 0x80	; 128
     fa4:	ee 0f       	add	r30, r30
     fa6:	ff 1f       	adc	r31, r31
     fa8:	8a 85       	ldd	r24, Y+10	; 0x0a
     faa:	9b 85       	ldd	r25, Y+11	; 0x0b
     fac:	e8 0f       	add	r30, r24
     fae:	f9 1f       	adc	r31, r25
     fb0:	11 83       	std	Z+1, r17	; 0x01
     fb2:	00 83       	st	Z, r16
	
	//Name of entries in the super menu are updated
	super->entries = realloc(super->entries, super->num_of_entries * sizeof(char*));
     fb4:	6c 81       	ldd	r22, Y+4	; 0x04
     fb6:	7d 81       	ldd	r23, Y+5	; 0x05
     fb8:	66 0f       	add	r22, r22
     fba:	77 1f       	adc	r23, r23
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	9b 81       	ldd	r25, Y+3	; 0x03
     fc0:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <realloc>
     fc4:	9b 83       	std	Y+3, r25	; 0x03
     fc6:	8a 83       	std	Y+2, r24	; 0x02
	super->entries[super->num_of_entries - 1] = malloc(strlen(sub->name) * sizeof(char));
     fc8:	ec 80       	ldd	r14, Y+4	; 0x04
     fca:	fd 80       	ldd	r15, Y+5	; 0x05
     fcc:	f1 e0       	ldi	r31, 0x01	; 1
     fce:	ef 1a       	sub	r14, r31
     fd0:	f0 e8       	ldi	r31, 0x80	; 128
     fd2:	ff 0a       	sbc	r15, r31
     fd4:	ee 0c       	add	r14, r14
     fd6:	ff 1c       	adc	r15, r15
     fd8:	e8 0e       	add	r14, r24
     fda:	f9 1e       	adc	r15, r25
     fdc:	f8 01       	movw	r30, r16
     fde:	a0 81       	ld	r26, Z
     fe0:	b1 81       	ldd	r27, Z+1	; 0x01
     fe2:	fd 01       	movw	r30, r26
     fe4:	01 90       	ld	r0, Z+
     fe6:	00 20       	and	r0, r0
     fe8:	e9 f7       	brne	.-6      	; 0xfe4 <add_sub_menu+0x9e>
     fea:	31 97       	sbiw	r30, 0x01	; 1
     fec:	cf 01       	movw	r24, r30
     fee:	8a 1b       	sub	r24, r26
     ff0:	9b 0b       	sbc	r25, r27
     ff2:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <malloc>
     ff6:	f7 01       	movw	r30, r14
     ff8:	91 83       	std	Z+1, r25	; 0x01
     ffa:	80 83       	st	Z, r24
	super->entries[super->num_of_entries - 1] = sub->name;
     ffc:	f8 01       	movw	r30, r16
     ffe:	80 81       	ld	r24, Z
    1000:	91 81       	ldd	r25, Z+1	; 0x01
    1002:	ec 81       	ldd	r30, Y+4	; 0x04
    1004:	fd 81       	ldd	r31, Y+5	; 0x05
    1006:	e1 50       	subi	r30, 0x01	; 1
    1008:	f0 48       	sbci	r31, 0x80	; 128
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	2a 81       	ldd	r18, Y+2	; 0x02
    1010:	3b 81       	ldd	r19, Y+3	; 0x03
    1012:	e2 0f       	add	r30, r18
    1014:	f3 1f       	adc	r31, r19
    1016:	91 83       	std	Z+1, r25	; 0x01
    1018:	80 83       	st	Z, r24
}
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	ff 90       	pop	r15
    1024:	ef 90       	pop	r14
    1026:	08 95       	ret

00001028 <menu_init>:
	//.type = MENU,
	.draw = draw_menu
};

//The initializer - How the menus are related
void menu_init(){
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	6c 97       	sbiw	r28, 0x1c	; 28
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
	
	char* control_entr[3] = {"Player1", "Player2", "Player3"};
    103c:	86 e0       	ldi	r24, 0x06	; 6
    103e:	e6 e6       	ldi	r30, 0x66	; 102
    1040:	f1 e0       	ldi	r31, 0x01	; 1
    1042:	de 01       	movw	r26, r28
    1044:	11 96       	adiw	r26, 0x01	; 1
    1046:	01 90       	ld	r0, Z+
    1048:	0d 92       	st	X+, r0
    104a:	8a 95       	dec	r24
    104c:	e1 f7       	brne	.-8      	; 0x1046 <menu_init+0x1e>
	add_entries(&control, control_entr, 3);
    104e:	43 e0       	ldi	r20, 0x03	; 3
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	be 01       	movw	r22, r28
    1054:	6f 5f       	subi	r22, 0xFF	; 255
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	88 e1       	ldi	r24, 0x18	; 24
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	0e 94 46 07 	call	0xe8c	; 0xe8c <add_entries>
	add_sub_menu(&options, &control);
    1060:	68 e1       	ldi	r22, 0x18	; 24
    1062:	71 e0       	ldi	r23, 0x01	; 1
    1064:	84 e3       	ldi	r24, 0x34	; 52
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	0e 94 a3 07 	call	0xf46	; 0xf46 <add_sub_menu>
	
	char* contro_entr[4] = {"Low", "Medium", "High","Ultra"};
    106c:	88 e0       	ldi	r24, 0x08	; 8
    106e:	ec e6       	ldi	r30, 0x6C	; 108
    1070:	f1 e0       	ldi	r31, 0x01	; 1
    1072:	de 01       	movw	r26, r28
    1074:	17 96       	adiw	r26, 0x07	; 7
    1076:	01 90       	ld	r0, Z+
    1078:	0d 92       	st	X+, r0
    107a:	8a 95       	dec	r24
    107c:	e1 f7       	brne	.-8      	; 0x1076 <menu_init+0x4e>
	add_entries(&contro, contro_entr, 4);
    107e:	44 e0       	ldi	r20, 0x04	; 4
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	be 01       	movw	r22, r28
    1084:	69 5f       	subi	r22, 0xF9	; 249
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	8a e0       	ldi	r24, 0x0A	; 10
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	0e 94 46 07 	call	0xe8c	; 0xe8c <add_entries>
	add_sub_menu(&options, &contro);
    1090:	6a e0       	ldi	r22, 0x0A	; 10
    1092:	71 e0       	ldi	r23, 0x01	; 1
    1094:	84 e3       	ldi	r24, 0x34	; 52
    1096:	91 e0       	ldi	r25, 0x01	; 1
    1098:	0e 94 a3 07 	call	0xf46	; 0xf46 <add_sub_menu>
	
	add_sub_menu(&main_menu, &options);
    109c:	64 e3       	ldi	r22, 0x34	; 52
    109e:	71 e0       	ldi	r23, 0x01	; 1
    10a0:	80 e5       	ldi	r24, 0x50	; 80
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	0e 94 a3 07 	call	0xf46	; 0xf46 <add_sub_menu>
	
	char* diff_entr[3] = {"Easy", "Medium", "Hard"};
    10a8:	86 e0       	ldi	r24, 0x06	; 6
    10aa:	e4 e7       	ldi	r30, 0x74	; 116
    10ac:	f1 e0       	ldi	r31, 0x01	; 1
    10ae:	de 01       	movw	r26, r28
    10b0:	1f 96       	adiw	r26, 0x0f	; 15
    10b2:	01 90       	ld	r0, Z+
    10b4:	0d 92       	st	X+, r0
    10b6:	8a 95       	dec	r24
    10b8:	e1 f7       	brne	.-8      	; 0x10b2 <menu_init+0x8a>
	add_entries(&difficulty, diff_entr, 3);
    10ba:	43 e0       	ldi	r20, 0x03	; 3
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	be 01       	movw	r22, r28
    10c0:	61 5f       	subi	r22, 0xF1	; 241
    10c2:	7f 4f       	sbci	r23, 0xFF	; 255
    10c4:	82 e4       	ldi	r24, 0x42	; 66
    10c6:	91 e0       	ldi	r25, 0x01	; 1
    10c8:	0e 94 46 07 	call	0xe8c	; 0xe8c <add_entries>
	add_sub_menu(&main_menu, &difficulty);
    10cc:	62 e4       	ldi	r22, 0x42	; 66
    10ce:	71 e0       	ldi	r23, 0x01	; 1
    10d0:	80 e5       	ldi	r24, 0x50	; 80
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	0e 94 a3 07 	call	0xf46	; 0xf46 <add_sub_menu>
	
	char* high_entr[4] = {"1. Hans","2. Raoul","3. Alle andre","-inf. Herman"};
    10d8:	88 e0       	ldi	r24, 0x08	; 8
    10da:	ea e7       	ldi	r30, 0x7A	; 122
    10dc:	f1 e0       	ldi	r31, 0x01	; 1
    10de:	de 01       	movw	r26, r28
    10e0:	55 96       	adiw	r26, 0x15	; 21
    10e2:	01 90       	ld	r0, Z+
    10e4:	0d 92       	st	X+, r0
    10e6:	8a 95       	dec	r24
    10e8:	e1 f7       	brne	.-8      	; 0x10e2 <menu_init+0xba>
	add_entries(&highscore, high_entr,4);
    10ea:	44 e0       	ldi	r20, 0x04	; 4
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	be 01       	movw	r22, r28
    10f0:	6b 5e       	subi	r22, 0xEB	; 235
    10f2:	7f 4f       	sbci	r23, 0xFF	; 255
    10f4:	86 e2       	ldi	r24, 0x26	; 38
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	0e 94 46 07 	call	0xe8c	; 0xe8c <add_entries>
	add_sub_menu(&main_menu, &highscore);
    10fc:	66 e2       	ldi	r22, 0x26	; 38
    10fe:	71 e0       	ldi	r23, 0x01	; 1
    1100:	80 e5       	ldi	r24, 0x50	; 80
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	0e 94 a3 07 	call	0xf46	; 0xf46 <add_sub_menu>
	
}
    1108:	6c 96       	adiw	r28, 0x1c	; 28
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <oled_write_data>:
void oled_write_command(char command){
	*oled_command = command;
}

void oled_write_data(char data){
	if(doublebuffering){
    111a:	20 91 5e 01 	lds	r18, 0x015E
    111e:	30 91 5f 01 	lds	r19, 0x015F
    1122:	23 2b       	or	r18, r19
    1124:	f9 f0       	breq	.+62     	; 0x1164 <oled_write_data+0x4a>
		if (oled_back_buffer_index > 1023){
    1126:	20 91 c6 02 	lds	r18, 0x02C6
    112a:	30 91 c7 02 	lds	r19, 0x02C7
    112e:	21 15       	cp	r18, r1
    1130:	94 e0       	ldi	r25, 0x04	; 4
    1132:	39 07       	cpc	r19, r25
    1134:	2c f0       	brlt	.+10     	; 0x1140 <oled_write_data+0x26>
			printf("Outside of screen!\n");
    1136:	8d ea       	ldi	r24, 0xAD	; 173
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	0e 94 ff 10 	call	0x21fe	; 0x21fe <puts>
			return -1;
    113e:	08 95       	ret
		}
		oled_back_buffer[oled_back_buffer_index] = data;
    1140:	40 91 62 01 	lds	r20, 0x0162
    1144:	50 91 63 01 	lds	r21, 0x0163
    1148:	fa 01       	movw	r30, r20
    114a:	e2 0f       	add	r30, r18
    114c:	f3 1f       	adc	r31, r19
    114e:	80 83       	st	Z, r24
		oled_back_buffer_index++;	
    1150:	80 91 c6 02 	lds	r24, 0x02C6
    1154:	90 91 c7 02 	lds	r25, 0x02C7
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	90 93 c7 02 	sts	0x02C7, r25
    115e:	80 93 c6 02 	sts	0x02C6, r24
    1162:	08 95       	ret
	}
	else{
		*oled_front_buffer = data;
    1164:	e0 91 60 01 	lds	r30, 0x0160
    1168:	f0 91 61 01 	lds	r31, 0x0161
    116c:	80 83       	st	Z, r24
    116e:	08 95       	ret

00001170 <oled_print_char>:
			oled_goto_line(line);
		}
	}
}

void oled_print_char(char character, uint8_t font_size, int invert){
    1170:	ef 92       	push	r14
    1172:	ff 92       	push	r15
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
	int font_address;
	if (font_size == 8){
    117c:	68 30       	cpi	r22, 0x08	; 8
    117e:	59 f4       	brne	.+22     	; 0x1196 <oled_print_char+0x26>
		font_address = &font8[character-' '];
    1180:	08 2f       	mov	r16, r24
    1182:	10 e0       	ldi	r17, 0x00	; 0
    1184:	00 0f       	add	r16, r16
    1186:	11 1f       	adc	r17, r17
    1188:	00 0f       	add	r16, r16
    118a:	11 1f       	adc	r17, r17
    118c:	00 0f       	add	r16, r16
    118e:	11 1f       	adc	r17, r17
    1190:	0b 50       	subi	r16, 0x0B	; 11
    1192:	1d 4f       	sbci	r17, 0xFD	; 253
    1194:	1a c0       	rjmp	.+52     	; 0x11ca <oled_print_char+0x5a>
	}
	else if (font_size == 5){
    1196:	65 30       	cpi	r22, 0x05	; 5
    1198:	71 f4       	brne	.+28     	; 0x11b6 <oled_print_char+0x46>
		font_address = &font5[character-' '];
    119a:	08 2f       	mov	r16, r24
    119c:	10 e0       	ldi	r17, 0x00	; 0
    119e:	00 52       	subi	r16, 0x20	; 32
    11a0:	11 09       	sbc	r17, r1
    11a2:	c8 01       	movw	r24, r16
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	08 0f       	add	r16, r24
    11ae:	19 1f       	adc	r17, r25
    11b0:	06 5e       	subi	r16, 0xE6	; 230
    11b2:	1d 4f       	sbci	r17, 0xFD	; 253
    11b4:	0a c0       	rjmp	.+20     	; 0x11ca <oled_print_char+0x5a>
	}
	else if (font_size == 4){
    11b6:	64 30       	cpi	r22, 0x04	; 4
    11b8:	41 f4       	brne	.+16     	; 0x11ca <oled_print_char+0x5a>
		font_address = &font4[character-' '];
    11ba:	08 2f       	mov	r16, r24
    11bc:	10 e0       	ldi	r17, 0x00	; 0
    11be:	00 0f       	add	r16, r16
    11c0:	11 1f       	adc	r17, r17
    11c2:	00 0f       	add	r16, r16
    11c4:	11 1f       	adc	r17, r17
    11c6:	02 5e       	subi	r16, 0xE2	; 226
    11c8:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	if(!invert){
    11ca:	45 2b       	or	r20, r21
    11cc:	31 f0       	breq	.+12     	; 0x11da <oled_print_char+0x6a>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    11ce:	e6 2e       	mov	r14, r22
    11d0:	f1 2c       	mov	r15, r1
    11d2:	1e 14       	cp	r1, r14
    11d4:	1f 04       	cpc	r1, r15
    11d6:	9c f0       	brlt	.+38     	; 0x11fe <oled_print_char+0x8e>
    11d8:	1f c0       	rjmp	.+62     	; 0x1218 <oled_print_char+0xa8>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
    11da:	e6 2e       	mov	r14, r22
    11dc:	f1 2c       	mov	r15, r1
    11de:	1e 14       	cp	r1, r14
    11e0:	1f 04       	cpc	r1, r15
    11e2:	d4 f4       	brge	.+52     	; 0x1218 <oled_print_char+0xa8>
    11e4:	c0 e0       	ldi	r28, 0x00	; 0
    11e6:	d0 e0       	ldi	r29, 0x00	; 0
    11e8:	fe 01       	movw	r30, r28
    11ea:	e0 0f       	add	r30, r16
    11ec:	f1 1f       	adc	r31, r17
			oled_write_data(pgm_read_byte(font_address + i));
    11ee:	84 91       	lpm	r24, Z
    11f0:	0e 94 8d 08 	call	0x111a	; 0x111a <oled_write_data>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
    11f4:	21 96       	adiw	r28, 0x01	; 1
    11f6:	ce 15       	cp	r28, r14
    11f8:	df 05       	cpc	r29, r15
    11fa:	b4 f3       	brlt	.-20     	; 0x11e8 <oled_print_char+0x78>
    11fc:	0d c0       	rjmp	.+26     	; 0x1218 <oled_print_char+0xa8>
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    11fe:	c0 e0       	ldi	r28, 0x00	; 0
    1200:	d0 e0       	ldi	r29, 0x00	; 0
    1202:	fe 01       	movw	r30, r28
    1204:	e0 0f       	add	r30, r16
    1206:	f1 1f       	adc	r31, r17
			oled_write_data(~pgm_read_byte(font_address + i));
    1208:	84 91       	lpm	r24, Z
    120a:	80 95       	com	r24
    120c:	0e 94 8d 08 	call	0x111a	; 0x111a <oled_write_data>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    1210:	21 96       	adiw	r28, 0x01	; 1
    1212:	ce 15       	cp	r28, r14
    1214:	df 05       	cpc	r29, r15
    1216:	ac f3       	brlt	.-22     	; 0x1202 <oled_print_char+0x92>
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	08 95       	ret

00001226 <oled_read_data>:
		*oled_front_buffer = data;
	}	
}

char oled_read_data(){
	if(doublebuffering){
    1226:	80 91 5e 01 	lds	r24, 0x015E
    122a:	90 91 5f 01 	lds	r25, 0x015F
    122e:	89 2b       	or	r24, r25
    1230:	b9 f0       	breq	.+46     	; 0x1260 <oled_read_data+0x3a>
		if (oled_back_buffer_index > 1023){
    1232:	80 91 c6 02 	lds	r24, 0x02C6
    1236:	90 91 c7 02 	lds	r25, 0x02C7
    123a:	81 15       	cp	r24, r1
    123c:	24 e0       	ldi	r18, 0x04	; 4
    123e:	92 07       	cpc	r25, r18
    1240:	34 f0       	brlt	.+12     	; 0x124e <oled_read_data+0x28>
			printf("Outside of screen!\n");
    1242:	8d ea       	ldi	r24, 0xAD	; 173
    1244:	92 e0       	ldi	r25, 0x02	; 2
    1246:	0e 94 ff 10 	call	0x21fe	; 0x21fe <puts>
			return -1;
    124a:	8f ef       	ldi	r24, 0xFF	; 255
    124c:	08 95       	ret
		}
		return oled_back_buffer[oled_back_buffer_index];
    124e:	20 91 62 01 	lds	r18, 0x0162
    1252:	30 91 63 01 	lds	r19, 0x0163
    1256:	f9 01       	movw	r30, r18
    1258:	e8 0f       	add	r30, r24
    125a:	f9 1f       	adc	r31, r25
    125c:	80 81       	ld	r24, Z
    125e:	08 95       	ret
	}
	else{
		return 0x00; //Alternatively NULL
    1260:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1262:	08 95       	ret

00001264 <oled_goto_line>:

void oled_goto_line(int line){
	if(doublebuffering){
    1264:	40 91 5e 01 	lds	r20, 0x015E
    1268:	50 91 5f 01 	lds	r21, 0x015F
    126c:	45 2b       	or	r20, r21
    126e:	d1 f0       	breq	.+52     	; 0x12a4 <oled_goto_line+0x40>
		oled_back_buffer_index = oled_back_buffer_index % 128 + line*128;	
    1270:	20 91 c6 02 	lds	r18, 0x02C6
    1274:	30 91 c7 02 	lds	r19, 0x02C7
    1278:	2f 77       	andi	r18, 0x7F	; 127
    127a:	30 78       	andi	r19, 0x80	; 128
    127c:	33 23       	and	r19, r19
    127e:	34 f4       	brge	.+12     	; 0x128c <oled_goto_line+0x28>
    1280:	21 50       	subi	r18, 0x01	; 1
    1282:	31 09       	sbc	r19, r1
    1284:	20 68       	ori	r18, 0x80	; 128
    1286:	3f 6f       	ori	r19, 0xFF	; 255
    1288:	2f 5f       	subi	r18, 0xFF	; 255
    128a:	3f 4f       	sbci	r19, 0xFF	; 255
    128c:	96 95       	lsr	r25
    128e:	98 2f       	mov	r25, r24
    1290:	88 27       	eor	r24, r24
    1292:	97 95       	ror	r25
    1294:	87 95       	ror	r24
    1296:	28 0f       	add	r18, r24
    1298:	39 1f       	adc	r19, r25
    129a:	30 93 c7 02 	sts	0x02C7, r19
    129e:	20 93 c6 02 	sts	0x02C6, r18
    12a2:	08 95       	ret
	}
	else{
		oled_write_command(0xB0 + line);
    12a4:	80 55       	subi	r24, 0x50	; 80
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    12a6:	e0 91 64 01 	lds	r30, 0x0164
    12aa:	f0 91 65 01 	lds	r31, 0x0165
    12ae:	80 83       	st	Z, r24
    12b0:	08 95       	ret

000012b2 <oled_goto_column>:
		oled_write_command(0xB0 + line);
	}
}

void oled_goto_column(int column){ 
	if(doublebuffering){
    12b2:	20 91 5e 01 	lds	r18, 0x015E
    12b6:	30 91 5f 01 	lds	r19, 0x015F
    12ba:	23 2b       	or	r18, r19
    12bc:	c1 f0       	breq	.+48     	; 0x12ee <oled_goto_column+0x3c>
		oled_back_buffer_index = oled_back_buffer_index - oled_back_buffer_index % 128 + column;
    12be:	40 91 c6 02 	lds	r20, 0x02C6
    12c2:	50 91 c7 02 	lds	r21, 0x02C7
    12c6:	9a 01       	movw	r18, r20
    12c8:	2f 77       	andi	r18, 0x7F	; 127
    12ca:	30 78       	andi	r19, 0x80	; 128
    12cc:	33 23       	and	r19, r19
    12ce:	34 f4       	brge	.+12     	; 0x12dc <oled_goto_column+0x2a>
    12d0:	21 50       	subi	r18, 0x01	; 1
    12d2:	31 09       	sbc	r19, r1
    12d4:	20 68       	ori	r18, 0x80	; 128
    12d6:	3f 6f       	ori	r19, 0xFF	; 255
    12d8:	2f 5f       	subi	r18, 0xFF	; 255
    12da:	3f 4f       	sbci	r19, 0xFF	; 255
    12dc:	42 1b       	sub	r20, r18
    12de:	53 0b       	sbc	r21, r19
    12e0:	84 0f       	add	r24, r20
    12e2:	95 1f       	adc	r25, r21
    12e4:	90 93 c7 02 	sts	0x02C7, r25
    12e8:	80 93 c6 02 	sts	0x02C6, r24
    12ec:	08 95       	ret
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    12ee:	e0 91 64 01 	lds	r30, 0x0164
    12f2:	f0 91 65 01 	lds	r31, 0x0165
    12f6:	10 82       	st	Z, r1
    12f8:	e0 91 64 01 	lds	r30, 0x0164
    12fc:	f0 91 65 01 	lds	r31, 0x0165
    1300:	80 e1       	ldi	r24, 0x10	; 16
    1302:	80 83       	st	Z, r24
    1304:	08 95       	ret

00001306 <oled_print_string>:
	oled_write_command(0xa6); //set normal display
	oled_write_command(0xaf); // display on
	oled_clear_screen(); //Sets all buffer data to 0
}

void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
    1306:	6f 92       	push	r6
    1308:	7f 92       	push	r7
    130a:	8f 92       	push	r8
    130c:	9f 92       	push	r9
    130e:	af 92       	push	r10
    1310:	bf 92       	push	r11
    1312:	cf 92       	push	r12
    1314:	df 92       	push	r13
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	ec 01       	movw	r28, r24
    1324:	96 2e       	mov	r9, r22
    1326:	74 2e       	mov	r7, r20
    1328:	82 2e       	mov	r8, r18
	oled_goto_column(column);
    132a:	86 2f       	mov	r24, r22
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <oled_goto_column>
	oled_goto_line(line);
    1332:	87 2d       	mov	r24, r7
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	0e 94 32 09 	call	0x1264	; 0x1264 <oled_goto_line>
	
	int length = strlen(string);
    133a:	fe 01       	movw	r30, r28
    133c:	01 90       	ld	r0, Z+
    133e:	00 20       	and	r0, r0
    1340:	e9 f7       	brne	.-6      	; 0x133c <oled_print_string+0x36>
    1342:	31 97       	sbiw	r30, 0x01	; 1
    1344:	6f 01       	movw	r12, r30
    1346:	cc 1a       	sub	r12, r28
    1348:	dd 0a       	sbc	r13, r29
	for (int i = 0; i < length; i++){
    134a:	1c 14       	cp	r1, r12
    134c:	1d 04       	cpc	r1, r13
    134e:	24 f5       	brge	.+72     	; 0x1398 <oled_print_string+0x92>
    1350:	7e 01       	movw	r14, r28
    1352:	c0 e0       	ldi	r28, 0x00	; 0
    1354:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
    1356:	8f e7       	ldi	r24, 0x7F	; 127
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	5c 01       	movw	r10, r24
    135c:	a8 18       	sub	r10, r8
    135e:	b1 08       	sbc	r11, r1
			column = 0;
    1360:	61 2c       	mov	r6, r1
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
    1362:	a8 01       	movw	r20, r16
    1364:	68 2d       	mov	r22, r8
    1366:	f7 01       	movw	r30, r14
    1368:	81 91       	ld	r24, Z+
    136a:	7f 01       	movw	r14, r30
    136c:	0e 94 b8 08 	call	0x1170	; 0x1170 <oled_print_char>
		column = column + font_size;
    1370:	98 0c       	add	r9, r8
		if (column > (127 - font_size)){ //if no space for another char
    1372:	89 2d       	mov	r24, r9
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	a8 16       	cp	r10, r24
    1378:	b9 06       	cpc	r11, r25
    137a:	54 f4       	brge	.+20     	; 0x1390 <oled_print_string+0x8a>
			column = 0;
			line++;
    137c:	73 94       	inc	r7
			oled_goto_column(column);
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 59 09 	call	0x12b2	; 0x12b2 <oled_goto_column>
			oled_goto_line(line);
    1386:	87 2d       	mov	r24, r7
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0e 94 32 09 	call	0x1264	; 0x1264 <oled_goto_line>
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
			column = 0;
    138e:	96 2c       	mov	r9, r6
void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
    1390:	21 96       	adiw	r28, 0x01	; 1
    1392:	cc 16       	cp	r12, r28
    1394:	dd 06       	cpc	r13, r29
    1396:	29 f7       	brne	.-54     	; 0x1362 <oled_print_string+0x5c>
			line++;
			oled_goto_column(column);
			oled_goto_line(line);
		}
	}
}
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	ff 90       	pop	r15
    13a2:	ef 90       	pop	r14
    13a4:	df 90       	pop	r13
    13a6:	cf 90       	pop	r12
    13a8:	bf 90       	pop	r11
    13aa:	af 90       	pop	r10
    13ac:	9f 90       	pop	r9
    13ae:	8f 90       	pop	r8
    13b0:	7f 90       	pop	r7
    13b2:	6f 90       	pop	r6
    13b4:	08 95       	ret

000013b6 <oled_clear_line>:
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
	}
}

void oled_clear_line(int line){
    13b6:	cf 93       	push	r28
	oled_goto_line(line);
    13b8:	0e 94 32 09 	call	0x1264	; 0x1264 <oled_goto_line>
	oled_goto_column(0);
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <oled_goto_column>
	for (uint8_t i = 0; i < 128; i++){
    13c4:	c0 e0       	ldi	r28, 0x00	; 0
		oled_write_data(0x00);
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	0e 94 8d 08 	call	0x111a	; 0x111a <oled_write_data>
}

void oled_clear_line(int line){
	oled_goto_line(line);
	oled_goto_column(0);
	for (uint8_t i = 0; i < 128; i++){
    13cc:	cf 5f       	subi	r28, 0xFF	; 255
    13ce:	c0 38       	cpi	r28, 0x80	; 128
    13d0:	d1 f7       	brne	.-12     	; 0x13c6 <oled_clear_line+0x10>
		oled_write_data(0x00);
	}
}
    13d2:	cf 91       	pop	r28
    13d4:	08 95       	ret

000013d6 <oled_clear_screen>:
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}

void oled_clear_screen(){
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	c0 e0       	ldi	r28, 0x00	; 0
    13dc:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
    13de:	ce 01       	movw	r24, r28
    13e0:	0e 94 db 09 	call	0x13b6	; 0x13b6 <oled_clear_line>
    13e4:	21 96       	adiw	r28, 0x01	; 1
		}
	}
}

void oled_clear_screen(){
	for (uint8_t line = 0; line < 8; line++){
    13e6:	c8 30       	cpi	r28, 0x08	; 8
    13e8:	d1 05       	cpc	r29, r1
    13ea:	c9 f7       	brne	.-14     	; 0x13de <oled_clear_screen+0x8>
		oled_clear_line(line);
	}
}
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	08 95       	ret

000013f2 <oled_init>:
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    13f2:	e0 91 64 01 	lds	r30, 0x0164
    13f6:	f0 91 65 01 	lds	r31, 0x0165
    13fa:	8e ea       	ldi	r24, 0xAE	; 174
    13fc:	80 83       	st	Z, r24
    13fe:	e0 91 64 01 	lds	r30, 0x0164
    1402:	f0 91 65 01 	lds	r31, 0x0165
    1406:	81 ea       	ldi	r24, 0xA1	; 161
    1408:	80 83       	st	Z, r24
    140a:	e0 91 64 01 	lds	r30, 0x0164
    140e:	f0 91 65 01 	lds	r31, 0x0165
    1412:	8a ed       	ldi	r24, 0xDA	; 218
    1414:	80 83       	st	Z, r24
    1416:	e0 91 64 01 	lds	r30, 0x0164
    141a:	f0 91 65 01 	lds	r31, 0x0165
    141e:	82 e1       	ldi	r24, 0x12	; 18
    1420:	80 83       	st	Z, r24
    1422:	e0 91 64 01 	lds	r30, 0x0164
    1426:	f0 91 65 01 	lds	r31, 0x0165
    142a:	88 ec       	ldi	r24, 0xC8	; 200
    142c:	80 83       	st	Z, r24
    142e:	e0 91 64 01 	lds	r30, 0x0164
    1432:	f0 91 65 01 	lds	r31, 0x0165
    1436:	88 ea       	ldi	r24, 0xA8	; 168
    1438:	80 83       	st	Z, r24
    143a:	e0 91 64 01 	lds	r30, 0x0164
    143e:	f0 91 65 01 	lds	r31, 0x0165
    1442:	8f e3       	ldi	r24, 0x3F	; 63
    1444:	80 83       	st	Z, r24
    1446:	e0 91 64 01 	lds	r30, 0x0164
    144a:	f0 91 65 01 	lds	r31, 0x0165
    144e:	85 ed       	ldi	r24, 0xD5	; 213
    1450:	80 83       	st	Z, r24
    1452:	e0 91 64 01 	lds	r30, 0x0164
    1456:	f0 91 65 01 	lds	r31, 0x0165
    145a:	80 e8       	ldi	r24, 0x80	; 128
    145c:	80 83       	st	Z, r24
    145e:	e0 91 64 01 	lds	r30, 0x0164
    1462:	f0 91 65 01 	lds	r31, 0x0165
    1466:	81 e8       	ldi	r24, 0x81	; 129
    1468:	80 83       	st	Z, r24
    146a:	e0 91 64 01 	lds	r30, 0x0164
    146e:	f0 91 65 01 	lds	r31, 0x0165
    1472:	80 e5       	ldi	r24, 0x50	; 80
    1474:	80 83       	st	Z, r24
    1476:	e0 91 64 01 	lds	r30, 0x0164
    147a:	f0 91 65 01 	lds	r31, 0x0165
    147e:	89 ed       	ldi	r24, 0xD9	; 217
    1480:	80 83       	st	Z, r24
    1482:	e0 91 64 01 	lds	r30, 0x0164
    1486:	f0 91 65 01 	lds	r31, 0x0165
    148a:	81 e2       	ldi	r24, 0x21	; 33
    148c:	80 83       	st	Z, r24
    148e:	e0 91 64 01 	lds	r30, 0x0164
    1492:	f0 91 65 01 	lds	r31, 0x0165
    1496:	80 e2       	ldi	r24, 0x20	; 32
    1498:	80 83       	st	Z, r24
    149a:	e0 91 64 01 	lds	r30, 0x0164
    149e:	f0 91 65 01 	lds	r31, 0x0165
    14a2:	82 e0       	ldi	r24, 0x02	; 2
    14a4:	80 83       	st	Z, r24
    14a6:	e0 91 64 01 	lds	r30, 0x0164
    14aa:	f0 91 65 01 	lds	r31, 0x0165
    14ae:	8b ed       	ldi	r24, 0xDB	; 219
    14b0:	80 83       	st	Z, r24
    14b2:	e0 91 64 01 	lds	r30, 0x0164
    14b6:	f0 91 65 01 	lds	r31, 0x0165
    14ba:	80 e3       	ldi	r24, 0x30	; 48
    14bc:	80 83       	st	Z, r24
    14be:	e0 91 64 01 	lds	r30, 0x0164
    14c2:	f0 91 65 01 	lds	r31, 0x0165
    14c6:	8d ea       	ldi	r24, 0xAD	; 173
    14c8:	80 83       	st	Z, r24
    14ca:	e0 91 64 01 	lds	r30, 0x0164
    14ce:	f0 91 65 01 	lds	r31, 0x0165
    14d2:	10 82       	st	Z, r1
    14d4:	e0 91 64 01 	lds	r30, 0x0164
    14d8:	f0 91 65 01 	lds	r31, 0x0165
    14dc:	84 ea       	ldi	r24, 0xA4	; 164
    14de:	80 83       	st	Z, r24
    14e0:	e0 91 64 01 	lds	r30, 0x0164
    14e4:	f0 91 65 01 	lds	r31, 0x0165
    14e8:	86 ea       	ldi	r24, 0xA6	; 166
    14ea:	80 83       	st	Z, r24
    14ec:	e0 91 64 01 	lds	r30, 0x0164
    14f0:	f0 91 65 01 	lds	r31, 0x0165
    14f4:	8f ea       	ldi	r24, 0xAF	; 175
    14f6:	80 83       	st	Z, r24
	oled_write_command(0xad); //master configuration
	oled_write_command(0x00);
	oled_write_command(0xa4); //out follows RAM content
	oled_write_command(0xa6); //set normal display
	oled_write_command(0xaf); // display on
	oled_clear_screen(); //Sets all buffer data to 0
    14f8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <oled_clear_screen>
    14fc:	08 95       	ret

000014fe <oled_refresh>:
		oled_write_command(lower);
		oled_write_command(0b00010000 | upper);
	}
}

void oled_refresh(){
    14fe:	cf 93       	push	r28
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1500:	e0 91 64 01 	lds	r30, 0x0164
    1504:	f0 91 65 01 	lds	r31, 0x0165
    1508:	10 82       	st	Z, r1
    150a:	e0 91 64 01 	lds	r30, 0x0164
    150e:	f0 91 65 01 	lds	r31, 0x0165
    1512:	80 e1       	ldi	r24, 0x10	; 16
    1514:	80 83       	st	Z, r24
	uint8_t lower = 0 & 0b00001111; // set column to 0
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
    1516:	80 91 5e 01 	lds	r24, 0x015E
    151a:	90 91 5f 01 	lds	r25, 0x015F
    151e:	89 2b       	or	r24, r25
    1520:	21 f1       	breq	.+72     	; 0x156a <oled_refresh+0x6c>
    1522:	40 e0       	ldi	r20, 0x00	; 0
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	60 eb       	ldi	r22, 0xB0	; 176
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    1528:	c0 e0       	ldi	r28, 0x00	; 0
    152a:	70 e0       	ldi	r23, 0x00	; 0
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    152c:	e0 91 64 01 	lds	r30, 0x0164
    1530:	f0 91 65 01 	lds	r31, 0x0165
    1534:	60 83       	st	Z, r22
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    1536:	8c 2f       	mov	r24, r28
    1538:	97 2f       	mov	r25, r23
				*oled_front_buffer = oled_back_buffer[column + page*128];
    153a:	e0 91 60 01 	lds	r30, 0x0160
    153e:	f0 91 61 01 	lds	r31, 0x0161
    1542:	9c 01       	movw	r18, r24
    1544:	24 0f       	add	r18, r20
    1546:	35 1f       	adc	r19, r21
    1548:	a0 91 62 01 	lds	r26, 0x0162
    154c:	b0 91 63 01 	lds	r27, 0x0163
    1550:	a2 0f       	add	r26, r18
    1552:	b3 1f       	adc	r27, r19
    1554:	2c 91       	ld	r18, X
    1556:	20 83       	st	Z, r18
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	80 38       	cpi	r24, 0x80	; 128
    155c:	91 05       	cpc	r25, r1
    155e:	69 f7       	brne	.-38     	; 0x153a <oled_refresh+0x3c>
    1560:	6f 5f       	subi	r22, 0xFF	; 255
    1562:	40 58       	subi	r20, 0x80	; 128
    1564:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
    1566:	68 3b       	cpi	r22, 0xB8	; 184
    1568:	09 f7       	brne	.-62     	; 0x152c <oled_refresh+0x2e>
			for(int column = 0; column < 128; column++){
				*oled_front_buffer = oled_back_buffer[column + page*128];
			}
		}	
	}
}
    156a:	cf 91       	pop	r28
    156c:	08 95       	ret

0000156e <oled_invert_pixel>:
	oled_goto_column(x);
	oled_goto_line(y/8);
	oled_write_data(~(1 << (y % 8)) & oled_read_data());
}

void oled_invert_pixel(int x, int y){
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	eb 01       	movw	r28, r22
	oled_goto_column(x);
    1574:	0e 94 59 09 	call	0x12b2	; 0x12b2 <oled_goto_column>
	oled_goto_line(y/8);
    1578:	ce 01       	movw	r24, r28
    157a:	dd 23       	and	r29, r29
    157c:	0c f4       	brge	.+2      	; 0x1580 <oled_invert_pixel+0x12>
    157e:	07 96       	adiw	r24, 0x07	; 7
    1580:	95 95       	asr	r25
    1582:	87 95       	ror	r24
    1584:	95 95       	asr	r25
    1586:	87 95       	ror	r24
    1588:	95 95       	asr	r25
    158a:	87 95       	ror	r24
    158c:	0e 94 32 09 	call	0x1264	; 0x1264 <oled_goto_line>
	oled_write_data((1 << (y % 8)) ^ oled_read_data()); //exclusive or
    1590:	0e 94 13 09 	call	0x1226	; 0x1226 <oled_read_data>
    1594:	be 01       	movw	r22, r28
    1596:	67 70       	andi	r22, 0x07	; 7
    1598:	70 78       	andi	r23, 0x80	; 128
    159a:	77 23       	and	r23, r23
    159c:	34 f4       	brge	.+12     	; 0x15aa <oled_invert_pixel+0x3c>
    159e:	61 50       	subi	r22, 0x01	; 1
    15a0:	71 09       	sbc	r23, r1
    15a2:	68 6f       	ori	r22, 0xF8	; 248
    15a4:	7f 6f       	ori	r23, 0xFF	; 255
    15a6:	6f 5f       	subi	r22, 0xFF	; 255
    15a8:	7f 4f       	sbci	r23, 0xFF	; 255
    15aa:	21 e0       	ldi	r18, 0x01	; 1
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	a9 01       	movw	r20, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <oled_invert_pixel+0x48>
    15b2:	44 0f       	add	r20, r20
    15b4:	55 1f       	adc	r21, r21
    15b6:	6a 95       	dec	r22
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <oled_invert_pixel+0x44>
    15ba:	84 27       	eor	r24, r20
    15bc:	0e 94 8d 08 	call	0x111a	; 0x111a <oled_write_data>
}
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	08 95       	ret

000015c6 <oled_invert_rectangle>:

void oled_draw_line(int x1, int y1, int x2, int y2){
	
}

void oled_invert_rectangle(int x1, int y1, int x2, int y2){
    15c6:	8f 92       	push	r8
    15c8:	9f 92       	push	r9
    15ca:	af 92       	push	r10
    15cc:	bf 92       	push	r11
    15ce:	cf 92       	push	r12
    15d0:	df 92       	push	r13
    15d2:	ef 92       	push	r14
    15d4:	ff 92       	push	r15
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	8c 01       	movw	r16, r24
    15e0:	6b 01       	movw	r12, r22
    15e2:	5a 01       	movw	r10, r20
    15e4:	79 01       	movw	r14, r18
	for (int x = x1; x < x2; x++){
    15e6:	84 17       	cp	r24, r20
    15e8:	95 07       	cpc	r25, r21
    15ea:	b4 f4       	brge	.+44     	; 0x1618 <oled_invert_rectangle+0x52>
		for (int y = y1; y < y2; y++){
    15ec:	86 2e       	mov	r8, r22
    15ee:	9d 2c       	mov	r9, r13
    15f0:	0d c0       	rjmp	.+26     	; 0x160c <oled_invert_rectangle+0x46>
			oled_invert_pixel(x, y);
    15f2:	be 01       	movw	r22, r28
    15f4:	c8 01       	movw	r24, r16
    15f6:	0e 94 b7 0a 	call	0x156e	; 0x156e <oled_invert_pixel>
	
}

void oled_invert_rectangle(int x1, int y1, int x2, int y2){
	for (int x = x1; x < x2; x++){
		for (int y = y1; y < y2; y++){
    15fa:	21 96       	adiw	r28, 0x01	; 1
    15fc:	ce 15       	cp	r28, r14
    15fe:	df 05       	cpc	r29, r15
    1600:	c4 f3       	brlt	.-16     	; 0x15f2 <oled_invert_rectangle+0x2c>
void oled_draw_line(int x1, int y1, int x2, int y2){
	
}

void oled_invert_rectangle(int x1, int y1, int x2, int y2){
	for (int x = x1; x < x2; x++){
    1602:	0f 5f       	subi	r16, 0xFF	; 255
    1604:	1f 4f       	sbci	r17, 0xFF	; 255
    1606:	0a 15       	cp	r16, r10
    1608:	1b 05       	cpc	r17, r11
    160a:	34 f4       	brge	.+12     	; 0x1618 <oled_invert_rectangle+0x52>
		for (int y = y1; y < y2; y++){
    160c:	ce 14       	cp	r12, r14
    160e:	df 04       	cpc	r13, r15
    1610:	c4 f7       	brge	.-16     	; 0x1602 <oled_invert_rectangle+0x3c>
    1612:	c8 2d       	mov	r28, r8
    1614:	d9 2d       	mov	r29, r9
    1616:	ed cf       	rjmp	.-38     	; 0x15f2 <oled_invert_rectangle+0x2c>
			oled_invert_pixel(x, y);
		}
	}
}
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	1f 91       	pop	r17
    161e:	0f 91       	pop	r16
    1620:	ff 90       	pop	r15
    1622:	ef 90       	pop	r14
    1624:	df 90       	pop	r13
    1626:	cf 90       	pop	r12
    1628:	bf 90       	pop	r11
    162a:	af 90       	pop	r10
    162c:	9f 90       	pop	r9
    162e:	8f 90       	pop	r8
    1630:	08 95       	ret

00001632 <spi_master_init>:

void spi_master_init()
{
	
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<PB5)|(1<<PB7)|(1 << PB4); //DDB4
    1632:	87 b3       	in	r24, 0x17	; 23
    1634:	80 6b       	ori	r24, 0xB0	; 176
    1636:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << DDB6);
    1638:	be 98       	cbi	0x17, 6	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X);
    163a:	81 e5       	ldi	r24, 0x51	; 81
    163c:	8d b9       	out	0x0d, r24	; 13
	set_bit(PORTB,PB4);
    163e:	c4 9a       	sbi	0x18, 4	; 24
    1640:	08 95       	ret

00001642 <spi_master_transmit>:
}


char spi_master_transmit(char cData)
{
	clear_bit(PORTB, PB4);
    1642:	c4 98       	cbi	0x18, 4	; 24
	/* Start transmission */
	SPDR = cData;
    1644:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
    1646:	77 9b       	sbis	0x0e, 7	; 14
    1648:	fe cf       	rjmp	.-4      	; 0x1646 <spi_master_transmit+0x4>
	set_bit(PORTB,PB4);
    164a:	c4 9a       	sbi	0x18, 4	; 24
	
	//NOT SURE THIS ACTUALLY RETURNS THE CORRECT VALUE
	return SPDR;
    164c:	8f b1       	in	r24, 0x0f	; 15
}
    164e:	08 95       	ret

00001650 <touch_init>:
#include <avr/io.h>

#include "touch.h"

void touch_init(){
	clear_bit(DDRB, PB0); //Set DDR to input for button
    1650:	b8 98       	cbi	0x17, 0	; 23
	clear_bit(DDRB, PB1); //Set DDR to input for button
    1652:	b9 98       	cbi	0x17, 1	; 23
    1654:	08 95       	ret

00001656 <uart_putchar>:
#include <avr/io.h>
#include <stdio.h>

int uart_putchar(char c){
	//Wait for empty transmit buffer
	while (!( UCSR0A & (1<<UDRE0)));
    1656:	5d 9b       	sbis	0x0b, 5	; 11
    1658:	fe cf       	rjmp	.-4      	; 0x1656 <uart_putchar>
	//Put data into buffer, sends the data
	UDR0 = c;
    165a:	8c b9       	out	0x0c, r24	; 12
	return 1;
}
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	08 95       	ret

00001662 <uart_getchar>:

unsigned char uart_getchar(){
	while (!( UCSR0A & (1<<RXC0)));
    1662:	5f 9b       	sbis	0x0b, 7	; 11
    1664:	fe cf       	rjmp	.-4      	; 0x1662 <uart_getchar>
	return UDR0;
    1666:	8c b1       	in	r24, 0x0c	; 12
}
    1668:	08 95       	ret

0000166a <uart_init>:

int uart_init(int baudRate){
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
	int UBRR = ((long)4915200/((long)16*baudRate) - 1);
    166e:	aa 27       	eor	r26, r26
    1670:	97 fd       	sbrc	r25, 7
    1672:	a0 95       	com	r26
    1674:	ba 2f       	mov	r27, r26
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	aa 1f       	adc	r26, r26
    167c:	bb 1f       	adc	r27, r27
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	aa 1f       	adc	r26, r26
    1684:	bb 1f       	adc	r27, r27
    1686:	9c 01       	movw	r18, r24
    1688:	ad 01       	movw	r20, r26
    168a:	22 0f       	add	r18, r18
    168c:	33 1f       	adc	r19, r19
    168e:	44 1f       	adc	r20, r20
    1690:	55 1f       	adc	r21, r21
    1692:	22 0f       	add	r18, r18
    1694:	33 1f       	adc	r19, r19
    1696:	44 1f       	adc	r20, r20
    1698:	55 1f       	adc	r21, r21
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	8b e4       	ldi	r24, 0x4B	; 75
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__divmodsi4>
    16a6:	e9 01       	movw	r28, r18
    16a8:	21 97       	sbiw	r28, 0x01	; 1
	//Enable printf
	fdevopen(uart_putchar, uart_getchar);
    16aa:	61 e3       	ldi	r22, 0x31	; 49
    16ac:	7b e0       	ldi	r23, 0x0B	; 11
    16ae:	8b e2       	ldi	r24, 0x2B	; 43
    16b0:	9b e0       	ldi	r25, 0x0B	; 11
    16b2:	0e 94 a0 10 	call	0x2140	; 0x2140 <fdevopen>
	//Setting
	UBRR0L = UBRR;
    16b6:	c9 b9       	out	0x09, r28	; 9
    UBRR0H = (UBRR>>8);
    16b8:	d0 bd       	out	0x20, r29	; 32
    //Enable receiver and transmitter 
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    16ba:	88 e1       	ldi	r24, 0x18	; 24
    16bc:	8a b9       	out	0x0a, r24	; 10
    //Set frame format: 8data, 2stop bit  
    UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    16be:	8e e8       	ldi	r24, 0x8E	; 142
    16c0:	80 bd       	out	0x20, r24	; 32
    return 1;
}
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	08 95       	ret
    16cc:	63 d1       	rcall	.+710    	; 0x1994 <__fp_pscA>
    16ce:	58 f0       	brcs	.+22     	; 0x16e6 <uart_init+0x7c>
    16d0:	80 e8       	ldi	r24, 0x80	; 128
    16d2:	91 e0       	ldi	r25, 0x01	; 1
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <uart_init+0x6e>
    16d6:	9e ef       	ldi	r25, 0xFE	; 254
    16d8:	64 d1       	rcall	.+712    	; 0x19a2 <__fp_pscB>
    16da:	28 f0       	brcs	.+10     	; 0x16e6 <uart_init+0x7c>
    16dc:	40 e8       	ldi	r20, 0x80	; 128
    16de:	51 e0       	ldi	r21, 0x01	; 1
    16e0:	59 f4       	brne	.+22     	; 0x16f8 <atan2+0xe>
    16e2:	5e ef       	ldi	r21, 0xFE	; 254
    16e4:	09 c0       	rjmp	.+18     	; 0x16f8 <atan2+0xe>
    16e6:	2e c1       	rjmp	.+604    	; 0x1944 <__fp_nan>
    16e8:	96 c1       	rjmp	.+812    	; 0x1a16 <__fp_zero>

000016ea <atan2>:
    16ea:	e9 2f       	mov	r30, r25
    16ec:	e0 78       	andi	r30, 0x80	; 128
    16ee:	71 d1       	rcall	.+738    	; 0x19d2 <__fp_split3>
    16f0:	68 f3       	brcs	.-38     	; 0x16cc <uart_init+0x62>
    16f2:	09 2e       	mov	r0, r25
    16f4:	05 2a       	or	r0, r21
    16f6:	c1 f3       	breq	.-16     	; 0x16e8 <uart_init+0x7e>
    16f8:	26 17       	cp	r18, r22
    16fa:	37 07       	cpc	r19, r23
    16fc:	48 07       	cpc	r20, r24
    16fe:	59 07       	cpc	r21, r25
    1700:	38 f0       	brcs	.+14     	; 0x1710 <atan2+0x26>
    1702:	0e 2e       	mov	r0, r30
    1704:	07 f8       	bld	r0, 7
    1706:	e0 25       	eor	r30, r0
    1708:	69 f0       	breq	.+26     	; 0x1724 <atan2+0x3a>
    170a:	e0 25       	eor	r30, r0
    170c:	e0 64       	ori	r30, 0x40	; 64
    170e:	0a c0       	rjmp	.+20     	; 0x1724 <atan2+0x3a>
    1710:	ef 63       	ori	r30, 0x3F	; 63
    1712:	07 f8       	bld	r0, 7
    1714:	00 94       	com	r0
    1716:	07 fa       	bst	r0, 7
    1718:	db 01       	movw	r26, r22
    171a:	b9 01       	movw	r22, r18
    171c:	9d 01       	movw	r18, r26
    171e:	dc 01       	movw	r26, r24
    1720:	ca 01       	movw	r24, r20
    1722:	ad 01       	movw	r20, r26
    1724:	ef 93       	push	r30
    1726:	41 d0       	rcall	.+130    	; 0x17aa <__divsf3_pse>
    1728:	43 d1       	rcall	.+646    	; 0x19b0 <__fp_round>
    172a:	0a d0       	rcall	.+20     	; 0x1740 <atan>
    172c:	5f 91       	pop	r21
    172e:	55 23       	and	r21, r21
    1730:	31 f0       	breq	.+12     	; 0x173e <atan2+0x54>
    1732:	2b ed       	ldi	r18, 0xDB	; 219
    1734:	3f e0       	ldi	r19, 0x0F	; 15
    1736:	49 e4       	ldi	r20, 0x49	; 73
    1738:	50 fd       	sbrc	r21, 0
    173a:	49 ec       	ldi	r20, 0xC9	; 201
    173c:	23 c2       	rjmp	.+1094   	; 0x1b84 <__addsf3>
    173e:	08 95       	ret

00001740 <atan>:
    1740:	df 93       	push	r29
    1742:	dd 27       	eor	r29, r29
    1744:	b9 2f       	mov	r27, r25
    1746:	bf 77       	andi	r27, 0x7F	; 127
    1748:	40 e8       	ldi	r20, 0x80	; 128
    174a:	5f e3       	ldi	r21, 0x3F	; 63
    174c:	16 16       	cp	r1, r22
    174e:	17 06       	cpc	r1, r23
    1750:	48 07       	cpc	r20, r24
    1752:	5b 07       	cpc	r21, r27
    1754:	10 f4       	brcc	.+4      	; 0x175a <atan+0x1a>
    1756:	d9 2f       	mov	r29, r25
    1758:	65 d1       	rcall	.+714    	; 0x1a24 <inverse>
    175a:	9f 93       	push	r25
    175c:	8f 93       	push	r24
    175e:	7f 93       	push	r23
    1760:	6f 93       	push	r22
    1762:	0c d2       	rcall	.+1048   	; 0x1b7c <square>
    1764:	e0 e7       	ldi	r30, 0x70	; 112
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	f0 d0       	rcall	.+480    	; 0x194a <__fp_powser>
    176a:	22 d1       	rcall	.+580    	; 0x19b0 <__fp_round>
    176c:	2f 91       	pop	r18
    176e:	3f 91       	pop	r19
    1770:	4f 91       	pop	r20
    1772:	5f 91       	pop	r21
    1774:	6a d1       	rcall	.+724    	; 0x1a4a <__mulsf3x>
    1776:	dd 23       	and	r29, r29
    1778:	49 f0       	breq	.+18     	; 0x178c <atan+0x4c>
    177a:	90 58       	subi	r25, 0x80	; 128
    177c:	a2 ea       	ldi	r26, 0xA2	; 162
    177e:	2a ed       	ldi	r18, 0xDA	; 218
    1780:	3f e0       	ldi	r19, 0x0F	; 15
    1782:	49 ec       	ldi	r20, 0xC9	; 201
    1784:	5f e3       	ldi	r21, 0x3F	; 63
    1786:	d0 78       	andi	r29, 0x80	; 128
    1788:	5d 27       	eor	r21, r29
    178a:	0d d2       	rcall	.+1050   	; 0x1ba6 <__addsf3x>
    178c:	df 91       	pop	r29
    178e:	10 c1       	rjmp	.+544    	; 0x19b0 <__fp_round>
    1790:	08 d1       	rcall	.+528    	; 0x19a2 <__fp_pscB>
    1792:	40 f0       	brcs	.+16     	; 0x17a4 <atan+0x64>
    1794:	ff d0       	rcall	.+510    	; 0x1994 <__fp_pscA>
    1796:	30 f0       	brcs	.+12     	; 0x17a4 <atan+0x64>
    1798:	21 f4       	brne	.+8      	; 0x17a2 <atan+0x62>
    179a:	5f 3f       	cpi	r21, 0xFF	; 255
    179c:	19 f0       	breq	.+6      	; 0x17a4 <atan+0x64>
    179e:	cc c0       	rjmp	.+408    	; 0x1938 <__fp_inf>
    17a0:	51 11       	cpse	r21, r1
    17a2:	3a c1       	rjmp	.+628    	; 0x1a18 <__fp_szero>
    17a4:	cf c0       	rjmp	.+414    	; 0x1944 <__fp_nan>

000017a6 <__divsf3x>:
    17a6:	15 d1       	rcall	.+554    	; 0x19d2 <__fp_split3>
    17a8:	98 f3       	brcs	.-26     	; 0x1790 <atan+0x50>

000017aa <__divsf3_pse>:
    17aa:	99 23       	and	r25, r25
    17ac:	c9 f3       	breq	.-14     	; 0x17a0 <atan+0x60>
    17ae:	55 23       	and	r21, r21
    17b0:	b1 f3       	breq	.-20     	; 0x179e <atan+0x5e>
    17b2:	95 1b       	sub	r25, r21
    17b4:	55 0b       	sbc	r21, r21
    17b6:	bb 27       	eor	r27, r27
    17b8:	aa 27       	eor	r26, r26
    17ba:	62 17       	cp	r22, r18
    17bc:	73 07       	cpc	r23, r19
    17be:	84 07       	cpc	r24, r20
    17c0:	38 f0       	brcs	.+14     	; 0x17d0 <__divsf3_pse+0x26>
    17c2:	9f 5f       	subi	r25, 0xFF	; 255
    17c4:	5f 4f       	sbci	r21, 0xFF	; 255
    17c6:	22 0f       	add	r18, r18
    17c8:	33 1f       	adc	r19, r19
    17ca:	44 1f       	adc	r20, r20
    17cc:	aa 1f       	adc	r26, r26
    17ce:	a9 f3       	breq	.-22     	; 0x17ba <__divsf3_pse+0x10>
    17d0:	33 d0       	rcall	.+102    	; 0x1838 <__divsf3_pse+0x8e>
    17d2:	0e 2e       	mov	r0, r30
    17d4:	3a f0       	brmi	.+14     	; 0x17e4 <__divsf3_pse+0x3a>
    17d6:	e0 e8       	ldi	r30, 0x80	; 128
    17d8:	30 d0       	rcall	.+96     	; 0x183a <__divsf3_pse+0x90>
    17da:	91 50       	subi	r25, 0x01	; 1
    17dc:	50 40       	sbci	r21, 0x00	; 0
    17de:	e6 95       	lsr	r30
    17e0:	00 1c       	adc	r0, r0
    17e2:	ca f7       	brpl	.-14     	; 0x17d6 <__divsf3_pse+0x2c>
    17e4:	29 d0       	rcall	.+82     	; 0x1838 <__divsf3_pse+0x8e>
    17e6:	fe 2f       	mov	r31, r30
    17e8:	27 d0       	rcall	.+78     	; 0x1838 <__divsf3_pse+0x8e>
    17ea:	66 0f       	add	r22, r22
    17ec:	77 1f       	adc	r23, r23
    17ee:	88 1f       	adc	r24, r24
    17f0:	bb 1f       	adc	r27, r27
    17f2:	26 17       	cp	r18, r22
    17f4:	37 07       	cpc	r19, r23
    17f6:	48 07       	cpc	r20, r24
    17f8:	ab 07       	cpc	r26, r27
    17fa:	b0 e8       	ldi	r27, 0x80	; 128
    17fc:	09 f0       	breq	.+2      	; 0x1800 <__divsf3_pse+0x56>
    17fe:	bb 0b       	sbc	r27, r27
    1800:	80 2d       	mov	r24, r0
    1802:	bf 01       	movw	r22, r30
    1804:	ff 27       	eor	r31, r31
    1806:	93 58       	subi	r25, 0x83	; 131
    1808:	5f 4f       	sbci	r21, 0xFF	; 255
    180a:	2a f0       	brmi	.+10     	; 0x1816 <__divsf3_pse+0x6c>
    180c:	9e 3f       	cpi	r25, 0xFE	; 254
    180e:	51 05       	cpc	r21, r1
    1810:	68 f0       	brcs	.+26     	; 0x182c <__divsf3_pse+0x82>
    1812:	92 c0       	rjmp	.+292    	; 0x1938 <__fp_inf>
    1814:	01 c1       	rjmp	.+514    	; 0x1a18 <__fp_szero>
    1816:	5f 3f       	cpi	r21, 0xFF	; 255
    1818:	ec f3       	brlt	.-6      	; 0x1814 <__divsf3_pse+0x6a>
    181a:	98 3e       	cpi	r25, 0xE8	; 232
    181c:	dc f3       	brlt	.-10     	; 0x1814 <__divsf3_pse+0x6a>
    181e:	86 95       	lsr	r24
    1820:	77 95       	ror	r23
    1822:	67 95       	ror	r22
    1824:	b7 95       	ror	r27
    1826:	f7 95       	ror	r31
    1828:	9f 5f       	subi	r25, 0xFF	; 255
    182a:	c9 f7       	brne	.-14     	; 0x181e <__divsf3_pse+0x74>
    182c:	88 0f       	add	r24, r24
    182e:	91 1d       	adc	r25, r1
    1830:	96 95       	lsr	r25
    1832:	87 95       	ror	r24
    1834:	97 f9       	bld	r25, 7
    1836:	08 95       	ret
    1838:	e1 e0       	ldi	r30, 0x01	; 1
    183a:	66 0f       	add	r22, r22
    183c:	77 1f       	adc	r23, r23
    183e:	88 1f       	adc	r24, r24
    1840:	bb 1f       	adc	r27, r27
    1842:	62 17       	cp	r22, r18
    1844:	73 07       	cpc	r23, r19
    1846:	84 07       	cpc	r24, r20
    1848:	ba 07       	cpc	r27, r26
    184a:	20 f0       	brcs	.+8      	; 0x1854 <__divsf3_pse+0xaa>
    184c:	62 1b       	sub	r22, r18
    184e:	73 0b       	sbc	r23, r19
    1850:	84 0b       	sbc	r24, r20
    1852:	ba 0b       	sbc	r27, r26
    1854:	ee 1f       	adc	r30, r30
    1856:	88 f7       	brcc	.-30     	; 0x183a <__divsf3_pse+0x90>
    1858:	e0 95       	com	r30
    185a:	08 95       	ret

0000185c <__fixsfsi>:
    185c:	04 d0       	rcall	.+8      	; 0x1866 <__fixunssfsi>
    185e:	68 94       	set
    1860:	b1 11       	cpse	r27, r1
    1862:	da c0       	rjmp	.+436    	; 0x1a18 <__fp_szero>
    1864:	08 95       	ret

00001866 <__fixunssfsi>:
    1866:	bd d0       	rcall	.+378    	; 0x19e2 <__fp_splitA>
    1868:	88 f0       	brcs	.+34     	; 0x188c <__fixunssfsi+0x26>
    186a:	9f 57       	subi	r25, 0x7F	; 127
    186c:	90 f0       	brcs	.+36     	; 0x1892 <__fixunssfsi+0x2c>
    186e:	b9 2f       	mov	r27, r25
    1870:	99 27       	eor	r25, r25
    1872:	b7 51       	subi	r27, 0x17	; 23
    1874:	a0 f0       	brcs	.+40     	; 0x189e <__fixunssfsi+0x38>
    1876:	d1 f0       	breq	.+52     	; 0x18ac <__fixunssfsi+0x46>
    1878:	66 0f       	add	r22, r22
    187a:	77 1f       	adc	r23, r23
    187c:	88 1f       	adc	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	1a f0       	brmi	.+6      	; 0x1888 <__fixunssfsi+0x22>
    1882:	ba 95       	dec	r27
    1884:	c9 f7       	brne	.-14     	; 0x1878 <__fixunssfsi+0x12>
    1886:	12 c0       	rjmp	.+36     	; 0x18ac <__fixunssfsi+0x46>
    1888:	b1 30       	cpi	r27, 0x01	; 1
    188a:	81 f0       	breq	.+32     	; 0x18ac <__fixunssfsi+0x46>
    188c:	c4 d0       	rcall	.+392    	; 0x1a16 <__fp_zero>
    188e:	b1 e0       	ldi	r27, 0x01	; 1
    1890:	08 95       	ret
    1892:	c1 c0       	rjmp	.+386    	; 0x1a16 <__fp_zero>
    1894:	67 2f       	mov	r22, r23
    1896:	78 2f       	mov	r23, r24
    1898:	88 27       	eor	r24, r24
    189a:	b8 5f       	subi	r27, 0xF8	; 248
    189c:	39 f0       	breq	.+14     	; 0x18ac <__fixunssfsi+0x46>
    189e:	b9 3f       	cpi	r27, 0xF9	; 249
    18a0:	cc f3       	brlt	.-14     	; 0x1894 <__fixunssfsi+0x2e>
    18a2:	86 95       	lsr	r24
    18a4:	77 95       	ror	r23
    18a6:	67 95       	ror	r22
    18a8:	b3 95       	inc	r27
    18aa:	d9 f7       	brne	.-10     	; 0x18a2 <__fixunssfsi+0x3c>
    18ac:	3e f4       	brtc	.+14     	; 0x18bc <__fixunssfsi+0x56>
    18ae:	90 95       	com	r25
    18b0:	80 95       	com	r24
    18b2:	70 95       	com	r23
    18b4:	61 95       	neg	r22
    18b6:	7f 4f       	sbci	r23, 0xFF	; 255
    18b8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ba:	9f 4f       	sbci	r25, 0xFF	; 255
    18bc:	08 95       	ret

000018be <__floatunsisf>:
    18be:	e8 94       	clt
    18c0:	09 c0       	rjmp	.+18     	; 0x18d4 <__floatsisf+0x12>

000018c2 <__floatsisf>:
    18c2:	97 fb       	bst	r25, 7
    18c4:	3e f4       	brtc	.+14     	; 0x18d4 <__floatsisf+0x12>
    18c6:	90 95       	com	r25
    18c8:	80 95       	com	r24
    18ca:	70 95       	com	r23
    18cc:	61 95       	neg	r22
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	8f 4f       	sbci	r24, 0xFF	; 255
    18d2:	9f 4f       	sbci	r25, 0xFF	; 255
    18d4:	99 23       	and	r25, r25
    18d6:	a9 f0       	breq	.+42     	; 0x1902 <__floatsisf+0x40>
    18d8:	f9 2f       	mov	r31, r25
    18da:	96 e9       	ldi	r25, 0x96	; 150
    18dc:	bb 27       	eor	r27, r27
    18de:	93 95       	inc	r25
    18e0:	f6 95       	lsr	r31
    18e2:	87 95       	ror	r24
    18e4:	77 95       	ror	r23
    18e6:	67 95       	ror	r22
    18e8:	b7 95       	ror	r27
    18ea:	f1 11       	cpse	r31, r1
    18ec:	f8 cf       	rjmp	.-16     	; 0x18de <__floatsisf+0x1c>
    18ee:	fa f4       	brpl	.+62     	; 0x192e <__floatsisf+0x6c>
    18f0:	bb 0f       	add	r27, r27
    18f2:	11 f4       	brne	.+4      	; 0x18f8 <__floatsisf+0x36>
    18f4:	60 ff       	sbrs	r22, 0
    18f6:	1b c0       	rjmp	.+54     	; 0x192e <__floatsisf+0x6c>
    18f8:	6f 5f       	subi	r22, 0xFF	; 255
    18fa:	7f 4f       	sbci	r23, 0xFF	; 255
    18fc:	8f 4f       	sbci	r24, 0xFF	; 255
    18fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1900:	16 c0       	rjmp	.+44     	; 0x192e <__floatsisf+0x6c>
    1902:	88 23       	and	r24, r24
    1904:	11 f0       	breq	.+4      	; 0x190a <__floatsisf+0x48>
    1906:	96 e9       	ldi	r25, 0x96	; 150
    1908:	11 c0       	rjmp	.+34     	; 0x192c <__floatsisf+0x6a>
    190a:	77 23       	and	r23, r23
    190c:	21 f0       	breq	.+8      	; 0x1916 <__floatsisf+0x54>
    190e:	9e e8       	ldi	r25, 0x8E	; 142
    1910:	87 2f       	mov	r24, r23
    1912:	76 2f       	mov	r23, r22
    1914:	05 c0       	rjmp	.+10     	; 0x1920 <__floatsisf+0x5e>
    1916:	66 23       	and	r22, r22
    1918:	71 f0       	breq	.+28     	; 0x1936 <__floatsisf+0x74>
    191a:	96 e8       	ldi	r25, 0x86	; 134
    191c:	86 2f       	mov	r24, r22
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	2a f0       	brmi	.+10     	; 0x192e <__floatsisf+0x6c>
    1924:	9a 95       	dec	r25
    1926:	66 0f       	add	r22, r22
    1928:	77 1f       	adc	r23, r23
    192a:	88 1f       	adc	r24, r24
    192c:	da f7       	brpl	.-10     	; 0x1924 <__floatsisf+0x62>
    192e:	88 0f       	add	r24, r24
    1930:	96 95       	lsr	r25
    1932:	87 95       	ror	r24
    1934:	97 f9       	bld	r25, 7
    1936:	08 95       	ret

00001938 <__fp_inf>:
    1938:	97 f9       	bld	r25, 7
    193a:	9f 67       	ori	r25, 0x7F	; 127
    193c:	80 e8       	ldi	r24, 0x80	; 128
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	60 e0       	ldi	r22, 0x00	; 0
    1942:	08 95       	ret

00001944 <__fp_nan>:
    1944:	9f ef       	ldi	r25, 0xFF	; 255
    1946:	80 ec       	ldi	r24, 0xC0	; 192
    1948:	08 95       	ret

0000194a <__fp_powser>:
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	1f 93       	push	r17
    1950:	0f 93       	push	r16
    1952:	ff 92       	push	r15
    1954:	ef 92       	push	r14
    1956:	df 92       	push	r13
    1958:	7b 01       	movw	r14, r22
    195a:	8c 01       	movw	r16, r24
    195c:	68 94       	set
    195e:	05 c0       	rjmp	.+10     	; 0x196a <__fp_powser+0x20>
    1960:	da 2e       	mov	r13, r26
    1962:	ef 01       	movw	r28, r30
    1964:	72 d0       	rcall	.+228    	; 0x1a4a <__mulsf3x>
    1966:	fe 01       	movw	r30, r28
    1968:	e8 94       	clt
    196a:	a5 91       	lpm	r26, Z+
    196c:	25 91       	lpm	r18, Z+
    196e:	35 91       	lpm	r19, Z+
    1970:	45 91       	lpm	r20, Z+
    1972:	55 91       	lpm	r21, Z+
    1974:	ae f3       	brts	.-22     	; 0x1960 <__fp_powser+0x16>
    1976:	ef 01       	movw	r28, r30
    1978:	16 d1       	rcall	.+556    	; 0x1ba6 <__addsf3x>
    197a:	fe 01       	movw	r30, r28
    197c:	97 01       	movw	r18, r14
    197e:	a8 01       	movw	r20, r16
    1980:	da 94       	dec	r13
    1982:	79 f7       	brne	.-34     	; 0x1962 <__fp_powser+0x18>
    1984:	df 90       	pop	r13
    1986:	ef 90       	pop	r14
    1988:	ff 90       	pop	r15
    198a:	0f 91       	pop	r16
    198c:	1f 91       	pop	r17
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <__fp_pscA>:
    1994:	00 24       	eor	r0, r0
    1996:	0a 94       	dec	r0
    1998:	16 16       	cp	r1, r22
    199a:	17 06       	cpc	r1, r23
    199c:	18 06       	cpc	r1, r24
    199e:	09 06       	cpc	r0, r25
    19a0:	08 95       	ret

000019a2 <__fp_pscB>:
    19a2:	00 24       	eor	r0, r0
    19a4:	0a 94       	dec	r0
    19a6:	12 16       	cp	r1, r18
    19a8:	13 06       	cpc	r1, r19
    19aa:	14 06       	cpc	r1, r20
    19ac:	05 06       	cpc	r0, r21
    19ae:	08 95       	ret

000019b0 <__fp_round>:
    19b0:	09 2e       	mov	r0, r25
    19b2:	03 94       	inc	r0
    19b4:	00 0c       	add	r0, r0
    19b6:	11 f4       	brne	.+4      	; 0x19bc <__fp_round+0xc>
    19b8:	88 23       	and	r24, r24
    19ba:	52 f0       	brmi	.+20     	; 0x19d0 <__fp_round+0x20>
    19bc:	bb 0f       	add	r27, r27
    19be:	40 f4       	brcc	.+16     	; 0x19d0 <__fp_round+0x20>
    19c0:	bf 2b       	or	r27, r31
    19c2:	11 f4       	brne	.+4      	; 0x19c8 <__fp_round+0x18>
    19c4:	60 ff       	sbrs	r22, 0
    19c6:	04 c0       	rjmp	.+8      	; 0x19d0 <__fp_round+0x20>
    19c8:	6f 5f       	subi	r22, 0xFF	; 255
    19ca:	7f 4f       	sbci	r23, 0xFF	; 255
    19cc:	8f 4f       	sbci	r24, 0xFF	; 255
    19ce:	9f 4f       	sbci	r25, 0xFF	; 255
    19d0:	08 95       	ret

000019d2 <__fp_split3>:
    19d2:	57 fd       	sbrc	r21, 7
    19d4:	90 58       	subi	r25, 0x80	; 128
    19d6:	44 0f       	add	r20, r20
    19d8:	55 1f       	adc	r21, r21
    19da:	59 f0       	breq	.+22     	; 0x19f2 <__fp_splitA+0x10>
    19dc:	5f 3f       	cpi	r21, 0xFF	; 255
    19de:	71 f0       	breq	.+28     	; 0x19fc <__fp_splitA+0x1a>
    19e0:	47 95       	ror	r20

000019e2 <__fp_splitA>:
    19e2:	88 0f       	add	r24, r24
    19e4:	97 fb       	bst	r25, 7
    19e6:	99 1f       	adc	r25, r25
    19e8:	61 f0       	breq	.+24     	; 0x1a02 <__fp_splitA+0x20>
    19ea:	9f 3f       	cpi	r25, 0xFF	; 255
    19ec:	79 f0       	breq	.+30     	; 0x1a0c <__fp_splitA+0x2a>
    19ee:	87 95       	ror	r24
    19f0:	08 95       	ret
    19f2:	12 16       	cp	r1, r18
    19f4:	13 06       	cpc	r1, r19
    19f6:	14 06       	cpc	r1, r20
    19f8:	55 1f       	adc	r21, r21
    19fa:	f2 cf       	rjmp	.-28     	; 0x19e0 <__fp_split3+0xe>
    19fc:	46 95       	lsr	r20
    19fe:	f1 df       	rcall	.-30     	; 0x19e2 <__fp_splitA>
    1a00:	08 c0       	rjmp	.+16     	; 0x1a12 <__fp_splitA+0x30>
    1a02:	16 16       	cp	r1, r22
    1a04:	17 06       	cpc	r1, r23
    1a06:	18 06       	cpc	r1, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	f1 cf       	rjmp	.-30     	; 0x19ee <__fp_splitA+0xc>
    1a0c:	86 95       	lsr	r24
    1a0e:	71 05       	cpc	r23, r1
    1a10:	61 05       	cpc	r22, r1
    1a12:	08 94       	sec
    1a14:	08 95       	ret

00001a16 <__fp_zero>:
    1a16:	e8 94       	clt

00001a18 <__fp_szero>:
    1a18:	bb 27       	eor	r27, r27
    1a1a:	66 27       	eor	r22, r22
    1a1c:	77 27       	eor	r23, r23
    1a1e:	cb 01       	movw	r24, r22
    1a20:	97 f9       	bld	r25, 7
    1a22:	08 95       	ret

00001a24 <inverse>:
    1a24:	9b 01       	movw	r18, r22
    1a26:	ac 01       	movw	r20, r24
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	70 e0       	ldi	r23, 0x00	; 0
    1a2c:	80 e8       	ldi	r24, 0x80	; 128
    1a2e:	9f e3       	ldi	r25, 0x3F	; 63
    1a30:	0d c1       	rjmp	.+538    	; 0x1c4c <__divsf3>

00001a32 <__mulsf3>:
    1a32:	0b d0       	rcall	.+22     	; 0x1a4a <__mulsf3x>
    1a34:	bd cf       	rjmp	.-134    	; 0x19b0 <__fp_round>
    1a36:	ae df       	rcall	.-164    	; 0x1994 <__fp_pscA>
    1a38:	28 f0       	brcs	.+10     	; 0x1a44 <__mulsf3+0x12>
    1a3a:	b3 df       	rcall	.-154    	; 0x19a2 <__fp_pscB>
    1a3c:	18 f0       	brcs	.+6      	; 0x1a44 <__mulsf3+0x12>
    1a3e:	95 23       	and	r25, r21
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <__mulsf3+0x12>
    1a42:	7a cf       	rjmp	.-268    	; 0x1938 <__fp_inf>
    1a44:	7f cf       	rjmp	.-258    	; 0x1944 <__fp_nan>
    1a46:	11 24       	eor	r1, r1
    1a48:	e7 cf       	rjmp	.-50     	; 0x1a18 <__fp_szero>

00001a4a <__mulsf3x>:
    1a4a:	c3 df       	rcall	.-122    	; 0x19d2 <__fp_split3>
    1a4c:	a0 f3       	brcs	.-24     	; 0x1a36 <__mulsf3+0x4>

00001a4e <__mulsf3_pse>:
    1a4e:	95 9f       	mul	r25, r21
    1a50:	d1 f3       	breq	.-12     	; 0x1a46 <__mulsf3+0x14>
    1a52:	95 0f       	add	r25, r21
    1a54:	50 e0       	ldi	r21, 0x00	; 0
    1a56:	55 1f       	adc	r21, r21
    1a58:	62 9f       	mul	r22, r18
    1a5a:	f0 01       	movw	r30, r0
    1a5c:	72 9f       	mul	r23, r18
    1a5e:	bb 27       	eor	r27, r27
    1a60:	f0 0d       	add	r31, r0
    1a62:	b1 1d       	adc	r27, r1
    1a64:	63 9f       	mul	r22, r19
    1a66:	aa 27       	eor	r26, r26
    1a68:	f0 0d       	add	r31, r0
    1a6a:	b1 1d       	adc	r27, r1
    1a6c:	aa 1f       	adc	r26, r26
    1a6e:	64 9f       	mul	r22, r20
    1a70:	66 27       	eor	r22, r22
    1a72:	b0 0d       	add	r27, r0
    1a74:	a1 1d       	adc	r26, r1
    1a76:	66 1f       	adc	r22, r22
    1a78:	82 9f       	mul	r24, r18
    1a7a:	22 27       	eor	r18, r18
    1a7c:	b0 0d       	add	r27, r0
    1a7e:	a1 1d       	adc	r26, r1
    1a80:	62 1f       	adc	r22, r18
    1a82:	73 9f       	mul	r23, r19
    1a84:	b0 0d       	add	r27, r0
    1a86:	a1 1d       	adc	r26, r1
    1a88:	62 1f       	adc	r22, r18
    1a8a:	83 9f       	mul	r24, r19
    1a8c:	a0 0d       	add	r26, r0
    1a8e:	61 1d       	adc	r22, r1
    1a90:	22 1f       	adc	r18, r18
    1a92:	74 9f       	mul	r23, r20
    1a94:	33 27       	eor	r19, r19
    1a96:	a0 0d       	add	r26, r0
    1a98:	61 1d       	adc	r22, r1
    1a9a:	23 1f       	adc	r18, r19
    1a9c:	84 9f       	mul	r24, r20
    1a9e:	60 0d       	add	r22, r0
    1aa0:	21 1d       	adc	r18, r1
    1aa2:	82 2f       	mov	r24, r18
    1aa4:	76 2f       	mov	r23, r22
    1aa6:	6a 2f       	mov	r22, r26
    1aa8:	11 24       	eor	r1, r1
    1aaa:	9f 57       	subi	r25, 0x7F	; 127
    1aac:	50 40       	sbci	r21, 0x00	; 0
    1aae:	8a f0       	brmi	.+34     	; 0x1ad2 <__mulsf3_pse+0x84>
    1ab0:	e1 f0       	breq	.+56     	; 0x1aea <__mulsf3_pse+0x9c>
    1ab2:	88 23       	and	r24, r24
    1ab4:	4a f0       	brmi	.+18     	; 0x1ac8 <__mulsf3_pse+0x7a>
    1ab6:	ee 0f       	add	r30, r30
    1ab8:	ff 1f       	adc	r31, r31
    1aba:	bb 1f       	adc	r27, r27
    1abc:	66 1f       	adc	r22, r22
    1abe:	77 1f       	adc	r23, r23
    1ac0:	88 1f       	adc	r24, r24
    1ac2:	91 50       	subi	r25, 0x01	; 1
    1ac4:	50 40       	sbci	r21, 0x00	; 0
    1ac6:	a9 f7       	brne	.-22     	; 0x1ab2 <__mulsf3_pse+0x64>
    1ac8:	9e 3f       	cpi	r25, 0xFE	; 254
    1aca:	51 05       	cpc	r21, r1
    1acc:	70 f0       	brcs	.+28     	; 0x1aea <__mulsf3_pse+0x9c>
    1ace:	34 cf       	rjmp	.-408    	; 0x1938 <__fp_inf>
    1ad0:	a3 cf       	rjmp	.-186    	; 0x1a18 <__fp_szero>
    1ad2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ad4:	ec f3       	brlt	.-6      	; 0x1ad0 <__mulsf3_pse+0x82>
    1ad6:	98 3e       	cpi	r25, 0xE8	; 232
    1ad8:	dc f3       	brlt	.-10     	; 0x1ad0 <__mulsf3_pse+0x82>
    1ada:	86 95       	lsr	r24
    1adc:	77 95       	ror	r23
    1ade:	67 95       	ror	r22
    1ae0:	b7 95       	ror	r27
    1ae2:	f7 95       	ror	r31
    1ae4:	e7 95       	ror	r30
    1ae6:	9f 5f       	subi	r25, 0xFF	; 255
    1ae8:	c1 f7       	brne	.-16     	; 0x1ada <__mulsf3_pse+0x8c>
    1aea:	fe 2b       	or	r31, r30
    1aec:	88 0f       	add	r24, r24
    1aee:	91 1d       	adc	r25, r1
    1af0:	96 95       	lsr	r25
    1af2:	87 95       	ror	r24
    1af4:	97 f9       	bld	r25, 7
    1af6:	08 95       	ret
    1af8:	11 f4       	brne	.+4      	; 0x1afe <__mulsf3_pse+0xb0>
    1afa:	0e f4       	brtc	.+2      	; 0x1afe <__mulsf3_pse+0xb0>
    1afc:	23 cf       	rjmp	.-442    	; 0x1944 <__fp_nan>
    1afe:	a8 c0       	rjmp	.+336    	; 0x1c50 <__fp_mpack>

00001b00 <sqrt>:
    1b00:	70 df       	rcall	.-288    	; 0x19e2 <__fp_splitA>
    1b02:	d0 f3       	brcs	.-12     	; 0x1af8 <__mulsf3_pse+0xaa>
    1b04:	99 23       	and	r25, r25
    1b06:	d9 f3       	breq	.-10     	; 0x1afe <__mulsf3_pse+0xb0>
    1b08:	ce f3       	brts	.-14     	; 0x1afc <__mulsf3_pse+0xae>
    1b0a:	9f 57       	subi	r25, 0x7F	; 127
    1b0c:	55 0b       	sbc	r21, r21
    1b0e:	87 ff       	sbrs	r24, 7
    1b10:	ad d0       	rcall	.+346    	; 0x1c6c <__fp_norm2>
    1b12:	00 24       	eor	r0, r0
    1b14:	a0 e6       	ldi	r26, 0x60	; 96
    1b16:	40 ea       	ldi	r20, 0xA0	; 160
    1b18:	90 01       	movw	r18, r0
    1b1a:	80 58       	subi	r24, 0x80	; 128
    1b1c:	56 95       	lsr	r21
    1b1e:	97 95       	ror	r25
    1b20:	28 f4       	brcc	.+10     	; 0x1b2c <sqrt+0x2c>
    1b22:	80 5c       	subi	r24, 0xC0	; 192
    1b24:	66 0f       	add	r22, r22
    1b26:	77 1f       	adc	r23, r23
    1b28:	88 1f       	adc	r24, r24
    1b2a:	20 f0       	brcs	.+8      	; 0x1b34 <sqrt+0x34>
    1b2c:	26 17       	cp	r18, r22
    1b2e:	37 07       	cpc	r19, r23
    1b30:	48 07       	cpc	r20, r24
    1b32:	30 f4       	brcc	.+12     	; 0x1b40 <sqrt+0x40>
    1b34:	62 1b       	sub	r22, r18
    1b36:	73 0b       	sbc	r23, r19
    1b38:	84 0b       	sbc	r24, r20
    1b3a:	20 29       	or	r18, r0
    1b3c:	31 29       	or	r19, r1
    1b3e:	4a 2b       	or	r20, r26
    1b40:	a6 95       	lsr	r26
    1b42:	17 94       	ror	r1
    1b44:	07 94       	ror	r0
    1b46:	20 25       	eor	r18, r0
    1b48:	31 25       	eor	r19, r1
    1b4a:	4a 27       	eor	r20, r26
    1b4c:	58 f7       	brcc	.-42     	; 0x1b24 <sqrt+0x24>
    1b4e:	66 0f       	add	r22, r22
    1b50:	77 1f       	adc	r23, r23
    1b52:	88 1f       	adc	r24, r24
    1b54:	20 f0       	brcs	.+8      	; 0x1b5e <sqrt+0x5e>
    1b56:	26 17       	cp	r18, r22
    1b58:	37 07       	cpc	r19, r23
    1b5a:	48 07       	cpc	r20, r24
    1b5c:	30 f4       	brcc	.+12     	; 0x1b6a <sqrt+0x6a>
    1b5e:	62 0b       	sbc	r22, r18
    1b60:	73 0b       	sbc	r23, r19
    1b62:	84 0b       	sbc	r24, r20
    1b64:	20 0d       	add	r18, r0
    1b66:	31 1d       	adc	r19, r1
    1b68:	41 1d       	adc	r20, r1
    1b6a:	a0 95       	com	r26
    1b6c:	81 f7       	brne	.-32     	; 0x1b4e <sqrt+0x4e>
    1b6e:	b9 01       	movw	r22, r18
    1b70:	84 2f       	mov	r24, r20
    1b72:	91 58       	subi	r25, 0x81	; 129
    1b74:	88 0f       	add	r24, r24
    1b76:	96 95       	lsr	r25
    1b78:	87 95       	ror	r24
    1b7a:	08 95       	ret

00001b7c <square>:
    1b7c:	9b 01       	movw	r18, r22
    1b7e:	ac 01       	movw	r20, r24
    1b80:	58 cf       	rjmp	.-336    	; 0x1a32 <__mulsf3>

00001b82 <__subsf3>:
    1b82:	50 58       	subi	r21, 0x80	; 128

00001b84 <__addsf3>:
    1b84:	bb 27       	eor	r27, r27
    1b86:	aa 27       	eor	r26, r26
    1b88:	0e d0       	rcall	.+28     	; 0x1ba6 <__addsf3x>
    1b8a:	12 cf       	rjmp	.-476    	; 0x19b0 <__fp_round>
    1b8c:	03 df       	rcall	.-506    	; 0x1994 <__fp_pscA>
    1b8e:	30 f0       	brcs	.+12     	; 0x1b9c <__addsf3+0x18>
    1b90:	08 df       	rcall	.-496    	; 0x19a2 <__fp_pscB>
    1b92:	20 f0       	brcs	.+8      	; 0x1b9c <__addsf3+0x18>
    1b94:	31 f4       	brne	.+12     	; 0x1ba2 <__addsf3+0x1e>
    1b96:	9f 3f       	cpi	r25, 0xFF	; 255
    1b98:	11 f4       	brne	.+4      	; 0x1b9e <__addsf3+0x1a>
    1b9a:	1e f4       	brtc	.+6      	; 0x1ba2 <__addsf3+0x1e>
    1b9c:	d3 ce       	rjmp	.-602    	; 0x1944 <__fp_nan>
    1b9e:	0e f4       	brtc	.+2      	; 0x1ba2 <__addsf3+0x1e>
    1ba0:	e0 95       	com	r30
    1ba2:	e7 fb       	bst	r30, 7
    1ba4:	c9 ce       	rjmp	.-622    	; 0x1938 <__fp_inf>

00001ba6 <__addsf3x>:
    1ba6:	e9 2f       	mov	r30, r25
    1ba8:	14 df       	rcall	.-472    	; 0x19d2 <__fp_split3>
    1baa:	80 f3       	brcs	.-32     	; 0x1b8c <__addsf3+0x8>
    1bac:	ba 17       	cp	r27, r26
    1bae:	62 07       	cpc	r22, r18
    1bb0:	73 07       	cpc	r23, r19
    1bb2:	84 07       	cpc	r24, r20
    1bb4:	95 07       	cpc	r25, r21
    1bb6:	18 f0       	brcs	.+6      	; 0x1bbe <__addsf3x+0x18>
    1bb8:	71 f4       	brne	.+28     	; 0x1bd6 <__addsf3x+0x30>
    1bba:	9e f5       	brtc	.+102    	; 0x1c22 <__addsf3x+0x7c>
    1bbc:	2c cf       	rjmp	.-424    	; 0x1a16 <__fp_zero>
    1bbe:	0e f4       	brtc	.+2      	; 0x1bc2 <__addsf3x+0x1c>
    1bc0:	e0 95       	com	r30
    1bc2:	0b 2e       	mov	r0, r27
    1bc4:	ba 2f       	mov	r27, r26
    1bc6:	a0 2d       	mov	r26, r0
    1bc8:	0b 01       	movw	r0, r22
    1bca:	b9 01       	movw	r22, r18
    1bcc:	90 01       	movw	r18, r0
    1bce:	0c 01       	movw	r0, r24
    1bd0:	ca 01       	movw	r24, r20
    1bd2:	a0 01       	movw	r20, r0
    1bd4:	11 24       	eor	r1, r1
    1bd6:	ff 27       	eor	r31, r31
    1bd8:	59 1b       	sub	r21, r25
    1bda:	99 f0       	breq	.+38     	; 0x1c02 <__addsf3x+0x5c>
    1bdc:	59 3f       	cpi	r21, 0xF9	; 249
    1bde:	50 f4       	brcc	.+20     	; 0x1bf4 <__addsf3x+0x4e>
    1be0:	50 3e       	cpi	r21, 0xE0	; 224
    1be2:	68 f1       	brcs	.+90     	; 0x1c3e <__addsf3x+0x98>
    1be4:	1a 16       	cp	r1, r26
    1be6:	f0 40       	sbci	r31, 0x00	; 0
    1be8:	a2 2f       	mov	r26, r18
    1bea:	23 2f       	mov	r18, r19
    1bec:	34 2f       	mov	r19, r20
    1bee:	44 27       	eor	r20, r20
    1bf0:	58 5f       	subi	r21, 0xF8	; 248
    1bf2:	f3 cf       	rjmp	.-26     	; 0x1bda <__addsf3x+0x34>
    1bf4:	46 95       	lsr	r20
    1bf6:	37 95       	ror	r19
    1bf8:	27 95       	ror	r18
    1bfa:	a7 95       	ror	r26
    1bfc:	f0 40       	sbci	r31, 0x00	; 0
    1bfe:	53 95       	inc	r21
    1c00:	c9 f7       	brne	.-14     	; 0x1bf4 <__addsf3x+0x4e>
    1c02:	7e f4       	brtc	.+30     	; 0x1c22 <__addsf3x+0x7c>
    1c04:	1f 16       	cp	r1, r31
    1c06:	ba 0b       	sbc	r27, r26
    1c08:	62 0b       	sbc	r22, r18
    1c0a:	73 0b       	sbc	r23, r19
    1c0c:	84 0b       	sbc	r24, r20
    1c0e:	ba f0       	brmi	.+46     	; 0x1c3e <__addsf3x+0x98>
    1c10:	91 50       	subi	r25, 0x01	; 1
    1c12:	a1 f0       	breq	.+40     	; 0x1c3c <__addsf3x+0x96>
    1c14:	ff 0f       	add	r31, r31
    1c16:	bb 1f       	adc	r27, r27
    1c18:	66 1f       	adc	r22, r22
    1c1a:	77 1f       	adc	r23, r23
    1c1c:	88 1f       	adc	r24, r24
    1c1e:	c2 f7       	brpl	.-16     	; 0x1c10 <__addsf3x+0x6a>
    1c20:	0e c0       	rjmp	.+28     	; 0x1c3e <__addsf3x+0x98>
    1c22:	ba 0f       	add	r27, r26
    1c24:	62 1f       	adc	r22, r18
    1c26:	73 1f       	adc	r23, r19
    1c28:	84 1f       	adc	r24, r20
    1c2a:	48 f4       	brcc	.+18     	; 0x1c3e <__addsf3x+0x98>
    1c2c:	87 95       	ror	r24
    1c2e:	77 95       	ror	r23
    1c30:	67 95       	ror	r22
    1c32:	b7 95       	ror	r27
    1c34:	f7 95       	ror	r31
    1c36:	9e 3f       	cpi	r25, 0xFE	; 254
    1c38:	08 f0       	brcs	.+2      	; 0x1c3c <__addsf3x+0x96>
    1c3a:	b3 cf       	rjmp	.-154    	; 0x1ba2 <__addsf3+0x1e>
    1c3c:	93 95       	inc	r25
    1c3e:	88 0f       	add	r24, r24
    1c40:	08 f0       	brcs	.+2      	; 0x1c44 <__addsf3x+0x9e>
    1c42:	99 27       	eor	r25, r25
    1c44:	ee 0f       	add	r30, r30
    1c46:	97 95       	ror	r25
    1c48:	87 95       	ror	r24
    1c4a:	08 95       	ret

00001c4c <__divsf3>:
    1c4c:	ac dd       	rcall	.-1192   	; 0x17a6 <__divsf3x>
    1c4e:	b0 ce       	rjmp	.-672    	; 0x19b0 <__fp_round>

00001c50 <__fp_mpack>:
    1c50:	9f 3f       	cpi	r25, 0xFF	; 255
    1c52:	31 f0       	breq	.+12     	; 0x1c60 <__fp_mpack_finite+0xc>

00001c54 <__fp_mpack_finite>:
    1c54:	91 50       	subi	r25, 0x01	; 1
    1c56:	20 f4       	brcc	.+8      	; 0x1c60 <__fp_mpack_finite+0xc>
    1c58:	87 95       	ror	r24
    1c5a:	77 95       	ror	r23
    1c5c:	67 95       	ror	r22
    1c5e:	b7 95       	ror	r27
    1c60:	88 0f       	add	r24, r24
    1c62:	91 1d       	adc	r25, r1
    1c64:	96 95       	lsr	r25
    1c66:	87 95       	ror	r24
    1c68:	97 f9       	bld	r25, 7
    1c6a:	08 95       	ret

00001c6c <__fp_norm2>:
    1c6c:	91 50       	subi	r25, 0x01	; 1
    1c6e:	50 40       	sbci	r21, 0x00	; 0
    1c70:	66 0f       	add	r22, r22
    1c72:	77 1f       	adc	r23, r23
    1c74:	88 1f       	adc	r24, r24
    1c76:	d2 f7       	brpl	.-12     	; 0x1c6c <__fp_norm2>
    1c78:	08 95       	ret

00001c7a <__divmodhi4>:
    1c7a:	97 fb       	bst	r25, 7
    1c7c:	07 2e       	mov	r0, r23
    1c7e:	16 f4       	brtc	.+4      	; 0x1c84 <__divmodhi4+0xa>
    1c80:	00 94       	com	r0
    1c82:	07 d0       	rcall	.+14     	; 0x1c92 <__divmodhi4_neg1>
    1c84:	77 fd       	sbrc	r23, 7
    1c86:	09 d0       	rcall	.+18     	; 0x1c9a <__divmodhi4_neg2>
    1c88:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__udivmodhi4>
    1c8c:	07 fc       	sbrc	r0, 7
    1c8e:	05 d0       	rcall	.+10     	; 0x1c9a <__divmodhi4_neg2>
    1c90:	3e f4       	brtc	.+14     	; 0x1ca0 <__divmodhi4_exit>

00001c92 <__divmodhi4_neg1>:
    1c92:	90 95       	com	r25
    1c94:	81 95       	neg	r24
    1c96:	9f 4f       	sbci	r25, 0xFF	; 255
    1c98:	08 95       	ret

00001c9a <__divmodhi4_neg2>:
    1c9a:	70 95       	com	r23
    1c9c:	61 95       	neg	r22
    1c9e:	7f 4f       	sbci	r23, 0xFF	; 255

00001ca0 <__divmodhi4_exit>:
    1ca0:	08 95       	ret

00001ca2 <__divmodsi4>:
    1ca2:	05 2e       	mov	r0, r21
    1ca4:	97 fb       	bst	r25, 7
    1ca6:	1e f4       	brtc	.+6      	; 0x1cae <__divmodsi4+0xc>
    1ca8:	00 94       	com	r0
    1caa:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__negsi2>
    1cae:	57 fd       	sbrc	r21, 7
    1cb0:	07 d0       	rcall	.+14     	; 0x1cc0 <__divmodsi4_neg2>
    1cb2:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__udivmodsi4>
    1cb6:	07 fc       	sbrc	r0, 7
    1cb8:	03 d0       	rcall	.+6      	; 0x1cc0 <__divmodsi4_neg2>
    1cba:	4e f4       	brtc	.+18     	; 0x1cce <__divmodsi4_exit>
    1cbc:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__negsi2>

00001cc0 <__divmodsi4_neg2>:
    1cc0:	50 95       	com	r21
    1cc2:	40 95       	com	r20
    1cc4:	30 95       	com	r19
    1cc6:	21 95       	neg	r18
    1cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cca:	4f 4f       	sbci	r20, 0xFF	; 255
    1ccc:	5f 4f       	sbci	r21, 0xFF	; 255

00001cce <__divmodsi4_exit>:
    1cce:	08 95       	ret

00001cd0 <__negsi2>:
    1cd0:	90 95       	com	r25
    1cd2:	80 95       	com	r24
    1cd4:	70 95       	com	r23
    1cd6:	61 95       	neg	r22
    1cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cda:	8f 4f       	sbci	r24, 0xFF	; 255
    1cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cde:	08 95       	ret

00001ce0 <__udivmodhi4>:
    1ce0:	aa 1b       	sub	r26, r26
    1ce2:	bb 1b       	sub	r27, r27
    1ce4:	51 e1       	ldi	r21, 0x11	; 17
    1ce6:	07 c0       	rjmp	.+14     	; 0x1cf6 <__udivmodhi4_ep>

00001ce8 <__udivmodhi4_loop>:
    1ce8:	aa 1f       	adc	r26, r26
    1cea:	bb 1f       	adc	r27, r27
    1cec:	a6 17       	cp	r26, r22
    1cee:	b7 07       	cpc	r27, r23
    1cf0:	10 f0       	brcs	.+4      	; 0x1cf6 <__udivmodhi4_ep>
    1cf2:	a6 1b       	sub	r26, r22
    1cf4:	b7 0b       	sbc	r27, r23

00001cf6 <__udivmodhi4_ep>:
    1cf6:	88 1f       	adc	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	5a 95       	dec	r21
    1cfc:	a9 f7       	brne	.-22     	; 0x1ce8 <__udivmodhi4_loop>
    1cfe:	80 95       	com	r24
    1d00:	90 95       	com	r25
    1d02:	bc 01       	movw	r22, r24
    1d04:	cd 01       	movw	r24, r26
    1d06:	08 95       	ret

00001d08 <__udivmodsi4>:
    1d08:	a1 e2       	ldi	r26, 0x21	; 33
    1d0a:	1a 2e       	mov	r1, r26
    1d0c:	aa 1b       	sub	r26, r26
    1d0e:	bb 1b       	sub	r27, r27
    1d10:	fd 01       	movw	r30, r26
    1d12:	0d c0       	rjmp	.+26     	; 0x1d2e <__udivmodsi4_ep>

00001d14 <__udivmodsi4_loop>:
    1d14:	aa 1f       	adc	r26, r26
    1d16:	bb 1f       	adc	r27, r27
    1d18:	ee 1f       	adc	r30, r30
    1d1a:	ff 1f       	adc	r31, r31
    1d1c:	a2 17       	cp	r26, r18
    1d1e:	b3 07       	cpc	r27, r19
    1d20:	e4 07       	cpc	r30, r20
    1d22:	f5 07       	cpc	r31, r21
    1d24:	20 f0       	brcs	.+8      	; 0x1d2e <__udivmodsi4_ep>
    1d26:	a2 1b       	sub	r26, r18
    1d28:	b3 0b       	sbc	r27, r19
    1d2a:	e4 0b       	sbc	r30, r20
    1d2c:	f5 0b       	sbc	r31, r21

00001d2e <__udivmodsi4_ep>:
    1d2e:	66 1f       	adc	r22, r22
    1d30:	77 1f       	adc	r23, r23
    1d32:	88 1f       	adc	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	1a 94       	dec	r1
    1d38:	69 f7       	brne	.-38     	; 0x1d14 <__udivmodsi4_loop>
    1d3a:	60 95       	com	r22
    1d3c:	70 95       	com	r23
    1d3e:	80 95       	com	r24
    1d40:	90 95       	com	r25
    1d42:	9b 01       	movw	r18, r22
    1d44:	ac 01       	movw	r20, r24
    1d46:	bd 01       	movw	r22, r26
    1d48:	cf 01       	movw	r24, r30
    1d4a:	08 95       	ret

00001d4c <malloc>:
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	82 30       	cpi	r24, 0x02	; 2
    1d52:	91 05       	cpc	r25, r1
    1d54:	10 f4       	brcc	.+4      	; 0x1d5a <malloc+0xe>
    1d56:	82 e0       	ldi	r24, 0x02	; 2
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	e0 91 d2 02 	lds	r30, 0x02D2
    1d5e:	f0 91 d3 02 	lds	r31, 0x02D3
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	a0 e0       	ldi	r26, 0x00	; 0
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	30 97       	sbiw	r30, 0x00	; 0
    1d6c:	39 f1       	breq	.+78     	; 0x1dbc <malloc+0x70>
    1d6e:	40 81       	ld	r20, Z
    1d70:	51 81       	ldd	r21, Z+1	; 0x01
    1d72:	48 17       	cp	r20, r24
    1d74:	59 07       	cpc	r21, r25
    1d76:	b8 f0       	brcs	.+46     	; 0x1da6 <malloc+0x5a>
    1d78:	48 17       	cp	r20, r24
    1d7a:	59 07       	cpc	r21, r25
    1d7c:	71 f4       	brne	.+28     	; 0x1d9a <malloc+0x4e>
    1d7e:	82 81       	ldd	r24, Z+2	; 0x02
    1d80:	93 81       	ldd	r25, Z+3	; 0x03
    1d82:	10 97       	sbiw	r26, 0x00	; 0
    1d84:	29 f0       	breq	.+10     	; 0x1d90 <malloc+0x44>
    1d86:	13 96       	adiw	r26, 0x03	; 3
    1d88:	9c 93       	st	X, r25
    1d8a:	8e 93       	st	-X, r24
    1d8c:	12 97       	sbiw	r26, 0x02	; 2
    1d8e:	2c c0       	rjmp	.+88     	; 0x1de8 <malloc+0x9c>
    1d90:	90 93 d3 02 	sts	0x02D3, r25
    1d94:	80 93 d2 02 	sts	0x02D2, r24
    1d98:	27 c0       	rjmp	.+78     	; 0x1de8 <malloc+0x9c>
    1d9a:	21 15       	cp	r18, r1
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	31 f0       	breq	.+12     	; 0x1dac <malloc+0x60>
    1da0:	42 17       	cp	r20, r18
    1da2:	53 07       	cpc	r21, r19
    1da4:	18 f0       	brcs	.+6      	; 0x1dac <malloc+0x60>
    1da6:	a9 01       	movw	r20, r18
    1da8:	db 01       	movw	r26, r22
    1daa:	01 c0       	rjmp	.+2      	; 0x1dae <malloc+0x62>
    1dac:	ef 01       	movw	r28, r30
    1dae:	9a 01       	movw	r18, r20
    1db0:	bd 01       	movw	r22, r26
    1db2:	df 01       	movw	r26, r30
    1db4:	02 80       	ldd	r0, Z+2	; 0x02
    1db6:	f3 81       	ldd	r31, Z+3	; 0x03
    1db8:	e0 2d       	mov	r30, r0
    1dba:	d7 cf       	rjmp	.-82     	; 0x1d6a <malloc+0x1e>
    1dbc:	21 15       	cp	r18, r1
    1dbe:	31 05       	cpc	r19, r1
    1dc0:	f9 f0       	breq	.+62     	; 0x1e00 <malloc+0xb4>
    1dc2:	28 1b       	sub	r18, r24
    1dc4:	39 0b       	sbc	r19, r25
    1dc6:	24 30       	cpi	r18, 0x04	; 4
    1dc8:	31 05       	cpc	r19, r1
    1dca:	80 f4       	brcc	.+32     	; 0x1dec <malloc+0xa0>
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd0:	61 15       	cp	r22, r1
    1dd2:	71 05       	cpc	r23, r1
    1dd4:	21 f0       	breq	.+8      	; 0x1dde <malloc+0x92>
    1dd6:	fb 01       	movw	r30, r22
    1dd8:	93 83       	std	Z+3, r25	; 0x03
    1dda:	82 83       	std	Z+2, r24	; 0x02
    1ddc:	04 c0       	rjmp	.+8      	; 0x1de6 <malloc+0x9a>
    1dde:	90 93 d3 02 	sts	0x02D3, r25
    1de2:	80 93 d2 02 	sts	0x02D2, r24
    1de6:	fe 01       	movw	r30, r28
    1de8:	32 96       	adiw	r30, 0x02	; 2
    1dea:	44 c0       	rjmp	.+136    	; 0x1e74 <malloc+0x128>
    1dec:	fe 01       	movw	r30, r28
    1dee:	e2 0f       	add	r30, r18
    1df0:	f3 1f       	adc	r31, r19
    1df2:	81 93       	st	Z+, r24
    1df4:	91 93       	st	Z+, r25
    1df6:	22 50       	subi	r18, 0x02	; 2
    1df8:	31 09       	sbc	r19, r1
    1dfa:	39 83       	std	Y+1, r19	; 0x01
    1dfc:	28 83       	st	Y, r18
    1dfe:	3a c0       	rjmp	.+116    	; 0x1e74 <malloc+0x128>
    1e00:	20 91 d0 02 	lds	r18, 0x02D0
    1e04:	30 91 d1 02 	lds	r19, 0x02D1
    1e08:	23 2b       	or	r18, r19
    1e0a:	41 f4       	brne	.+16     	; 0x1e1c <malloc+0xd0>
    1e0c:	20 91 02 01 	lds	r18, 0x0102
    1e10:	30 91 03 01 	lds	r19, 0x0103
    1e14:	30 93 d1 02 	sts	0x02D1, r19
    1e18:	20 93 d0 02 	sts	0x02D0, r18
    1e1c:	20 91 00 01 	lds	r18, 0x0100
    1e20:	30 91 01 01 	lds	r19, 0x0101
    1e24:	21 15       	cp	r18, r1
    1e26:	31 05       	cpc	r19, r1
    1e28:	41 f4       	brne	.+16     	; 0x1e3a <malloc+0xee>
    1e2a:	2d b7       	in	r18, 0x3d	; 61
    1e2c:	3e b7       	in	r19, 0x3e	; 62
    1e2e:	40 91 04 01 	lds	r20, 0x0104
    1e32:	50 91 05 01 	lds	r21, 0x0105
    1e36:	24 1b       	sub	r18, r20
    1e38:	35 0b       	sbc	r19, r21
    1e3a:	e0 91 d0 02 	lds	r30, 0x02D0
    1e3e:	f0 91 d1 02 	lds	r31, 0x02D1
    1e42:	e2 17       	cp	r30, r18
    1e44:	f3 07       	cpc	r31, r19
    1e46:	a0 f4       	brcc	.+40     	; 0x1e70 <malloc+0x124>
    1e48:	2e 1b       	sub	r18, r30
    1e4a:	3f 0b       	sbc	r19, r31
    1e4c:	28 17       	cp	r18, r24
    1e4e:	39 07       	cpc	r19, r25
    1e50:	78 f0       	brcs	.+30     	; 0x1e70 <malloc+0x124>
    1e52:	ac 01       	movw	r20, r24
    1e54:	4e 5f       	subi	r20, 0xFE	; 254
    1e56:	5f 4f       	sbci	r21, 0xFF	; 255
    1e58:	24 17       	cp	r18, r20
    1e5a:	35 07       	cpc	r19, r21
    1e5c:	48 f0       	brcs	.+18     	; 0x1e70 <malloc+0x124>
    1e5e:	4e 0f       	add	r20, r30
    1e60:	5f 1f       	adc	r21, r31
    1e62:	50 93 d1 02 	sts	0x02D1, r21
    1e66:	40 93 d0 02 	sts	0x02D0, r20
    1e6a:	81 93       	st	Z+, r24
    1e6c:	91 93       	st	Z+, r25
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <malloc+0x128>
    1e70:	e0 e0       	ldi	r30, 0x00	; 0
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	cf 01       	movw	r24, r30
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	08 95       	ret

00001e7c <free>:
    1e7c:	cf 93       	push	r28
    1e7e:	df 93       	push	r29
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <free+0xa>
    1e84:	87 c0       	rjmp	.+270    	; 0x1f94 <free+0x118>
    1e86:	fc 01       	movw	r30, r24
    1e88:	32 97       	sbiw	r30, 0x02	; 2
    1e8a:	13 82       	std	Z+3, r1	; 0x03
    1e8c:	12 82       	std	Z+2, r1	; 0x02
    1e8e:	c0 91 d2 02 	lds	r28, 0x02D2
    1e92:	d0 91 d3 02 	lds	r29, 0x02D3
    1e96:	20 97       	sbiw	r28, 0x00	; 0
    1e98:	81 f4       	brne	.+32     	; 0x1eba <free+0x3e>
    1e9a:	20 81       	ld	r18, Z
    1e9c:	31 81       	ldd	r19, Z+1	; 0x01
    1e9e:	28 0f       	add	r18, r24
    1ea0:	39 1f       	adc	r19, r25
    1ea2:	80 91 d0 02 	lds	r24, 0x02D0
    1ea6:	90 91 d1 02 	lds	r25, 0x02D1
    1eaa:	82 17       	cp	r24, r18
    1eac:	93 07       	cpc	r25, r19
    1eae:	79 f5       	brne	.+94     	; 0x1f0e <free+0x92>
    1eb0:	f0 93 d1 02 	sts	0x02D1, r31
    1eb4:	e0 93 d0 02 	sts	0x02D0, r30
    1eb8:	6d c0       	rjmp	.+218    	; 0x1f94 <free+0x118>
    1eba:	de 01       	movw	r26, r28
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	ae 17       	cp	r26, r30
    1ec2:	bf 07       	cpc	r27, r31
    1ec4:	50 f4       	brcc	.+20     	; 0x1eda <free+0x5e>
    1ec6:	12 96       	adiw	r26, 0x02	; 2
    1ec8:	4d 91       	ld	r20, X+
    1eca:	5c 91       	ld	r21, X
    1ecc:	13 97       	sbiw	r26, 0x03	; 3
    1ece:	9d 01       	movw	r18, r26
    1ed0:	41 15       	cp	r20, r1
    1ed2:	51 05       	cpc	r21, r1
    1ed4:	09 f1       	breq	.+66     	; 0x1f18 <free+0x9c>
    1ed6:	da 01       	movw	r26, r20
    1ed8:	f3 cf       	rjmp	.-26     	; 0x1ec0 <free+0x44>
    1eda:	b3 83       	std	Z+3, r27	; 0x03
    1edc:	a2 83       	std	Z+2, r26	; 0x02
    1ede:	40 81       	ld	r20, Z
    1ee0:	51 81       	ldd	r21, Z+1	; 0x01
    1ee2:	84 0f       	add	r24, r20
    1ee4:	95 1f       	adc	r25, r21
    1ee6:	8a 17       	cp	r24, r26
    1ee8:	9b 07       	cpc	r25, r27
    1eea:	71 f4       	brne	.+28     	; 0x1f08 <free+0x8c>
    1eec:	8d 91       	ld	r24, X+
    1eee:	9c 91       	ld	r25, X
    1ef0:	11 97       	sbiw	r26, 0x01	; 1
    1ef2:	84 0f       	add	r24, r20
    1ef4:	95 1f       	adc	r25, r21
    1ef6:	02 96       	adiw	r24, 0x02	; 2
    1ef8:	91 83       	std	Z+1, r25	; 0x01
    1efa:	80 83       	st	Z, r24
    1efc:	12 96       	adiw	r26, 0x02	; 2
    1efe:	8d 91       	ld	r24, X+
    1f00:	9c 91       	ld	r25, X
    1f02:	13 97       	sbiw	r26, 0x03	; 3
    1f04:	93 83       	std	Z+3, r25	; 0x03
    1f06:	82 83       	std	Z+2, r24	; 0x02
    1f08:	21 15       	cp	r18, r1
    1f0a:	31 05       	cpc	r19, r1
    1f0c:	29 f4       	brne	.+10     	; 0x1f18 <free+0x9c>
    1f0e:	f0 93 d3 02 	sts	0x02D3, r31
    1f12:	e0 93 d2 02 	sts	0x02D2, r30
    1f16:	3e c0       	rjmp	.+124    	; 0x1f94 <free+0x118>
    1f18:	d9 01       	movw	r26, r18
    1f1a:	13 96       	adiw	r26, 0x03	; 3
    1f1c:	fc 93       	st	X, r31
    1f1e:	ee 93       	st	-X, r30
    1f20:	12 97       	sbiw	r26, 0x02	; 2
    1f22:	4d 91       	ld	r20, X+
    1f24:	5d 91       	ld	r21, X+
    1f26:	a4 0f       	add	r26, r20
    1f28:	b5 1f       	adc	r27, r21
    1f2a:	ea 17       	cp	r30, r26
    1f2c:	fb 07       	cpc	r31, r27
    1f2e:	79 f4       	brne	.+30     	; 0x1f4e <free+0xd2>
    1f30:	80 81       	ld	r24, Z
    1f32:	91 81       	ldd	r25, Z+1	; 0x01
    1f34:	84 0f       	add	r24, r20
    1f36:	95 1f       	adc	r25, r21
    1f38:	02 96       	adiw	r24, 0x02	; 2
    1f3a:	d9 01       	movw	r26, r18
    1f3c:	11 96       	adiw	r26, 0x01	; 1
    1f3e:	9c 93       	st	X, r25
    1f40:	8e 93       	st	-X, r24
    1f42:	82 81       	ldd	r24, Z+2	; 0x02
    1f44:	93 81       	ldd	r25, Z+3	; 0x03
    1f46:	13 96       	adiw	r26, 0x03	; 3
    1f48:	9c 93       	st	X, r25
    1f4a:	8e 93       	st	-X, r24
    1f4c:	12 97       	sbiw	r26, 0x02	; 2
    1f4e:	e0 e0       	ldi	r30, 0x00	; 0
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	9b 81       	ldd	r25, Y+3	; 0x03
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	19 f0       	breq	.+6      	; 0x1f60 <free+0xe4>
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	ec 01       	movw	r28, r24
    1f5e:	f9 cf       	rjmp	.-14     	; 0x1f52 <free+0xd6>
    1f60:	ce 01       	movw	r24, r28
    1f62:	02 96       	adiw	r24, 0x02	; 2
    1f64:	28 81       	ld	r18, Y
    1f66:	39 81       	ldd	r19, Y+1	; 0x01
    1f68:	82 0f       	add	r24, r18
    1f6a:	93 1f       	adc	r25, r19
    1f6c:	20 91 d0 02 	lds	r18, 0x02D0
    1f70:	30 91 d1 02 	lds	r19, 0x02D1
    1f74:	28 17       	cp	r18, r24
    1f76:	39 07       	cpc	r19, r25
    1f78:	69 f4       	brne	.+26     	; 0x1f94 <free+0x118>
    1f7a:	30 97       	sbiw	r30, 0x00	; 0
    1f7c:	29 f4       	brne	.+10     	; 0x1f88 <free+0x10c>
    1f7e:	10 92 d3 02 	sts	0x02D3, r1
    1f82:	10 92 d2 02 	sts	0x02D2, r1
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <free+0x110>
    1f88:	13 82       	std	Z+3, r1	; 0x03
    1f8a:	12 82       	std	Z+2, r1	; 0x02
    1f8c:	d0 93 d1 02 	sts	0x02D1, r29
    1f90:	c0 93 d0 02 	sts	0x02D0, r28
    1f94:	df 91       	pop	r29
    1f96:	cf 91       	pop	r28
    1f98:	08 95       	ret

00001f9a <realloc>:
    1f9a:	a0 e0       	ldi	r26, 0x00	; 0
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e3 ed       	ldi	r30, 0xD3	; 211
    1fa0:	ff e0       	ldi	r31, 0x0F	; 15
    1fa2:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <__prologue_saves__+0x8>
    1fa6:	ec 01       	movw	r28, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	20 97       	sbiw	r28, 0x00	; 0
    1fac:	19 f4       	brne	.+6      	; 0x1fb4 <realloc+0x1a>
    1fae:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <malloc>
    1fb2:	b8 c0       	rjmp	.+368    	; 0x2124 <realloc+0x18a>
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	e6 0f       	add	r30, r22
    1fb8:	f7 1f       	adc	r31, r23
    1fba:	9e 01       	movw	r18, r28
    1fbc:	22 50       	subi	r18, 0x02	; 2
    1fbe:	31 09       	sbc	r19, r1
    1fc0:	e2 17       	cp	r30, r18
    1fc2:	f3 07       	cpc	r31, r19
    1fc4:	08 f4       	brcc	.+2      	; 0x1fc8 <realloc+0x2e>
    1fc6:	ac c0       	rjmp	.+344    	; 0x2120 <realloc+0x186>
    1fc8:	d9 01       	movw	r26, r18
    1fca:	0d 91       	ld	r16, X+
    1fcc:	1c 91       	ld	r17, X
    1fce:	11 97       	sbiw	r26, 0x01	; 1
    1fd0:	06 17       	cp	r16, r22
    1fd2:	17 07       	cpc	r17, r23
    1fd4:	b8 f0       	brcs	.+46     	; 0x2004 <realloc+0x6a>
    1fd6:	05 30       	cpi	r16, 0x05	; 5
    1fd8:	11 05       	cpc	r17, r1
    1fda:	08 f4       	brcc	.+2      	; 0x1fde <realloc+0x44>
    1fdc:	9f c0       	rjmp	.+318    	; 0x211c <realloc+0x182>
    1fde:	a8 01       	movw	r20, r16
    1fe0:	44 50       	subi	r20, 0x04	; 4
    1fe2:	51 09       	sbc	r21, r1
    1fe4:	46 17       	cp	r20, r22
    1fe6:	57 07       	cpc	r21, r23
    1fe8:	08 f4       	brcc	.+2      	; 0x1fec <realloc+0x52>
    1fea:	98 c0       	rjmp	.+304    	; 0x211c <realloc+0x182>
    1fec:	02 50       	subi	r16, 0x02	; 2
    1fee:	11 09       	sbc	r17, r1
    1ff0:	06 1b       	sub	r16, r22
    1ff2:	17 0b       	sbc	r17, r23
    1ff4:	01 93       	st	Z+, r16
    1ff6:	11 93       	st	Z+, r17
    1ff8:	6d 93       	st	X+, r22
    1ffa:	7c 93       	st	X, r23
    1ffc:	cf 01       	movw	r24, r30
    1ffe:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <free>
    2002:	8c c0       	rjmp	.+280    	; 0x211c <realloc+0x182>
    2004:	5b 01       	movw	r10, r22
    2006:	a0 1a       	sub	r10, r16
    2008:	b1 0a       	sbc	r11, r17
    200a:	4e 01       	movw	r8, r28
    200c:	80 0e       	add	r8, r16
    200e:	91 1e       	adc	r9, r17
    2010:	a0 91 d2 02 	lds	r26, 0x02D2
    2014:	b0 91 d3 02 	lds	r27, 0x02D3
    2018:	61 2c       	mov	r6, r1
    201a:	71 2c       	mov	r7, r1
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	10 97       	sbiw	r26, 0x00	; 0
    2022:	09 f4       	brne	.+2      	; 0x2026 <realloc+0x8c>
    2024:	49 c0       	rjmp	.+146    	; 0x20b8 <realloc+0x11e>
    2026:	a8 15       	cp	r26, r8
    2028:	b9 05       	cpc	r27, r9
    202a:	c9 f5       	brne	.+114    	; 0x209e <realloc+0x104>
    202c:	ed 90       	ld	r14, X+
    202e:	fc 90       	ld	r15, X
    2030:	11 97       	sbiw	r26, 0x01	; 1
    2032:	67 01       	movw	r12, r14
    2034:	42 e0       	ldi	r20, 0x02	; 2
    2036:	c4 0e       	add	r12, r20
    2038:	d1 1c       	adc	r13, r1
    203a:	ca 14       	cp	r12, r10
    203c:	db 04       	cpc	r13, r11
    203e:	78 f1       	brcs	.+94     	; 0x209e <realloc+0x104>
    2040:	47 01       	movw	r8, r14
    2042:	8a 18       	sub	r8, r10
    2044:	9b 08       	sbc	r9, r11
    2046:	64 01       	movw	r12, r8
    2048:	42 e0       	ldi	r20, 0x02	; 2
    204a:	c4 0e       	add	r12, r20
    204c:	d1 1c       	adc	r13, r1
    204e:	12 96       	adiw	r26, 0x02	; 2
    2050:	bc 90       	ld	r11, X
    2052:	12 97       	sbiw	r26, 0x02	; 2
    2054:	13 96       	adiw	r26, 0x03	; 3
    2056:	ac 91       	ld	r26, X
    2058:	b5 e0       	ldi	r27, 0x05	; 5
    205a:	cb 16       	cp	r12, r27
    205c:	d1 04       	cpc	r13, r1
    205e:	40 f0       	brcs	.+16     	; 0x2070 <realloc+0xd6>
    2060:	b2 82       	std	Z+2, r11	; 0x02
    2062:	a3 83       	std	Z+3, r26	; 0x03
    2064:	91 82       	std	Z+1, r9	; 0x01
    2066:	80 82       	st	Z, r8
    2068:	d9 01       	movw	r26, r18
    206a:	8d 93       	st	X+, r24
    206c:	9c 93       	st	X, r25
    206e:	09 c0       	rjmp	.+18     	; 0x2082 <realloc+0xe8>
    2070:	0e 5f       	subi	r16, 0xFE	; 254
    2072:	1f 4f       	sbci	r17, 0xFF	; 255
    2074:	0e 0d       	add	r16, r14
    2076:	1f 1d       	adc	r17, r15
    2078:	f9 01       	movw	r30, r18
    207a:	11 83       	std	Z+1, r17	; 0x01
    207c:	00 83       	st	Z, r16
    207e:	eb 2d       	mov	r30, r11
    2080:	fa 2f       	mov	r31, r26
    2082:	61 15       	cp	r22, r1
    2084:	71 05       	cpc	r23, r1
    2086:	31 f0       	breq	.+12     	; 0x2094 <realloc+0xfa>
    2088:	db 01       	movw	r26, r22
    208a:	13 96       	adiw	r26, 0x03	; 3
    208c:	fc 93       	st	X, r31
    208e:	ee 93       	st	-X, r30
    2090:	12 97       	sbiw	r26, 0x02	; 2
    2092:	44 c0       	rjmp	.+136    	; 0x211c <realloc+0x182>
    2094:	f0 93 d3 02 	sts	0x02D3, r31
    2098:	e0 93 d2 02 	sts	0x02D2, r30
    209c:	3f c0       	rjmp	.+126    	; 0x211c <realloc+0x182>
    209e:	6d 91       	ld	r22, X+
    20a0:	7c 91       	ld	r23, X
    20a2:	11 97       	sbiw	r26, 0x01	; 1
    20a4:	66 16       	cp	r6, r22
    20a6:	77 06       	cpc	r7, r23
    20a8:	08 f4       	brcc	.+2      	; 0x20ac <realloc+0x112>
    20aa:	3b 01       	movw	r6, r22
    20ac:	bd 01       	movw	r22, r26
    20ae:	12 96       	adiw	r26, 0x02	; 2
    20b0:	0d 90       	ld	r0, X+
    20b2:	bc 91       	ld	r27, X
    20b4:	a0 2d       	mov	r26, r0
    20b6:	b4 cf       	rjmp	.-152    	; 0x2020 <realloc+0x86>
    20b8:	60 91 d0 02 	lds	r22, 0x02D0
    20bc:	70 91 d1 02 	lds	r23, 0x02D1
    20c0:	68 15       	cp	r22, r8
    20c2:	79 05       	cpc	r23, r9
    20c4:	e9 f4       	brne	.+58     	; 0x2100 <realloc+0x166>
    20c6:	68 16       	cp	r6, r24
    20c8:	79 06       	cpc	r7, r25
    20ca:	d0 f4       	brcc	.+52     	; 0x2100 <realloc+0x166>
    20cc:	40 91 00 01 	lds	r20, 0x0100
    20d0:	50 91 01 01 	lds	r21, 0x0101
    20d4:	41 15       	cp	r20, r1
    20d6:	51 05       	cpc	r21, r1
    20d8:	41 f4       	brne	.+16     	; 0x20ea <realloc+0x150>
    20da:	4d b7       	in	r20, 0x3d	; 61
    20dc:	5e b7       	in	r21, 0x3e	; 62
    20de:	60 91 04 01 	lds	r22, 0x0104
    20e2:	70 91 05 01 	lds	r23, 0x0105
    20e6:	46 1b       	sub	r20, r22
    20e8:	57 0b       	sbc	r21, r23
    20ea:	e4 17       	cp	r30, r20
    20ec:	f5 07       	cpc	r31, r21
    20ee:	c0 f4       	brcc	.+48     	; 0x2120 <realloc+0x186>
    20f0:	f0 93 d1 02 	sts	0x02D1, r31
    20f4:	e0 93 d0 02 	sts	0x02D0, r30
    20f8:	f9 01       	movw	r30, r18
    20fa:	91 83       	std	Z+1, r25	; 0x01
    20fc:	80 83       	st	Z, r24
    20fe:	0e c0       	rjmp	.+28     	; 0x211c <realloc+0x182>
    2100:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <malloc>
    2104:	7c 01       	movw	r14, r24
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	59 f0       	breq	.+22     	; 0x2120 <realloc+0x186>
    210a:	a8 01       	movw	r20, r16
    210c:	be 01       	movw	r22, r28
    210e:	0e 94 97 10 	call	0x212e	; 0x212e <memcpy>
    2112:	ce 01       	movw	r24, r28
    2114:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <free>
    2118:	c7 01       	movw	r24, r14
    211a:	04 c0       	rjmp	.+8      	; 0x2124 <realloc+0x18a>
    211c:	ce 01       	movw	r24, r28
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <realloc+0x18a>
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	ee e0       	ldi	r30, 0x0E	; 14
    212a:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__epilogue_restores__+0x8>

0000212e <memcpy>:
    212e:	fb 01       	movw	r30, r22
    2130:	dc 01       	movw	r26, r24
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <memcpy+0xa>
    2134:	01 90       	ld	r0, Z+
    2136:	0d 92       	st	X+, r0
    2138:	41 50       	subi	r20, 0x01	; 1
    213a:	50 40       	sbci	r21, 0x00	; 0
    213c:	d8 f7       	brcc	.-10     	; 0x2134 <memcpy+0x6>
    213e:	08 95       	ret

00002140 <fdevopen>:
    2140:	0f 93       	push	r16
    2142:	1f 93       	push	r17
    2144:	cf 93       	push	r28
    2146:	df 93       	push	r29
    2148:	ec 01       	movw	r28, r24
    214a:	8b 01       	movw	r16, r22
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	31 f4       	brne	.+12     	; 0x215c <fdevopen+0x1c>
    2150:	61 15       	cp	r22, r1
    2152:	71 05       	cpc	r23, r1
    2154:	19 f4       	brne	.+6      	; 0x215c <fdevopen+0x1c>
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	38 c0       	rjmp	.+112    	; 0x21cc <fdevopen+0x8c>
    215c:	6e e0       	ldi	r22, 0x0E	; 14
    215e:	70 e0       	ldi	r23, 0x00	; 0
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	0e 94 fe 12 	call	0x25fc	; 0x25fc <calloc>
    2168:	fc 01       	movw	r30, r24
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	a1 f3       	breq	.-24     	; 0x2156 <fdevopen+0x16>
    216e:	80 e8       	ldi	r24, 0x80	; 128
    2170:	83 83       	std	Z+3, r24	; 0x03
    2172:	01 15       	cp	r16, r1
    2174:	11 05       	cpc	r17, r1
    2176:	71 f0       	breq	.+28     	; 0x2194 <fdevopen+0x54>
    2178:	13 87       	std	Z+11, r17	; 0x0b
    217a:	02 87       	std	Z+10, r16	; 0x0a
    217c:	81 e8       	ldi	r24, 0x81	; 129
    217e:	83 83       	std	Z+3, r24	; 0x03
    2180:	80 91 d4 02 	lds	r24, 0x02D4
    2184:	90 91 d5 02 	lds	r25, 0x02D5
    2188:	89 2b       	or	r24, r25
    218a:	21 f4       	brne	.+8      	; 0x2194 <fdevopen+0x54>
    218c:	f0 93 d5 02 	sts	0x02D5, r31
    2190:	e0 93 d4 02 	sts	0x02D4, r30
    2194:	20 97       	sbiw	r28, 0x00	; 0
    2196:	c9 f0       	breq	.+50     	; 0x21ca <fdevopen+0x8a>
    2198:	d1 87       	std	Z+9, r29	; 0x09
    219a:	c0 87       	std	Z+8, r28	; 0x08
    219c:	83 81       	ldd	r24, Z+3	; 0x03
    219e:	82 60       	ori	r24, 0x02	; 2
    21a0:	83 83       	std	Z+3, r24	; 0x03
    21a2:	80 91 d6 02 	lds	r24, 0x02D6
    21a6:	90 91 d7 02 	lds	r25, 0x02D7
    21aa:	89 2b       	or	r24, r25
    21ac:	71 f4       	brne	.+28     	; 0x21ca <fdevopen+0x8a>
    21ae:	f0 93 d7 02 	sts	0x02D7, r31
    21b2:	e0 93 d6 02 	sts	0x02D6, r30
    21b6:	80 91 d8 02 	lds	r24, 0x02D8
    21ba:	90 91 d9 02 	lds	r25, 0x02D9
    21be:	89 2b       	or	r24, r25
    21c0:	21 f4       	brne	.+8      	; 0x21ca <fdevopen+0x8a>
    21c2:	f0 93 d9 02 	sts	0x02D9, r31
    21c6:	e0 93 d8 02 	sts	0x02D8, r30
    21ca:	cf 01       	movw	r24, r30
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	1f 91       	pop	r17
    21d2:	0f 91       	pop	r16
    21d4:	08 95       	ret

000021d6 <printf>:
    21d6:	a0 e0       	ldi	r26, 0x00	; 0
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e1 ef       	ldi	r30, 0xF1	; 241
    21dc:	f0 e1       	ldi	r31, 0x10	; 16
    21de:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__prologue_saves__+0x20>
    21e2:	fe 01       	movw	r30, r28
    21e4:	35 96       	adiw	r30, 0x05	; 5
    21e6:	61 91       	ld	r22, Z+
    21e8:	71 91       	ld	r23, Z+
    21ea:	af 01       	movw	r20, r30
    21ec:	80 91 d6 02 	lds	r24, 0x02D6
    21f0:	90 91 d7 02 	lds	r25, 0x02D7
    21f4:	0e 94 2c 11 	call	0x2258	; 0x2258 <vfprintf>
    21f8:	e2 e0       	ldi	r30, 0x02	; 2
    21fa:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__epilogue_restores__+0x20>

000021fe <puts>:
    21fe:	0f 93       	push	r16
    2200:	1f 93       	push	r17
    2202:	cf 93       	push	r28
    2204:	df 93       	push	r29
    2206:	e0 91 d6 02 	lds	r30, 0x02D6
    220a:	f0 91 d7 02 	lds	r31, 0x02D7
    220e:	23 81       	ldd	r18, Z+3	; 0x03
    2210:	21 ff       	sbrs	r18, 1
    2212:	1b c0       	rjmp	.+54     	; 0x224a <puts+0x4c>
    2214:	ec 01       	movw	r28, r24
    2216:	00 e0       	ldi	r16, 0x00	; 0
    2218:	10 e0       	ldi	r17, 0x00	; 0
    221a:	89 91       	ld	r24, Y+
    221c:	60 91 d6 02 	lds	r22, 0x02D6
    2220:	70 91 d7 02 	lds	r23, 0x02D7
    2224:	db 01       	movw	r26, r22
    2226:	18 96       	adiw	r26, 0x08	; 8
    2228:	ed 91       	ld	r30, X+
    222a:	fc 91       	ld	r31, X
    222c:	19 97       	sbiw	r26, 0x09	; 9
    222e:	88 23       	and	r24, r24
    2230:	31 f0       	breq	.+12     	; 0x223e <puts+0x40>
    2232:	09 95       	icall
    2234:	89 2b       	or	r24, r25
    2236:	89 f3       	breq	.-30     	; 0x221a <puts+0x1c>
    2238:	0f ef       	ldi	r16, 0xFF	; 255
    223a:	1f ef       	ldi	r17, 0xFF	; 255
    223c:	ee cf       	rjmp	.-36     	; 0x221a <puts+0x1c>
    223e:	8a e0       	ldi	r24, 0x0A	; 10
    2240:	09 95       	icall
    2242:	89 2b       	or	r24, r25
    2244:	11 f4       	brne	.+4      	; 0x224a <puts+0x4c>
    2246:	c8 01       	movw	r24, r16
    2248:	02 c0       	rjmp	.+4      	; 0x224e <puts+0x50>
    224a:	8f ef       	ldi	r24, 0xFF	; 255
    224c:	9f ef       	ldi	r25, 0xFF	; 255
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	1f 91       	pop	r17
    2254:	0f 91       	pop	r16
    2256:	08 95       	ret

00002258 <vfprintf>:
    2258:	ac e0       	ldi	r26, 0x0C	; 12
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	e2 e3       	ldi	r30, 0x32	; 50
    225e:	f1 e1       	ldi	r31, 0x11	; 17
    2260:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__prologue_saves__>
    2264:	7c 01       	movw	r14, r24
    2266:	6b 01       	movw	r12, r22
    2268:	8a 01       	movw	r16, r20
    226a:	fc 01       	movw	r30, r24
    226c:	17 82       	std	Z+7, r1	; 0x07
    226e:	16 82       	std	Z+6, r1	; 0x06
    2270:	83 81       	ldd	r24, Z+3	; 0x03
    2272:	81 ff       	sbrs	r24, 1
    2274:	bd c1       	rjmp	.+890    	; 0x25f0 <vfprintf+0x398>
    2276:	ce 01       	movw	r24, r28
    2278:	01 96       	adiw	r24, 0x01	; 1
    227a:	4c 01       	movw	r8, r24
    227c:	f7 01       	movw	r30, r14
    227e:	93 81       	ldd	r25, Z+3	; 0x03
    2280:	f6 01       	movw	r30, r12
    2282:	93 fd       	sbrc	r25, 3
    2284:	85 91       	lpm	r24, Z+
    2286:	93 ff       	sbrs	r25, 3
    2288:	81 91       	ld	r24, Z+
    228a:	6f 01       	movw	r12, r30
    228c:	88 23       	and	r24, r24
    228e:	09 f4       	brne	.+2      	; 0x2292 <vfprintf+0x3a>
    2290:	ab c1       	rjmp	.+854    	; 0x25e8 <vfprintf+0x390>
    2292:	85 32       	cpi	r24, 0x25	; 37
    2294:	39 f4       	brne	.+14     	; 0x22a4 <vfprintf+0x4c>
    2296:	93 fd       	sbrc	r25, 3
    2298:	85 91       	lpm	r24, Z+
    229a:	93 ff       	sbrs	r25, 3
    229c:	81 91       	ld	r24, Z+
    229e:	6f 01       	movw	r12, r30
    22a0:	85 32       	cpi	r24, 0x25	; 37
    22a2:	29 f4       	brne	.+10     	; 0x22ae <vfprintf+0x56>
    22a4:	b7 01       	movw	r22, r14
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	0e 94 37 13 	call	0x266e	; 0x266e <fputc>
    22ac:	e7 cf       	rjmp	.-50     	; 0x227c <vfprintf+0x24>
    22ae:	51 2c       	mov	r5, r1
    22b0:	31 2c       	mov	r3, r1
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	20 32       	cpi	r18, 0x20	; 32
    22b6:	a0 f4       	brcc	.+40     	; 0x22e0 <vfprintf+0x88>
    22b8:	8b 32       	cpi	r24, 0x2B	; 43
    22ba:	69 f0       	breq	.+26     	; 0x22d6 <vfprintf+0x7e>
    22bc:	30 f4       	brcc	.+12     	; 0x22ca <vfprintf+0x72>
    22be:	80 32       	cpi	r24, 0x20	; 32
    22c0:	59 f0       	breq	.+22     	; 0x22d8 <vfprintf+0x80>
    22c2:	83 32       	cpi	r24, 0x23	; 35
    22c4:	69 f4       	brne	.+26     	; 0x22e0 <vfprintf+0x88>
    22c6:	20 61       	ori	r18, 0x10	; 16
    22c8:	2c c0       	rjmp	.+88     	; 0x2322 <vfprintf+0xca>
    22ca:	8d 32       	cpi	r24, 0x2D	; 45
    22cc:	39 f0       	breq	.+14     	; 0x22dc <vfprintf+0x84>
    22ce:	80 33       	cpi	r24, 0x30	; 48
    22d0:	39 f4       	brne	.+14     	; 0x22e0 <vfprintf+0x88>
    22d2:	21 60       	ori	r18, 0x01	; 1
    22d4:	26 c0       	rjmp	.+76     	; 0x2322 <vfprintf+0xca>
    22d6:	22 60       	ori	r18, 0x02	; 2
    22d8:	24 60       	ori	r18, 0x04	; 4
    22da:	23 c0       	rjmp	.+70     	; 0x2322 <vfprintf+0xca>
    22dc:	28 60       	ori	r18, 0x08	; 8
    22de:	21 c0       	rjmp	.+66     	; 0x2322 <vfprintf+0xca>
    22e0:	27 fd       	sbrc	r18, 7
    22e2:	27 c0       	rjmp	.+78     	; 0x2332 <vfprintf+0xda>
    22e4:	30 ed       	ldi	r19, 0xD0	; 208
    22e6:	38 0f       	add	r19, r24
    22e8:	3a 30       	cpi	r19, 0x0A	; 10
    22ea:	78 f4       	brcc	.+30     	; 0x230a <vfprintf+0xb2>
    22ec:	26 ff       	sbrs	r18, 6
    22ee:	06 c0       	rjmp	.+12     	; 0x22fc <vfprintf+0xa4>
    22f0:	fa e0       	ldi	r31, 0x0A	; 10
    22f2:	5f 9e       	mul	r5, r31
    22f4:	30 0d       	add	r19, r0
    22f6:	11 24       	eor	r1, r1
    22f8:	53 2e       	mov	r5, r19
    22fa:	13 c0       	rjmp	.+38     	; 0x2322 <vfprintf+0xca>
    22fc:	8a e0       	ldi	r24, 0x0A	; 10
    22fe:	38 9e       	mul	r3, r24
    2300:	30 0d       	add	r19, r0
    2302:	11 24       	eor	r1, r1
    2304:	33 2e       	mov	r3, r19
    2306:	20 62       	ori	r18, 0x20	; 32
    2308:	0c c0       	rjmp	.+24     	; 0x2322 <vfprintf+0xca>
    230a:	8e 32       	cpi	r24, 0x2E	; 46
    230c:	21 f4       	brne	.+8      	; 0x2316 <vfprintf+0xbe>
    230e:	26 fd       	sbrc	r18, 6
    2310:	6b c1       	rjmp	.+726    	; 0x25e8 <vfprintf+0x390>
    2312:	20 64       	ori	r18, 0x40	; 64
    2314:	06 c0       	rjmp	.+12     	; 0x2322 <vfprintf+0xca>
    2316:	8c 36       	cpi	r24, 0x6C	; 108
    2318:	11 f4       	brne	.+4      	; 0x231e <vfprintf+0xc6>
    231a:	20 68       	ori	r18, 0x80	; 128
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <vfprintf+0xca>
    231e:	88 36       	cpi	r24, 0x68	; 104
    2320:	41 f4       	brne	.+16     	; 0x2332 <vfprintf+0xda>
    2322:	f6 01       	movw	r30, r12
    2324:	93 fd       	sbrc	r25, 3
    2326:	85 91       	lpm	r24, Z+
    2328:	93 ff       	sbrs	r25, 3
    232a:	81 91       	ld	r24, Z+
    232c:	6f 01       	movw	r12, r30
    232e:	81 11       	cpse	r24, r1
    2330:	c1 cf       	rjmp	.-126    	; 0x22b4 <vfprintf+0x5c>
    2332:	98 2f       	mov	r25, r24
    2334:	9f 7d       	andi	r25, 0xDF	; 223
    2336:	95 54       	subi	r25, 0x45	; 69
    2338:	93 30       	cpi	r25, 0x03	; 3
    233a:	28 f4       	brcc	.+10     	; 0x2346 <vfprintf+0xee>
    233c:	0c 5f       	subi	r16, 0xFC	; 252
    233e:	1f 4f       	sbci	r17, 0xFF	; 255
    2340:	ff e3       	ldi	r31, 0x3F	; 63
    2342:	f9 83       	std	Y+1, r31	; 0x01
    2344:	0d c0       	rjmp	.+26     	; 0x2360 <vfprintf+0x108>
    2346:	83 36       	cpi	r24, 0x63	; 99
    2348:	31 f0       	breq	.+12     	; 0x2356 <vfprintf+0xfe>
    234a:	83 37       	cpi	r24, 0x73	; 115
    234c:	71 f0       	breq	.+28     	; 0x236a <vfprintf+0x112>
    234e:	83 35       	cpi	r24, 0x53	; 83
    2350:	09 f0       	breq	.+2      	; 0x2354 <vfprintf+0xfc>
    2352:	5b c0       	rjmp	.+182    	; 0x240a <vfprintf+0x1b2>
    2354:	22 c0       	rjmp	.+68     	; 0x239a <vfprintf+0x142>
    2356:	f8 01       	movw	r30, r16
    2358:	80 81       	ld	r24, Z
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	0e 5f       	subi	r16, 0xFE	; 254
    235e:	1f 4f       	sbci	r17, 0xFF	; 255
    2360:	44 24       	eor	r4, r4
    2362:	43 94       	inc	r4
    2364:	51 2c       	mov	r5, r1
    2366:	54 01       	movw	r10, r8
    2368:	15 c0       	rjmp	.+42     	; 0x2394 <vfprintf+0x13c>
    236a:	38 01       	movw	r6, r16
    236c:	f2 e0       	ldi	r31, 0x02	; 2
    236e:	6f 0e       	add	r6, r31
    2370:	71 1c       	adc	r7, r1
    2372:	f8 01       	movw	r30, r16
    2374:	a0 80       	ld	r10, Z
    2376:	b1 80       	ldd	r11, Z+1	; 0x01
    2378:	26 ff       	sbrs	r18, 6
    237a:	03 c0       	rjmp	.+6      	; 0x2382 <vfprintf+0x12a>
    237c:	65 2d       	mov	r22, r5
    237e:	70 e0       	ldi	r23, 0x00	; 0
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <vfprintf+0x12e>
    2382:	6f ef       	ldi	r22, 0xFF	; 255
    2384:	7f ef       	ldi	r23, 0xFF	; 255
    2386:	c5 01       	movw	r24, r10
    2388:	2c 87       	std	Y+12, r18	; 0x0c
    238a:	0e 94 2c 13 	call	0x2658	; 0x2658 <strnlen>
    238e:	2c 01       	movw	r4, r24
    2390:	83 01       	movw	r16, r6
    2392:	2c 85       	ldd	r18, Y+12	; 0x0c
    2394:	2f 77       	andi	r18, 0x7F	; 127
    2396:	22 2e       	mov	r2, r18
    2398:	17 c0       	rjmp	.+46     	; 0x23c8 <vfprintf+0x170>
    239a:	38 01       	movw	r6, r16
    239c:	f2 e0       	ldi	r31, 0x02	; 2
    239e:	6f 0e       	add	r6, r31
    23a0:	71 1c       	adc	r7, r1
    23a2:	f8 01       	movw	r30, r16
    23a4:	a0 80       	ld	r10, Z
    23a6:	b1 80       	ldd	r11, Z+1	; 0x01
    23a8:	26 ff       	sbrs	r18, 6
    23aa:	03 c0       	rjmp	.+6      	; 0x23b2 <vfprintf+0x15a>
    23ac:	65 2d       	mov	r22, r5
    23ae:	70 e0       	ldi	r23, 0x00	; 0
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <vfprintf+0x15e>
    23b2:	6f ef       	ldi	r22, 0xFF	; 255
    23b4:	7f ef       	ldi	r23, 0xFF	; 255
    23b6:	c5 01       	movw	r24, r10
    23b8:	2c 87       	std	Y+12, r18	; 0x0c
    23ba:	0e 94 1a 13 	call	0x2634	; 0x2634 <strnlen_P>
    23be:	2c 01       	movw	r4, r24
    23c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    23c2:	20 68       	ori	r18, 0x80	; 128
    23c4:	22 2e       	mov	r2, r18
    23c6:	83 01       	movw	r16, r6
    23c8:	23 fc       	sbrc	r2, 3
    23ca:	1b c0       	rjmp	.+54     	; 0x2402 <vfprintf+0x1aa>
    23cc:	83 2d       	mov	r24, r3
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	48 16       	cp	r4, r24
    23d2:	59 06       	cpc	r5, r25
    23d4:	b0 f4       	brcc	.+44     	; 0x2402 <vfprintf+0x1aa>
    23d6:	b7 01       	movw	r22, r14
    23d8:	80 e2       	ldi	r24, 0x20	; 32
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	0e 94 37 13 	call	0x266e	; 0x266e <fputc>
    23e0:	3a 94       	dec	r3
    23e2:	f4 cf       	rjmp	.-24     	; 0x23cc <vfprintf+0x174>
    23e4:	f5 01       	movw	r30, r10
    23e6:	27 fc       	sbrc	r2, 7
    23e8:	85 91       	lpm	r24, Z+
    23ea:	27 fe       	sbrs	r2, 7
    23ec:	81 91       	ld	r24, Z+
    23ee:	5f 01       	movw	r10, r30
    23f0:	b7 01       	movw	r22, r14
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	0e 94 37 13 	call	0x266e	; 0x266e <fputc>
    23f8:	31 10       	cpse	r3, r1
    23fa:	3a 94       	dec	r3
    23fc:	f1 e0       	ldi	r31, 0x01	; 1
    23fe:	4f 1a       	sub	r4, r31
    2400:	51 08       	sbc	r5, r1
    2402:	41 14       	cp	r4, r1
    2404:	51 04       	cpc	r5, r1
    2406:	71 f7       	brne	.-36     	; 0x23e4 <vfprintf+0x18c>
    2408:	e5 c0       	rjmp	.+458    	; 0x25d4 <vfprintf+0x37c>
    240a:	84 36       	cpi	r24, 0x64	; 100
    240c:	11 f0       	breq	.+4      	; 0x2412 <vfprintf+0x1ba>
    240e:	89 36       	cpi	r24, 0x69	; 105
    2410:	39 f5       	brne	.+78     	; 0x2460 <vfprintf+0x208>
    2412:	f8 01       	movw	r30, r16
    2414:	27 ff       	sbrs	r18, 7
    2416:	07 c0       	rjmp	.+14     	; 0x2426 <vfprintf+0x1ce>
    2418:	60 81       	ld	r22, Z
    241a:	71 81       	ldd	r23, Z+1	; 0x01
    241c:	82 81       	ldd	r24, Z+2	; 0x02
    241e:	93 81       	ldd	r25, Z+3	; 0x03
    2420:	0c 5f       	subi	r16, 0xFC	; 252
    2422:	1f 4f       	sbci	r17, 0xFF	; 255
    2424:	08 c0       	rjmp	.+16     	; 0x2436 <vfprintf+0x1de>
    2426:	60 81       	ld	r22, Z
    2428:	71 81       	ldd	r23, Z+1	; 0x01
    242a:	88 27       	eor	r24, r24
    242c:	77 fd       	sbrc	r23, 7
    242e:	80 95       	com	r24
    2430:	98 2f       	mov	r25, r24
    2432:	0e 5f       	subi	r16, 0xFE	; 254
    2434:	1f 4f       	sbci	r17, 0xFF	; 255
    2436:	2f 76       	andi	r18, 0x6F	; 111
    2438:	b2 2e       	mov	r11, r18
    243a:	97 ff       	sbrs	r25, 7
    243c:	09 c0       	rjmp	.+18     	; 0x2450 <vfprintf+0x1f8>
    243e:	90 95       	com	r25
    2440:	80 95       	com	r24
    2442:	70 95       	com	r23
    2444:	61 95       	neg	r22
    2446:	7f 4f       	sbci	r23, 0xFF	; 255
    2448:	8f 4f       	sbci	r24, 0xFF	; 255
    244a:	9f 4f       	sbci	r25, 0xFF	; 255
    244c:	20 68       	ori	r18, 0x80	; 128
    244e:	b2 2e       	mov	r11, r18
    2450:	2a e0       	ldi	r18, 0x0A	; 10
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	a4 01       	movw	r20, r8
    2456:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__ultoa_invert>
    245a:	a8 2e       	mov	r10, r24
    245c:	a8 18       	sub	r10, r8
    245e:	44 c0       	rjmp	.+136    	; 0x24e8 <vfprintf+0x290>
    2460:	85 37       	cpi	r24, 0x75	; 117
    2462:	29 f4       	brne	.+10     	; 0x246e <vfprintf+0x216>
    2464:	2f 7e       	andi	r18, 0xEF	; 239
    2466:	b2 2e       	mov	r11, r18
    2468:	2a e0       	ldi	r18, 0x0A	; 10
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	25 c0       	rjmp	.+74     	; 0x24b8 <vfprintf+0x260>
    246e:	f2 2f       	mov	r31, r18
    2470:	f9 7f       	andi	r31, 0xF9	; 249
    2472:	bf 2e       	mov	r11, r31
    2474:	8f 36       	cpi	r24, 0x6F	; 111
    2476:	c1 f0       	breq	.+48     	; 0x24a8 <vfprintf+0x250>
    2478:	18 f4       	brcc	.+6      	; 0x2480 <vfprintf+0x228>
    247a:	88 35       	cpi	r24, 0x58	; 88
    247c:	79 f0       	breq	.+30     	; 0x249c <vfprintf+0x244>
    247e:	b4 c0       	rjmp	.+360    	; 0x25e8 <vfprintf+0x390>
    2480:	80 37       	cpi	r24, 0x70	; 112
    2482:	19 f0       	breq	.+6      	; 0x248a <vfprintf+0x232>
    2484:	88 37       	cpi	r24, 0x78	; 120
    2486:	21 f0       	breq	.+8      	; 0x2490 <vfprintf+0x238>
    2488:	af c0       	rjmp	.+350    	; 0x25e8 <vfprintf+0x390>
    248a:	2f 2f       	mov	r18, r31
    248c:	20 61       	ori	r18, 0x10	; 16
    248e:	b2 2e       	mov	r11, r18
    2490:	b4 fe       	sbrs	r11, 4
    2492:	0d c0       	rjmp	.+26     	; 0x24ae <vfprintf+0x256>
    2494:	8b 2d       	mov	r24, r11
    2496:	84 60       	ori	r24, 0x04	; 4
    2498:	b8 2e       	mov	r11, r24
    249a:	09 c0       	rjmp	.+18     	; 0x24ae <vfprintf+0x256>
    249c:	24 ff       	sbrs	r18, 4
    249e:	0a c0       	rjmp	.+20     	; 0x24b4 <vfprintf+0x25c>
    24a0:	9f 2f       	mov	r25, r31
    24a2:	96 60       	ori	r25, 0x06	; 6
    24a4:	b9 2e       	mov	r11, r25
    24a6:	06 c0       	rjmp	.+12     	; 0x24b4 <vfprintf+0x25c>
    24a8:	28 e0       	ldi	r18, 0x08	; 8
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	05 c0       	rjmp	.+10     	; 0x24b8 <vfprintf+0x260>
    24ae:	20 e1       	ldi	r18, 0x10	; 16
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <vfprintf+0x260>
    24b4:	20 e1       	ldi	r18, 0x10	; 16
    24b6:	32 e0       	ldi	r19, 0x02	; 2
    24b8:	f8 01       	movw	r30, r16
    24ba:	b7 fe       	sbrs	r11, 7
    24bc:	07 c0       	rjmp	.+14     	; 0x24cc <vfprintf+0x274>
    24be:	60 81       	ld	r22, Z
    24c0:	71 81       	ldd	r23, Z+1	; 0x01
    24c2:	82 81       	ldd	r24, Z+2	; 0x02
    24c4:	93 81       	ldd	r25, Z+3	; 0x03
    24c6:	0c 5f       	subi	r16, 0xFC	; 252
    24c8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ca:	06 c0       	rjmp	.+12     	; 0x24d8 <vfprintf+0x280>
    24cc:	60 81       	ld	r22, Z
    24ce:	71 81       	ldd	r23, Z+1	; 0x01
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	0e 5f       	subi	r16, 0xFE	; 254
    24d6:	1f 4f       	sbci	r17, 0xFF	; 255
    24d8:	a4 01       	movw	r20, r8
    24da:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__ultoa_invert>
    24de:	a8 2e       	mov	r10, r24
    24e0:	a8 18       	sub	r10, r8
    24e2:	fb 2d       	mov	r31, r11
    24e4:	ff 77       	andi	r31, 0x7F	; 127
    24e6:	bf 2e       	mov	r11, r31
    24e8:	b6 fe       	sbrs	r11, 6
    24ea:	0b c0       	rjmp	.+22     	; 0x2502 <vfprintf+0x2aa>
    24ec:	2b 2d       	mov	r18, r11
    24ee:	2e 7f       	andi	r18, 0xFE	; 254
    24f0:	a5 14       	cp	r10, r5
    24f2:	50 f4       	brcc	.+20     	; 0x2508 <vfprintf+0x2b0>
    24f4:	b4 fe       	sbrs	r11, 4
    24f6:	0a c0       	rjmp	.+20     	; 0x250c <vfprintf+0x2b4>
    24f8:	b2 fc       	sbrc	r11, 2
    24fa:	08 c0       	rjmp	.+16     	; 0x250c <vfprintf+0x2b4>
    24fc:	2b 2d       	mov	r18, r11
    24fe:	2e 7e       	andi	r18, 0xEE	; 238
    2500:	05 c0       	rjmp	.+10     	; 0x250c <vfprintf+0x2b4>
    2502:	7a 2c       	mov	r7, r10
    2504:	2b 2d       	mov	r18, r11
    2506:	03 c0       	rjmp	.+6      	; 0x250e <vfprintf+0x2b6>
    2508:	7a 2c       	mov	r7, r10
    250a:	01 c0       	rjmp	.+2      	; 0x250e <vfprintf+0x2b6>
    250c:	75 2c       	mov	r7, r5
    250e:	24 ff       	sbrs	r18, 4
    2510:	0d c0       	rjmp	.+26     	; 0x252c <vfprintf+0x2d4>
    2512:	fe 01       	movw	r30, r28
    2514:	ea 0d       	add	r30, r10
    2516:	f1 1d       	adc	r31, r1
    2518:	80 81       	ld	r24, Z
    251a:	80 33       	cpi	r24, 0x30	; 48
    251c:	11 f4       	brne	.+4      	; 0x2522 <vfprintf+0x2ca>
    251e:	29 7e       	andi	r18, 0xE9	; 233
    2520:	09 c0       	rjmp	.+18     	; 0x2534 <vfprintf+0x2dc>
    2522:	22 ff       	sbrs	r18, 2
    2524:	06 c0       	rjmp	.+12     	; 0x2532 <vfprintf+0x2da>
    2526:	73 94       	inc	r7
    2528:	73 94       	inc	r7
    252a:	04 c0       	rjmp	.+8      	; 0x2534 <vfprintf+0x2dc>
    252c:	82 2f       	mov	r24, r18
    252e:	86 78       	andi	r24, 0x86	; 134
    2530:	09 f0       	breq	.+2      	; 0x2534 <vfprintf+0x2dc>
    2532:	73 94       	inc	r7
    2534:	23 fd       	sbrc	r18, 3
    2536:	13 c0       	rjmp	.+38     	; 0x255e <vfprintf+0x306>
    2538:	20 ff       	sbrs	r18, 0
    253a:	06 c0       	rjmp	.+12     	; 0x2548 <vfprintf+0x2f0>
    253c:	5a 2c       	mov	r5, r10
    253e:	73 14       	cp	r7, r3
    2540:	18 f4       	brcc	.+6      	; 0x2548 <vfprintf+0x2f0>
    2542:	53 0c       	add	r5, r3
    2544:	57 18       	sub	r5, r7
    2546:	73 2c       	mov	r7, r3
    2548:	73 14       	cp	r7, r3
    254a:	68 f4       	brcc	.+26     	; 0x2566 <vfprintf+0x30e>
    254c:	b7 01       	movw	r22, r14
    254e:	80 e2       	ldi	r24, 0x20	; 32
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	2c 87       	std	Y+12, r18	; 0x0c
    2554:	0e 94 37 13 	call	0x266e	; 0x266e <fputc>
    2558:	73 94       	inc	r7
    255a:	2c 85       	ldd	r18, Y+12	; 0x0c
    255c:	f5 cf       	rjmp	.-22     	; 0x2548 <vfprintf+0x2f0>
    255e:	73 14       	cp	r7, r3
    2560:	10 f4       	brcc	.+4      	; 0x2566 <vfprintf+0x30e>
    2562:	37 18       	sub	r3, r7
    2564:	01 c0       	rjmp	.+2      	; 0x2568 <vfprintf+0x310>
    2566:	31 2c       	mov	r3, r1
    2568:	24 ff       	sbrs	r18, 4
    256a:	12 c0       	rjmp	.+36     	; 0x2590 <vfprintf+0x338>
    256c:	b7 01       	movw	r22, r14
    256e:	80 e3       	ldi	r24, 0x30	; 48
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	2c 87       	std	Y+12, r18	; 0x0c
    2574:	0e 94 37 13 	call	0x266e	; 0x266e <fputc>
    2578:	2c 85       	ldd	r18, Y+12	; 0x0c
    257a:	22 ff       	sbrs	r18, 2
    257c:	17 c0       	rjmp	.+46     	; 0x25ac <vfprintf+0x354>
    257e:	21 ff       	sbrs	r18, 1
    2580:	03 c0       	rjmp	.+6      	; 0x2588 <vfprintf+0x330>
    2582:	88 e5       	ldi	r24, 0x58	; 88
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	02 c0       	rjmp	.+4      	; 0x258c <vfprintf+0x334>
    2588:	88 e7       	ldi	r24, 0x78	; 120
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	b7 01       	movw	r22, r14
    258e:	0c c0       	rjmp	.+24     	; 0x25a8 <vfprintf+0x350>
    2590:	82 2f       	mov	r24, r18
    2592:	86 78       	andi	r24, 0x86	; 134
    2594:	59 f0       	breq	.+22     	; 0x25ac <vfprintf+0x354>
    2596:	21 fd       	sbrc	r18, 1
    2598:	02 c0       	rjmp	.+4      	; 0x259e <vfprintf+0x346>
    259a:	80 e2       	ldi	r24, 0x20	; 32
    259c:	01 c0       	rjmp	.+2      	; 0x25a0 <vfprintf+0x348>
    259e:	8b e2       	ldi	r24, 0x2B	; 43
    25a0:	27 fd       	sbrc	r18, 7
    25a2:	8d e2       	ldi	r24, 0x2D	; 45
    25a4:	b7 01       	movw	r22, r14
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0e 94 37 13 	call	0x266e	; 0x266e <fputc>
    25ac:	a5 14       	cp	r10, r5
    25ae:	38 f4       	brcc	.+14     	; 0x25be <vfprintf+0x366>
    25b0:	b7 01       	movw	r22, r14
    25b2:	80 e3       	ldi	r24, 0x30	; 48
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	0e 94 37 13 	call	0x266e	; 0x266e <fputc>
    25ba:	5a 94       	dec	r5
    25bc:	f7 cf       	rjmp	.-18     	; 0x25ac <vfprintf+0x354>
    25be:	aa 94       	dec	r10
    25c0:	f4 01       	movw	r30, r8
    25c2:	ea 0d       	add	r30, r10
    25c4:	f1 1d       	adc	r31, r1
    25c6:	80 81       	ld	r24, Z
    25c8:	b7 01       	movw	r22, r14
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	0e 94 37 13 	call	0x266e	; 0x266e <fputc>
    25d0:	a1 10       	cpse	r10, r1
    25d2:	f5 cf       	rjmp	.-22     	; 0x25be <vfprintf+0x366>
    25d4:	33 20       	and	r3, r3
    25d6:	09 f4       	brne	.+2      	; 0x25da <vfprintf+0x382>
    25d8:	51 ce       	rjmp	.-862    	; 0x227c <vfprintf+0x24>
    25da:	b7 01       	movw	r22, r14
    25dc:	80 e2       	ldi	r24, 0x20	; 32
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	0e 94 37 13 	call	0x266e	; 0x266e <fputc>
    25e4:	3a 94       	dec	r3
    25e6:	f6 cf       	rjmp	.-20     	; 0x25d4 <vfprintf+0x37c>
    25e8:	f7 01       	movw	r30, r14
    25ea:	86 81       	ldd	r24, Z+6	; 0x06
    25ec:	97 81       	ldd	r25, Z+7	; 0x07
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <vfprintf+0x39c>
    25f0:	8f ef       	ldi	r24, 0xFF	; 255
    25f2:	9f ef       	ldi	r25, 0xFF	; 255
    25f4:	2c 96       	adiw	r28, 0x0c	; 12
    25f6:	e2 e1       	ldi	r30, 0x12	; 18
    25f8:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__epilogue_restores__>

000025fc <calloc>:
    25fc:	0f 93       	push	r16
    25fe:	1f 93       	push	r17
    2600:	cf 93       	push	r28
    2602:	df 93       	push	r29
    2604:	86 9f       	mul	r24, r22
    2606:	80 01       	movw	r16, r0
    2608:	87 9f       	mul	r24, r23
    260a:	10 0d       	add	r17, r0
    260c:	96 9f       	mul	r25, r22
    260e:	10 0d       	add	r17, r0
    2610:	11 24       	eor	r1, r1
    2612:	c8 01       	movw	r24, r16
    2614:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <malloc>
    2618:	ec 01       	movw	r28, r24
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	29 f0       	breq	.+10     	; 0x2628 <calloc+0x2c>
    261e:	a8 01       	movw	r20, r16
    2620:	60 e0       	ldi	r22, 0x00	; 0
    2622:	70 e0       	ldi	r23, 0x00	; 0
    2624:	0e 94 25 13 	call	0x264a	; 0x264a <memset>
    2628:	ce 01       	movw	r24, r28
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	1f 91       	pop	r17
    2630:	0f 91       	pop	r16
    2632:	08 95       	ret

00002634 <strnlen_P>:
    2634:	fc 01       	movw	r30, r24
    2636:	05 90       	lpm	r0, Z+
    2638:	61 50       	subi	r22, 0x01	; 1
    263a:	70 40       	sbci	r23, 0x00	; 0
    263c:	01 10       	cpse	r0, r1
    263e:	d8 f7       	brcc	.-10     	; 0x2636 <strnlen_P+0x2>
    2640:	80 95       	com	r24
    2642:	90 95       	com	r25
    2644:	8e 0f       	add	r24, r30
    2646:	9f 1f       	adc	r25, r31
    2648:	08 95       	ret

0000264a <memset>:
    264a:	dc 01       	movw	r26, r24
    264c:	01 c0       	rjmp	.+2      	; 0x2650 <memset+0x6>
    264e:	6d 93       	st	X+, r22
    2650:	41 50       	subi	r20, 0x01	; 1
    2652:	50 40       	sbci	r21, 0x00	; 0
    2654:	e0 f7       	brcc	.-8      	; 0x264e <memset+0x4>
    2656:	08 95       	ret

00002658 <strnlen>:
    2658:	fc 01       	movw	r30, r24
    265a:	61 50       	subi	r22, 0x01	; 1
    265c:	70 40       	sbci	r23, 0x00	; 0
    265e:	01 90       	ld	r0, Z+
    2660:	01 10       	cpse	r0, r1
    2662:	d8 f7       	brcc	.-10     	; 0x265a <strnlen+0x2>
    2664:	80 95       	com	r24
    2666:	90 95       	com	r25
    2668:	8e 0f       	add	r24, r30
    266a:	9f 1f       	adc	r25, r31
    266c:	08 95       	ret

0000266e <fputc>:
    266e:	0f 93       	push	r16
    2670:	1f 93       	push	r17
    2672:	cf 93       	push	r28
    2674:	df 93       	push	r29
    2676:	18 2f       	mov	r17, r24
    2678:	09 2f       	mov	r16, r25
    267a:	eb 01       	movw	r28, r22
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	81 fd       	sbrc	r24, 1
    2680:	03 c0       	rjmp	.+6      	; 0x2688 <fputc+0x1a>
    2682:	8f ef       	ldi	r24, 0xFF	; 255
    2684:	9f ef       	ldi	r25, 0xFF	; 255
    2686:	20 c0       	rjmp	.+64     	; 0x26c8 <fputc+0x5a>
    2688:	82 ff       	sbrs	r24, 2
    268a:	10 c0       	rjmp	.+32     	; 0x26ac <fputc+0x3e>
    268c:	4e 81       	ldd	r20, Y+6	; 0x06
    268e:	5f 81       	ldd	r21, Y+7	; 0x07
    2690:	2c 81       	ldd	r18, Y+4	; 0x04
    2692:	3d 81       	ldd	r19, Y+5	; 0x05
    2694:	42 17       	cp	r20, r18
    2696:	53 07       	cpc	r21, r19
    2698:	7c f4       	brge	.+30     	; 0x26b8 <fputc+0x4a>
    269a:	e8 81       	ld	r30, Y
    269c:	f9 81       	ldd	r31, Y+1	; 0x01
    269e:	9f 01       	movw	r18, r30
    26a0:	2f 5f       	subi	r18, 0xFF	; 255
    26a2:	3f 4f       	sbci	r19, 0xFF	; 255
    26a4:	39 83       	std	Y+1, r19	; 0x01
    26a6:	28 83       	st	Y, r18
    26a8:	10 83       	st	Z, r17
    26aa:	06 c0       	rjmp	.+12     	; 0x26b8 <fputc+0x4a>
    26ac:	e8 85       	ldd	r30, Y+8	; 0x08
    26ae:	f9 85       	ldd	r31, Y+9	; 0x09
    26b0:	81 2f       	mov	r24, r17
    26b2:	09 95       	icall
    26b4:	89 2b       	or	r24, r25
    26b6:	29 f7       	brne	.-54     	; 0x2682 <fputc+0x14>
    26b8:	2e 81       	ldd	r18, Y+6	; 0x06
    26ba:	3f 81       	ldd	r19, Y+7	; 0x07
    26bc:	2f 5f       	subi	r18, 0xFF	; 255
    26be:	3f 4f       	sbci	r19, 0xFF	; 255
    26c0:	3f 83       	std	Y+7, r19	; 0x07
    26c2:	2e 83       	std	Y+6, r18	; 0x06
    26c4:	81 2f       	mov	r24, r17
    26c6:	90 2f       	mov	r25, r16
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	1f 91       	pop	r17
    26ce:	0f 91       	pop	r16
    26d0:	08 95       	ret

000026d2 <__ultoa_invert>:
    26d2:	fa 01       	movw	r30, r20
    26d4:	aa 27       	eor	r26, r26
    26d6:	28 30       	cpi	r18, 0x08	; 8
    26d8:	51 f1       	breq	.+84     	; 0x272e <__ultoa_invert+0x5c>
    26da:	20 31       	cpi	r18, 0x10	; 16
    26dc:	81 f1       	breq	.+96     	; 0x273e <__ultoa_invert+0x6c>
    26de:	e8 94       	clt
    26e0:	6f 93       	push	r22
    26e2:	6e 7f       	andi	r22, 0xFE	; 254
    26e4:	6e 5f       	subi	r22, 0xFE	; 254
    26e6:	7f 4f       	sbci	r23, 0xFF	; 255
    26e8:	8f 4f       	sbci	r24, 0xFF	; 255
    26ea:	9f 4f       	sbci	r25, 0xFF	; 255
    26ec:	af 4f       	sbci	r26, 0xFF	; 255
    26ee:	b1 e0       	ldi	r27, 0x01	; 1
    26f0:	3e d0       	rcall	.+124    	; 0x276e <__ultoa_invert+0x9c>
    26f2:	b4 e0       	ldi	r27, 0x04	; 4
    26f4:	3c d0       	rcall	.+120    	; 0x276e <__ultoa_invert+0x9c>
    26f6:	67 0f       	add	r22, r23
    26f8:	78 1f       	adc	r23, r24
    26fa:	89 1f       	adc	r24, r25
    26fc:	9a 1f       	adc	r25, r26
    26fe:	a1 1d       	adc	r26, r1
    2700:	68 0f       	add	r22, r24
    2702:	79 1f       	adc	r23, r25
    2704:	8a 1f       	adc	r24, r26
    2706:	91 1d       	adc	r25, r1
    2708:	a1 1d       	adc	r26, r1
    270a:	6a 0f       	add	r22, r26
    270c:	71 1d       	adc	r23, r1
    270e:	81 1d       	adc	r24, r1
    2710:	91 1d       	adc	r25, r1
    2712:	a1 1d       	adc	r26, r1
    2714:	20 d0       	rcall	.+64     	; 0x2756 <__ultoa_invert+0x84>
    2716:	09 f4       	brne	.+2      	; 0x271a <__ultoa_invert+0x48>
    2718:	68 94       	set
    271a:	3f 91       	pop	r19
    271c:	2a e0       	ldi	r18, 0x0A	; 10
    271e:	26 9f       	mul	r18, r22
    2720:	11 24       	eor	r1, r1
    2722:	30 19       	sub	r19, r0
    2724:	30 5d       	subi	r19, 0xD0	; 208
    2726:	31 93       	st	Z+, r19
    2728:	de f6       	brtc	.-74     	; 0x26e0 <__ultoa_invert+0xe>
    272a:	cf 01       	movw	r24, r30
    272c:	08 95       	ret
    272e:	46 2f       	mov	r20, r22
    2730:	47 70       	andi	r20, 0x07	; 7
    2732:	40 5d       	subi	r20, 0xD0	; 208
    2734:	41 93       	st	Z+, r20
    2736:	b3 e0       	ldi	r27, 0x03	; 3
    2738:	0f d0       	rcall	.+30     	; 0x2758 <__ultoa_invert+0x86>
    273a:	c9 f7       	brne	.-14     	; 0x272e <__ultoa_invert+0x5c>
    273c:	f6 cf       	rjmp	.-20     	; 0x272a <__ultoa_invert+0x58>
    273e:	46 2f       	mov	r20, r22
    2740:	4f 70       	andi	r20, 0x0F	; 15
    2742:	40 5d       	subi	r20, 0xD0	; 208
    2744:	4a 33       	cpi	r20, 0x3A	; 58
    2746:	18 f0       	brcs	.+6      	; 0x274e <__ultoa_invert+0x7c>
    2748:	49 5d       	subi	r20, 0xD9	; 217
    274a:	31 fd       	sbrc	r19, 1
    274c:	40 52       	subi	r20, 0x20	; 32
    274e:	41 93       	st	Z+, r20
    2750:	02 d0       	rcall	.+4      	; 0x2756 <__ultoa_invert+0x84>
    2752:	a9 f7       	brne	.-22     	; 0x273e <__ultoa_invert+0x6c>
    2754:	ea cf       	rjmp	.-44     	; 0x272a <__ultoa_invert+0x58>
    2756:	b4 e0       	ldi	r27, 0x04	; 4
    2758:	a6 95       	lsr	r26
    275a:	97 95       	ror	r25
    275c:	87 95       	ror	r24
    275e:	77 95       	ror	r23
    2760:	67 95       	ror	r22
    2762:	ba 95       	dec	r27
    2764:	c9 f7       	brne	.-14     	; 0x2758 <__ultoa_invert+0x86>
    2766:	00 97       	sbiw	r24, 0x00	; 0
    2768:	61 05       	cpc	r22, r1
    276a:	71 05       	cpc	r23, r1
    276c:	08 95       	ret
    276e:	9b 01       	movw	r18, r22
    2770:	ac 01       	movw	r20, r24
    2772:	0a 2e       	mov	r0, r26
    2774:	06 94       	lsr	r0
    2776:	57 95       	ror	r21
    2778:	47 95       	ror	r20
    277a:	37 95       	ror	r19
    277c:	27 95       	ror	r18
    277e:	ba 95       	dec	r27
    2780:	c9 f7       	brne	.-14     	; 0x2774 <__ultoa_invert+0xa2>
    2782:	62 0f       	add	r22, r18
    2784:	73 1f       	adc	r23, r19
    2786:	84 1f       	adc	r24, r20
    2788:	95 1f       	adc	r25, r21
    278a:	a0 1d       	adc	r26, r0
    278c:	08 95       	ret

0000278e <__prologue_saves__>:
    278e:	2f 92       	push	r2
    2790:	3f 92       	push	r3
    2792:	4f 92       	push	r4
    2794:	5f 92       	push	r5
    2796:	6f 92       	push	r6
    2798:	7f 92       	push	r7
    279a:	8f 92       	push	r8
    279c:	9f 92       	push	r9
    279e:	af 92       	push	r10
    27a0:	bf 92       	push	r11
    27a2:	cf 92       	push	r12
    27a4:	df 92       	push	r13
    27a6:	ef 92       	push	r14
    27a8:	ff 92       	push	r15
    27aa:	0f 93       	push	r16
    27ac:	1f 93       	push	r17
    27ae:	cf 93       	push	r28
    27b0:	df 93       	push	r29
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	ca 1b       	sub	r28, r26
    27b8:	db 0b       	sbc	r29, r27
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	de bf       	out	0x3e, r29	; 62
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	cd bf       	out	0x3d, r28	; 61
    27c4:	09 94       	ijmp

000027c6 <__epilogue_restores__>:
    27c6:	2a 88       	ldd	r2, Y+18	; 0x12
    27c8:	39 88       	ldd	r3, Y+17	; 0x11
    27ca:	48 88       	ldd	r4, Y+16	; 0x10
    27cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    27ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    27d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    27d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    27d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    27d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    27d8:	b9 84       	ldd	r11, Y+9	; 0x09
    27da:	c8 84       	ldd	r12, Y+8	; 0x08
    27dc:	df 80       	ldd	r13, Y+7	; 0x07
    27de:	ee 80       	ldd	r14, Y+6	; 0x06
    27e0:	fd 80       	ldd	r15, Y+5	; 0x05
    27e2:	0c 81       	ldd	r16, Y+4	; 0x04
    27e4:	1b 81       	ldd	r17, Y+3	; 0x03
    27e6:	aa 81       	ldd	r26, Y+2	; 0x02
    27e8:	b9 81       	ldd	r27, Y+1	; 0x01
    27ea:	ce 0f       	add	r28, r30
    27ec:	d1 1d       	adc	r29, r1
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	ed 01       	movw	r28, r26
    27fa:	08 95       	ret

000027fc <_exit>:
    27fc:	f8 94       	cli

000027fe <__stop_program>:
    27fe:	ff cf       	rjmp	.-2      	; 0x27fe <__stop_program>


Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016a  00800100  00002986  00002a1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002986  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080026a  0080026a  00002b84  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002b84  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000290  00000000  00000000  00002be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002c9f  00000000  00000000  00002e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000feb  00000000  00000000  00005b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e02  00000000  00000000  00006afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000788  00000000  00000000  000078fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000816  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e50  00000000  00000000  0000889a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  0000a6ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__ctors_end>
       4:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       8:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      10:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      14:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      18:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      1c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      20:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      24:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      28:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      2c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      30:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      34:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      38:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      3c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      40:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      44:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      48:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      4c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      50:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      54:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      58:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      5c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      60:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      64:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      68:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      6c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	00 5c       	subi	r16, 0xC0	; 192
      a4:	00 00       	nop
      a6:	0c 00       	.word	0x000c	; ????
      a8:	0c 00       	.word	0x000c	; ????
      aa:	7c 28       	or	r7, r12
      ac:	7c 28       	or	r7, r12
      ae:	58 dc       	rcall	.-1872   	; 0xfffff960 <__eeprom_end+0xff7ef960>
      b0:	68 00       	.word	0x0068	; ????
      b2:	24 10       	cpse	r2, r4
      b4:	48 00       	.word	0x0048	; ????
      b6:	28 54       	subi	r18, 0x48	; 72
      b8:	28 40       	sbci	r18, 0x08	; 8
      ba:	00 0c       	add	r0, r0
      bc:	00 00       	nop
      be:	00 78       	andi	r16, 0x80	; 128
      c0:	84 00       	.word	0x0084	; ????
      c2:	84 78       	andi	r24, 0x84	; 132
      c4:	00 00       	nop
      c6:	54 38       	cpi	r21, 0x84	; 132
      c8:	54 00       	.word	0x0054	; ????
      ca:	10 7c       	andi	r17, 0xC0	; 192
      cc:	10 00       	.word	0x0010	; ????
      ce:	80 40       	sbci	r24, 0x00	; 0
      d0:	00 00       	nop
      d2:	10 10       	cpse	r1, r0
      d4:	10 00       	.word	0x0010	; ????
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	00 00       	nop
      da:	60 10       	cpse	r6, r0
      dc:	0c 00       	.word	0x000c	; ????
      de:	38 54       	subi	r19, 0x48	; 72
      e0:	38 00       	.word	0x0038	; ????
      e2:	48 7c       	andi	r20, 0xC8	; 200
      e4:	40 00       	.word	0x0040	; ????
      e6:	48 64       	ori	r20, 0x48	; 72
      e8:	58 00       	.word	0x0058	; ????
      ea:	44 54       	subi	r20, 0x44	; 68
      ec:	2c 00       	.word	0x002c	; ????
      ee:	1c 10       	cpse	r1, r12
      f0:	7c 00       	.word	0x007c	; ????
      f2:	5c 54       	subi	r21, 0x4C	; 76
      f4:	24 00       	.word	0x0024	; ????
      f6:	38 54       	subi	r19, 0x48	; 72
      f8:	24 00       	.word	0x0024	; ????
      fa:	64 14       	cp	r6, r4
      fc:	0c 00       	.word	0x000c	; ????
      fe:	68 54       	subi	r22, 0x48	; 72
     100:	2c 00       	.word	0x002c	; ????
     102:	48 54       	subi	r20, 0x48	; 72
     104:	38 00       	.word	0x0038	; ????
     106:	00 48       	sbci	r16, 0x80	; 128
     108:	00 00       	nop
     10a:	80 48       	sbci	r24, 0x80	; 128
     10c:	00 00       	nop
     10e:	10 28       	or	r1, r0
     110:	44 00       	.word	0x0044	; ????
     112:	28 28       	or	r2, r8
     114:	28 00       	.word	0x0028	; ????
     116:	44 28       	or	r4, r4
     118:	10 00       	.word	0x0010	; ????
     11a:	04 54       	subi	r16, 0x44	; 68
     11c:	08 00       	.word	0x0008	; ????
     11e:	38 44       	sbci	r19, 0x48	; 72
     120:	5c 00       	.word	0x005c	; ????
     122:	78 14       	cp	r7, r8
     124:	78 00       	.word	0x0078	; ????
     126:	7c 54       	subi	r23, 0x4C	; 76
     128:	28 00       	.word	0x0028	; ????
     12a:	38 44       	sbci	r19, 0x48	; 72
     12c:	28 00       	.word	0x0028	; ????
     12e:	7c 44       	sbci	r23, 0x4C	; 76
     130:	38 00       	.word	0x0038	; ????
     132:	7c 54       	subi	r23, 0x4C	; 76
     134:	44 00       	.word	0x0044	; ????
     136:	7c 14       	cp	r7, r12
     138:	04 00       	.word	0x0004	; ????
     13a:	38 44       	sbci	r19, 0x48	; 72
     13c:	74 00       	.word	0x0074	; ????
     13e:	7c 10       	cpse	r7, r12
     140:	7c 00       	.word	0x007c	; ????
     142:	44 7c       	andi	r20, 0xC4	; 196
     144:	44 00       	.word	0x0044	; ????
     146:	20 40       	sbci	r18, 0x00	; 0
     148:	3c 00       	.word	0x003c	; ????
     14a:	7c 10       	cpse	r7, r12
     14c:	6c 00       	.word	0x006c	; ????
     14e:	7c 40       	sbci	r23, 0x0C	; 12
     150:	40 00       	.word	0x0040	; ????
     152:	7c 18       	sub	r7, r12
     154:	7c 00       	.word	0x007c	; ????
     156:	78 10       	cpse	r7, r8
     158:	3c 00       	.word	0x003c	; ????
     15a:	38 44       	sbci	r19, 0x48	; 72
     15c:	38 00       	.word	0x0038	; ????
     15e:	7c 14       	cp	r7, r12
     160:	08 00       	.word	0x0008	; ????
     162:	38 44       	sbci	r19, 0x48	; 72
     164:	b8 00       	.word	0x00b8	; ????
     166:	7c 14       	cp	r7, r12
     168:	68 00       	.word	0x0068	; ????
     16a:	48 54       	subi	r20, 0x48	; 72
     16c:	24 00       	.word	0x0024	; ????
     16e:	04 7c       	andi	r16, 0xC4	; 196
     170:	04 00       	.word	0x0004	; ????
     172:	7c 40       	sbci	r23, 0x0C	; 12
     174:	7c 00       	.word	0x007c	; ????
     176:	3c 60       	ori	r19, 0x0C	; 12
     178:	3c 00       	.word	0x003c	; ????
     17a:	7c 30       	cpi	r23, 0x0C	; 12
     17c:	7c 00       	.word	0x007c	; ????
     17e:	6c 10       	cpse	r6, r12
     180:	6c 00       	.word	0x006c	; ????
     182:	0c 70       	andi	r16, 0x0C	; 12
     184:	0c 00       	.word	0x000c	; ????
     186:	64 54       	subi	r22, 0x44	; 68
     188:	4c 00       	.word	0x004c	; ????
     18a:	00 7c       	andi	r16, 0xC0	; 192
     18c:	44 00       	.word	0x0044	; ????
     18e:	0c 10       	cpse	r0, r12
     190:	60 00       	.word	0x0060	; ????
     192:	44 7c       	andi	r20, 0xC4	; 196
     194:	00 00       	nop
     196:	08 04       	cpc	r0, r8
     198:	08 00       	.word	0x0008	; ????
     19a:	80 80       	ld	r8, Z
     19c:	80 00       	.word	0x0080	; ????
     19e:	00 04       	cpc	r0, r0
     1a0:	08 00       	.word	0x0008	; ????
     1a2:	30 48       	sbci	r19, 0x80	; 128
     1a4:	78 00       	.word	0x0078	; ????
     1a6:	7c 48       	sbci	r23, 0x8C	; 140
     1a8:	30 00       	.word	0x0030	; ????
     1aa:	30 48       	sbci	r19, 0x80	; 128
     1ac:	48 00       	.word	0x0048	; ????
     1ae:	30 48       	sbci	r19, 0x80	; 128
     1b0:	7c 00       	.word	0x007c	; ????
     1b2:	30 68       	ori	r19, 0x80	; 128
     1b4:	50 00       	.word	0x0050	; ????
     1b6:	10 78       	andi	r17, 0x80	; 128
     1b8:	14 00       	.word	0x0014	; ????
     1ba:	90 a8       	ldd	r9, Z+48	; 0x30
     1bc:	78 00       	.word	0x0078	; ????
     1be:	7c 08       	sbc	r7, r12
     1c0:	70 00       	.word	0x0070	; ????
     1c2:	50 74       	andi	r21, 0x40	; 64
     1c4:	40 00       	.word	0x0040	; ????
     1c6:	80 80       	ld	r8, Z
     1c8:	74 00       	.word	0x0074	; ????
     1ca:	7c 10       	cpse	r7, r12
     1cc:	68 00       	.word	0x0068	; ????
     1ce:	44 7c       	andi	r20, 0xC4	; 196
     1d0:	40 00       	.word	0x0040	; ????
     1d2:	78 10       	cpse	r7, r8
     1d4:	78 00       	.word	0x0078	; ????
     1d6:	78 08       	sbc	r7, r8
     1d8:	70 00       	.word	0x0070	; ????
     1da:	30 48       	sbci	r19, 0x80	; 128
     1dc:	30 00       	.word	0x0030	; ????
     1de:	f8 28       	or	r15, r8
     1e0:	10 00       	.word	0x0010	; ????
     1e2:	30 48       	sbci	r19, 0x80	; 128
     1e4:	f8 00       	.word	0x00f8	; ????
     1e6:	78 10       	cpse	r7, r8
     1e8:	08 00       	.word	0x0008	; ????
     1ea:	50 58       	subi	r21, 0x80	; 128
     1ec:	28 00       	.word	0x0028	; ????
     1ee:	08 3c       	cpi	r16, 0xC8	; 200
     1f0:	48 00       	.word	0x0048	; ????
     1f2:	38 40       	sbci	r19, 0x08	; 8
     1f4:	78 00       	.word	0x0078	; ????
     1f6:	38 40       	sbci	r19, 0x08	; 8
     1f8:	38 00       	.word	0x0038	; ????
     1fa:	78 20       	and	r7, r8
     1fc:	78 00       	.word	0x0078	; ????
     1fe:	48 30       	cpi	r20, 0x08	; 8
     200:	48 00       	.word	0x0048	; ????
     202:	98 a0       	ldd	r9, Y+32	; 0x20
     204:	78 00       	.word	0x0078	; ????
     206:	48 68       	ori	r20, 0x88	; 136
     208:	58 00       	.word	0x0058	; ????
     20a:	10 78       	andi	r17, 0x80	; 128
     20c:	84 00       	.word	0x0084	; ????
     20e:	00 7c       	andi	r16, 0xC0	; 192
     210:	00 00       	nop
     212:	84 78       	andi	r24, 0x84	; 132
     214:	10 00       	.word	0x0010	; ????
     216:	08 04       	cpc	r0, r8
     218:	08 04       	cpc	r0, r8

0000021a <font5>:
     21a:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     22a:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     23a:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     24a:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     25a:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     26a:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     27a:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     28a:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     29a:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     2aa:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     2ba:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     2ca:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2da:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2ea:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2fa:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     30a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     31a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     32a:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     33a:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     34a:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     35a:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     36a:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     37a:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     38a:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     39a:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     3aa:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     3ba:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     3ca:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3da:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3ea:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003f5 <font8>:
	...
     3fd:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     40d:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     41d:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     42d:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     43d:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     44d:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     45d:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     46d:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     47d:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     48d:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     49d:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     4ad:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     4bd:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     4cd:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4dd:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4ed:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4fd:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     50d:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     51d:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     52d:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     53d:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     54d:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     55d:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     56d:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     57d:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     58d:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     59d:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     5ad:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     5bd:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     5cd:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5dd:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5ed:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5fd:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     60d:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     61d:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     62d:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     63d:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     64d:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     65d:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     66d:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     67d:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     68d:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     69d:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     6ad:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     6bd:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     6cd:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6dd:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006ee <__ctors_end>:
     6ee:	11 24       	eor	r1, r1
     6f0:	1f be       	out	0x3f, r1	; 63
     6f2:	cf ef       	ldi	r28, 0xFF	; 255
     6f4:	d4 e0       	ldi	r29, 0x04	; 4
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	cd bf       	out	0x3d, r28	; 61

000006fa <__do_copy_data>:
     6fa:	12 e0       	ldi	r17, 0x02	; 2
     6fc:	a0 e0       	ldi	r26, 0x00	; 0
     6fe:	b1 e0       	ldi	r27, 0x01	; 1
     700:	e6 e8       	ldi	r30, 0x86	; 134
     702:	f9 e2       	ldi	r31, 0x29	; 41
     704:	02 c0       	rjmp	.+4      	; 0x70a <__do_copy_data+0x10>
     706:	05 90       	lpm	r0, Z+
     708:	0d 92       	st	X+, r0
     70a:	aa 36       	cpi	r26, 0x6A	; 106
     70c:	b1 07       	cpc	r27, r17
     70e:	d9 f7       	brne	.-10     	; 0x706 <__do_copy_data+0xc>

00000710 <__do_clear_bss>:
     710:	22 e0       	ldi	r18, 0x02	; 2
     712:	aa e6       	ldi	r26, 0x6A	; 106
     714:	b2 e0       	ldi	r27, 0x02	; 2
     716:	01 c0       	rjmp	.+2      	; 0x71a <.do_clear_bss_start>

00000718 <.do_clear_bss_loop>:
     718:	1d 92       	st	X+, r1

0000071a <.do_clear_bss_start>:
     71a:	a2 38       	cpi	r26, 0x82	; 130
     71c:	b2 07       	cpc	r27, r18
     71e:	e1 f7       	brne	.-8      	; 0x718 <.do_clear_bss_loop>
     720:	0e 94 99 05 	call	0xb32	; 0xb32 <main>
     724:	0c 94 c1 14 	jmp	0x2982	; 0x2982 <_exit>

00000728 <__bad_interrupt>:
     728:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000072c <adc_init>:
     72c:	30 98       	cbi	0x06, 0	; 6
     72e:	08 95       	ret

00000730 <adc_read>:
     730:	88 37       	cpi	r24, 0x78	; 120
     732:	21 f4       	brne	.+8      	; 0x73c <adc_read+0xc>
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	80 93 00 14 	sts	0x1400, r24
     73a:	11 c0       	rjmp	.+34     	; 0x75e <adc_read+0x2e>
     73c:	89 37       	cpi	r24, 0x79	; 121
     73e:	21 f4       	brne	.+8      	; 0x748 <adc_read+0x18>
     740:	85 e0       	ldi	r24, 0x05	; 5
     742:	80 93 00 14 	sts	0x1400, r24
     746:	0b c0       	rjmp	.+22     	; 0x75e <adc_read+0x2e>
     748:	8c 36       	cpi	r24, 0x6C	; 108
     74a:	21 f4       	brne	.+8      	; 0x754 <adc_read+0x24>
     74c:	86 e0       	ldi	r24, 0x06	; 6
     74e:	80 93 00 14 	sts	0x1400, r24
     752:	05 c0       	rjmp	.+10     	; 0x75e <adc_read+0x2e>
     754:	82 37       	cpi	r24, 0x72	; 114
     756:	19 f4       	brne	.+6      	; 0x75e <adc_read+0x2e>
     758:	87 e0       	ldi	r24, 0x07	; 7
     75a:	80 93 00 14 	sts	0x1400, r24
     75e:	28 99       	sbic	0x05, 0	; 5
     760:	fe cf       	rjmp	.-4      	; 0x75e <adc_read+0x2e>
     762:	80 91 00 14 	lds	r24, 0x1400
     766:	08 95       	ret

00000768 <can_init>:

#include "mcp.h"
#include "can.h"
#include "MCP2515.h"

void can_init(int mode){
     768:	cf 93       	push	r28
     76a:	c8 2f       	mov	r28, r24
	//priority bits? TXP
	//CANINTE.TXInE
	mcp_bit_modify(0x2B,0b00011100, 0b00000000); //Disables interrupts from empty buffers
     76c:	40 e0       	ldi	r20, 0x00	; 0
     76e:	6c e1       	ldi	r22, 0x1C	; 28
     770:	8b e2       	ldi	r24, 0x2B	; 43
     772:	0e 94 44 06 	call	0xc88	; 0xc88 <mcp_bit_modify>
	mcp_bit_modify(MCP_RXB0CTRL, 0b01100000, 0b01100000); //Disable filters
     776:	40 e6       	ldi	r20, 0x60	; 96
     778:	60 e6       	ldi	r22, 0x60	; 96
     77a:	80 e6       	ldi	r24, 0x60	; 96
     77c:	0e 94 44 06 	call	0xc88	; 0xc88 <mcp_bit_modify>
	mcp_bit_modify(MCP_CANCTRL, 0xFF, mode); //Sets operation mode 
     780:	4c 2f       	mov	r20, r28
     782:	6f ef       	ldi	r22, 0xFF	; 255
     784:	8f e0       	ldi	r24, 0x0F	; 15
     786:	0e 94 44 06 	call	0xc88	; 0xc88 <mcp_bit_modify>
	
	//TODO: Filter initialization
}
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <can_transmit>:

void can_transmit(Msg msg){
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	00 d0       	rcall	.+0      	; 0x79c <can_transmit+0xe>
     79c:	00 d0       	rcall	.+0      	; 0x79e <can_transmit+0x10>
     79e:	00 d0       	rcall	.+0      	; 0x7a0 <can_transmit+0x12>
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	49 83       	std	Y+1, r20	; 0x01
     7a6:	5a 83       	std	Y+2, r21	; 0x02
     7a8:	6b 83       	std	Y+3, r22	; 0x03
     7aa:	7c 83       	std	Y+4, r23	; 0x04
     7ac:	8d 83       	std	Y+5, r24	; 0x05
     7ae:	9e 83       	std	Y+6, r25	; 0x06
     7b0:	09 81       	ldd	r16, Y+1	; 0x01
     7b2:	1a 81       	ldd	r17, Y+2	; 0x02
     7b4:	ed 80       	ldd	r14, Y+5	; 0x05
     7b6:	fe 80       	ldd	r15, Y+6	; 0x06
	//TXB0Dm - Data transmit buffer - The bytes with all the data
	mcp_write(0x41, msg.id >> 3);  //TXB0SIDH - Higher identifier byte
     7b8:	b8 01       	movw	r22, r16
     7ba:	75 95       	asr	r23
     7bc:	67 95       	ror	r22
     7be:	75 95       	asr	r23
     7c0:	67 95       	ror	r22
     7c2:	75 95       	asr	r23
     7c4:	67 95       	ror	r22
     7c6:	81 e4       	ldi	r24, 0x41	; 65
     7c8:	0e 94 22 06 	call	0xc44	; 0xc44 <mcp_write>
	mcp_write(0x42, msg.id << 5);  //TXB0SIDL - Lower identifier byte
     7cc:	60 2f       	mov	r22, r16
     7ce:	62 95       	swap	r22
     7d0:	66 0f       	add	r22, r22
     7d2:	60 7e       	andi	r22, 0xE0	; 224
     7d4:	82 e4       	ldi	r24, 0x42	; 66
     7d6:	0e 94 22 06 	call	0xc44	; 0xc44 <mcp_write>
	mcp_write(0x45, msg.length); //TXB0DLC	- Data length - RTR will be set to 0 (Data Frame message)
     7da:	6e 2d       	mov	r22, r14
     7dc:	85 e4       	ldi	r24, 0x45	; 69
     7de:	0e 94 22 06 	call	0xc44	; 0xc44 <mcp_write>
	for(int i = 0; i < msg.length; i++){
     7e2:	1e 14       	cp	r1, r14
     7e4:	1f 04       	cpc	r1, r15
     7e6:	84 f4       	brge	.+32     	; 0x808 <can_transmit+0x7a>
     7e8:	00 e0       	ldi	r16, 0x00	; 0
     7ea:	10 e0       	ldi	r17, 0x00	; 0
		mcp_write(0x46 + i, msg.data[i]);
     7ec:	eb 81       	ldd	r30, Y+3	; 0x03
     7ee:	fc 81       	ldd	r31, Y+4	; 0x04
     7f0:	e0 0f       	add	r30, r16
     7f2:	f1 1f       	adc	r31, r17
     7f4:	60 81       	ld	r22, Z
     7f6:	86 e4       	ldi	r24, 0x46	; 70
     7f8:	80 0f       	add	r24, r16
     7fa:	0e 94 22 06 	call	0xc44	; 0xc44 <mcp_write>
void can_transmit(Msg msg){
	//TXB0Dm - Data transmit buffer - The bytes with all the data
	mcp_write(0x41, msg.id >> 3);  //TXB0SIDH - Higher identifier byte
	mcp_write(0x42, msg.id << 5);  //TXB0SIDL - Lower identifier byte
	mcp_write(0x45, msg.length); //TXB0DLC	- Data length - RTR will be set to 0 (Data Frame message)
	for(int i = 0; i < msg.length; i++){
     7fe:	0f 5f       	subi	r16, 0xFF	; 255
     800:	1f 4f       	sbci	r17, 0xFF	; 255
     802:	0e 15       	cp	r16, r14
     804:	1f 05       	cpc	r17, r15
     806:	91 f7       	brne	.-28     	; 0x7ec <can_transmit+0x5e>
		mcp_write(0x46 + i, msg.data[i]);
	}
	mcp_request_to_send(0,1,0);	//Request to send - sending will start as soon as the bus is clear
     808:	40 e0       	ldi	r20, 0x00	; 0
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	61 e0       	ldi	r22, 0x01	; 1
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 34 06 	call	0xc68	; 0xc68 <mcp_request_to_send>
	
	//TODO: (maybe) print error message? TXBnCTRL.TXERR and the CANINTF.MERRF bits will be set and an interrupt will be generated on the INT pin if the CANINTE.MERRE bit is set
}
     818:	26 96       	adiw	r28, 0x06	; 6
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	08 95       	ret

00000832 <can_receive>:

//MCP_TXB0CTRL?
char * can_receive(){
     832:	8f 92       	push	r8
     834:	9f 92       	push	r9
     836:	af 92       	push	r10
     838:	bf 92       	push	r11
     83a:	cf 92       	push	r12
     83c:	df 92       	push	r13
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
	mcp_bit_modify(0x2C, 1, 0);	//CANINTF - Sets RX0IF to 0
	return data;
	
	//TODO: Add something to read the standard identifier of the message received
	//use Msg type? Return Msg type and access data using "can_receive().data"?
}
     84e:	8d b6       	in	r8, 0x3d	; 61
     850:	9e b6       	in	r9, 0x3e	; 62
	//TODO: (maybe) print error message? TXBnCTRL.TXERR and the CANINTF.MERRF bits will be set and an interrupt will be generated on the INT pin if the CANINTE.MERRE bit is set
}

//MCP_TXB0CTRL?
char * can_receive(){
	uint8_t data_length = mcp_read(0x65) & 0b00001111;
     852:	85 e6       	ldi	r24, 0x65	; 101
     854:	0e 94 13 06 	call	0xc26	; 0xc26 <mcp_read>
     858:	8f 70       	andi	r24, 0x0F	; 15
	char data[data_length];
     85a:	c8 2e       	mov	r12, r24
     85c:	d1 2c       	mov	r13, r1
     85e:	8d b7       	in	r24, 0x3d	; 61
     860:	9e b7       	in	r25, 0x3e	; 62
     862:	8c 19       	sub	r24, r12
     864:	9d 09       	sbc	r25, r13
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	9e bf       	out	0x3e, r25	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	8d bf       	out	0x3d, r24	; 61
     870:	ed b7       	in	r30, 0x3d	; 61
     872:	fe b7       	in	r31, 0x3e	; 62
     874:	31 96       	adiw	r30, 0x01	; 1
     876:	5f 01       	movw	r10, r30
	for(int i = 0; i < data_length; i++){
     878:	1c 14       	cp	r1, r12
     87a:	1d 04       	cpc	r1, r13
     87c:	7c f4       	brge	.+30     	; 0x89c <can_receive+0x6a>
     87e:	7f 01       	movw	r14, r30
     880:	00 e0       	ldi	r16, 0x00	; 0
     882:	10 e0       	ldi	r17, 0x00	; 0
		data[i] = mcp_read(0x66 + i);  //Read data
     884:	86 e6       	ldi	r24, 0x66	; 102
     886:	80 0f       	add	r24, r16
     888:	0e 94 13 06 	call	0xc26	; 0xc26 <mcp_read>
     88c:	f7 01       	movw	r30, r14
     88e:	81 93       	st	Z+, r24
     890:	7f 01       	movw	r14, r30

//MCP_TXB0CTRL?
char * can_receive(){
	uint8_t data_length = mcp_read(0x65) & 0b00001111;
	char data[data_length];
	for(int i = 0; i < data_length; i++){
     892:	0f 5f       	subi	r16, 0xFF	; 255
     894:	1f 4f       	sbci	r17, 0xFF	; 255
     896:	0c 15       	cp	r16, r12
     898:	1d 05       	cpc	r17, r13
     89a:	a4 f3       	brlt	.-24     	; 0x884 <can_receive+0x52>
		data[i] = mcp_read(0x66 + i);  //Read data
	}
	mcp_bit_modify(0x2C, 1, 0);	//CANINTF - Sets RX0IF to 0
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	8c e2       	ldi	r24, 0x2C	; 44
     8a2:	0e 94 44 06 	call	0xc88	; 0xc88 <mcp_bit_modify>
	return data;
	
	//TODO: Add something to read the standard identifier of the message received
	//use Msg type? Return Msg type and access data using "can_receive().data"?
}
     8a6:	c5 01       	movw	r24, r10
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	9e be       	out	0x3e, r9	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	8d be       	out	0x3d, r8	; 61
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	ff 90       	pop	r15
     8bc:	ef 90       	pop	r14
     8be:	df 90       	pop	r13
     8c0:	cf 90       	pop	r12
     8c2:	bf 90       	pop	r11
     8c4:	af 90       	pop	r10
     8c6:	9f 90       	pop	r9
     8c8:	8f 90       	pop	r8
     8ca:	08 95       	ret

000008cc <joy_init>:
int ymin = 0;
int ymean = 127;
int ymax = 255;

void joy_init(){
	clear_bit(DDRB,PB2);	//Set joystick button pin to input
     8cc:	ba 98       	cbi	0x17, 2	; 23
	set_bit(PORTB,PB2);		//Set the internal pull-up resistor needed for the button
     8ce:	c2 9a       	sbi	0x18, 2	; 24
     8d0:	08 95       	ret

000008d2 <joy_get_position>:
		}
	}
	printf("Calibrated.\r\n");
}

Position joy_get_position(){
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	00 d0       	rcall	.+0      	; 0x8d8 <joy_get_position+0x6>
     8d8:	00 d0       	rcall	.+0      	; 0x8da <joy_get_position+0x8>
     8da:	00 d0       	rcall	.+0      	; 0x8dc <joy_get_position+0xa>
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
		x = adc_read('x');
     8e0:	88 e7       	ldi	r24, 0x78	; 120
     8e2:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	90 93 73 02 	sts	0x0273, r25
     8ec:	80 93 72 02 	sts	0x0272, r24
		y = adc_read('y');
     8f0:	89 e7       	ldi	r24, 0x79	; 121
     8f2:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     8f6:	28 2f       	mov	r18, r24
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	30 93 77 02 	sts	0x0277, r19
     8fe:	20 93 76 02 	sts	0x0276, r18
		z = !test_bit(PINB, PB2);
     902:	e6 b3       	in	r30, 0x16	; 22
     904:	e6 95       	lsr	r30
     906:	e6 95       	lsr	r30
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	e8 27       	eor	r30, r24
     90c:	e1 70       	andi	r30, 0x01	; 1
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	e0 93 74 02 	sts	0x0274, r30
     914:	f0 93 75 02 	sts	0x0275, r31
		
		if (x > xmean){
     918:	80 91 72 02 	lds	r24, 0x0272
     91c:	90 91 73 02 	lds	r25, 0x0273
     920:	40 91 0c 01 	lds	r20, 0x010C
     924:	50 91 0d 01 	lds	r21, 0x010D
     928:	48 17       	cp	r20, r24
     92a:	59 07       	cpc	r21, r25
     92c:	b4 f4       	brge	.+44     	; 0x95a <joy_get_position+0x88>
			x = ((x - xmean) * 100) / (xmax - xmean);
     92e:	bc 01       	movw	r22, r24
     930:	64 1b       	sub	r22, r20
     932:	75 0b       	sbc	r23, r21
     934:	a4 e6       	ldi	r26, 0x64	; 100
     936:	a6 9f       	mul	r26, r22
     938:	c0 01       	movw	r24, r0
     93a:	a7 9f       	mul	r26, r23
     93c:	90 0d       	add	r25, r0
     93e:	11 24       	eor	r1, r1
     940:	60 91 0a 01 	lds	r22, 0x010A
     944:	70 91 0b 01 	lds	r23, 0x010B
     948:	64 1b       	sub	r22, r20
     94a:	75 0b       	sbc	r23, r21
     94c:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <__divmodhi4>
     950:	70 93 73 02 	sts	0x0273, r23
     954:	60 93 72 02 	sts	0x0272, r22
     958:	17 c0       	rjmp	.+46     	; 0x988 <joy_get_position+0xb6>
		}
		else{
			x = ((x - xmean) * 100) / (xmean - xmin);
     95a:	bc 01       	movw	r22, r24
     95c:	64 1b       	sub	r22, r20
     95e:	75 0b       	sbc	r23, r21
     960:	a4 e6       	ldi	r26, 0x64	; 100
     962:	a6 9f       	mul	r26, r22
     964:	c0 01       	movw	r24, r0
     966:	a7 9f       	mul	r26, r23
     968:	90 0d       	add	r25, r0
     96a:	11 24       	eor	r1, r1
     96c:	60 91 6c 02 	lds	r22, 0x026C
     970:	70 91 6d 02 	lds	r23, 0x026D
     974:	da 01       	movw	r26, r20
     976:	a6 1b       	sub	r26, r22
     978:	b7 0b       	sbc	r27, r23
     97a:	bd 01       	movw	r22, r26
     97c:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <__divmodhi4>
     980:	70 93 73 02 	sts	0x0273, r23
     984:	60 93 72 02 	sts	0x0272, r22
		}
		if (y > ymean){
     988:	40 91 08 01 	lds	r20, 0x0108
     98c:	50 91 09 01 	lds	r21, 0x0109
     990:	42 17       	cp	r20, r18
     992:	53 07       	cpc	r21, r19
     994:	ac f4       	brge	.+42     	; 0x9c0 <joy_get_position+0xee>
			y = ((y - ymean) * 100) / (ymax - ymean);
     996:	24 1b       	sub	r18, r20
     998:	35 0b       	sbc	r19, r21
     99a:	64 e6       	ldi	r22, 0x64	; 100
     99c:	62 9f       	mul	r22, r18
     99e:	c0 01       	movw	r24, r0
     9a0:	63 9f       	mul	r22, r19
     9a2:	90 0d       	add	r25, r0
     9a4:	11 24       	eor	r1, r1
     9a6:	60 91 06 01 	lds	r22, 0x0106
     9aa:	70 91 07 01 	lds	r23, 0x0107
     9ae:	64 1b       	sub	r22, r20
     9b0:	75 0b       	sbc	r23, r21
     9b2:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <__divmodhi4>
     9b6:	70 93 77 02 	sts	0x0277, r23
     9ba:	60 93 76 02 	sts	0x0276, r22
     9be:	15 c0       	rjmp	.+42     	; 0x9ea <joy_get_position+0x118>
		}
		else{
			y = ((y - ymean)  * 100) / (ymean - ymin);
     9c0:	24 1b       	sub	r18, r20
     9c2:	35 0b       	sbc	r19, r21
     9c4:	64 e6       	ldi	r22, 0x64	; 100
     9c6:	62 9f       	mul	r22, r18
     9c8:	c0 01       	movw	r24, r0
     9ca:	63 9f       	mul	r22, r19
     9cc:	90 0d       	add	r25, r0
     9ce:	11 24       	eor	r1, r1
     9d0:	20 91 6a 02 	lds	r18, 0x026A
     9d4:	30 91 6b 02 	lds	r19, 0x026B
     9d8:	ba 01       	movw	r22, r20
     9da:	62 1b       	sub	r22, r18
     9dc:	73 0b       	sbc	r23, r19
     9de:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <__divmodhi4>
     9e2:	70 93 77 02 	sts	0x0277, r23
     9e6:	60 93 76 02 	sts	0x0276, r22
		}
		
		Position pos;
		pos.x = x;
		pos.y = y;
     9ea:	40 91 76 02 	lds	r20, 0x0276
     9ee:	80 91 77 02 	lds	r24, 0x0277
		pos.z = z;
		return pos;
     9f2:	20 91 72 02 	lds	r18, 0x0272
     9f6:	90 91 73 02 	lds	r25, 0x0273
     9fa:	29 83       	std	Y+1, r18	; 0x01
     9fc:	9a 83       	std	Y+2, r25	; 0x02
     9fe:	4b 83       	std	Y+3, r20	; 0x03
     a00:	8c 83       	std	Y+4, r24	; 0x04
     a02:	ed 83       	std	Y+5, r30	; 0x05
     a04:	fe 83       	std	Y+6, r31	; 0x06
     a06:	39 2f       	mov	r19, r25
     a08:	58 2f       	mov	r21, r24
     a0a:	6e 2f       	mov	r22, r30
     a0c:	7f 2f       	mov	r23, r31
}
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	26 96       	adiw	r28, 0x06	; 6
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	f8 94       	cli
     a18:	de bf       	out	0x3e, r29	; 62
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	cd bf       	out	0x3d, r28	; 61
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	08 95       	ret

00000a24 <joy_get_position_polar>:

Position_polar joy_get_position_polar(){
     a24:	8f 92       	push	r8
     a26:	9f 92       	push	r9
     a28:	af 92       	push	r10
     a2a:	bf 92       	push	r11
     a2c:	cf 92       	push	r12
     a2e:	df 92       	push	r13
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	00 d0       	rcall	.+0      	; 0xa3a <joy_get_position_polar+0x16>
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <joy_get_position_polar+0x18>
     a3c:	00 d0       	rcall	.+0      	; 0xa3e <joy_get_position_polar+0x1a>
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
	Position pos_cart = joy_get_position();
     a42:	0e 94 69 04 	call	0x8d2	; 0x8d2 <joy_get_position>
     a46:	29 83       	std	Y+1, r18	; 0x01
     a48:	3a 83       	std	Y+2, r19	; 0x02
     a4a:	4b 83       	std	Y+3, r20	; 0x03
     a4c:	5c 83       	std	Y+4, r21	; 0x04
     a4e:	89 80       	ldd	r8, Y+1	; 0x01
     a50:	9a 80       	ldd	r9, Y+2	; 0x02
     a52:	ab 80       	ldd	r10, Y+3	; 0x03
     a54:	bc 80       	ldd	r11, Y+4	; 0x04
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     a56:	b4 01       	movw	r22, r8
     a58:	88 27       	eor	r24, r24
     a5a:	77 fd       	sbrc	r23, 7
     a5c:	80 95       	com	r24
     a5e:	98 2f       	mov	r25, r24
     a60:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__floatsisf>
     a64:	6b 01       	movw	r12, r22
     a66:	7c 01       	movw	r14, r24
     a68:	b5 01       	movw	r22, r10
     a6a:	88 27       	eor	r24, r24
     a6c:	77 fd       	sbrc	r23, 7
     a6e:	80 95       	com	r24
     a70:	98 2f       	mov	r25, r24
     a72:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__floatsisf>
     a76:	a7 01       	movw	r20, r14
     a78:	96 01       	movw	r18, r12
     a7a:	0e 94 38 0c 	call	0x1870	; 0x1870 <atan2>
     a7e:	6b 01       	movw	r12, r22
     a80:	7c 01       	movw	r14, r24
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     a82:	88 9c       	mul	r8, r8
     a84:	b0 01       	movw	r22, r0
     a86:	89 9c       	mul	r8, r9
     a88:	70 0d       	add	r23, r0
     a8a:	70 0d       	add	r23, r0
     a8c:	11 24       	eor	r1, r1
     a8e:	aa 9c       	mul	r10, r10
     a90:	c0 01       	movw	r24, r0
     a92:	ab 9c       	mul	r10, r11
     a94:	90 0d       	add	r25, r0
     a96:	90 0d       	add	r25, r0
     a98:	11 24       	eor	r1, r1
     a9a:	68 0f       	add	r22, r24
     a9c:	79 1f       	adc	r23, r25
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__floatunsisf>
     aa6:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <sqrt>
     aaa:	4b 01       	movw	r8, r22
     aac:	5c 01       	movw	r10, r24
}

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     aae:	20 ee       	ldi	r18, 0xE0	; 224
     ab0:	3e e2       	ldi	r19, 0x2E	; 46
     ab2:	45 e6       	ldi	r20, 0x65	; 101
     ab4:	52 e4       	ldi	r21, 0x42	; 66
     ab6:	c7 01       	movw	r24, r14
     ab8:	b6 01       	movw	r22, r12
     aba:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__mulsf3>
     abe:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__fixsfsi>
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
	return pos_pol;
     ac2:	6b 01       	movw	r12, r22

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     ac4:	c5 01       	movw	r24, r10
     ac6:	b4 01       	movw	r22, r8
     ac8:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__fixsfsi>
	return pos_pol;
     acc:	7b 01       	movw	r14, r22
}
     ace:	c7 01       	movw	r24, r14
     ad0:	b6 01       	movw	r22, r12
     ad2:	26 96       	adiw	r28, 0x06	; 6
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	9f 90       	pop	r9
     af0:	8f 90       	pop	r8
     af2:	08 95       	ret

00000af4 <joy_get_direction>:

Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
     af4:	0e 94 12 05 	call	0xa24	; 0xa24 <joy_get_position_polar>
     af8:	9b 01       	movw	r18, r22
	
	if(pos_pol.amplitude > 80){
     afa:	81 35       	cpi	r24, 0x51	; 81
     afc:	91 05       	cpc	r25, r1
     afe:	7c f0       	brlt	.+30     	; 0xb1e <joy_get_direction+0x2a>
		if (pos_pol.angle > 135){
     b00:	68 38       	cpi	r22, 0x88	; 136
     b02:	71 05       	cpc	r23, r1
     b04:	74 f4       	brge	.+28     	; 0xb22 <joy_get_direction+0x2e>
			return LEFT;
		}
		else if(pos_pol.angle > 45){
     b06:	6e 32       	cpi	r22, 0x2E	; 46
     b08:	71 05       	cpc	r23, r1
     b0a:	6c f4       	brge	.+26     	; 0xb26 <joy_get_direction+0x32>
			return UP;
		}
		else if(pos_pol.angle > -45){
     b0c:	24 3d       	cpi	r18, 0xD4	; 212
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	38 07       	cpc	r19, r24
     b12:	5c f4       	brge	.+22     	; 0xb2a <joy_get_direction+0x36>
			return RIGHT;
		}
		else if(pos_pol.angle > -135){
     b14:	2a 37       	cpi	r18, 0x7A	; 122
     b16:	3f 4f       	sbci	r19, 0xFF	; 255
     b18:	54 f0       	brlt	.+20     	; 0xb2e <joy_get_direction+0x3a>
			return DOWN;
     b1a:	83 e0       	ldi	r24, 0x03	; 3
     b1c:	08 95       	ret
		}
		else{
			return LEFT;
		}
	}
	return NEUTRAL;
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	08 95       	ret
Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
	
	if(pos_pol.amplitude > 80){
		if (pos_pol.angle > 135){
			return LEFT;
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	08 95       	ret
		}
		else if(pos_pol.angle > 45){
			return UP;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	08 95       	ret
		}
		else if(pos_pol.angle > -45){
			return RIGHT;
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	08 95       	ret
		}
		else if(pos_pol.angle > -135){
			return DOWN;
		}
		else{
			return LEFT;
     b2e:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	return NEUTRAL;
} 
     b30:	08 95       	ret

00000b32 <main>:
#include "menu.h"
#include "touch.h"
#include "MCP2515.h"

int main(void)
{
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
     b3a:	2c 97       	sbiw	r28, 0x0c	; 12
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
	MCUCR |= (1<<SRE);	//Enable external memory
     b46:	85 b7       	in	r24, 0x35	; 53
     b48:	80 68       	ori	r24, 0x80	; 128
     b4a:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     b4c:	80 b7       	in	r24, 0x30	; 48
     b4e:	80 62       	ori	r24, 0x20	; 32
     b50:	80 bf       	out	0x30, r24	; 48
	
	uart_init(9600, NODE_1);
     b52:	61 e0       	ldi	r22, 0x01	; 1
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	80 e8       	ldi	r24, 0x80	; 128
     b58:	95 e2       	ldi	r25, 0x25	; 37
     b5a:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <uart_init>
	adc_init();
     b5e:	0e 94 96 03 	call	0x72c	; 0x72c <adc_init>
	oled_init();
     b62:	0e 94 b0 0a 	call	0x1560	; 0x1560 <oled_init>
	oled_print_string("Please calibrate joystick!",0,0,8,0);
     b66:	00 e0       	ldi	r16, 0x00	; 0
     b68:	10 e0       	ldi	r17, 0x00	; 0
     b6a:	28 e0       	ldi	r18, 0x08	; 8
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	88 e8       	ldi	r24, 0x88	; 136
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	0e 94 3a 0a 	call	0x1474	; 0x1474 <oled_print_string>
	oled_refresh();
     b78:	0e 94 36 0b 	call	0x166c	; 0x166c <oled_refresh>
	joy_init();
     b7c:	0e 94 66 04 	call	0x8cc	; 0x8cc <joy_init>
	touch_init();
     b80:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <touch_init>
	menu_init();
     b84:	0e 94 b8 08 	call	0x1170	; 0x1170 <menu_init>
	spi_master_init(NODE_1);
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <spi_master_init>
	mcp_init();
     b90:	0e 94 62 06 	call	0xcc4	; 0xcc4 <mcp_init>
	can_init(MODE_LOOPBACK); 
     b94:	80 e4       	ldi	r24, 0x40	; 64
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 b4 03 	call	0x768	; 0x768 <can_init>
	while (1)
	{
		Position position = joy_get_position();
		
		Msg msg;
		msg.id = 42;
     b9c:	0f 2e       	mov	r0, r31
     b9e:	fa e2       	ldi	r31, 0x2A	; 42
     ba0:	cf 2e       	mov	r12, r31
     ba2:	f0 2d       	mov	r31, r0
     ba4:	a1 2c       	mov	r10, r1
		msg.length = sizeof(position);
     ba6:	0f 2e       	mov	r0, r31
     ba8:	f6 e0       	ldi	r31, 0x06	; 6
     baa:	df 2e       	mov	r13, r31
     bac:	f0 2d       	mov	r31, r0
     bae:	b1 2c       	mov	r11, r1
		msg.data = (char*) &position;
     bb0:	7e 01       	movw	r14, r28
     bb2:	87 e0       	ldi	r24, 0x07	; 7
     bb4:	e8 0e       	add	r14, r24
     bb6:	f1 1c       	adc	r15, r1
		can_transmit(msg);
		
		//for loopback mode:
		Position position_received = *(Position*)can_receive();
		printf("x:%4d y:%4d z:%4d\r", position_received.x,position_received.y,position_received.z);
     bb8:	03 ea       	ldi	r16, 0xA3	; 163
     bba:	11 e0       	ldi	r17, 0x01	; 1
	//sram_test(); //Not working...
	//can_test(); //Not working

	while (1)
	{
		Position position = joy_get_position();
     bbc:	0e 94 69 04 	call	0x8d2	; 0x8d2 <joy_get_position>
     bc0:	2f 83       	std	Y+7, r18	; 0x07
     bc2:	38 87       	std	Y+8, r19	; 0x08
     bc4:	49 87       	std	Y+9, r20	; 0x09
     bc6:	5a 87       	std	Y+10, r21	; 0x0a
     bc8:	6b 87       	std	Y+11, r22	; 0x0b
     bca:	7c 87       	std	Y+12, r23	; 0x0c
		
		Msg msg;
		msg.id = 42;
     bcc:	4c 2d       	mov	r20, r12
     bce:	c9 82       	std	Y+1, r12	; 0x01
     bd0:	aa 82       	std	Y+2, r10	; 0x02
		msg.length = sizeof(position);
     bd2:	dd 82       	std	Y+5, r13	; 0x05
     bd4:	be 82       	std	Y+6, r11	; 0x06
		msg.data = (char*) &position;
     bd6:	6e 2d       	mov	r22, r14
     bd8:	fc 82       	std	Y+4, r15	; 0x04
     bda:	eb 82       	std	Y+3, r14	; 0x03
		can_transmit(msg);
     bdc:	5a 2d       	mov	r21, r10
     bde:	7c 81       	ldd	r23, Y+4	; 0x04
     be0:	8d 2d       	mov	r24, r13
     be2:	9b 2d       	mov	r25, r11
     be4:	0e 94 c7 03 	call	0x78e	; 0x78e <can_transmit>
		
		//for loopback mode:
		Position position_received = *(Position*)can_receive();
     be8:	0e 94 19 04 	call	0x832	; 0x832 <can_receive>
     bec:	fc 01       	movw	r30, r24
		printf("x:%4d y:%4d z:%4d\r", position_received.x,position_received.y,position_received.z);
     bee:	85 81       	ldd	r24, Z+5	; 0x05
     bf0:	8f 93       	push	r24
     bf2:	84 81       	ldd	r24, Z+4	; 0x04
     bf4:	8f 93       	push	r24
     bf6:	83 81       	ldd	r24, Z+3	; 0x03
     bf8:	8f 93       	push	r24
     bfa:	82 81       	ldd	r24, Z+2	; 0x02
     bfc:	8f 93       	push	r24
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	8f 93       	push	r24
     c02:	80 81       	ld	r24, Z
     c04:	8f 93       	push	r24
     c06:	1f 93       	push	r17
     c08:	0f 93       	push	r16
     c0a:	0e 94 ae 11 	call	0x235c	; 0x235c <printf>
	
		menu_run_display();
     c0e:	0e 94 31 09 	call	0x1262	; 0x1262 <menu_run_display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	90 ef       	ldi	r25, 0xF0	; 240
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	f1 f7       	brne	.-4      	; 0xc16 <main+0xe4>
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	cb cf       	rjmp	.-106    	; 0xbbc <main+0x8a>

00000c26 <mcp_read>:
#include <avr/io.h>

#include "spi.h"
#include "MCP2515.h"

char mcp_read(char address){
     c26:	cf 93       	push	r28
     c28:	c8 2f       	mov	r28, r24
	clear_bit(PORTB, PB4);
     c2a:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_READ);
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <spi_master_transmit>
	spi_master_transmit(address);
     c32:	8c 2f       	mov	r24, r28
     c34:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <spi_master_transmit>
	char data = spi_master_transmit(0x0); //0x0 = dummy value
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <spi_master_transmit>
	set_bit(PORTB,PB4);
     c3e:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
     c40:	cf 91       	pop	r28
     c42:	08 95       	ret

00000c44 <mcp_write>:

void mcp_write(char address, char data){
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	d8 2f       	mov	r29, r24
     c4a:	c6 2f       	mov	r28, r22
	clear_bit(PORTB, PB4);
     c4c:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_WRITE);
     c4e:	82 e0       	ldi	r24, 0x02	; 2
     c50:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <spi_master_transmit>
	spi_master_transmit(address);
     c54:	8d 2f       	mov	r24, r29
     c56:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <spi_master_transmit>
	spi_master_transmit(data);
     c5a:	8c 2f       	mov	r24, r28
     c5c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <spi_master_transmit>
	set_bit(PORTB,PB4);
     c60:	c4 9a       	sbi	0x18, 4	; 24
}
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	08 95       	ret

00000c68 <mcp_request_to_send>:

void mcp_request_to_send(int TXB2, int TXB1, int TXB0){
	int command = 0b10000000 | TXB0 | (TXB1 << 1) | (TXB2 << 2);
	clear_bit(PORTB, PB4);
     c68:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(data);
	set_bit(PORTB,PB4);
}

void mcp_request_to_send(int TXB2, int TXB1, int TXB0){
	int command = 0b10000000 | TXB0 | (TXB1 << 1) | (TXB2 << 2);
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	80 68       	ori	r24, 0x80	; 128
     c74:	48 2b       	or	r20, r24
     c76:	59 2b       	or	r21, r25
     c78:	cb 01       	movw	r24, r22
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
	clear_bit(PORTB, PB4);
	spi_master_transmit(command);
     c7e:	84 2b       	or	r24, r20
     c80:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <spi_master_transmit>
	set_bit(PORTB, PB4);
     c84:	c4 9a       	sbi	0x18, 4	; 24
     c86:	08 95       	ret

00000c88 <mcp_bit_modify>:
	char status = spi_master_transmit(0x00);
	set_bit(PORTB ,PB4);
	return status;
}

void mcp_bit_modify(char address, char mask, char data){
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	18 2f       	mov	r17, r24
     c90:	d6 2f       	mov	r29, r22
     c92:	c4 2f       	mov	r28, r20
	clear_bit(PORTB, PB4);
     c94:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_BITMOD);	
     c96:	85 e0       	ldi	r24, 0x05	; 5
     c98:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <spi_master_transmit>
	spi_master_transmit(address);
     c9c:	81 2f       	mov	r24, r17
     c9e:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <spi_master_transmit>
	spi_master_transmit(mask);
     ca2:	8d 2f       	mov	r24, r29
     ca4:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <spi_master_transmit>
	spi_master_transmit(data);
     ca8:	8c 2f       	mov	r24, r28
     caa:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <spi_master_transmit>
	set_bit(PORTB, PB4);
     cae:	c4 9a       	sbi	0x18, 4	; 24
}
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	08 95       	ret

00000cb8 <mcp_reset>:
		
void mcp_reset(){
	clear_bit(PORTB, PB4);
     cb8:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_RESET);	
     cba:	80 ec       	ldi	r24, 0xC0	; 192
     cbc:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <spi_master_transmit>
	set_bit(PORTB, PB4);
     cc0:	c4 9a       	sbi	0x18, 4	; 24
     cc2:	08 95       	ret

00000cc4 <mcp_init>:
}
	
void mcp_init(){
	mcp_reset();
     cc4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <mcp_reset>
     cc8:	08 95       	ret

00000cca <draw_list>:
	}
	

	return self;
}
Menu* draw_list(Menu* self){
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	7c 01       	movw	r14, r24

	for(int i = 0; i < self->num_of_entries; i++){
     cd8:	dc 01       	movw	r26, r24
     cda:	14 96       	adiw	r26, 0x04	; 4
     cdc:	8d 91       	ld	r24, X+
     cde:	9c 91       	ld	r25, X
     ce0:	15 97       	sbiw	r26, 0x05	; 5
     ce2:	18 16       	cp	r1, r24
     ce4:	19 06       	cpc	r1, r25
     ce6:	e4 f4       	brge	.+56     	; 0xd20 <draw_list+0x56>
     ce8:	c0 e0       	ldi	r28, 0x00	; 0
     cea:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_string(self->entries[i],0,i,5,0);
     cec:	ce 01       	movw	r24, r28
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	d7 01       	movw	r26, r14
     cf4:	12 96       	adiw	r26, 0x02	; 2
     cf6:	ed 91       	ld	r30, X+
     cf8:	fc 91       	ld	r31, X
     cfa:	13 97       	sbiw	r26, 0x03	; 3
     cfc:	e8 0f       	add	r30, r24
     cfe:	f9 1f       	adc	r31, r25
     d00:	00 e0       	ldi	r16, 0x00	; 0
     d02:	10 e0       	ldi	r17, 0x00	; 0
     d04:	25 e0       	ldi	r18, 0x05	; 5
     d06:	4c 2f       	mov	r20, r28
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	91 81       	ldd	r25, Z+1	; 0x01
     d0e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <oled_print_string>

	return self;
}
Menu* draw_list(Menu* self){

	for(int i = 0; i < self->num_of_entries; i++){
     d12:	21 96       	adiw	r28, 0x01	; 1
     d14:	f7 01       	movw	r30, r14
     d16:	84 81       	ldd	r24, Z+4	; 0x04
     d18:	95 81       	ldd	r25, Z+5	; 0x05
     d1a:	c8 17       	cp	r28, r24
     d1c:	d9 07       	cpc	r29, r25
     d1e:	34 f3       	brlt	.-52     	; 0xcec <draw_list+0x22>
		oled_print_string(self->entries[i],0,i,5,0);
	}

	//Where to go next
	Direction dir = joy_get_direction();
     d20:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <joy_get_direction>
	if(!joy_moved){//THIS IS NEW
     d24:	20 91 6e 02 	lds	r18, 0x026E
     d28:	30 91 6f 02 	lds	r19, 0x026F
     d2c:	23 2b       	or	r18, r19
     d2e:	d9 f4       	brne	.+54     	; 0xd66 <draw_list+0x9c>
		if((dir == LEFT) & (self->super_menu != NULL)){
     d30:	d7 01       	movw	r26, r14
     d32:	18 96       	adiw	r26, 0x08	; 8
     d34:	2d 91       	ld	r18, X+
     d36:	3c 91       	ld	r19, X
     d38:	19 97       	sbiw	r26, 0x09	; 9
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	82 30       	cpi	r24, 0x02	; 2
     d3e:	09 f0       	breq	.+2      	; 0xd42 <draw_list+0x78>
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	99 23       	and	r25, r25
     d44:	39 f0       	breq	.+14     	; 0xd54 <draw_list+0x8a>
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	21 15       	cp	r18, r1
     d4a:	31 05       	cpc	r19, r1
     d4c:	09 f4       	brne	.+2      	; 0xd50 <draw_list+0x86>
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	81 11       	cpse	r24, r1
     d52:	01 c0       	rjmp	.+2      	; 0xd56 <draw_list+0x8c>
     d54:	97 01       	movw	r18, r14
			self = self->super_menu;
		}
		joy_moved = 1;		
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	90 93 6f 02 	sts	0x026F, r25
     d5e:	80 93 6e 02 	sts	0x026E, r24
     d62:	79 01       	movw	r14, r18
     d64:	06 c0       	rjmp	.+12     	; 0xd72 <draw_list+0xa8>
	}
	else if (dir == NEUTRAL){ //THIS IS NEW
     d66:	8f 3f       	cpi	r24, 0xFF	; 255
     d68:	21 f4       	brne	.+8      	; 0xd72 <draw_list+0xa8>
		joy_moved = 0;
     d6a:	10 92 6f 02 	sts	0x026F, r1
     d6e:	10 92 6e 02 	sts	0x026E, r1
	}
	
	return self;
}
     d72:	c7 01       	movw	r24, r14
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	ff 90       	pop	r15
     d7e:	ef 90       	pop	r14
     d80:	08 95       	ret

00000d82 <draw_menu>:
	super->entries[super->num_of_entries - 1] = malloc(strlen(sub->name) * sizeof(char));
	super->entries[super->num_of_entries - 1] = sub->name;
}

//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
     d82:	ef 92       	push	r14
     d84:	ff 92       	push	r15
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	7c 01       	movw	r14, r24
	
	for(int i = 0; i < self->num_of_entries; i++){
     d90:	dc 01       	movw	r26, r24
     d92:	14 96       	adiw	r26, 0x04	; 4
     d94:	8d 91       	ld	r24, X+
     d96:	9c 91       	ld	r25, X
     d98:	15 97       	sbiw	r26, 0x05	; 5
     d9a:	18 16       	cp	r1, r24
     d9c:	19 06       	cpc	r1, r25
     d9e:	e4 f4       	brge	.+56     	; 0xdd8 <draw_menu+0x56>
     da0:	c0 e0       	ldi	r28, 0x00	; 0
     da2:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_string(self->entries[i],0,i,5,0);
     da4:	ce 01       	movw	r24, r28
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	d7 01       	movw	r26, r14
     dac:	12 96       	adiw	r26, 0x02	; 2
     dae:	ed 91       	ld	r30, X+
     db0:	fc 91       	ld	r31, X
     db2:	13 97       	sbiw	r26, 0x03	; 3
     db4:	e8 0f       	add	r30, r24
     db6:	f9 1f       	adc	r31, r25
     db8:	00 e0       	ldi	r16, 0x00	; 0
     dba:	10 e0       	ldi	r17, 0x00	; 0
     dbc:	25 e0       	ldi	r18, 0x05	; 5
     dbe:	4c 2f       	mov	r20, r28
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	91 81       	ldd	r25, Z+1	; 0x01
     dc6:	0e 94 3a 0a 	call	0x1474	; 0x1474 <oled_print_string>
}

//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
	
	for(int i = 0; i < self->num_of_entries; i++){
     dca:	21 96       	adiw	r28, 0x01	; 1
     dcc:	f7 01       	movw	r30, r14
     dce:	84 81       	ldd	r24, Z+4	; 0x04
     dd0:	95 81       	ldd	r25, Z+5	; 0x05
     dd2:	c8 17       	cp	r28, r24
     dd4:	d9 07       	cpc	r29, r25
     dd6:	34 f3       	brlt	.-52     	; 0xda4 <draw_menu+0x22>
		oled_print_string(self->entries[i],0,i,5,0);
	}
	oled_invert_rectangle(0,8*(self->cursor),64,8*((self->cursor) + 1));
     dd8:	d7 01       	movw	r26, r14
     dda:	16 96       	adiw	r26, 0x06	; 6
     ddc:	2d 91       	ld	r18, X+
     dde:	3c 91       	ld	r19, X
     de0:	17 97       	sbiw	r26, 0x07	; 7
     de2:	2f 5f       	subi	r18, 0xFF	; 255
     de4:	3f 4f       	sbci	r19, 0xFF	; 255
     de6:	22 0f       	add	r18, r18
     de8:	33 1f       	adc	r19, r19
     dea:	22 0f       	add	r18, r18
     dec:	33 1f       	adc	r19, r19
     dee:	22 0f       	add	r18, r18
     df0:	33 1f       	adc	r19, r19
     df2:	b9 01       	movw	r22, r18
     df4:	68 50       	subi	r22, 0x08	; 8
     df6:	71 09       	sbc	r23, r1
     df8:	40 e4       	ldi	r20, 0x40	; 64
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 9a 0b 	call	0x1734	; 0x1734 <oled_invert_rectangle>
	
	//Where to go next
	Direction dir = joy_get_direction();
     e04:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <joy_get_direction>
	if(1){	//THIS IS NEW
		if((dir == UP) & (self->cursor != 0)){
     e08:	f7 01       	movw	r30, r14
     e0a:	26 81       	ldd	r18, Z+6	; 0x06
     e0c:	37 81       	ldd	r19, Z+7	; 0x07
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	09 f0       	breq	.+2      	; 0xe16 <draw_menu+0x94>
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	99 23       	and	r25, r25
     e18:	09 f4       	brne	.+2      	; 0xe1c <draw_menu+0x9a>
     e1a:	4f c0       	rjmp	.+158    	; 0xeba <draw_menu+0x138>
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	21 15       	cp	r18, r1
     e20:	31 05       	cpc	r19, r1
     e22:	09 f4       	brne	.+2      	; 0xe26 <draw_menu+0xa4>
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	99 23       	and	r25, r25
     e28:	09 f4       	brne	.+2      	; 0xe2c <draw_menu+0xaa>
     e2a:	47 c0       	rjmp	.+142    	; 0xeba <draw_menu+0x138>
     e2c:	c0 e0       	ldi	r28, 0x00	; 0
     e2e:	d0 e0       	ldi	r29, 0x00	; 0
			for (int i = 0; i < 8; i++,i++){
				oled_invert_rectangle(0,8*(self->cursor) - i - 2,64,8*((self->cursor) + 1) - i - 2);
     e30:	d7 01       	movw	r26, r14
     e32:	16 96       	adiw	r26, 0x06	; 6
     e34:	6d 91       	ld	r22, X+
     e36:	7c 91       	ld	r23, X
     e38:	17 97       	sbiw	r26, 0x07	; 7
     e3a:	6f 5f       	subi	r22, 0xFF	; 255
     e3c:	7f 4f       	sbci	r23, 0xFF	; 255
     e3e:	66 0f       	add	r22, r22
     e40:	77 1f       	adc	r23, r23
     e42:	66 0f       	add	r22, r22
     e44:	77 1f       	adc	r23, r23
     e46:	66 0f       	add	r22, r22
     e48:	77 1f       	adc	r23, r23
     e4a:	9b 01       	movw	r18, r22
     e4c:	2c 1b       	sub	r18, r28
     e4e:	3d 0b       	sbc	r19, r29
     e50:	22 50       	subi	r18, 0x02	; 2
     e52:	31 09       	sbc	r19, r1
     e54:	6c 1b       	sub	r22, r28
     e56:	7d 0b       	sbc	r23, r29
     e58:	6a 50       	subi	r22, 0x0A	; 10
     e5a:	71 09       	sbc	r23, r1
     e5c:	40 e4       	ldi	r20, 0x40	; 64
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 9a 0b 	call	0x1734	; 0x1734 <oled_invert_rectangle>
				oled_invert_rectangle(0,8*(self->cursor) - i,64,8*((self->cursor) + 1) - i);
     e68:	f7 01       	movw	r30, r14
     e6a:	66 81       	ldd	r22, Z+6	; 0x06
     e6c:	77 81       	ldd	r23, Z+7	; 0x07
     e6e:	6f 5f       	subi	r22, 0xFF	; 255
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	66 0f       	add	r22, r22
     e74:	77 1f       	adc	r23, r23
     e76:	66 0f       	add	r22, r22
     e78:	77 1f       	adc	r23, r23
     e7a:	66 0f       	add	r22, r22
     e7c:	77 1f       	adc	r23, r23
     e7e:	9b 01       	movw	r18, r22
     e80:	2c 1b       	sub	r18, r28
     e82:	3d 0b       	sbc	r19, r29
     e84:	68 50       	subi	r22, 0x08	; 8
     e86:	71 09       	sbc	r23, r1
     e88:	6c 1b       	sub	r22, r28
     e8a:	7d 0b       	sbc	r23, r29
     e8c:	40 e4       	ldi	r20, 0x40	; 64
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 9a 0b 	call	0x1734	; 0x1734 <oled_invert_rectangle>
				oled_refresh();
     e98:	0e 94 36 0b 	call	0x166c	; 0x166c <oled_refresh>
	
	//Where to go next
	Direction dir = joy_get_direction();
	if(1){	//THIS IS NEW
		if((dir == UP) & (self->cursor != 0)){
			for (int i = 0; i < 8; i++,i++){
     e9c:	22 96       	adiw	r28, 0x02	; 2
     e9e:	c8 30       	cpi	r28, 0x08	; 8
     ea0:	d1 05       	cpc	r29, r1
     ea2:	31 f6       	brne	.-116    	; 0xe30 <draw_menu+0xae>
				oled_invert_rectangle(0,8*(self->cursor) - i - 2,64,8*((self->cursor) + 1) - i - 2);
				oled_invert_rectangle(0,8*(self->cursor) - i,64,8*((self->cursor) + 1) - i);
				oled_refresh();
			}
			self->cursor--;
     ea4:	d7 01       	movw	r26, r14
     ea6:	16 96       	adiw	r26, 0x06	; 6
     ea8:	8d 91       	ld	r24, X+
     eaa:	9c 91       	ld	r25, X
     eac:	17 97       	sbiw	r26, 0x07	; 7
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	17 96       	adiw	r26, 0x07	; 7
     eb2:	9c 93       	st	X, r25
     eb4:	8e 93       	st	-X, r24
     eb6:	16 97       	sbiw	r26, 0x06	; 6
     eb8:	88 c0       	rjmp	.+272    	; 0xfca <draw_menu+0x248>
		}
		else if((dir == DOWN) & (self->cursor != (self->num_of_entries - 1))){
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	83 30       	cpi	r24, 0x03	; 3
     ebe:	09 f0       	breq	.+2      	; 0xec2 <draw_menu+0x140>
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	99 23       	and	r25, r25
     ec4:	09 f4       	brne	.+2      	; 0xec8 <draw_menu+0x146>
     ec6:	54 c0       	rjmp	.+168    	; 0xf70 <draw_menu+0x1ee>
     ec8:	f7 01       	movw	r30, r14
     eca:	44 81       	ldd	r20, Z+4	; 0x04
     ecc:	55 81       	ldd	r21, Z+5	; 0x05
     ece:	41 50       	subi	r20, 0x01	; 1
     ed0:	51 09       	sbc	r21, r1
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	24 17       	cp	r18, r20
     ed6:	35 07       	cpc	r19, r21
     ed8:	09 f4       	brne	.+2      	; 0xedc <draw_menu+0x15a>
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	99 23       	and	r25, r25
     ede:	09 f4       	brne	.+2      	; 0xee2 <draw_menu+0x160>
     ee0:	47 c0       	rjmp	.+142    	; 0xf70 <draw_menu+0x1ee>
     ee2:	c0 e0       	ldi	r28, 0x00	; 0
     ee4:	d0 e0       	ldi	r29, 0x00	; 0
			
			//---NEW--- ANIMATION FOR DOWNWARDS MOVEMENT
			for (int i = 0; i < 8; i++,i++){
				oled_invert_rectangle(0,8*(self->cursor) + i,64,8*((self->cursor) + 1) + i);
     ee6:	d7 01       	movw	r26, r14
     ee8:	16 96       	adiw	r26, 0x06	; 6
     eea:	6d 91       	ld	r22, X+
     eec:	7c 91       	ld	r23, X
     eee:	17 97       	sbiw	r26, 0x07	; 7
     ef0:	6f 5f       	subi	r22, 0xFF	; 255
     ef2:	7f 4f       	sbci	r23, 0xFF	; 255
     ef4:	66 0f       	add	r22, r22
     ef6:	77 1f       	adc	r23, r23
     ef8:	66 0f       	add	r22, r22
     efa:	77 1f       	adc	r23, r23
     efc:	66 0f       	add	r22, r22
     efe:	77 1f       	adc	r23, r23
     f00:	9b 01       	movw	r18, r22
     f02:	2c 0f       	add	r18, r28
     f04:	3d 1f       	adc	r19, r29
     f06:	68 50       	subi	r22, 0x08	; 8
     f08:	71 09       	sbc	r23, r1
     f0a:	6c 0f       	add	r22, r28
     f0c:	7d 1f       	adc	r23, r29
     f0e:	40 e4       	ldi	r20, 0x40	; 64
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 9a 0b 	call	0x1734	; 0x1734 <oled_invert_rectangle>
				oled_invert_rectangle(0,8*(self->cursor) + i + 2,64,8*((self->cursor) + 1) + i + 2);
     f1a:	f7 01       	movw	r30, r14
     f1c:	66 81       	ldd	r22, Z+6	; 0x06
     f1e:	77 81       	ldd	r23, Z+7	; 0x07
     f20:	6f 5f       	subi	r22, 0xFF	; 255
     f22:	7f 4f       	sbci	r23, 0xFF	; 255
     f24:	66 0f       	add	r22, r22
     f26:	77 1f       	adc	r23, r23
     f28:	66 0f       	add	r22, r22
     f2a:	77 1f       	adc	r23, r23
     f2c:	66 0f       	add	r22, r22
     f2e:	77 1f       	adc	r23, r23
     f30:	9b 01       	movw	r18, r22
     f32:	2c 0f       	add	r18, r28
     f34:	3d 1f       	adc	r19, r29
     f36:	2e 5f       	subi	r18, 0xFE	; 254
     f38:	3f 4f       	sbci	r19, 0xFF	; 255
     f3a:	6c 0f       	add	r22, r28
     f3c:	7d 1f       	adc	r23, r29
     f3e:	66 50       	subi	r22, 0x06	; 6
     f40:	71 09       	sbc	r23, r1
     f42:	40 e4       	ldi	r20, 0x40	; 64
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 9a 0b 	call	0x1734	; 0x1734 <oled_invert_rectangle>
				oled_refresh();
     f4e:	0e 94 36 0b 	call	0x166c	; 0x166c <oled_refresh>
			self->cursor--;
		}
		else if((dir == DOWN) & (self->cursor != (self->num_of_entries - 1))){
			
			//---NEW--- ANIMATION FOR DOWNWARDS MOVEMENT
			for (int i = 0; i < 8; i++,i++){
     f52:	22 96       	adiw	r28, 0x02	; 2
     f54:	c8 30       	cpi	r28, 0x08	; 8
     f56:	d1 05       	cpc	r29, r1
     f58:	31 f6       	brne	.-116    	; 0xee6 <draw_menu+0x164>
				oled_invert_rectangle(0,8*(self->cursor) + i + 2,64,8*((self->cursor) + 1) + i + 2);
				oled_refresh();
			}
			//-------------
			
			self->cursor++;
     f5a:	d7 01       	movw	r26, r14
     f5c:	16 96       	adiw	r26, 0x06	; 6
     f5e:	8d 91       	ld	r24, X+
     f60:	9c 91       	ld	r25, X
     f62:	17 97       	sbiw	r26, 0x07	; 7
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	17 96       	adiw	r26, 0x07	; 7
     f68:	9c 93       	st	X, r25
     f6a:	8e 93       	st	-X, r24
     f6c:	16 97       	sbiw	r26, 0x06	; 6
     f6e:	2d c0       	rjmp	.+90     	; 0xfca <draw_menu+0x248>
		}
		else if((dir == RIGHT) & (self->sub_menus[self->cursor]->num_of_entries != 0)){ //THIS IS CHANGED
     f70:	22 0f       	add	r18, r18
     f72:	33 1f       	adc	r19, r19
     f74:	d7 01       	movw	r26, r14
     f76:	1a 96       	adiw	r26, 0x0a	; 10
     f78:	ed 91       	ld	r30, X+
     f7a:	fc 91       	ld	r31, X
     f7c:	1b 97       	sbiw	r26, 0x0b	; 11
     f7e:	e2 0f       	add	r30, r18
     f80:	f3 1f       	adc	r31, r19
     f82:	01 90       	ld	r0, Z+
     f84:	f0 81       	ld	r31, Z
     f86:	e0 2d       	mov	r30, r0
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	81 11       	cpse	r24, r1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	99 23       	and	r25, r25
     f90:	41 f0       	breq	.+16     	; 0xfa2 <draw_menu+0x220>
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	24 81       	ldd	r18, Z+4	; 0x04
     f96:	35 81       	ldd	r19, Z+5	; 0x05
     f98:	23 2b       	or	r18, r19
     f9a:	09 f4       	brne	.+2      	; 0xf9e <draw_menu+0x21c>
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	91 11       	cpse	r25, r1
     fa0:	11 c0       	rjmp	.+34     	; 0xfc4 <draw_menu+0x242>
			self = self->sub_menus[self->cursor];
		}
		else if((dir == LEFT) & (self->super_menu != NULL)){
     fa2:	f7 01       	movw	r30, r14
     fa4:	20 85       	ldd	r18, Z+8	; 0x08
     fa6:	31 85       	ldd	r19, Z+9	; 0x09
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	82 30       	cpi	r24, 0x02	; 2
     fac:	09 f0       	breq	.+2      	; 0xfb0 <draw_menu+0x22e>
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	99 23       	and	r25, r25
     fb2:	59 f0       	breq	.+22     	; 0xfca <draw_menu+0x248>
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	21 15       	cp	r18, r1
     fb8:	31 05       	cpc	r19, r1
     fba:	09 f4       	brne	.+2      	; 0xfbe <draw_menu+0x23c>
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	81 11       	cpse	r24, r1
     fc0:	03 c0       	rjmp	.+6      	; 0xfc8 <draw_menu+0x246>
     fc2:	03 c0       	rjmp	.+6      	; 0xfca <draw_menu+0x248>
			//-------------
			
			self->cursor++;
		}
		else if((dir == RIGHT) & (self->sub_menus[self->cursor]->num_of_entries != 0)){ //THIS IS CHANGED
			self = self->sub_menus[self->cursor];
     fc4:	7f 01       	movw	r14, r30
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <draw_menu+0x248>
		}
		else if((dir == LEFT) & (self->super_menu != NULL)){
			self = self->super_menu;
     fc8:	79 01       	movw	r14, r18
		}
		joy_moved = 1;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	90 93 6f 02 	sts	0x026F, r25
     fd2:	80 93 6e 02 	sts	0x026E, r24
		joy_moved = 0;
	}
	

	return self;
}
     fd6:	c7 01       	movw	r24, r14
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	ff 90       	pop	r15
     fe2:	ef 90       	pop	r14
     fe4:	08 95       	ret

00000fe6 <add_entries>:
	
}
//----------NO NEED TO CHANGE THINGS BEYOND THIS----------

//Functions for adding entries and nodes
void add_entries(Menu* menu, char* entries[], int num_of_new_entries){
     fe6:	af 92       	push	r10
     fe8:	bf 92       	push	r11
     fea:	cf 92       	push	r12
     fec:	df 92       	push	r13
     fee:	ef 92       	push	r14
     ff0:	ff 92       	push	r15
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	8c 01       	movw	r16, r24
     ffc:	e6 2e       	mov	r14, r22
     ffe:	f7 2e       	mov	r15, r23
    1000:	ea 01       	movw	r28, r20
	
	menu->entries = malloc(num_of_new_entries * sizeof(char*));	//Correct size of double pointer
    1002:	6a 01       	movw	r12, r20
    1004:	cc 0c       	add	r12, r12
    1006:	dd 1c       	adc	r13, r13
    1008:	c6 01       	movw	r24, r12
    100a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <malloc>
    100e:	d8 01       	movw	r26, r16
    1010:	13 96       	adiw	r26, 0x03	; 3
    1012:	9c 93       	st	X, r25
    1014:	8e 93       	st	-X, r24
    1016:	12 97       	sbiw	r26, 0x02	; 2
	
	for(int i = 0; i < num_of_new_entries; i++){
    1018:	1c 16       	cp	r1, r28
    101a:	1d 06       	cpc	r1, r29
    101c:	54 f5       	brge	.+84     	; 0x1072 <add_entries+0x8c>
    101e:	ae 2c       	mov	r10, r14
    1020:	bf 2c       	mov	r11, r15
    1022:	c0 e0       	ldi	r28, 0x00	; 0
    1024:	d0 e0       	ldi	r29, 0x00	; 0
		menu->entries[i] = malloc(strlen(entries[i]) * sizeof(char)); //Allocate space for each string
    1026:	f8 01       	movw	r30, r16
    1028:	e2 80       	ldd	r14, Z+2	; 0x02
    102a:	f3 80       	ldd	r15, Z+3	; 0x03
    102c:	ec 0e       	add	r14, r28
    102e:	fd 1e       	adc	r15, r29
    1030:	f5 01       	movw	r30, r10
    1032:	a0 81       	ld	r26, Z
    1034:	b1 81       	ldd	r27, Z+1	; 0x01
    1036:	fd 01       	movw	r30, r26
    1038:	01 90       	ld	r0, Z+
    103a:	00 20       	and	r0, r0
    103c:	e9 f7       	brne	.-6      	; 0x1038 <add_entries+0x52>
    103e:	31 97       	sbiw	r30, 0x01	; 1
    1040:	cf 01       	movw	r24, r30
    1042:	8a 1b       	sub	r24, r26
    1044:	9b 0b       	sbc	r25, r27
    1046:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <malloc>
    104a:	d7 01       	movw	r26, r14
    104c:	8d 93       	st	X+, r24
    104e:	9c 93       	st	X, r25
		menu->entries[i] =  entries[i];								  //Adds each string
    1050:	f5 01       	movw	r30, r10
    1052:	81 91       	ld	r24, Z+
    1054:	91 91       	ld	r25, Z+
    1056:	5f 01       	movw	r10, r30
    1058:	d8 01       	movw	r26, r16
    105a:	12 96       	adiw	r26, 0x02	; 2
    105c:	ed 91       	ld	r30, X+
    105e:	fc 91       	ld	r31, X
    1060:	13 97       	sbiw	r26, 0x03	; 3
    1062:	ec 0f       	add	r30, r28
    1064:	fd 1f       	adc	r31, r29
    1066:	91 83       	std	Z+1, r25	; 0x01
    1068:	80 83       	st	Z, r24
    106a:	22 96       	adiw	r28, 0x02	; 2
//Functions for adding entries and nodes
void add_entries(Menu* menu, char* entries[], int num_of_new_entries){
	
	menu->entries = malloc(num_of_new_entries * sizeof(char*));	//Correct size of double pointer
	
	for(int i = 0; i < num_of_new_entries; i++){
    106c:	cc 16       	cp	r12, r28
    106e:	dd 06       	cpc	r13, r29
    1070:	d1 f6       	brne	.-76     	; 0x1026 <add_entries+0x40>
		//empty->name = entries[i];
		//add_sub_menu(menu, empty);
		//menu->num_of_entries+=1;
	}
	//menu->num_of_entries = num_of_new_entries;
	menu->cursor = 0; //To make sure the cursor is not something else
    1072:	f8 01       	movw	r30, r16
    1074:	17 82       	std	Z+7, r1	; 0x07
    1076:	16 82       	std	Z+6, r1	; 0x06
}
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	df 90       	pop	r13
    1086:	cf 90       	pop	r12
    1088:	bf 90       	pop	r11
    108a:	af 90       	pop	r10
    108c:	08 95       	ret

0000108e <add_sub_menu>:

void add_sub_menu(Menu* super, Menu* sub){
    108e:	ef 92       	push	r14
    1090:	ff 92       	push	r15
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	ec 01       	movw	r28, r24
    109c:	8b 01       	movw	r16, r22
	super->num_of_entries += 1;		//Num of entries in super are updated
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	9d 81       	ldd	r25, Y+5	; 0x05
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	9d 83       	std	Y+5, r25	; 0x05
    10a6:	8c 83       	std	Y+4, r24	; 0x04
	
	//Pointers to and from the menus are set correctly
	sub->super_menu = super;
    10a8:	fb 01       	movw	r30, r22
    10aa:	d1 87       	std	Z+9, r29	; 0x09
    10ac:	c0 87       	std	Z+8, r28	; 0x08
	super->sub_menus = realloc(super->sub_menus, super->num_of_entries * sizeof(Menu*));
    10ae:	6c 81       	ldd	r22, Y+4	; 0x04
    10b0:	7d 81       	ldd	r23, Y+5	; 0x05
    10b2:	66 0f       	add	r22, r22
    10b4:	77 1f       	adc	r23, r23
    10b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    10b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    10ba:	0e 94 90 10 	call	0x2120	; 0x2120 <realloc>
    10be:	9b 87       	std	Y+11, r25	; 0x0b
    10c0:	8a 87       	std	Y+10, r24	; 0x0a
	super->sub_menus[super->num_of_entries - 1] = malloc(sizeof(Menu));
    10c2:	ec 80       	ldd	r14, Y+4	; 0x04
    10c4:	fd 80       	ldd	r15, Y+5	; 0x05
    10c6:	f1 e0       	ldi	r31, 0x01	; 1
    10c8:	ef 1a       	sub	r14, r31
    10ca:	f0 e8       	ldi	r31, 0x80	; 128
    10cc:	ff 0a       	sbc	r15, r31
    10ce:	ee 0c       	add	r14, r14
    10d0:	ff 1c       	adc	r15, r15
    10d2:	e8 0e       	add	r14, r24
    10d4:	f9 1e       	adc	r15, r25
    10d6:	8e e0       	ldi	r24, 0x0E	; 14
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <malloc>
    10de:	f7 01       	movw	r30, r14
    10e0:	91 83       	std	Z+1, r25	; 0x01
    10e2:	80 83       	st	Z, r24
	super->sub_menus[super->num_of_entries - 1] = sub;
    10e4:	ec 81       	ldd	r30, Y+4	; 0x04
    10e6:	fd 81       	ldd	r31, Y+5	; 0x05
    10e8:	e1 50       	subi	r30, 0x01	; 1
    10ea:	f0 48       	sbci	r31, 0x80	; 128
    10ec:	ee 0f       	add	r30, r30
    10ee:	ff 1f       	adc	r31, r31
    10f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    10f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    10f4:	e8 0f       	add	r30, r24
    10f6:	f9 1f       	adc	r31, r25
    10f8:	11 83       	std	Z+1, r17	; 0x01
    10fa:	00 83       	st	Z, r16
	
	//Name of entries in the super menu are updated
	super->entries = realloc(super->entries, super->num_of_entries * sizeof(char*));
    10fc:	6c 81       	ldd	r22, Y+4	; 0x04
    10fe:	7d 81       	ldd	r23, Y+5	; 0x05
    1100:	66 0f       	add	r22, r22
    1102:	77 1f       	adc	r23, r23
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	9b 81       	ldd	r25, Y+3	; 0x03
    1108:	0e 94 90 10 	call	0x2120	; 0x2120 <realloc>
    110c:	9b 83       	std	Y+3, r25	; 0x03
    110e:	8a 83       	std	Y+2, r24	; 0x02
	super->entries[super->num_of_entries - 1] = malloc(strlen(sub->name) * sizeof(char));
    1110:	ec 80       	ldd	r14, Y+4	; 0x04
    1112:	fd 80       	ldd	r15, Y+5	; 0x05
    1114:	f1 e0       	ldi	r31, 0x01	; 1
    1116:	ef 1a       	sub	r14, r31
    1118:	f0 e8       	ldi	r31, 0x80	; 128
    111a:	ff 0a       	sbc	r15, r31
    111c:	ee 0c       	add	r14, r14
    111e:	ff 1c       	adc	r15, r15
    1120:	e8 0e       	add	r14, r24
    1122:	f9 1e       	adc	r15, r25
    1124:	f8 01       	movw	r30, r16
    1126:	a0 81       	ld	r26, Z
    1128:	b1 81       	ldd	r27, Z+1	; 0x01
    112a:	fd 01       	movw	r30, r26
    112c:	01 90       	ld	r0, Z+
    112e:	00 20       	and	r0, r0
    1130:	e9 f7       	brne	.-6      	; 0x112c <add_sub_menu+0x9e>
    1132:	31 97       	sbiw	r30, 0x01	; 1
    1134:	cf 01       	movw	r24, r30
    1136:	8a 1b       	sub	r24, r26
    1138:	9b 0b       	sbc	r25, r27
    113a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <malloc>
    113e:	f7 01       	movw	r30, r14
    1140:	91 83       	std	Z+1, r25	; 0x01
    1142:	80 83       	st	Z, r24
	super->entries[super->num_of_entries - 1] = sub->name;
    1144:	f8 01       	movw	r30, r16
    1146:	80 81       	ld	r24, Z
    1148:	91 81       	ldd	r25, Z+1	; 0x01
    114a:	ec 81       	ldd	r30, Y+4	; 0x04
    114c:	fd 81       	ldd	r31, Y+5	; 0x05
    114e:	e1 50       	subi	r30, 0x01	; 1
    1150:	f0 48       	sbci	r31, 0x80	; 128
    1152:	ee 0f       	add	r30, r30
    1154:	ff 1f       	adc	r31, r31
    1156:	2a 81       	ldd	r18, Y+2	; 0x02
    1158:	3b 81       	ldd	r19, Y+3	; 0x03
    115a:	e2 0f       	add	r30, r18
    115c:	f3 1f       	adc	r31, r19
    115e:	91 83       	std	Z+1, r25	; 0x01
    1160:	80 83       	st	Z, r24
}
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	ff 90       	pop	r15
    116c:	ef 90       	pop	r14
    116e:	08 95       	ret

00001170 <menu_init>:
	//.type = MENU,
	.draw = draw_menu
};

//The initializer - How the menus are related
void menu_init(){
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	6c 97       	sbiw	r28, 0x1c	; 28
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
	
	char* control_entr[3] = {"Player1", "Player2", "Player3"};
    1184:	86 e0       	ldi	r24, 0x06	; 6
    1186:	ec e6       	ldi	r30, 0x6C	; 108
    1188:	f1 e0       	ldi	r31, 0x01	; 1
    118a:	de 01       	movw	r26, r28
    118c:	11 96       	adiw	r26, 0x01	; 1
    118e:	01 90       	ld	r0, Z+
    1190:	0d 92       	st	X+, r0
    1192:	8a 95       	dec	r24
    1194:	e1 f7       	brne	.-8      	; 0x118e <menu_init+0x1e>
	add_entries(&control, control_entr, 3);
    1196:	43 e0       	ldi	r20, 0x03	; 3
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	be 01       	movw	r22, r28
    119c:	6f 5f       	subi	r22, 0xFF	; 255
    119e:	7f 4f       	sbci	r23, 0xFF	; 255
    11a0:	8e e1       	ldi	r24, 0x1E	; 30
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <add_entries>
	add_sub_menu(&options, &control);
    11a8:	6e e1       	ldi	r22, 0x1E	; 30
    11aa:	71 e0       	ldi	r23, 0x01	; 1
    11ac:	8a e3       	ldi	r24, 0x3A	; 58
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	0e 94 47 08 	call	0x108e	; 0x108e <add_sub_menu>
	
	char* contro_entr[4] = {"Low", "Medium", "High","Ultra"};
    11b4:	88 e0       	ldi	r24, 0x08	; 8
    11b6:	e2 e7       	ldi	r30, 0x72	; 114
    11b8:	f1 e0       	ldi	r31, 0x01	; 1
    11ba:	de 01       	movw	r26, r28
    11bc:	17 96       	adiw	r26, 0x07	; 7
    11be:	01 90       	ld	r0, Z+
    11c0:	0d 92       	st	X+, r0
    11c2:	8a 95       	dec	r24
    11c4:	e1 f7       	brne	.-8      	; 0x11be <menu_init+0x4e>
	add_entries(&contro, contro_entr, 4);
    11c6:	44 e0       	ldi	r20, 0x04	; 4
    11c8:	50 e0       	ldi	r21, 0x00	; 0
    11ca:	be 01       	movw	r22, r28
    11cc:	69 5f       	subi	r22, 0xF9	; 249
    11ce:	7f 4f       	sbci	r23, 0xFF	; 255
    11d0:	80 e1       	ldi	r24, 0x10	; 16
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <add_entries>
	add_sub_menu(&options, &contro);
    11d8:	60 e1       	ldi	r22, 0x10	; 16
    11da:	71 e0       	ldi	r23, 0x01	; 1
    11dc:	8a e3       	ldi	r24, 0x3A	; 58
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	0e 94 47 08 	call	0x108e	; 0x108e <add_sub_menu>
	
	add_sub_menu(&main_menu, &options);
    11e4:	6a e3       	ldi	r22, 0x3A	; 58
    11e6:	71 e0       	ldi	r23, 0x01	; 1
    11e8:	86 e5       	ldi	r24, 0x56	; 86
    11ea:	91 e0       	ldi	r25, 0x01	; 1
    11ec:	0e 94 47 08 	call	0x108e	; 0x108e <add_sub_menu>
	
	char* diff_entr[3] = {"Easy", "Medium", "Hard"};
    11f0:	86 e0       	ldi	r24, 0x06	; 6
    11f2:	ea e7       	ldi	r30, 0x7A	; 122
    11f4:	f1 e0       	ldi	r31, 0x01	; 1
    11f6:	de 01       	movw	r26, r28
    11f8:	1f 96       	adiw	r26, 0x0f	; 15
    11fa:	01 90       	ld	r0, Z+
    11fc:	0d 92       	st	X+, r0
    11fe:	8a 95       	dec	r24
    1200:	e1 f7       	brne	.-8      	; 0x11fa <menu_init+0x8a>
	add_entries(&difficulty, diff_entr, 3);
    1202:	43 e0       	ldi	r20, 0x03	; 3
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	be 01       	movw	r22, r28
    1208:	61 5f       	subi	r22, 0xF1	; 241
    120a:	7f 4f       	sbci	r23, 0xFF	; 255
    120c:	88 e4       	ldi	r24, 0x48	; 72
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <add_entries>
	add_sub_menu(&main_menu, &difficulty);
    1214:	68 e4       	ldi	r22, 0x48	; 72
    1216:	71 e0       	ldi	r23, 0x01	; 1
    1218:	86 e5       	ldi	r24, 0x56	; 86
    121a:	91 e0       	ldi	r25, 0x01	; 1
    121c:	0e 94 47 08 	call	0x108e	; 0x108e <add_sub_menu>
	
	char* high_entr[4] = {"1. Herman","2. Raoul","3. Alle andre","-inf^inf. Hans"};
    1220:	88 e0       	ldi	r24, 0x08	; 8
    1222:	e0 e8       	ldi	r30, 0x80	; 128
    1224:	f1 e0       	ldi	r31, 0x01	; 1
    1226:	de 01       	movw	r26, r28
    1228:	55 96       	adiw	r26, 0x15	; 21
    122a:	01 90       	ld	r0, Z+
    122c:	0d 92       	st	X+, r0
    122e:	8a 95       	dec	r24
    1230:	e1 f7       	brne	.-8      	; 0x122a <menu_init+0xba>
	add_entries(&highscore, high_entr,4);
    1232:	44 e0       	ldi	r20, 0x04	; 4
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	be 01       	movw	r22, r28
    1238:	6b 5e       	subi	r22, 0xEB	; 235
    123a:	7f 4f       	sbci	r23, 0xFF	; 255
    123c:	8c e2       	ldi	r24, 0x2C	; 44
    123e:	91 e0       	ldi	r25, 0x01	; 1
    1240:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <add_entries>
	add_sub_menu(&main_menu, &highscore);
    1244:	6c e2       	ldi	r22, 0x2C	; 44
    1246:	71 e0       	ldi	r23, 0x01	; 1
    1248:	86 e5       	ldi	r24, 0x56	; 86
    124a:	91 e0       	ldi	r25, 0x01	; 1
    124c:	0e 94 47 08 	call	0x108e	; 0x108e <add_sub_menu>
	
}
    1250:	6c 96       	adiw	r28, 0x1c	; 28
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	08 95       	ret

00001262 <menu_run_display>:
	//
	
Menu* current_menu = &main_menu;

void menu_run_display(){
	oled_clear_screen();
    1262:	0e 94 a2 0a 	call	0x1544	; 0x1544 <oled_clear_screen>
	current_menu = current_menu->draw(current_menu);
    1266:	80 91 0e 01 	lds	r24, 0x010E
    126a:	90 91 0f 01 	lds	r25, 0x010F
    126e:	dc 01       	movw	r26, r24
    1270:	1c 96       	adiw	r26, 0x0c	; 12
    1272:	ed 91       	ld	r30, X+
    1274:	fc 91       	ld	r31, X
    1276:	1d 97       	sbiw	r26, 0x0d	; 13
    1278:	09 95       	icall
    127a:	90 93 0f 01 	sts	0x010F, r25
    127e:	80 93 0e 01 	sts	0x010E, r24
	oled_refresh();
    1282:	0e 94 36 0b 	call	0x166c	; 0x166c <oled_refresh>
    1286:	08 95       	ret

00001288 <oled_write_data>:
    1288:	20 91 64 01 	lds	r18, 0x0164
    128c:	30 91 65 01 	lds	r19, 0x0165
    1290:	23 2b       	or	r18, r19
    1292:	f9 f0       	breq	.+62     	; 0x12d2 <oled_write_data+0x4a>
    1294:	20 91 70 02 	lds	r18, 0x0270
    1298:	30 91 71 02 	lds	r19, 0x0271
    129c:	21 15       	cp	r18, r1
    129e:	94 e0       	ldi	r25, 0x04	; 4
    12a0:	39 07       	cpc	r19, r25
    12a2:	2c f0       	brlt	.+10     	; 0x12ae <oled_write_data+0x26>
    12a4:	87 e5       	ldi	r24, 0x57	; 87
    12a6:	92 e0       	ldi	r25, 0x02	; 2
    12a8:	0e 94 c2 11 	call	0x2384	; 0x2384 <puts>
    12ac:	08 95       	ret
    12ae:	40 91 68 01 	lds	r20, 0x0168
    12b2:	50 91 69 01 	lds	r21, 0x0169
    12b6:	fa 01       	movw	r30, r20
    12b8:	e2 0f       	add	r30, r18
    12ba:	f3 1f       	adc	r31, r19
    12bc:	80 83       	st	Z, r24
    12be:	80 91 70 02 	lds	r24, 0x0270
    12c2:	90 91 71 02 	lds	r25, 0x0271
    12c6:	01 96       	adiw	r24, 0x01	; 1
    12c8:	90 93 71 02 	sts	0x0271, r25
    12cc:	80 93 70 02 	sts	0x0270, r24
    12d0:	08 95       	ret
    12d2:	e0 91 66 01 	lds	r30, 0x0166
    12d6:	f0 91 67 01 	lds	r31, 0x0167
    12da:	80 83       	st	Z, r24
    12dc:	08 95       	ret

000012de <oled_print_char>:
    12de:	ef 92       	push	r14
    12e0:	ff 92       	push	r15
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	68 30       	cpi	r22, 0x08	; 8
    12ec:	59 f4       	brne	.+22     	; 0x1304 <oled_print_char+0x26>
    12ee:	08 2f       	mov	r16, r24
    12f0:	10 e0       	ldi	r17, 0x00	; 0
    12f2:	00 0f       	add	r16, r16
    12f4:	11 1f       	adc	r17, r17
    12f6:	00 0f       	add	r16, r16
    12f8:	11 1f       	adc	r17, r17
    12fa:	00 0f       	add	r16, r16
    12fc:	11 1f       	adc	r17, r17
    12fe:	0b 50       	subi	r16, 0x0B	; 11
    1300:	1d 4f       	sbci	r17, 0xFD	; 253
    1302:	1a c0       	rjmp	.+52     	; 0x1338 <oled_print_char+0x5a>
    1304:	65 30       	cpi	r22, 0x05	; 5
    1306:	71 f4       	brne	.+28     	; 0x1324 <oled_print_char+0x46>
    1308:	08 2f       	mov	r16, r24
    130a:	10 e0       	ldi	r17, 0x00	; 0
    130c:	00 52       	subi	r16, 0x20	; 32
    130e:	11 09       	sbc	r17, r1
    1310:	c8 01       	movw	r24, r16
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	08 0f       	add	r16, r24
    131c:	19 1f       	adc	r17, r25
    131e:	06 5e       	subi	r16, 0xE6	; 230
    1320:	1d 4f       	sbci	r17, 0xFD	; 253
    1322:	0a c0       	rjmp	.+20     	; 0x1338 <oled_print_char+0x5a>
    1324:	64 30       	cpi	r22, 0x04	; 4
    1326:	41 f4       	brne	.+16     	; 0x1338 <oled_print_char+0x5a>
    1328:	08 2f       	mov	r16, r24
    132a:	10 e0       	ldi	r17, 0x00	; 0
    132c:	00 0f       	add	r16, r16
    132e:	11 1f       	adc	r17, r17
    1330:	00 0f       	add	r16, r16
    1332:	11 1f       	adc	r17, r17
    1334:	02 5e       	subi	r16, 0xE2	; 226
    1336:	1f 4f       	sbci	r17, 0xFF	; 255
    1338:	45 2b       	or	r20, r21
    133a:	31 f0       	breq	.+12     	; 0x1348 <oled_print_char+0x6a>
    133c:	e6 2e       	mov	r14, r22
    133e:	f1 2c       	mov	r15, r1
    1340:	1e 14       	cp	r1, r14
    1342:	1f 04       	cpc	r1, r15
    1344:	9c f0       	brlt	.+38     	; 0x136c <oled_print_char+0x8e>
    1346:	1f c0       	rjmp	.+62     	; 0x1386 <oled_print_char+0xa8>
    1348:	e6 2e       	mov	r14, r22
    134a:	f1 2c       	mov	r15, r1
    134c:	1e 14       	cp	r1, r14
    134e:	1f 04       	cpc	r1, r15
    1350:	d4 f4       	brge	.+52     	; 0x1386 <oled_print_char+0xa8>
    1352:	c0 e0       	ldi	r28, 0x00	; 0
    1354:	d0 e0       	ldi	r29, 0x00	; 0
    1356:	fe 01       	movw	r30, r28
    1358:	e0 0f       	add	r30, r16
    135a:	f1 1f       	adc	r31, r17
    135c:	84 91       	lpm	r24, Z
    135e:	0e 94 44 09 	call	0x1288	; 0x1288 <oled_write_data>
    1362:	21 96       	adiw	r28, 0x01	; 1
    1364:	ce 15       	cp	r28, r14
    1366:	df 05       	cpc	r29, r15
    1368:	b4 f3       	brlt	.-20     	; 0x1356 <oled_print_char+0x78>
    136a:	0d c0       	rjmp	.+26     	; 0x1386 <oled_print_char+0xa8>
    136c:	c0 e0       	ldi	r28, 0x00	; 0
    136e:	d0 e0       	ldi	r29, 0x00	; 0
    1370:	fe 01       	movw	r30, r28
    1372:	e0 0f       	add	r30, r16
    1374:	f1 1f       	adc	r31, r17
    1376:	84 91       	lpm	r24, Z
    1378:	80 95       	com	r24
    137a:	0e 94 44 09 	call	0x1288	; 0x1288 <oled_write_data>
    137e:	21 96       	adiw	r28, 0x01	; 1
    1380:	ce 15       	cp	r28, r14
    1382:	df 05       	cpc	r29, r15
    1384:	ac f3       	brlt	.-22     	; 0x1370 <oled_print_char+0x92>
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	ff 90       	pop	r15
    1390:	ef 90       	pop	r14
    1392:	08 95       	ret

00001394 <oled_read_data>:
    1394:	80 91 64 01 	lds	r24, 0x0164
    1398:	90 91 65 01 	lds	r25, 0x0165
    139c:	89 2b       	or	r24, r25
    139e:	b9 f0       	breq	.+46     	; 0x13ce <oled_read_data+0x3a>
    13a0:	80 91 70 02 	lds	r24, 0x0270
    13a4:	90 91 71 02 	lds	r25, 0x0271
    13a8:	81 15       	cp	r24, r1
    13aa:	24 e0       	ldi	r18, 0x04	; 4
    13ac:	92 07       	cpc	r25, r18
    13ae:	34 f0       	brlt	.+12     	; 0x13bc <oled_read_data+0x28>
    13b0:	87 e5       	ldi	r24, 0x57	; 87
    13b2:	92 e0       	ldi	r25, 0x02	; 2
    13b4:	0e 94 c2 11 	call	0x2384	; 0x2384 <puts>
    13b8:	8f ef       	ldi	r24, 0xFF	; 255
    13ba:	08 95       	ret
    13bc:	20 91 68 01 	lds	r18, 0x0168
    13c0:	30 91 69 01 	lds	r19, 0x0169
    13c4:	f9 01       	movw	r30, r18
    13c6:	e8 0f       	add	r30, r24
    13c8:	f9 1f       	adc	r31, r25
    13ca:	80 81       	ld	r24, Z
    13cc:	08 95       	ret
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	08 95       	ret

000013d2 <oled_goto_line>:
    13d2:	40 91 64 01 	lds	r20, 0x0164
    13d6:	50 91 65 01 	lds	r21, 0x0165
    13da:	45 2b       	or	r20, r21
    13dc:	d1 f0       	breq	.+52     	; 0x1412 <oled_goto_line+0x40>
    13de:	20 91 70 02 	lds	r18, 0x0270
    13e2:	30 91 71 02 	lds	r19, 0x0271
    13e6:	2f 77       	andi	r18, 0x7F	; 127
    13e8:	30 78       	andi	r19, 0x80	; 128
    13ea:	33 23       	and	r19, r19
    13ec:	34 f4       	brge	.+12     	; 0x13fa <oled_goto_line+0x28>
    13ee:	21 50       	subi	r18, 0x01	; 1
    13f0:	31 09       	sbc	r19, r1
    13f2:	20 68       	ori	r18, 0x80	; 128
    13f4:	3f 6f       	ori	r19, 0xFF	; 255
    13f6:	2f 5f       	subi	r18, 0xFF	; 255
    13f8:	3f 4f       	sbci	r19, 0xFF	; 255
    13fa:	96 95       	lsr	r25
    13fc:	98 2f       	mov	r25, r24
    13fe:	88 27       	eor	r24, r24
    1400:	97 95       	ror	r25
    1402:	87 95       	ror	r24
    1404:	28 0f       	add	r18, r24
    1406:	39 1f       	adc	r19, r25
    1408:	30 93 71 02 	sts	0x0271, r19
    140c:	20 93 70 02 	sts	0x0270, r18
    1410:	08 95       	ret
    1412:	80 55       	subi	r24, 0x50	; 80
    1414:	e0 91 6a 01 	lds	r30, 0x016A
    1418:	f0 91 6b 01 	lds	r31, 0x016B
    141c:	80 83       	st	Z, r24
    141e:	08 95       	ret

00001420 <oled_goto_column>:
    1420:	20 91 64 01 	lds	r18, 0x0164
    1424:	30 91 65 01 	lds	r19, 0x0165
    1428:	23 2b       	or	r18, r19
    142a:	c1 f0       	breq	.+48     	; 0x145c <oled_goto_column+0x3c>
    142c:	40 91 70 02 	lds	r20, 0x0270
    1430:	50 91 71 02 	lds	r21, 0x0271
    1434:	9a 01       	movw	r18, r20
    1436:	2f 77       	andi	r18, 0x7F	; 127
    1438:	30 78       	andi	r19, 0x80	; 128
    143a:	33 23       	and	r19, r19
    143c:	34 f4       	brge	.+12     	; 0x144a <oled_goto_column+0x2a>
    143e:	21 50       	subi	r18, 0x01	; 1
    1440:	31 09       	sbc	r19, r1
    1442:	20 68       	ori	r18, 0x80	; 128
    1444:	3f 6f       	ori	r19, 0xFF	; 255
    1446:	2f 5f       	subi	r18, 0xFF	; 255
    1448:	3f 4f       	sbci	r19, 0xFF	; 255
    144a:	42 1b       	sub	r20, r18
    144c:	53 0b       	sbc	r21, r19
    144e:	84 0f       	add	r24, r20
    1450:	95 1f       	adc	r25, r21
    1452:	90 93 71 02 	sts	0x0271, r25
    1456:	80 93 70 02 	sts	0x0270, r24
    145a:	08 95       	ret
    145c:	e0 91 6a 01 	lds	r30, 0x016A
    1460:	f0 91 6b 01 	lds	r31, 0x016B
    1464:	10 82       	st	Z, r1
    1466:	e0 91 6a 01 	lds	r30, 0x016A
    146a:	f0 91 6b 01 	lds	r31, 0x016B
    146e:	80 e1       	ldi	r24, 0x10	; 16
    1470:	80 83       	st	Z, r24
    1472:	08 95       	ret

00001474 <oled_print_string>:
    1474:	6f 92       	push	r6
    1476:	7f 92       	push	r7
    1478:	8f 92       	push	r8
    147a:	9f 92       	push	r9
    147c:	af 92       	push	r10
    147e:	bf 92       	push	r11
    1480:	cf 92       	push	r12
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	ec 01       	movw	r28, r24
    1492:	96 2e       	mov	r9, r22
    1494:	74 2e       	mov	r7, r20
    1496:	82 2e       	mov	r8, r18
    1498:	86 2f       	mov	r24, r22
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 10 0a 	call	0x1420	; 0x1420 <oled_goto_column>
    14a0:	87 2d       	mov	r24, r7
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <oled_goto_line>
    14a8:	fe 01       	movw	r30, r28
    14aa:	01 90       	ld	r0, Z+
    14ac:	00 20       	and	r0, r0
    14ae:	e9 f7       	brne	.-6      	; 0x14aa <oled_print_string+0x36>
    14b0:	31 97       	sbiw	r30, 0x01	; 1
    14b2:	6f 01       	movw	r12, r30
    14b4:	cc 1a       	sub	r12, r28
    14b6:	dd 0a       	sbc	r13, r29
    14b8:	1c 14       	cp	r1, r12
    14ba:	1d 04       	cpc	r1, r13
    14bc:	24 f5       	brge	.+72     	; 0x1506 <oled_print_string+0x92>
    14be:	7e 01       	movw	r14, r28
    14c0:	c0 e0       	ldi	r28, 0x00	; 0
    14c2:	d0 e0       	ldi	r29, 0x00	; 0
    14c4:	8f e7       	ldi	r24, 0x7F	; 127
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	5c 01       	movw	r10, r24
    14ca:	a8 18       	sub	r10, r8
    14cc:	b1 08       	sbc	r11, r1
    14ce:	61 2c       	mov	r6, r1
    14d0:	a8 01       	movw	r20, r16
    14d2:	68 2d       	mov	r22, r8
    14d4:	f7 01       	movw	r30, r14
    14d6:	81 91       	ld	r24, Z+
    14d8:	7f 01       	movw	r14, r30
    14da:	0e 94 6f 09 	call	0x12de	; 0x12de <oled_print_char>
    14de:	98 0c       	add	r9, r8
    14e0:	89 2d       	mov	r24, r9
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a8 16       	cp	r10, r24
    14e6:	b9 06       	cpc	r11, r25
    14e8:	54 f4       	brge	.+20     	; 0x14fe <oled_print_string+0x8a>
    14ea:	73 94       	inc	r7
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 10 0a 	call	0x1420	; 0x1420 <oled_goto_column>
    14f4:	87 2d       	mov	r24, r7
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <oled_goto_line>
    14fc:	96 2c       	mov	r9, r6
    14fe:	21 96       	adiw	r28, 0x01	; 1
    1500:	cc 16       	cp	r12, r28
    1502:	dd 06       	cpc	r13, r29
    1504:	29 f7       	brne	.-54     	; 0x14d0 <oled_print_string+0x5c>
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	1f 91       	pop	r17
    150c:	0f 91       	pop	r16
    150e:	ff 90       	pop	r15
    1510:	ef 90       	pop	r14
    1512:	df 90       	pop	r13
    1514:	cf 90       	pop	r12
    1516:	bf 90       	pop	r11
    1518:	af 90       	pop	r10
    151a:	9f 90       	pop	r9
    151c:	8f 90       	pop	r8
    151e:	7f 90       	pop	r7
    1520:	6f 90       	pop	r6
    1522:	08 95       	ret

00001524 <oled_clear_line>:
    1524:	cf 93       	push	r28
    1526:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <oled_goto_line>
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 10 0a 	call	0x1420	; 0x1420 <oled_goto_column>
    1532:	c0 e0       	ldi	r28, 0x00	; 0
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	0e 94 44 09 	call	0x1288	; 0x1288 <oled_write_data>
    153a:	cf 5f       	subi	r28, 0xFF	; 255
    153c:	c0 38       	cpi	r28, 0x80	; 128
    153e:	d1 f7       	brne	.-12     	; 0x1534 <oled_clear_line+0x10>
    1540:	cf 91       	pop	r28
    1542:	08 95       	ret

00001544 <oled_clear_screen>:
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	c0 e0       	ldi	r28, 0x00	; 0
    154a:	d0 e0       	ldi	r29, 0x00	; 0
    154c:	ce 01       	movw	r24, r28
    154e:	0e 94 92 0a 	call	0x1524	; 0x1524 <oled_clear_line>
    1552:	21 96       	adiw	r28, 0x01	; 1
    1554:	c8 30       	cpi	r28, 0x08	; 8
    1556:	d1 05       	cpc	r29, r1
    1558:	c9 f7       	brne	.-14     	; 0x154c <oled_clear_screen+0x8>
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	08 95       	ret

00001560 <oled_init>:
    1560:	e0 91 6a 01 	lds	r30, 0x016A
    1564:	f0 91 6b 01 	lds	r31, 0x016B
    1568:	8e ea       	ldi	r24, 0xAE	; 174
    156a:	80 83       	st	Z, r24
    156c:	e0 91 6a 01 	lds	r30, 0x016A
    1570:	f0 91 6b 01 	lds	r31, 0x016B
    1574:	81 ea       	ldi	r24, 0xA1	; 161
    1576:	80 83       	st	Z, r24
    1578:	e0 91 6a 01 	lds	r30, 0x016A
    157c:	f0 91 6b 01 	lds	r31, 0x016B
    1580:	8a ed       	ldi	r24, 0xDA	; 218
    1582:	80 83       	st	Z, r24
    1584:	e0 91 6a 01 	lds	r30, 0x016A
    1588:	f0 91 6b 01 	lds	r31, 0x016B
    158c:	82 e1       	ldi	r24, 0x12	; 18
    158e:	80 83       	st	Z, r24
    1590:	e0 91 6a 01 	lds	r30, 0x016A
    1594:	f0 91 6b 01 	lds	r31, 0x016B
    1598:	88 ec       	ldi	r24, 0xC8	; 200
    159a:	80 83       	st	Z, r24
    159c:	e0 91 6a 01 	lds	r30, 0x016A
    15a0:	f0 91 6b 01 	lds	r31, 0x016B
    15a4:	88 ea       	ldi	r24, 0xA8	; 168
    15a6:	80 83       	st	Z, r24
    15a8:	e0 91 6a 01 	lds	r30, 0x016A
    15ac:	f0 91 6b 01 	lds	r31, 0x016B
    15b0:	8f e3       	ldi	r24, 0x3F	; 63
    15b2:	80 83       	st	Z, r24
    15b4:	e0 91 6a 01 	lds	r30, 0x016A
    15b8:	f0 91 6b 01 	lds	r31, 0x016B
    15bc:	85 ed       	ldi	r24, 0xD5	; 213
    15be:	80 83       	st	Z, r24
    15c0:	e0 91 6a 01 	lds	r30, 0x016A
    15c4:	f0 91 6b 01 	lds	r31, 0x016B
    15c8:	80 e8       	ldi	r24, 0x80	; 128
    15ca:	80 83       	st	Z, r24
    15cc:	e0 91 6a 01 	lds	r30, 0x016A
    15d0:	f0 91 6b 01 	lds	r31, 0x016B
    15d4:	81 e8       	ldi	r24, 0x81	; 129
    15d6:	80 83       	st	Z, r24
    15d8:	e0 91 6a 01 	lds	r30, 0x016A
    15dc:	f0 91 6b 01 	lds	r31, 0x016B
    15e0:	80 e5       	ldi	r24, 0x50	; 80
    15e2:	80 83       	st	Z, r24
    15e4:	e0 91 6a 01 	lds	r30, 0x016A
    15e8:	f0 91 6b 01 	lds	r31, 0x016B
    15ec:	89 ed       	ldi	r24, 0xD9	; 217
    15ee:	80 83       	st	Z, r24
    15f0:	e0 91 6a 01 	lds	r30, 0x016A
    15f4:	f0 91 6b 01 	lds	r31, 0x016B
    15f8:	81 e2       	ldi	r24, 0x21	; 33
    15fa:	80 83       	st	Z, r24
    15fc:	e0 91 6a 01 	lds	r30, 0x016A
    1600:	f0 91 6b 01 	lds	r31, 0x016B
    1604:	80 e2       	ldi	r24, 0x20	; 32
    1606:	80 83       	st	Z, r24
    1608:	e0 91 6a 01 	lds	r30, 0x016A
    160c:	f0 91 6b 01 	lds	r31, 0x016B
    1610:	82 e0       	ldi	r24, 0x02	; 2
    1612:	80 83       	st	Z, r24
    1614:	e0 91 6a 01 	lds	r30, 0x016A
    1618:	f0 91 6b 01 	lds	r31, 0x016B
    161c:	8b ed       	ldi	r24, 0xDB	; 219
    161e:	80 83       	st	Z, r24
    1620:	e0 91 6a 01 	lds	r30, 0x016A
    1624:	f0 91 6b 01 	lds	r31, 0x016B
    1628:	80 e3       	ldi	r24, 0x30	; 48
    162a:	80 83       	st	Z, r24
    162c:	e0 91 6a 01 	lds	r30, 0x016A
    1630:	f0 91 6b 01 	lds	r31, 0x016B
    1634:	8d ea       	ldi	r24, 0xAD	; 173
    1636:	80 83       	st	Z, r24
    1638:	e0 91 6a 01 	lds	r30, 0x016A
    163c:	f0 91 6b 01 	lds	r31, 0x016B
    1640:	10 82       	st	Z, r1
    1642:	e0 91 6a 01 	lds	r30, 0x016A
    1646:	f0 91 6b 01 	lds	r31, 0x016B
    164a:	84 ea       	ldi	r24, 0xA4	; 164
    164c:	80 83       	st	Z, r24
    164e:	e0 91 6a 01 	lds	r30, 0x016A
    1652:	f0 91 6b 01 	lds	r31, 0x016B
    1656:	86 ea       	ldi	r24, 0xA6	; 166
    1658:	80 83       	st	Z, r24
    165a:	e0 91 6a 01 	lds	r30, 0x016A
    165e:	f0 91 6b 01 	lds	r31, 0x016B
    1662:	8f ea       	ldi	r24, 0xAF	; 175
    1664:	80 83       	st	Z, r24
    1666:	0e 94 a2 0a 	call	0x1544	; 0x1544 <oled_clear_screen>
    166a:	08 95       	ret

0000166c <oled_refresh>:
    166c:	cf 93       	push	r28
    166e:	e0 91 6a 01 	lds	r30, 0x016A
    1672:	f0 91 6b 01 	lds	r31, 0x016B
    1676:	10 82       	st	Z, r1
    1678:	e0 91 6a 01 	lds	r30, 0x016A
    167c:	f0 91 6b 01 	lds	r31, 0x016B
    1680:	80 e1       	ldi	r24, 0x10	; 16
    1682:	80 83       	st	Z, r24
    1684:	80 91 64 01 	lds	r24, 0x0164
    1688:	90 91 65 01 	lds	r25, 0x0165
    168c:	89 2b       	or	r24, r25
    168e:	21 f1       	breq	.+72     	; 0x16d8 <oled_refresh+0x6c>
    1690:	40 e0       	ldi	r20, 0x00	; 0
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	60 eb       	ldi	r22, 0xB0	; 176
    1696:	c0 e0       	ldi	r28, 0x00	; 0
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	e0 91 6a 01 	lds	r30, 0x016A
    169e:	f0 91 6b 01 	lds	r31, 0x016B
    16a2:	60 83       	st	Z, r22
    16a4:	8c 2f       	mov	r24, r28
    16a6:	97 2f       	mov	r25, r23
    16a8:	e0 91 66 01 	lds	r30, 0x0166
    16ac:	f0 91 67 01 	lds	r31, 0x0167
    16b0:	9c 01       	movw	r18, r24
    16b2:	24 0f       	add	r18, r20
    16b4:	35 1f       	adc	r19, r21
    16b6:	a0 91 68 01 	lds	r26, 0x0168
    16ba:	b0 91 69 01 	lds	r27, 0x0169
    16be:	a2 0f       	add	r26, r18
    16c0:	b3 1f       	adc	r27, r19
    16c2:	2c 91       	ld	r18, X
    16c4:	20 83       	st	Z, r18
    16c6:	01 96       	adiw	r24, 0x01	; 1
    16c8:	80 38       	cpi	r24, 0x80	; 128
    16ca:	91 05       	cpc	r25, r1
    16cc:	69 f7       	brne	.-38     	; 0x16a8 <oled_refresh+0x3c>
    16ce:	6f 5f       	subi	r22, 0xFF	; 255
    16d0:	40 58       	subi	r20, 0x80	; 128
    16d2:	5f 4f       	sbci	r21, 0xFF	; 255
    16d4:	68 3b       	cpi	r22, 0xB8	; 184
    16d6:	09 f7       	brne	.-62     	; 0x169a <oled_refresh+0x2e>
    16d8:	cf 91       	pop	r28
    16da:	08 95       	ret

000016dc <oled_invert_pixel>:
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	eb 01       	movw	r28, r22
    16e2:	0e 94 10 0a 	call	0x1420	; 0x1420 <oled_goto_column>
    16e6:	ce 01       	movw	r24, r28
    16e8:	dd 23       	and	r29, r29
    16ea:	0c f4       	brge	.+2      	; 0x16ee <oled_invert_pixel+0x12>
    16ec:	07 96       	adiw	r24, 0x07	; 7
    16ee:	95 95       	asr	r25
    16f0:	87 95       	ror	r24
    16f2:	95 95       	asr	r25
    16f4:	87 95       	ror	r24
    16f6:	95 95       	asr	r25
    16f8:	87 95       	ror	r24
    16fa:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <oled_goto_line>
    16fe:	0e 94 ca 09 	call	0x1394	; 0x1394 <oled_read_data>
    1702:	be 01       	movw	r22, r28
    1704:	67 70       	andi	r22, 0x07	; 7
    1706:	70 78       	andi	r23, 0x80	; 128
    1708:	77 23       	and	r23, r23
    170a:	34 f4       	brge	.+12     	; 0x1718 <oled_invert_pixel+0x3c>
    170c:	61 50       	subi	r22, 0x01	; 1
    170e:	71 09       	sbc	r23, r1
    1710:	68 6f       	ori	r22, 0xF8	; 248
    1712:	7f 6f       	ori	r23, 0xFF	; 255
    1714:	6f 5f       	subi	r22, 0xFF	; 255
    1716:	7f 4f       	sbci	r23, 0xFF	; 255
    1718:	21 e0       	ldi	r18, 0x01	; 1
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	a9 01       	movw	r20, r18
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <oled_invert_pixel+0x48>
    1720:	44 0f       	add	r20, r20
    1722:	55 1f       	adc	r21, r21
    1724:	6a 95       	dec	r22
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <oled_invert_pixel+0x44>
    1728:	84 27       	eor	r24, r20
    172a:	0e 94 44 09 	call	0x1288	; 0x1288 <oled_write_data>
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	08 95       	ret

00001734 <oled_invert_rectangle>:
    1734:	8f 92       	push	r8
    1736:	9f 92       	push	r9
    1738:	af 92       	push	r10
    173a:	bf 92       	push	r11
    173c:	cf 92       	push	r12
    173e:	df 92       	push	r13
    1740:	ef 92       	push	r14
    1742:	ff 92       	push	r15
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	8c 01       	movw	r16, r24
    174e:	6b 01       	movw	r12, r22
    1750:	5a 01       	movw	r10, r20
    1752:	79 01       	movw	r14, r18
    1754:	84 17       	cp	r24, r20
    1756:	95 07       	cpc	r25, r21
    1758:	b4 f4       	brge	.+44     	; 0x1786 <oled_invert_rectangle+0x52>
    175a:	86 2e       	mov	r8, r22
    175c:	9d 2c       	mov	r9, r13
    175e:	0d c0       	rjmp	.+26     	; 0x177a <oled_invert_rectangle+0x46>
    1760:	be 01       	movw	r22, r28
    1762:	c8 01       	movw	r24, r16
    1764:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <oled_invert_pixel>
    1768:	21 96       	adiw	r28, 0x01	; 1
    176a:	ce 15       	cp	r28, r14
    176c:	df 05       	cpc	r29, r15
    176e:	c4 f3       	brlt	.-16     	; 0x1760 <oled_invert_rectangle+0x2c>
    1770:	0f 5f       	subi	r16, 0xFF	; 255
    1772:	1f 4f       	sbci	r17, 0xFF	; 255
    1774:	0a 15       	cp	r16, r10
    1776:	1b 05       	cpc	r17, r11
    1778:	34 f4       	brge	.+12     	; 0x1786 <oled_invert_rectangle+0x52>
    177a:	ce 14       	cp	r12, r14
    177c:	df 04       	cpc	r13, r15
    177e:	c4 f7       	brge	.-16     	; 0x1770 <oled_invert_rectangle+0x3c>
    1780:	c8 2d       	mov	r28, r8
    1782:	d9 2d       	mov	r29, r9
    1784:	ed cf       	rjmp	.-38     	; 0x1760 <oled_invert_rectangle+0x2c>
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	1f 91       	pop	r17
    178c:	0f 91       	pop	r16
    178e:	ff 90       	pop	r15
    1790:	ef 90       	pop	r14
    1792:	df 90       	pop	r13
    1794:	cf 90       	pop	r12
    1796:	bf 90       	pop	r11
    1798:	af 90       	pop	r10
    179a:	9f 90       	pop	r9
    179c:	8f 90       	pop	r8
    179e:	08 95       	ret

000017a0 <spi_master_init>:
#define NODE_1 1
#define NODE_2 2

void spi_master_init(int node)
{
	if (node == NODE_1){
    17a0:	81 30       	cpi	r24, 0x01	; 1
    17a2:	91 05       	cpc	r25, r1
    17a4:	41 f4       	brne	.+16     	; 0x17b6 <spi_master_init+0x16>
		DDRB |= (1<<DDB5)|(1<<DDB7)|(1 << DDB4); //Set MOSI and SCK output, all others input
    17a6:	87 b3       	in	r24, 0x17	; 23
    17a8:	80 6b       	ori	r24, 0xB0	; 176
    17aa:	87 bb       	out	0x17, r24	; 23
		DDRB &= ~(1 << DDB6);
    17ac:	be 98       	cbi	0x17, 6	; 23

		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X); //Enable SPI, Master, set clock rate fck/16
    17ae:	81 e5       	ldi	r24, 0x51	; 81
    17b0:	8d b9       	out	0x0d, r24	; 13
		set_bit(PORTB,PB4); //Disable chip
    17b2:	c4 9a       	sbi	0x18, 4	; 24
    17b4:	08 95       	ret
	}
	else if (node == NODE_2){
    17b6:	02 97       	sbiw	r24, 0x02	; 2
    17b8:	39 f4       	brne	.+14     	; 0x17c8 <spi_master_init+0x28>
		//Without setting PB0 as an output printf doesn|t work!?!?!?!?
		DDRB |= (1<<PB1)|(1 << PB2)|(1 << PB7)|(1 << PB0); //Set MOSI, SS and SCK output, all others input
    17ba:	87 b3       	in	r24, 0x17	; 23
    17bc:	87 68       	ori	r24, 0x87	; 135
    17be:	87 bb       	out	0x17, r24	; 23
		DDRB &= ~(1 << PB3); //DO NOT TINK IS NECCSCAS RYTSR:
    17c0:	bb 98       	cbi	0x17, 3	; 23

		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); //Enable SPI, Master, set clock rate fck/16
    17c2:	81 e5       	ldi	r24, 0x51	; 81
    17c4:	8d b9       	out	0x0d, r24	; 13
		set_bit(PORTB,PB7); //Disable chip
    17c6:	c7 9a       	sbi	0x18, 7	; 24
    17c8:	08 95       	ret

000017ca <spi_master_transmit>:
	}
}

char spi_master_transmit(char cData)
{
	SPDR = cData; //Start transmission
    17ca:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))); //Wait for transmission complete	
    17cc:	77 9b       	sbis	0x0e, 7	; 14
    17ce:	fe cf       	rjmp	.-4      	; 0x17cc <spi_master_transmit+0x2>
	return SPDR;
    17d0:	8f b1       	in	r24, 0x0f	; 15
}
    17d2:	08 95       	ret

000017d4 <touch_init>:
    17d4:	b8 98       	cbi	0x17, 0	; 23
    17d6:	b9 98       	cbi	0x17, 1	; 23
    17d8:	08 95       	ret

000017da <uart_putchar>:
	UCSR0C = (((node == NODE_1)<<URSEL0)|(1<<USBS0)|(3<<UCSZ00)); //Set frame format: 2 stop bit, 8data. //URSEL makes sure we won't access UBRRH during operation, but UCSRC. //URSEL should not be set in node 2
	fdevopen(uart_putchar, uart_getchar); //Enable printf use
}

void uart_putchar(char c){
	while (!( UCSR0A & (1<<UDRE0))); //Wait for empty transmit buffer
    17da:	5d 9b       	sbis	0x0b, 5	; 11
    17dc:	fe cf       	rjmp	.-4      	; 0x17da <uart_putchar>
	UDR0 = c; //Put data into buffer, sends the data
    17de:	8c b9       	out	0x0c, r24	; 12
    17e0:	08 95       	ret

000017e2 <uart_getchar>:
}

unsigned char uart_getchar(){
	while (!( UCSR0A & (1<<RXC0)));
    17e2:	5f 9b       	sbis	0x0b, 7	; 11
    17e4:	fe cf       	rjmp	.-4      	; 0x17e2 <uart_getchar>
	return UDR0;
    17e6:	8c b1       	in	r24, 0x0c	; 12
    17e8:	08 95       	ret

000017ea <uart_init>:
#include <avr/io.h>
#include <stdio.h>

#include "uart.h"

void uart_init(int baudRate, int node){
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	eb 01       	movw	r28, r22
	//Asynchronous - No parity - 2 stop bits - 8 bit char size
	
	int UBRR = ((long)F_CPU/((long)16*baudRate) - 1);
    17f0:	aa 27       	eor	r26, r26
    17f2:	97 fd       	sbrc	r25, 7
    17f4:	a0 95       	com	r26
    17f6:	ba 2f       	mov	r27, r26
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	aa 1f       	adc	r26, r26
    17fe:	bb 1f       	adc	r27, r27
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	aa 1f       	adc	r26, r26
    1806:	bb 1f       	adc	r27, r27
    1808:	9c 01       	movw	r18, r24
    180a:	ad 01       	movw	r20, r26
    180c:	22 0f       	add	r18, r18
    180e:	33 1f       	adc	r19, r19
    1810:	44 1f       	adc	r20, r20
    1812:	55 1f       	adc	r21, r21
    1814:	22 0f       	add	r18, r18
    1816:	33 1f       	adc	r19, r19
    1818:	44 1f       	adc	r20, r20
    181a:	55 1f       	adc	r21, r21
    181c:	60 e0       	ldi	r22, 0x00	; 0
    181e:	70 e0       	ldi	r23, 0x00	; 0
    1820:	8b e4       	ldi	r24, 0x4B	; 75
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__divmodsi4>
    1828:	21 50       	subi	r18, 0x01	; 1
    182a:	31 09       	sbc	r19, r1
	UBRR0L = UBRR; //Setting baud rate low byte
    182c:	29 b9       	out	0x09, r18	; 9
    UBRR0H = (UBRR>>8); //Setting baud rate high byte
    182e:	30 bd       	out	0x20, r19	; 32
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); //Enable receiver and transmitter 
    1830:	88 e1       	ldi	r24, 0x18	; 24
    1832:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (((node == NODE_1)<<URSEL0)|(1<<USBS0)|(3<<UCSZ00)); //Set frame format: 2 stop bit, 8data. //URSEL makes sure we won't access UBRRH during operation, but UCSRC. //URSEL should not be set in node 2
    1834:	21 97       	sbiw	r28, 0x01	; 1
    1836:	11 f4       	brne	.+4      	; 0x183c <uart_init+0x52>
    1838:	8e e8       	ldi	r24, 0x8E	; 142
    183a:	01 c0       	rjmp	.+2      	; 0x183e <uart_init+0x54>
    183c:	8e e0       	ldi	r24, 0x0E	; 14
    183e:	80 bd       	out	0x20, r24	; 32
	fdevopen(uart_putchar, uart_getchar); //Enable printf use
    1840:	61 ef       	ldi	r22, 0xF1	; 241
    1842:	7b e0       	ldi	r23, 0x0B	; 11
    1844:	8d ee       	ldi	r24, 0xED	; 237
    1846:	9b e0       	ldi	r25, 0x0B	; 11
    1848:	0e 94 63 11 	call	0x22c6	; 0x22c6 <fdevopen>
}
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	08 95       	ret
    1852:	63 d1       	rcall	.+710    	; 0x1b1a <__fp_pscA>
    1854:	58 f0       	brcs	.+22     	; 0x186c <uart_init+0x82>
    1856:	80 e8       	ldi	r24, 0x80	; 128
    1858:	91 e0       	ldi	r25, 0x01	; 1
    185a:	09 f4       	brne	.+2      	; 0x185e <uart_init+0x74>
    185c:	9e ef       	ldi	r25, 0xFE	; 254
    185e:	64 d1       	rcall	.+712    	; 0x1b28 <__fp_pscB>
    1860:	28 f0       	brcs	.+10     	; 0x186c <uart_init+0x82>
    1862:	40 e8       	ldi	r20, 0x80	; 128
    1864:	51 e0       	ldi	r21, 0x01	; 1
    1866:	59 f4       	brne	.+22     	; 0x187e <atan2+0xe>
    1868:	5e ef       	ldi	r21, 0xFE	; 254
    186a:	09 c0       	rjmp	.+18     	; 0x187e <atan2+0xe>
    186c:	2e c1       	rjmp	.+604    	; 0x1aca <__fp_nan>
    186e:	96 c1       	rjmp	.+812    	; 0x1b9c <__fp_zero>

00001870 <atan2>:
    1870:	e9 2f       	mov	r30, r25
    1872:	e0 78       	andi	r30, 0x80	; 128
    1874:	71 d1       	rcall	.+738    	; 0x1b58 <__fp_split3>
    1876:	68 f3       	brcs	.-38     	; 0x1852 <uart_init+0x68>
    1878:	09 2e       	mov	r0, r25
    187a:	05 2a       	or	r0, r21
    187c:	c1 f3       	breq	.-16     	; 0x186e <uart_init+0x84>
    187e:	26 17       	cp	r18, r22
    1880:	37 07       	cpc	r19, r23
    1882:	48 07       	cpc	r20, r24
    1884:	59 07       	cpc	r21, r25
    1886:	38 f0       	brcs	.+14     	; 0x1896 <atan2+0x26>
    1888:	0e 2e       	mov	r0, r30
    188a:	07 f8       	bld	r0, 7
    188c:	e0 25       	eor	r30, r0
    188e:	69 f0       	breq	.+26     	; 0x18aa <atan2+0x3a>
    1890:	e0 25       	eor	r30, r0
    1892:	e0 64       	ori	r30, 0x40	; 64
    1894:	0a c0       	rjmp	.+20     	; 0x18aa <atan2+0x3a>
    1896:	ef 63       	ori	r30, 0x3F	; 63
    1898:	07 f8       	bld	r0, 7
    189a:	00 94       	com	r0
    189c:	07 fa       	bst	r0, 7
    189e:	db 01       	movw	r26, r22
    18a0:	b9 01       	movw	r22, r18
    18a2:	9d 01       	movw	r18, r26
    18a4:	dc 01       	movw	r26, r24
    18a6:	ca 01       	movw	r24, r20
    18a8:	ad 01       	movw	r20, r26
    18aa:	ef 93       	push	r30
    18ac:	41 d0       	rcall	.+130    	; 0x1930 <__divsf3_pse>
    18ae:	43 d1       	rcall	.+646    	; 0x1b36 <__fp_round>
    18b0:	0a d0       	rcall	.+20     	; 0x18c6 <atan>
    18b2:	5f 91       	pop	r21
    18b4:	55 23       	and	r21, r21
    18b6:	31 f0       	breq	.+12     	; 0x18c4 <atan2+0x54>
    18b8:	2b ed       	ldi	r18, 0xDB	; 219
    18ba:	3f e0       	ldi	r19, 0x0F	; 15
    18bc:	49 e4       	ldi	r20, 0x49	; 73
    18be:	50 fd       	sbrc	r21, 0
    18c0:	49 ec       	ldi	r20, 0xC9	; 201
    18c2:	23 c2       	rjmp	.+1094   	; 0x1d0a <__addsf3>
    18c4:	08 95       	ret

000018c6 <atan>:
    18c6:	df 93       	push	r29
    18c8:	dd 27       	eor	r29, r29
    18ca:	b9 2f       	mov	r27, r25
    18cc:	bf 77       	andi	r27, 0x7F	; 127
    18ce:	40 e8       	ldi	r20, 0x80	; 128
    18d0:	5f e3       	ldi	r21, 0x3F	; 63
    18d2:	16 16       	cp	r1, r22
    18d4:	17 06       	cpc	r1, r23
    18d6:	48 07       	cpc	r20, r24
    18d8:	5b 07       	cpc	r21, r27
    18da:	10 f4       	brcc	.+4      	; 0x18e0 <atan+0x1a>
    18dc:	d9 2f       	mov	r29, r25
    18de:	65 d1       	rcall	.+714    	; 0x1baa <inverse>
    18e0:	9f 93       	push	r25
    18e2:	8f 93       	push	r24
    18e4:	7f 93       	push	r23
    18e6:	6f 93       	push	r22
    18e8:	0c d2       	rcall	.+1048   	; 0x1d02 <square>
    18ea:	e0 e7       	ldi	r30, 0x70	; 112
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	f0 d0       	rcall	.+480    	; 0x1ad0 <__fp_powser>
    18f0:	22 d1       	rcall	.+580    	; 0x1b36 <__fp_round>
    18f2:	2f 91       	pop	r18
    18f4:	3f 91       	pop	r19
    18f6:	4f 91       	pop	r20
    18f8:	5f 91       	pop	r21
    18fa:	6a d1       	rcall	.+724    	; 0x1bd0 <__mulsf3x>
    18fc:	dd 23       	and	r29, r29
    18fe:	49 f0       	breq	.+18     	; 0x1912 <atan+0x4c>
    1900:	90 58       	subi	r25, 0x80	; 128
    1902:	a2 ea       	ldi	r26, 0xA2	; 162
    1904:	2a ed       	ldi	r18, 0xDA	; 218
    1906:	3f e0       	ldi	r19, 0x0F	; 15
    1908:	49 ec       	ldi	r20, 0xC9	; 201
    190a:	5f e3       	ldi	r21, 0x3F	; 63
    190c:	d0 78       	andi	r29, 0x80	; 128
    190e:	5d 27       	eor	r21, r29
    1910:	0d d2       	rcall	.+1050   	; 0x1d2c <__addsf3x>
    1912:	df 91       	pop	r29
    1914:	10 c1       	rjmp	.+544    	; 0x1b36 <__fp_round>
    1916:	08 d1       	rcall	.+528    	; 0x1b28 <__fp_pscB>
    1918:	40 f0       	brcs	.+16     	; 0x192a <atan+0x64>
    191a:	ff d0       	rcall	.+510    	; 0x1b1a <__fp_pscA>
    191c:	30 f0       	brcs	.+12     	; 0x192a <atan+0x64>
    191e:	21 f4       	brne	.+8      	; 0x1928 <atan+0x62>
    1920:	5f 3f       	cpi	r21, 0xFF	; 255
    1922:	19 f0       	breq	.+6      	; 0x192a <atan+0x64>
    1924:	cc c0       	rjmp	.+408    	; 0x1abe <__fp_inf>
    1926:	51 11       	cpse	r21, r1
    1928:	3a c1       	rjmp	.+628    	; 0x1b9e <__fp_szero>
    192a:	cf c0       	rjmp	.+414    	; 0x1aca <__fp_nan>

0000192c <__divsf3x>:
    192c:	15 d1       	rcall	.+554    	; 0x1b58 <__fp_split3>
    192e:	98 f3       	brcs	.-26     	; 0x1916 <atan+0x50>

00001930 <__divsf3_pse>:
    1930:	99 23       	and	r25, r25
    1932:	c9 f3       	breq	.-14     	; 0x1926 <atan+0x60>
    1934:	55 23       	and	r21, r21
    1936:	b1 f3       	breq	.-20     	; 0x1924 <atan+0x5e>
    1938:	95 1b       	sub	r25, r21
    193a:	55 0b       	sbc	r21, r21
    193c:	bb 27       	eor	r27, r27
    193e:	aa 27       	eor	r26, r26
    1940:	62 17       	cp	r22, r18
    1942:	73 07       	cpc	r23, r19
    1944:	84 07       	cpc	r24, r20
    1946:	38 f0       	brcs	.+14     	; 0x1956 <__divsf3_pse+0x26>
    1948:	9f 5f       	subi	r25, 0xFF	; 255
    194a:	5f 4f       	sbci	r21, 0xFF	; 255
    194c:	22 0f       	add	r18, r18
    194e:	33 1f       	adc	r19, r19
    1950:	44 1f       	adc	r20, r20
    1952:	aa 1f       	adc	r26, r26
    1954:	a9 f3       	breq	.-22     	; 0x1940 <__divsf3_pse+0x10>
    1956:	33 d0       	rcall	.+102    	; 0x19be <__divsf3_pse+0x8e>
    1958:	0e 2e       	mov	r0, r30
    195a:	3a f0       	brmi	.+14     	; 0x196a <__divsf3_pse+0x3a>
    195c:	e0 e8       	ldi	r30, 0x80	; 128
    195e:	30 d0       	rcall	.+96     	; 0x19c0 <__divsf3_pse+0x90>
    1960:	91 50       	subi	r25, 0x01	; 1
    1962:	50 40       	sbci	r21, 0x00	; 0
    1964:	e6 95       	lsr	r30
    1966:	00 1c       	adc	r0, r0
    1968:	ca f7       	brpl	.-14     	; 0x195c <__divsf3_pse+0x2c>
    196a:	29 d0       	rcall	.+82     	; 0x19be <__divsf3_pse+0x8e>
    196c:	fe 2f       	mov	r31, r30
    196e:	27 d0       	rcall	.+78     	; 0x19be <__divsf3_pse+0x8e>
    1970:	66 0f       	add	r22, r22
    1972:	77 1f       	adc	r23, r23
    1974:	88 1f       	adc	r24, r24
    1976:	bb 1f       	adc	r27, r27
    1978:	26 17       	cp	r18, r22
    197a:	37 07       	cpc	r19, r23
    197c:	48 07       	cpc	r20, r24
    197e:	ab 07       	cpc	r26, r27
    1980:	b0 e8       	ldi	r27, 0x80	; 128
    1982:	09 f0       	breq	.+2      	; 0x1986 <__divsf3_pse+0x56>
    1984:	bb 0b       	sbc	r27, r27
    1986:	80 2d       	mov	r24, r0
    1988:	bf 01       	movw	r22, r30
    198a:	ff 27       	eor	r31, r31
    198c:	93 58       	subi	r25, 0x83	; 131
    198e:	5f 4f       	sbci	r21, 0xFF	; 255
    1990:	2a f0       	brmi	.+10     	; 0x199c <__divsf3_pse+0x6c>
    1992:	9e 3f       	cpi	r25, 0xFE	; 254
    1994:	51 05       	cpc	r21, r1
    1996:	68 f0       	brcs	.+26     	; 0x19b2 <__divsf3_pse+0x82>
    1998:	92 c0       	rjmp	.+292    	; 0x1abe <__fp_inf>
    199a:	01 c1       	rjmp	.+514    	; 0x1b9e <__fp_szero>
    199c:	5f 3f       	cpi	r21, 0xFF	; 255
    199e:	ec f3       	brlt	.-6      	; 0x199a <__divsf3_pse+0x6a>
    19a0:	98 3e       	cpi	r25, 0xE8	; 232
    19a2:	dc f3       	brlt	.-10     	; 0x199a <__divsf3_pse+0x6a>
    19a4:	86 95       	lsr	r24
    19a6:	77 95       	ror	r23
    19a8:	67 95       	ror	r22
    19aa:	b7 95       	ror	r27
    19ac:	f7 95       	ror	r31
    19ae:	9f 5f       	subi	r25, 0xFF	; 255
    19b0:	c9 f7       	brne	.-14     	; 0x19a4 <__divsf3_pse+0x74>
    19b2:	88 0f       	add	r24, r24
    19b4:	91 1d       	adc	r25, r1
    19b6:	96 95       	lsr	r25
    19b8:	87 95       	ror	r24
    19ba:	97 f9       	bld	r25, 7
    19bc:	08 95       	ret
    19be:	e1 e0       	ldi	r30, 0x01	; 1
    19c0:	66 0f       	add	r22, r22
    19c2:	77 1f       	adc	r23, r23
    19c4:	88 1f       	adc	r24, r24
    19c6:	bb 1f       	adc	r27, r27
    19c8:	62 17       	cp	r22, r18
    19ca:	73 07       	cpc	r23, r19
    19cc:	84 07       	cpc	r24, r20
    19ce:	ba 07       	cpc	r27, r26
    19d0:	20 f0       	brcs	.+8      	; 0x19da <__divsf3_pse+0xaa>
    19d2:	62 1b       	sub	r22, r18
    19d4:	73 0b       	sbc	r23, r19
    19d6:	84 0b       	sbc	r24, r20
    19d8:	ba 0b       	sbc	r27, r26
    19da:	ee 1f       	adc	r30, r30
    19dc:	88 f7       	brcc	.-30     	; 0x19c0 <__divsf3_pse+0x90>
    19de:	e0 95       	com	r30
    19e0:	08 95       	ret

000019e2 <__fixsfsi>:
    19e2:	04 d0       	rcall	.+8      	; 0x19ec <__fixunssfsi>
    19e4:	68 94       	set
    19e6:	b1 11       	cpse	r27, r1
    19e8:	da c0       	rjmp	.+436    	; 0x1b9e <__fp_szero>
    19ea:	08 95       	ret

000019ec <__fixunssfsi>:
    19ec:	bd d0       	rcall	.+378    	; 0x1b68 <__fp_splitA>
    19ee:	88 f0       	brcs	.+34     	; 0x1a12 <__fixunssfsi+0x26>
    19f0:	9f 57       	subi	r25, 0x7F	; 127
    19f2:	90 f0       	brcs	.+36     	; 0x1a18 <__fixunssfsi+0x2c>
    19f4:	b9 2f       	mov	r27, r25
    19f6:	99 27       	eor	r25, r25
    19f8:	b7 51       	subi	r27, 0x17	; 23
    19fa:	a0 f0       	brcs	.+40     	; 0x1a24 <__fixunssfsi+0x38>
    19fc:	d1 f0       	breq	.+52     	; 0x1a32 <__fixunssfsi+0x46>
    19fe:	66 0f       	add	r22, r22
    1a00:	77 1f       	adc	r23, r23
    1a02:	88 1f       	adc	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	1a f0       	brmi	.+6      	; 0x1a0e <__fixunssfsi+0x22>
    1a08:	ba 95       	dec	r27
    1a0a:	c9 f7       	brne	.-14     	; 0x19fe <__fixunssfsi+0x12>
    1a0c:	12 c0       	rjmp	.+36     	; 0x1a32 <__fixunssfsi+0x46>
    1a0e:	b1 30       	cpi	r27, 0x01	; 1
    1a10:	81 f0       	breq	.+32     	; 0x1a32 <__fixunssfsi+0x46>
    1a12:	c4 d0       	rcall	.+392    	; 0x1b9c <__fp_zero>
    1a14:	b1 e0       	ldi	r27, 0x01	; 1
    1a16:	08 95       	ret
    1a18:	c1 c0       	rjmp	.+386    	; 0x1b9c <__fp_zero>
    1a1a:	67 2f       	mov	r22, r23
    1a1c:	78 2f       	mov	r23, r24
    1a1e:	88 27       	eor	r24, r24
    1a20:	b8 5f       	subi	r27, 0xF8	; 248
    1a22:	39 f0       	breq	.+14     	; 0x1a32 <__fixunssfsi+0x46>
    1a24:	b9 3f       	cpi	r27, 0xF9	; 249
    1a26:	cc f3       	brlt	.-14     	; 0x1a1a <__fixunssfsi+0x2e>
    1a28:	86 95       	lsr	r24
    1a2a:	77 95       	ror	r23
    1a2c:	67 95       	ror	r22
    1a2e:	b3 95       	inc	r27
    1a30:	d9 f7       	brne	.-10     	; 0x1a28 <__fixunssfsi+0x3c>
    1a32:	3e f4       	brtc	.+14     	; 0x1a42 <__fixunssfsi+0x56>
    1a34:	90 95       	com	r25
    1a36:	80 95       	com	r24
    1a38:	70 95       	com	r23
    1a3a:	61 95       	neg	r22
    1a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a40:	9f 4f       	sbci	r25, 0xFF	; 255
    1a42:	08 95       	ret

00001a44 <__floatunsisf>:
    1a44:	e8 94       	clt
    1a46:	09 c0       	rjmp	.+18     	; 0x1a5a <__floatsisf+0x12>

00001a48 <__floatsisf>:
    1a48:	97 fb       	bst	r25, 7
    1a4a:	3e f4       	brtc	.+14     	; 0x1a5a <__floatsisf+0x12>
    1a4c:	90 95       	com	r25
    1a4e:	80 95       	com	r24
    1a50:	70 95       	com	r23
    1a52:	61 95       	neg	r22
    1a54:	7f 4f       	sbci	r23, 0xFF	; 255
    1a56:	8f 4f       	sbci	r24, 0xFF	; 255
    1a58:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5a:	99 23       	and	r25, r25
    1a5c:	a9 f0       	breq	.+42     	; 0x1a88 <__floatsisf+0x40>
    1a5e:	f9 2f       	mov	r31, r25
    1a60:	96 e9       	ldi	r25, 0x96	; 150
    1a62:	bb 27       	eor	r27, r27
    1a64:	93 95       	inc	r25
    1a66:	f6 95       	lsr	r31
    1a68:	87 95       	ror	r24
    1a6a:	77 95       	ror	r23
    1a6c:	67 95       	ror	r22
    1a6e:	b7 95       	ror	r27
    1a70:	f1 11       	cpse	r31, r1
    1a72:	f8 cf       	rjmp	.-16     	; 0x1a64 <__floatsisf+0x1c>
    1a74:	fa f4       	brpl	.+62     	; 0x1ab4 <__floatsisf+0x6c>
    1a76:	bb 0f       	add	r27, r27
    1a78:	11 f4       	brne	.+4      	; 0x1a7e <__floatsisf+0x36>
    1a7a:	60 ff       	sbrs	r22, 0
    1a7c:	1b c0       	rjmp	.+54     	; 0x1ab4 <__floatsisf+0x6c>
    1a7e:	6f 5f       	subi	r22, 0xFF	; 255
    1a80:	7f 4f       	sbci	r23, 0xFF	; 255
    1a82:	8f 4f       	sbci	r24, 0xFF	; 255
    1a84:	9f 4f       	sbci	r25, 0xFF	; 255
    1a86:	16 c0       	rjmp	.+44     	; 0x1ab4 <__floatsisf+0x6c>
    1a88:	88 23       	and	r24, r24
    1a8a:	11 f0       	breq	.+4      	; 0x1a90 <__floatsisf+0x48>
    1a8c:	96 e9       	ldi	r25, 0x96	; 150
    1a8e:	11 c0       	rjmp	.+34     	; 0x1ab2 <__floatsisf+0x6a>
    1a90:	77 23       	and	r23, r23
    1a92:	21 f0       	breq	.+8      	; 0x1a9c <__floatsisf+0x54>
    1a94:	9e e8       	ldi	r25, 0x8E	; 142
    1a96:	87 2f       	mov	r24, r23
    1a98:	76 2f       	mov	r23, r22
    1a9a:	05 c0       	rjmp	.+10     	; 0x1aa6 <__floatsisf+0x5e>
    1a9c:	66 23       	and	r22, r22
    1a9e:	71 f0       	breq	.+28     	; 0x1abc <__floatsisf+0x74>
    1aa0:	96 e8       	ldi	r25, 0x86	; 134
    1aa2:	86 2f       	mov	r24, r22
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	2a f0       	brmi	.+10     	; 0x1ab4 <__floatsisf+0x6c>
    1aaa:	9a 95       	dec	r25
    1aac:	66 0f       	add	r22, r22
    1aae:	77 1f       	adc	r23, r23
    1ab0:	88 1f       	adc	r24, r24
    1ab2:	da f7       	brpl	.-10     	; 0x1aaa <__floatsisf+0x62>
    1ab4:	88 0f       	add	r24, r24
    1ab6:	96 95       	lsr	r25
    1ab8:	87 95       	ror	r24
    1aba:	97 f9       	bld	r25, 7
    1abc:	08 95       	ret

00001abe <__fp_inf>:
    1abe:	97 f9       	bld	r25, 7
    1ac0:	9f 67       	ori	r25, 0x7F	; 127
    1ac2:	80 e8       	ldi	r24, 0x80	; 128
    1ac4:	70 e0       	ldi	r23, 0x00	; 0
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	08 95       	ret

00001aca <__fp_nan>:
    1aca:	9f ef       	ldi	r25, 0xFF	; 255
    1acc:	80 ec       	ldi	r24, 0xC0	; 192
    1ace:	08 95       	ret

00001ad0 <__fp_powser>:
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	1f 93       	push	r17
    1ad6:	0f 93       	push	r16
    1ad8:	ff 92       	push	r15
    1ada:	ef 92       	push	r14
    1adc:	df 92       	push	r13
    1ade:	7b 01       	movw	r14, r22
    1ae0:	8c 01       	movw	r16, r24
    1ae2:	68 94       	set
    1ae4:	05 c0       	rjmp	.+10     	; 0x1af0 <__fp_powser+0x20>
    1ae6:	da 2e       	mov	r13, r26
    1ae8:	ef 01       	movw	r28, r30
    1aea:	72 d0       	rcall	.+228    	; 0x1bd0 <__mulsf3x>
    1aec:	fe 01       	movw	r30, r28
    1aee:	e8 94       	clt
    1af0:	a5 91       	lpm	r26, Z+
    1af2:	25 91       	lpm	r18, Z+
    1af4:	35 91       	lpm	r19, Z+
    1af6:	45 91       	lpm	r20, Z+
    1af8:	55 91       	lpm	r21, Z+
    1afa:	ae f3       	brts	.-22     	; 0x1ae6 <__fp_powser+0x16>
    1afc:	ef 01       	movw	r28, r30
    1afe:	16 d1       	rcall	.+556    	; 0x1d2c <__addsf3x>
    1b00:	fe 01       	movw	r30, r28
    1b02:	97 01       	movw	r18, r14
    1b04:	a8 01       	movw	r20, r16
    1b06:	da 94       	dec	r13
    1b08:	79 f7       	brne	.-34     	; 0x1ae8 <__fp_powser+0x18>
    1b0a:	df 90       	pop	r13
    1b0c:	ef 90       	pop	r14
    1b0e:	ff 90       	pop	r15
    1b10:	0f 91       	pop	r16
    1b12:	1f 91       	pop	r17
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <__fp_pscA>:
    1b1a:	00 24       	eor	r0, r0
    1b1c:	0a 94       	dec	r0
    1b1e:	16 16       	cp	r1, r22
    1b20:	17 06       	cpc	r1, r23
    1b22:	18 06       	cpc	r1, r24
    1b24:	09 06       	cpc	r0, r25
    1b26:	08 95       	ret

00001b28 <__fp_pscB>:
    1b28:	00 24       	eor	r0, r0
    1b2a:	0a 94       	dec	r0
    1b2c:	12 16       	cp	r1, r18
    1b2e:	13 06       	cpc	r1, r19
    1b30:	14 06       	cpc	r1, r20
    1b32:	05 06       	cpc	r0, r21
    1b34:	08 95       	ret

00001b36 <__fp_round>:
    1b36:	09 2e       	mov	r0, r25
    1b38:	03 94       	inc	r0
    1b3a:	00 0c       	add	r0, r0
    1b3c:	11 f4       	brne	.+4      	; 0x1b42 <__fp_round+0xc>
    1b3e:	88 23       	and	r24, r24
    1b40:	52 f0       	brmi	.+20     	; 0x1b56 <__fp_round+0x20>
    1b42:	bb 0f       	add	r27, r27
    1b44:	40 f4       	brcc	.+16     	; 0x1b56 <__fp_round+0x20>
    1b46:	bf 2b       	or	r27, r31
    1b48:	11 f4       	brne	.+4      	; 0x1b4e <__fp_round+0x18>
    1b4a:	60 ff       	sbrs	r22, 0
    1b4c:	04 c0       	rjmp	.+8      	; 0x1b56 <__fp_round+0x20>
    1b4e:	6f 5f       	subi	r22, 0xFF	; 255
    1b50:	7f 4f       	sbci	r23, 0xFF	; 255
    1b52:	8f 4f       	sbci	r24, 0xFF	; 255
    1b54:	9f 4f       	sbci	r25, 0xFF	; 255
    1b56:	08 95       	ret

00001b58 <__fp_split3>:
    1b58:	57 fd       	sbrc	r21, 7
    1b5a:	90 58       	subi	r25, 0x80	; 128
    1b5c:	44 0f       	add	r20, r20
    1b5e:	55 1f       	adc	r21, r21
    1b60:	59 f0       	breq	.+22     	; 0x1b78 <__fp_splitA+0x10>
    1b62:	5f 3f       	cpi	r21, 0xFF	; 255
    1b64:	71 f0       	breq	.+28     	; 0x1b82 <__fp_splitA+0x1a>
    1b66:	47 95       	ror	r20

00001b68 <__fp_splitA>:
    1b68:	88 0f       	add	r24, r24
    1b6a:	97 fb       	bst	r25, 7
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	61 f0       	breq	.+24     	; 0x1b88 <__fp_splitA+0x20>
    1b70:	9f 3f       	cpi	r25, 0xFF	; 255
    1b72:	79 f0       	breq	.+30     	; 0x1b92 <__fp_splitA+0x2a>
    1b74:	87 95       	ror	r24
    1b76:	08 95       	ret
    1b78:	12 16       	cp	r1, r18
    1b7a:	13 06       	cpc	r1, r19
    1b7c:	14 06       	cpc	r1, r20
    1b7e:	55 1f       	adc	r21, r21
    1b80:	f2 cf       	rjmp	.-28     	; 0x1b66 <__fp_split3+0xe>
    1b82:	46 95       	lsr	r20
    1b84:	f1 df       	rcall	.-30     	; 0x1b68 <__fp_splitA>
    1b86:	08 c0       	rjmp	.+16     	; 0x1b98 <__fp_splitA+0x30>
    1b88:	16 16       	cp	r1, r22
    1b8a:	17 06       	cpc	r1, r23
    1b8c:	18 06       	cpc	r1, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	f1 cf       	rjmp	.-30     	; 0x1b74 <__fp_splitA+0xc>
    1b92:	86 95       	lsr	r24
    1b94:	71 05       	cpc	r23, r1
    1b96:	61 05       	cpc	r22, r1
    1b98:	08 94       	sec
    1b9a:	08 95       	ret

00001b9c <__fp_zero>:
    1b9c:	e8 94       	clt

00001b9e <__fp_szero>:
    1b9e:	bb 27       	eor	r27, r27
    1ba0:	66 27       	eor	r22, r22
    1ba2:	77 27       	eor	r23, r23
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	97 f9       	bld	r25, 7
    1ba8:	08 95       	ret

00001baa <inverse>:
    1baa:	9b 01       	movw	r18, r22
    1bac:	ac 01       	movw	r20, r24
    1bae:	60 e0       	ldi	r22, 0x00	; 0
    1bb0:	70 e0       	ldi	r23, 0x00	; 0
    1bb2:	80 e8       	ldi	r24, 0x80	; 128
    1bb4:	9f e3       	ldi	r25, 0x3F	; 63
    1bb6:	0d c1       	rjmp	.+538    	; 0x1dd2 <__divsf3>

00001bb8 <__mulsf3>:
    1bb8:	0b d0       	rcall	.+22     	; 0x1bd0 <__mulsf3x>
    1bba:	bd cf       	rjmp	.-134    	; 0x1b36 <__fp_round>
    1bbc:	ae df       	rcall	.-164    	; 0x1b1a <__fp_pscA>
    1bbe:	28 f0       	brcs	.+10     	; 0x1bca <__mulsf3+0x12>
    1bc0:	b3 df       	rcall	.-154    	; 0x1b28 <__fp_pscB>
    1bc2:	18 f0       	brcs	.+6      	; 0x1bca <__mulsf3+0x12>
    1bc4:	95 23       	and	r25, r21
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <__mulsf3+0x12>
    1bc8:	7a cf       	rjmp	.-268    	; 0x1abe <__fp_inf>
    1bca:	7f cf       	rjmp	.-258    	; 0x1aca <__fp_nan>
    1bcc:	11 24       	eor	r1, r1
    1bce:	e7 cf       	rjmp	.-50     	; 0x1b9e <__fp_szero>

00001bd0 <__mulsf3x>:
    1bd0:	c3 df       	rcall	.-122    	; 0x1b58 <__fp_split3>
    1bd2:	a0 f3       	brcs	.-24     	; 0x1bbc <__mulsf3+0x4>

00001bd4 <__mulsf3_pse>:
    1bd4:	95 9f       	mul	r25, r21
    1bd6:	d1 f3       	breq	.-12     	; 0x1bcc <__mulsf3+0x14>
    1bd8:	95 0f       	add	r25, r21
    1bda:	50 e0       	ldi	r21, 0x00	; 0
    1bdc:	55 1f       	adc	r21, r21
    1bde:	62 9f       	mul	r22, r18
    1be0:	f0 01       	movw	r30, r0
    1be2:	72 9f       	mul	r23, r18
    1be4:	bb 27       	eor	r27, r27
    1be6:	f0 0d       	add	r31, r0
    1be8:	b1 1d       	adc	r27, r1
    1bea:	63 9f       	mul	r22, r19
    1bec:	aa 27       	eor	r26, r26
    1bee:	f0 0d       	add	r31, r0
    1bf0:	b1 1d       	adc	r27, r1
    1bf2:	aa 1f       	adc	r26, r26
    1bf4:	64 9f       	mul	r22, r20
    1bf6:	66 27       	eor	r22, r22
    1bf8:	b0 0d       	add	r27, r0
    1bfa:	a1 1d       	adc	r26, r1
    1bfc:	66 1f       	adc	r22, r22
    1bfe:	82 9f       	mul	r24, r18
    1c00:	22 27       	eor	r18, r18
    1c02:	b0 0d       	add	r27, r0
    1c04:	a1 1d       	adc	r26, r1
    1c06:	62 1f       	adc	r22, r18
    1c08:	73 9f       	mul	r23, r19
    1c0a:	b0 0d       	add	r27, r0
    1c0c:	a1 1d       	adc	r26, r1
    1c0e:	62 1f       	adc	r22, r18
    1c10:	83 9f       	mul	r24, r19
    1c12:	a0 0d       	add	r26, r0
    1c14:	61 1d       	adc	r22, r1
    1c16:	22 1f       	adc	r18, r18
    1c18:	74 9f       	mul	r23, r20
    1c1a:	33 27       	eor	r19, r19
    1c1c:	a0 0d       	add	r26, r0
    1c1e:	61 1d       	adc	r22, r1
    1c20:	23 1f       	adc	r18, r19
    1c22:	84 9f       	mul	r24, r20
    1c24:	60 0d       	add	r22, r0
    1c26:	21 1d       	adc	r18, r1
    1c28:	82 2f       	mov	r24, r18
    1c2a:	76 2f       	mov	r23, r22
    1c2c:	6a 2f       	mov	r22, r26
    1c2e:	11 24       	eor	r1, r1
    1c30:	9f 57       	subi	r25, 0x7F	; 127
    1c32:	50 40       	sbci	r21, 0x00	; 0
    1c34:	8a f0       	brmi	.+34     	; 0x1c58 <__mulsf3_pse+0x84>
    1c36:	e1 f0       	breq	.+56     	; 0x1c70 <__mulsf3_pse+0x9c>
    1c38:	88 23       	and	r24, r24
    1c3a:	4a f0       	brmi	.+18     	; 0x1c4e <__mulsf3_pse+0x7a>
    1c3c:	ee 0f       	add	r30, r30
    1c3e:	ff 1f       	adc	r31, r31
    1c40:	bb 1f       	adc	r27, r27
    1c42:	66 1f       	adc	r22, r22
    1c44:	77 1f       	adc	r23, r23
    1c46:	88 1f       	adc	r24, r24
    1c48:	91 50       	subi	r25, 0x01	; 1
    1c4a:	50 40       	sbci	r21, 0x00	; 0
    1c4c:	a9 f7       	brne	.-22     	; 0x1c38 <__mulsf3_pse+0x64>
    1c4e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c50:	51 05       	cpc	r21, r1
    1c52:	70 f0       	brcs	.+28     	; 0x1c70 <__mulsf3_pse+0x9c>
    1c54:	34 cf       	rjmp	.-408    	; 0x1abe <__fp_inf>
    1c56:	a3 cf       	rjmp	.-186    	; 0x1b9e <__fp_szero>
    1c58:	5f 3f       	cpi	r21, 0xFF	; 255
    1c5a:	ec f3       	brlt	.-6      	; 0x1c56 <__mulsf3_pse+0x82>
    1c5c:	98 3e       	cpi	r25, 0xE8	; 232
    1c5e:	dc f3       	brlt	.-10     	; 0x1c56 <__mulsf3_pse+0x82>
    1c60:	86 95       	lsr	r24
    1c62:	77 95       	ror	r23
    1c64:	67 95       	ror	r22
    1c66:	b7 95       	ror	r27
    1c68:	f7 95       	ror	r31
    1c6a:	e7 95       	ror	r30
    1c6c:	9f 5f       	subi	r25, 0xFF	; 255
    1c6e:	c1 f7       	brne	.-16     	; 0x1c60 <__mulsf3_pse+0x8c>
    1c70:	fe 2b       	or	r31, r30
    1c72:	88 0f       	add	r24, r24
    1c74:	91 1d       	adc	r25, r1
    1c76:	96 95       	lsr	r25
    1c78:	87 95       	ror	r24
    1c7a:	97 f9       	bld	r25, 7
    1c7c:	08 95       	ret
    1c7e:	11 f4       	brne	.+4      	; 0x1c84 <__mulsf3_pse+0xb0>
    1c80:	0e f4       	brtc	.+2      	; 0x1c84 <__mulsf3_pse+0xb0>
    1c82:	23 cf       	rjmp	.-442    	; 0x1aca <__fp_nan>
    1c84:	a8 c0       	rjmp	.+336    	; 0x1dd6 <__fp_mpack>

00001c86 <sqrt>:
    1c86:	70 df       	rcall	.-288    	; 0x1b68 <__fp_splitA>
    1c88:	d0 f3       	brcs	.-12     	; 0x1c7e <__mulsf3_pse+0xaa>
    1c8a:	99 23       	and	r25, r25
    1c8c:	d9 f3       	breq	.-10     	; 0x1c84 <__mulsf3_pse+0xb0>
    1c8e:	ce f3       	brts	.-14     	; 0x1c82 <__mulsf3_pse+0xae>
    1c90:	9f 57       	subi	r25, 0x7F	; 127
    1c92:	55 0b       	sbc	r21, r21
    1c94:	87 ff       	sbrs	r24, 7
    1c96:	ad d0       	rcall	.+346    	; 0x1df2 <__fp_norm2>
    1c98:	00 24       	eor	r0, r0
    1c9a:	a0 e6       	ldi	r26, 0x60	; 96
    1c9c:	40 ea       	ldi	r20, 0xA0	; 160
    1c9e:	90 01       	movw	r18, r0
    1ca0:	80 58       	subi	r24, 0x80	; 128
    1ca2:	56 95       	lsr	r21
    1ca4:	97 95       	ror	r25
    1ca6:	28 f4       	brcc	.+10     	; 0x1cb2 <sqrt+0x2c>
    1ca8:	80 5c       	subi	r24, 0xC0	; 192
    1caa:	66 0f       	add	r22, r22
    1cac:	77 1f       	adc	r23, r23
    1cae:	88 1f       	adc	r24, r24
    1cb0:	20 f0       	brcs	.+8      	; 0x1cba <sqrt+0x34>
    1cb2:	26 17       	cp	r18, r22
    1cb4:	37 07       	cpc	r19, r23
    1cb6:	48 07       	cpc	r20, r24
    1cb8:	30 f4       	brcc	.+12     	; 0x1cc6 <sqrt+0x40>
    1cba:	62 1b       	sub	r22, r18
    1cbc:	73 0b       	sbc	r23, r19
    1cbe:	84 0b       	sbc	r24, r20
    1cc0:	20 29       	or	r18, r0
    1cc2:	31 29       	or	r19, r1
    1cc4:	4a 2b       	or	r20, r26
    1cc6:	a6 95       	lsr	r26
    1cc8:	17 94       	ror	r1
    1cca:	07 94       	ror	r0
    1ccc:	20 25       	eor	r18, r0
    1cce:	31 25       	eor	r19, r1
    1cd0:	4a 27       	eor	r20, r26
    1cd2:	58 f7       	brcc	.-42     	; 0x1caa <sqrt+0x24>
    1cd4:	66 0f       	add	r22, r22
    1cd6:	77 1f       	adc	r23, r23
    1cd8:	88 1f       	adc	r24, r24
    1cda:	20 f0       	brcs	.+8      	; 0x1ce4 <sqrt+0x5e>
    1cdc:	26 17       	cp	r18, r22
    1cde:	37 07       	cpc	r19, r23
    1ce0:	48 07       	cpc	r20, r24
    1ce2:	30 f4       	brcc	.+12     	; 0x1cf0 <sqrt+0x6a>
    1ce4:	62 0b       	sbc	r22, r18
    1ce6:	73 0b       	sbc	r23, r19
    1ce8:	84 0b       	sbc	r24, r20
    1cea:	20 0d       	add	r18, r0
    1cec:	31 1d       	adc	r19, r1
    1cee:	41 1d       	adc	r20, r1
    1cf0:	a0 95       	com	r26
    1cf2:	81 f7       	brne	.-32     	; 0x1cd4 <sqrt+0x4e>
    1cf4:	b9 01       	movw	r22, r18
    1cf6:	84 2f       	mov	r24, r20
    1cf8:	91 58       	subi	r25, 0x81	; 129
    1cfa:	88 0f       	add	r24, r24
    1cfc:	96 95       	lsr	r25
    1cfe:	87 95       	ror	r24
    1d00:	08 95       	ret

00001d02 <square>:
    1d02:	9b 01       	movw	r18, r22
    1d04:	ac 01       	movw	r20, r24
    1d06:	58 cf       	rjmp	.-336    	; 0x1bb8 <__mulsf3>

00001d08 <__subsf3>:
    1d08:	50 58       	subi	r21, 0x80	; 128

00001d0a <__addsf3>:
    1d0a:	bb 27       	eor	r27, r27
    1d0c:	aa 27       	eor	r26, r26
    1d0e:	0e d0       	rcall	.+28     	; 0x1d2c <__addsf3x>
    1d10:	12 cf       	rjmp	.-476    	; 0x1b36 <__fp_round>
    1d12:	03 df       	rcall	.-506    	; 0x1b1a <__fp_pscA>
    1d14:	30 f0       	brcs	.+12     	; 0x1d22 <__addsf3+0x18>
    1d16:	08 df       	rcall	.-496    	; 0x1b28 <__fp_pscB>
    1d18:	20 f0       	brcs	.+8      	; 0x1d22 <__addsf3+0x18>
    1d1a:	31 f4       	brne	.+12     	; 0x1d28 <__addsf3+0x1e>
    1d1c:	9f 3f       	cpi	r25, 0xFF	; 255
    1d1e:	11 f4       	brne	.+4      	; 0x1d24 <__addsf3+0x1a>
    1d20:	1e f4       	brtc	.+6      	; 0x1d28 <__addsf3+0x1e>
    1d22:	d3 ce       	rjmp	.-602    	; 0x1aca <__fp_nan>
    1d24:	0e f4       	brtc	.+2      	; 0x1d28 <__addsf3+0x1e>
    1d26:	e0 95       	com	r30
    1d28:	e7 fb       	bst	r30, 7
    1d2a:	c9 ce       	rjmp	.-622    	; 0x1abe <__fp_inf>

00001d2c <__addsf3x>:
    1d2c:	e9 2f       	mov	r30, r25
    1d2e:	14 df       	rcall	.-472    	; 0x1b58 <__fp_split3>
    1d30:	80 f3       	brcs	.-32     	; 0x1d12 <__addsf3+0x8>
    1d32:	ba 17       	cp	r27, r26
    1d34:	62 07       	cpc	r22, r18
    1d36:	73 07       	cpc	r23, r19
    1d38:	84 07       	cpc	r24, r20
    1d3a:	95 07       	cpc	r25, r21
    1d3c:	18 f0       	brcs	.+6      	; 0x1d44 <__addsf3x+0x18>
    1d3e:	71 f4       	brne	.+28     	; 0x1d5c <__addsf3x+0x30>
    1d40:	9e f5       	brtc	.+102    	; 0x1da8 <__addsf3x+0x7c>
    1d42:	2c cf       	rjmp	.-424    	; 0x1b9c <__fp_zero>
    1d44:	0e f4       	brtc	.+2      	; 0x1d48 <__addsf3x+0x1c>
    1d46:	e0 95       	com	r30
    1d48:	0b 2e       	mov	r0, r27
    1d4a:	ba 2f       	mov	r27, r26
    1d4c:	a0 2d       	mov	r26, r0
    1d4e:	0b 01       	movw	r0, r22
    1d50:	b9 01       	movw	r22, r18
    1d52:	90 01       	movw	r18, r0
    1d54:	0c 01       	movw	r0, r24
    1d56:	ca 01       	movw	r24, r20
    1d58:	a0 01       	movw	r20, r0
    1d5a:	11 24       	eor	r1, r1
    1d5c:	ff 27       	eor	r31, r31
    1d5e:	59 1b       	sub	r21, r25
    1d60:	99 f0       	breq	.+38     	; 0x1d88 <__addsf3x+0x5c>
    1d62:	59 3f       	cpi	r21, 0xF9	; 249
    1d64:	50 f4       	brcc	.+20     	; 0x1d7a <__addsf3x+0x4e>
    1d66:	50 3e       	cpi	r21, 0xE0	; 224
    1d68:	68 f1       	brcs	.+90     	; 0x1dc4 <__addsf3x+0x98>
    1d6a:	1a 16       	cp	r1, r26
    1d6c:	f0 40       	sbci	r31, 0x00	; 0
    1d6e:	a2 2f       	mov	r26, r18
    1d70:	23 2f       	mov	r18, r19
    1d72:	34 2f       	mov	r19, r20
    1d74:	44 27       	eor	r20, r20
    1d76:	58 5f       	subi	r21, 0xF8	; 248
    1d78:	f3 cf       	rjmp	.-26     	; 0x1d60 <__addsf3x+0x34>
    1d7a:	46 95       	lsr	r20
    1d7c:	37 95       	ror	r19
    1d7e:	27 95       	ror	r18
    1d80:	a7 95       	ror	r26
    1d82:	f0 40       	sbci	r31, 0x00	; 0
    1d84:	53 95       	inc	r21
    1d86:	c9 f7       	brne	.-14     	; 0x1d7a <__addsf3x+0x4e>
    1d88:	7e f4       	brtc	.+30     	; 0x1da8 <__addsf3x+0x7c>
    1d8a:	1f 16       	cp	r1, r31
    1d8c:	ba 0b       	sbc	r27, r26
    1d8e:	62 0b       	sbc	r22, r18
    1d90:	73 0b       	sbc	r23, r19
    1d92:	84 0b       	sbc	r24, r20
    1d94:	ba f0       	brmi	.+46     	; 0x1dc4 <__addsf3x+0x98>
    1d96:	91 50       	subi	r25, 0x01	; 1
    1d98:	a1 f0       	breq	.+40     	; 0x1dc2 <__addsf3x+0x96>
    1d9a:	ff 0f       	add	r31, r31
    1d9c:	bb 1f       	adc	r27, r27
    1d9e:	66 1f       	adc	r22, r22
    1da0:	77 1f       	adc	r23, r23
    1da2:	88 1f       	adc	r24, r24
    1da4:	c2 f7       	brpl	.-16     	; 0x1d96 <__addsf3x+0x6a>
    1da6:	0e c0       	rjmp	.+28     	; 0x1dc4 <__addsf3x+0x98>
    1da8:	ba 0f       	add	r27, r26
    1daa:	62 1f       	adc	r22, r18
    1dac:	73 1f       	adc	r23, r19
    1dae:	84 1f       	adc	r24, r20
    1db0:	48 f4       	brcc	.+18     	; 0x1dc4 <__addsf3x+0x98>
    1db2:	87 95       	ror	r24
    1db4:	77 95       	ror	r23
    1db6:	67 95       	ror	r22
    1db8:	b7 95       	ror	r27
    1dba:	f7 95       	ror	r31
    1dbc:	9e 3f       	cpi	r25, 0xFE	; 254
    1dbe:	08 f0       	brcs	.+2      	; 0x1dc2 <__addsf3x+0x96>
    1dc0:	b3 cf       	rjmp	.-154    	; 0x1d28 <__addsf3+0x1e>
    1dc2:	93 95       	inc	r25
    1dc4:	88 0f       	add	r24, r24
    1dc6:	08 f0       	brcs	.+2      	; 0x1dca <__addsf3x+0x9e>
    1dc8:	99 27       	eor	r25, r25
    1dca:	ee 0f       	add	r30, r30
    1dcc:	97 95       	ror	r25
    1dce:	87 95       	ror	r24
    1dd0:	08 95       	ret

00001dd2 <__divsf3>:
    1dd2:	ac dd       	rcall	.-1192   	; 0x192c <__divsf3x>
    1dd4:	b0 ce       	rjmp	.-672    	; 0x1b36 <__fp_round>

00001dd6 <__fp_mpack>:
    1dd6:	9f 3f       	cpi	r25, 0xFF	; 255
    1dd8:	31 f0       	breq	.+12     	; 0x1de6 <__fp_mpack_finite+0xc>

00001dda <__fp_mpack_finite>:
    1dda:	91 50       	subi	r25, 0x01	; 1
    1ddc:	20 f4       	brcc	.+8      	; 0x1de6 <__fp_mpack_finite+0xc>
    1dde:	87 95       	ror	r24
    1de0:	77 95       	ror	r23
    1de2:	67 95       	ror	r22
    1de4:	b7 95       	ror	r27
    1de6:	88 0f       	add	r24, r24
    1de8:	91 1d       	adc	r25, r1
    1dea:	96 95       	lsr	r25
    1dec:	87 95       	ror	r24
    1dee:	97 f9       	bld	r25, 7
    1df0:	08 95       	ret

00001df2 <__fp_norm2>:
    1df2:	91 50       	subi	r25, 0x01	; 1
    1df4:	50 40       	sbci	r21, 0x00	; 0
    1df6:	66 0f       	add	r22, r22
    1df8:	77 1f       	adc	r23, r23
    1dfa:	88 1f       	adc	r24, r24
    1dfc:	d2 f7       	brpl	.-12     	; 0x1df2 <__fp_norm2>
    1dfe:	08 95       	ret

00001e00 <__divmodhi4>:
    1e00:	97 fb       	bst	r25, 7
    1e02:	07 2e       	mov	r0, r23
    1e04:	16 f4       	brtc	.+4      	; 0x1e0a <__divmodhi4+0xa>
    1e06:	00 94       	com	r0
    1e08:	07 d0       	rcall	.+14     	; 0x1e18 <__divmodhi4_neg1>
    1e0a:	77 fd       	sbrc	r23, 7
    1e0c:	09 d0       	rcall	.+18     	; 0x1e20 <__divmodhi4_neg2>
    1e0e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__udivmodhi4>
    1e12:	07 fc       	sbrc	r0, 7
    1e14:	05 d0       	rcall	.+10     	; 0x1e20 <__divmodhi4_neg2>
    1e16:	3e f4       	brtc	.+14     	; 0x1e26 <__divmodhi4_exit>

00001e18 <__divmodhi4_neg1>:
    1e18:	90 95       	com	r25
    1e1a:	81 95       	neg	r24
    1e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1e:	08 95       	ret

00001e20 <__divmodhi4_neg2>:
    1e20:	70 95       	com	r23
    1e22:	61 95       	neg	r22
    1e24:	7f 4f       	sbci	r23, 0xFF	; 255

00001e26 <__divmodhi4_exit>:
    1e26:	08 95       	ret

00001e28 <__divmodsi4>:
    1e28:	05 2e       	mov	r0, r21
    1e2a:	97 fb       	bst	r25, 7
    1e2c:	1e f4       	brtc	.+6      	; 0x1e34 <__divmodsi4+0xc>
    1e2e:	00 94       	com	r0
    1e30:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <__negsi2>
    1e34:	57 fd       	sbrc	r21, 7
    1e36:	07 d0       	rcall	.+14     	; 0x1e46 <__divmodsi4_neg2>
    1e38:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__udivmodsi4>
    1e3c:	07 fc       	sbrc	r0, 7
    1e3e:	03 d0       	rcall	.+6      	; 0x1e46 <__divmodsi4_neg2>
    1e40:	4e f4       	brtc	.+18     	; 0x1e54 <__divmodsi4_exit>
    1e42:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__negsi2>

00001e46 <__divmodsi4_neg2>:
    1e46:	50 95       	com	r21
    1e48:	40 95       	com	r20
    1e4a:	30 95       	com	r19
    1e4c:	21 95       	neg	r18
    1e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e50:	4f 4f       	sbci	r20, 0xFF	; 255
    1e52:	5f 4f       	sbci	r21, 0xFF	; 255

00001e54 <__divmodsi4_exit>:
    1e54:	08 95       	ret

00001e56 <__negsi2>:
    1e56:	90 95       	com	r25
    1e58:	80 95       	com	r24
    1e5a:	70 95       	com	r23
    1e5c:	61 95       	neg	r22
    1e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e60:	8f 4f       	sbci	r24, 0xFF	; 255
    1e62:	9f 4f       	sbci	r25, 0xFF	; 255
    1e64:	08 95       	ret

00001e66 <__udivmodhi4>:
    1e66:	aa 1b       	sub	r26, r26
    1e68:	bb 1b       	sub	r27, r27
    1e6a:	51 e1       	ldi	r21, 0x11	; 17
    1e6c:	07 c0       	rjmp	.+14     	; 0x1e7c <__udivmodhi4_ep>

00001e6e <__udivmodhi4_loop>:
    1e6e:	aa 1f       	adc	r26, r26
    1e70:	bb 1f       	adc	r27, r27
    1e72:	a6 17       	cp	r26, r22
    1e74:	b7 07       	cpc	r27, r23
    1e76:	10 f0       	brcs	.+4      	; 0x1e7c <__udivmodhi4_ep>
    1e78:	a6 1b       	sub	r26, r22
    1e7a:	b7 0b       	sbc	r27, r23

00001e7c <__udivmodhi4_ep>:
    1e7c:	88 1f       	adc	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	5a 95       	dec	r21
    1e82:	a9 f7       	brne	.-22     	; 0x1e6e <__udivmodhi4_loop>
    1e84:	80 95       	com	r24
    1e86:	90 95       	com	r25
    1e88:	bc 01       	movw	r22, r24
    1e8a:	cd 01       	movw	r24, r26
    1e8c:	08 95       	ret

00001e8e <__udivmodsi4>:
    1e8e:	a1 e2       	ldi	r26, 0x21	; 33
    1e90:	1a 2e       	mov	r1, r26
    1e92:	aa 1b       	sub	r26, r26
    1e94:	bb 1b       	sub	r27, r27
    1e96:	fd 01       	movw	r30, r26
    1e98:	0d c0       	rjmp	.+26     	; 0x1eb4 <__udivmodsi4_ep>

00001e9a <__udivmodsi4_loop>:
    1e9a:	aa 1f       	adc	r26, r26
    1e9c:	bb 1f       	adc	r27, r27
    1e9e:	ee 1f       	adc	r30, r30
    1ea0:	ff 1f       	adc	r31, r31
    1ea2:	a2 17       	cp	r26, r18
    1ea4:	b3 07       	cpc	r27, r19
    1ea6:	e4 07       	cpc	r30, r20
    1ea8:	f5 07       	cpc	r31, r21
    1eaa:	20 f0       	brcs	.+8      	; 0x1eb4 <__udivmodsi4_ep>
    1eac:	a2 1b       	sub	r26, r18
    1eae:	b3 0b       	sbc	r27, r19
    1eb0:	e4 0b       	sbc	r30, r20
    1eb2:	f5 0b       	sbc	r31, r21

00001eb4 <__udivmodsi4_ep>:
    1eb4:	66 1f       	adc	r22, r22
    1eb6:	77 1f       	adc	r23, r23
    1eb8:	88 1f       	adc	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	1a 94       	dec	r1
    1ebe:	69 f7       	brne	.-38     	; 0x1e9a <__udivmodsi4_loop>
    1ec0:	60 95       	com	r22
    1ec2:	70 95       	com	r23
    1ec4:	80 95       	com	r24
    1ec6:	90 95       	com	r25
    1ec8:	9b 01       	movw	r18, r22
    1eca:	ac 01       	movw	r20, r24
    1ecc:	bd 01       	movw	r22, r26
    1ece:	cf 01       	movw	r24, r30
    1ed0:	08 95       	ret

00001ed2 <malloc>:
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	82 30       	cpi	r24, 0x02	; 2
    1ed8:	91 05       	cpc	r25, r1
    1eda:	10 f4       	brcc	.+4      	; 0x1ee0 <malloc+0xe>
    1edc:	82 e0       	ldi	r24, 0x02	; 2
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	e0 91 7a 02 	lds	r30, 0x027A
    1ee4:	f0 91 7b 02 	lds	r31, 0x027B
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	a0 e0       	ldi	r26, 0x00	; 0
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	30 97       	sbiw	r30, 0x00	; 0
    1ef2:	39 f1       	breq	.+78     	; 0x1f42 <malloc+0x70>
    1ef4:	40 81       	ld	r20, Z
    1ef6:	51 81       	ldd	r21, Z+1	; 0x01
    1ef8:	48 17       	cp	r20, r24
    1efa:	59 07       	cpc	r21, r25
    1efc:	b8 f0       	brcs	.+46     	; 0x1f2c <malloc+0x5a>
    1efe:	48 17       	cp	r20, r24
    1f00:	59 07       	cpc	r21, r25
    1f02:	71 f4       	brne	.+28     	; 0x1f20 <malloc+0x4e>
    1f04:	82 81       	ldd	r24, Z+2	; 0x02
    1f06:	93 81       	ldd	r25, Z+3	; 0x03
    1f08:	10 97       	sbiw	r26, 0x00	; 0
    1f0a:	29 f0       	breq	.+10     	; 0x1f16 <malloc+0x44>
    1f0c:	13 96       	adiw	r26, 0x03	; 3
    1f0e:	9c 93       	st	X, r25
    1f10:	8e 93       	st	-X, r24
    1f12:	12 97       	sbiw	r26, 0x02	; 2
    1f14:	2c c0       	rjmp	.+88     	; 0x1f6e <malloc+0x9c>
    1f16:	90 93 7b 02 	sts	0x027B, r25
    1f1a:	80 93 7a 02 	sts	0x027A, r24
    1f1e:	27 c0       	rjmp	.+78     	; 0x1f6e <malloc+0x9c>
    1f20:	21 15       	cp	r18, r1
    1f22:	31 05       	cpc	r19, r1
    1f24:	31 f0       	breq	.+12     	; 0x1f32 <malloc+0x60>
    1f26:	42 17       	cp	r20, r18
    1f28:	53 07       	cpc	r21, r19
    1f2a:	18 f0       	brcs	.+6      	; 0x1f32 <malloc+0x60>
    1f2c:	a9 01       	movw	r20, r18
    1f2e:	db 01       	movw	r26, r22
    1f30:	01 c0       	rjmp	.+2      	; 0x1f34 <malloc+0x62>
    1f32:	ef 01       	movw	r28, r30
    1f34:	9a 01       	movw	r18, r20
    1f36:	bd 01       	movw	r22, r26
    1f38:	df 01       	movw	r26, r30
    1f3a:	02 80       	ldd	r0, Z+2	; 0x02
    1f3c:	f3 81       	ldd	r31, Z+3	; 0x03
    1f3e:	e0 2d       	mov	r30, r0
    1f40:	d7 cf       	rjmp	.-82     	; 0x1ef0 <malloc+0x1e>
    1f42:	21 15       	cp	r18, r1
    1f44:	31 05       	cpc	r19, r1
    1f46:	f9 f0       	breq	.+62     	; 0x1f86 <malloc+0xb4>
    1f48:	28 1b       	sub	r18, r24
    1f4a:	39 0b       	sbc	r19, r25
    1f4c:	24 30       	cpi	r18, 0x04	; 4
    1f4e:	31 05       	cpc	r19, r1
    1f50:	80 f4       	brcc	.+32     	; 0x1f72 <malloc+0xa0>
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	9b 81       	ldd	r25, Y+3	; 0x03
    1f56:	61 15       	cp	r22, r1
    1f58:	71 05       	cpc	r23, r1
    1f5a:	21 f0       	breq	.+8      	; 0x1f64 <malloc+0x92>
    1f5c:	fb 01       	movw	r30, r22
    1f5e:	93 83       	std	Z+3, r25	; 0x03
    1f60:	82 83       	std	Z+2, r24	; 0x02
    1f62:	04 c0       	rjmp	.+8      	; 0x1f6c <malloc+0x9a>
    1f64:	90 93 7b 02 	sts	0x027B, r25
    1f68:	80 93 7a 02 	sts	0x027A, r24
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	32 96       	adiw	r30, 0x02	; 2
    1f70:	44 c0       	rjmp	.+136    	; 0x1ffa <malloc+0x128>
    1f72:	fe 01       	movw	r30, r28
    1f74:	e2 0f       	add	r30, r18
    1f76:	f3 1f       	adc	r31, r19
    1f78:	81 93       	st	Z+, r24
    1f7a:	91 93       	st	Z+, r25
    1f7c:	22 50       	subi	r18, 0x02	; 2
    1f7e:	31 09       	sbc	r19, r1
    1f80:	39 83       	std	Y+1, r19	; 0x01
    1f82:	28 83       	st	Y, r18
    1f84:	3a c0       	rjmp	.+116    	; 0x1ffa <malloc+0x128>
    1f86:	20 91 78 02 	lds	r18, 0x0278
    1f8a:	30 91 79 02 	lds	r19, 0x0279
    1f8e:	23 2b       	or	r18, r19
    1f90:	41 f4       	brne	.+16     	; 0x1fa2 <malloc+0xd0>
    1f92:	20 91 02 01 	lds	r18, 0x0102
    1f96:	30 91 03 01 	lds	r19, 0x0103
    1f9a:	30 93 79 02 	sts	0x0279, r19
    1f9e:	20 93 78 02 	sts	0x0278, r18
    1fa2:	20 91 00 01 	lds	r18, 0x0100
    1fa6:	30 91 01 01 	lds	r19, 0x0101
    1faa:	21 15       	cp	r18, r1
    1fac:	31 05       	cpc	r19, r1
    1fae:	41 f4       	brne	.+16     	; 0x1fc0 <malloc+0xee>
    1fb0:	2d b7       	in	r18, 0x3d	; 61
    1fb2:	3e b7       	in	r19, 0x3e	; 62
    1fb4:	40 91 04 01 	lds	r20, 0x0104
    1fb8:	50 91 05 01 	lds	r21, 0x0105
    1fbc:	24 1b       	sub	r18, r20
    1fbe:	35 0b       	sbc	r19, r21
    1fc0:	e0 91 78 02 	lds	r30, 0x0278
    1fc4:	f0 91 79 02 	lds	r31, 0x0279
    1fc8:	e2 17       	cp	r30, r18
    1fca:	f3 07       	cpc	r31, r19
    1fcc:	a0 f4       	brcc	.+40     	; 0x1ff6 <malloc+0x124>
    1fce:	2e 1b       	sub	r18, r30
    1fd0:	3f 0b       	sbc	r19, r31
    1fd2:	28 17       	cp	r18, r24
    1fd4:	39 07       	cpc	r19, r25
    1fd6:	78 f0       	brcs	.+30     	; 0x1ff6 <malloc+0x124>
    1fd8:	ac 01       	movw	r20, r24
    1fda:	4e 5f       	subi	r20, 0xFE	; 254
    1fdc:	5f 4f       	sbci	r21, 0xFF	; 255
    1fde:	24 17       	cp	r18, r20
    1fe0:	35 07       	cpc	r19, r21
    1fe2:	48 f0       	brcs	.+18     	; 0x1ff6 <malloc+0x124>
    1fe4:	4e 0f       	add	r20, r30
    1fe6:	5f 1f       	adc	r21, r31
    1fe8:	50 93 79 02 	sts	0x0279, r21
    1fec:	40 93 78 02 	sts	0x0278, r20
    1ff0:	81 93       	st	Z+, r24
    1ff2:	91 93       	st	Z+, r25
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <malloc+0x128>
    1ff6:	e0 e0       	ldi	r30, 0x00	; 0
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	cf 01       	movw	r24, r30
    1ffc:	df 91       	pop	r29
    1ffe:	cf 91       	pop	r28
    2000:	08 95       	ret

00002002 <free>:
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	09 f4       	brne	.+2      	; 0x200c <free+0xa>
    200a:	87 c0       	rjmp	.+270    	; 0x211a <free+0x118>
    200c:	fc 01       	movw	r30, r24
    200e:	32 97       	sbiw	r30, 0x02	; 2
    2010:	13 82       	std	Z+3, r1	; 0x03
    2012:	12 82       	std	Z+2, r1	; 0x02
    2014:	c0 91 7a 02 	lds	r28, 0x027A
    2018:	d0 91 7b 02 	lds	r29, 0x027B
    201c:	20 97       	sbiw	r28, 0x00	; 0
    201e:	81 f4       	brne	.+32     	; 0x2040 <free+0x3e>
    2020:	20 81       	ld	r18, Z
    2022:	31 81       	ldd	r19, Z+1	; 0x01
    2024:	28 0f       	add	r18, r24
    2026:	39 1f       	adc	r19, r25
    2028:	80 91 78 02 	lds	r24, 0x0278
    202c:	90 91 79 02 	lds	r25, 0x0279
    2030:	82 17       	cp	r24, r18
    2032:	93 07       	cpc	r25, r19
    2034:	79 f5       	brne	.+94     	; 0x2094 <free+0x92>
    2036:	f0 93 79 02 	sts	0x0279, r31
    203a:	e0 93 78 02 	sts	0x0278, r30
    203e:	6d c0       	rjmp	.+218    	; 0x211a <free+0x118>
    2040:	de 01       	movw	r26, r28
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	ae 17       	cp	r26, r30
    2048:	bf 07       	cpc	r27, r31
    204a:	50 f4       	brcc	.+20     	; 0x2060 <free+0x5e>
    204c:	12 96       	adiw	r26, 0x02	; 2
    204e:	4d 91       	ld	r20, X+
    2050:	5c 91       	ld	r21, X
    2052:	13 97       	sbiw	r26, 0x03	; 3
    2054:	9d 01       	movw	r18, r26
    2056:	41 15       	cp	r20, r1
    2058:	51 05       	cpc	r21, r1
    205a:	09 f1       	breq	.+66     	; 0x209e <free+0x9c>
    205c:	da 01       	movw	r26, r20
    205e:	f3 cf       	rjmp	.-26     	; 0x2046 <free+0x44>
    2060:	b3 83       	std	Z+3, r27	; 0x03
    2062:	a2 83       	std	Z+2, r26	; 0x02
    2064:	40 81       	ld	r20, Z
    2066:	51 81       	ldd	r21, Z+1	; 0x01
    2068:	84 0f       	add	r24, r20
    206a:	95 1f       	adc	r25, r21
    206c:	8a 17       	cp	r24, r26
    206e:	9b 07       	cpc	r25, r27
    2070:	71 f4       	brne	.+28     	; 0x208e <free+0x8c>
    2072:	8d 91       	ld	r24, X+
    2074:	9c 91       	ld	r25, X
    2076:	11 97       	sbiw	r26, 0x01	; 1
    2078:	84 0f       	add	r24, r20
    207a:	95 1f       	adc	r25, r21
    207c:	02 96       	adiw	r24, 0x02	; 2
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	80 83       	st	Z, r24
    2082:	12 96       	adiw	r26, 0x02	; 2
    2084:	8d 91       	ld	r24, X+
    2086:	9c 91       	ld	r25, X
    2088:	13 97       	sbiw	r26, 0x03	; 3
    208a:	93 83       	std	Z+3, r25	; 0x03
    208c:	82 83       	std	Z+2, r24	; 0x02
    208e:	21 15       	cp	r18, r1
    2090:	31 05       	cpc	r19, r1
    2092:	29 f4       	brne	.+10     	; 0x209e <free+0x9c>
    2094:	f0 93 7b 02 	sts	0x027B, r31
    2098:	e0 93 7a 02 	sts	0x027A, r30
    209c:	3e c0       	rjmp	.+124    	; 0x211a <free+0x118>
    209e:	d9 01       	movw	r26, r18
    20a0:	13 96       	adiw	r26, 0x03	; 3
    20a2:	fc 93       	st	X, r31
    20a4:	ee 93       	st	-X, r30
    20a6:	12 97       	sbiw	r26, 0x02	; 2
    20a8:	4d 91       	ld	r20, X+
    20aa:	5d 91       	ld	r21, X+
    20ac:	a4 0f       	add	r26, r20
    20ae:	b5 1f       	adc	r27, r21
    20b0:	ea 17       	cp	r30, r26
    20b2:	fb 07       	cpc	r31, r27
    20b4:	79 f4       	brne	.+30     	; 0x20d4 <free+0xd2>
    20b6:	80 81       	ld	r24, Z
    20b8:	91 81       	ldd	r25, Z+1	; 0x01
    20ba:	84 0f       	add	r24, r20
    20bc:	95 1f       	adc	r25, r21
    20be:	02 96       	adiw	r24, 0x02	; 2
    20c0:	d9 01       	movw	r26, r18
    20c2:	11 96       	adiw	r26, 0x01	; 1
    20c4:	9c 93       	st	X, r25
    20c6:	8e 93       	st	-X, r24
    20c8:	82 81       	ldd	r24, Z+2	; 0x02
    20ca:	93 81       	ldd	r25, Z+3	; 0x03
    20cc:	13 96       	adiw	r26, 0x03	; 3
    20ce:	9c 93       	st	X, r25
    20d0:	8e 93       	st	-X, r24
    20d2:	12 97       	sbiw	r26, 0x02	; 2
    20d4:	e0 e0       	ldi	r30, 0x00	; 0
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	9b 81       	ldd	r25, Y+3	; 0x03
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	19 f0       	breq	.+6      	; 0x20e6 <free+0xe4>
    20e0:	fe 01       	movw	r30, r28
    20e2:	ec 01       	movw	r28, r24
    20e4:	f9 cf       	rjmp	.-14     	; 0x20d8 <free+0xd6>
    20e6:	ce 01       	movw	r24, r28
    20e8:	02 96       	adiw	r24, 0x02	; 2
    20ea:	28 81       	ld	r18, Y
    20ec:	39 81       	ldd	r19, Y+1	; 0x01
    20ee:	82 0f       	add	r24, r18
    20f0:	93 1f       	adc	r25, r19
    20f2:	20 91 78 02 	lds	r18, 0x0278
    20f6:	30 91 79 02 	lds	r19, 0x0279
    20fa:	28 17       	cp	r18, r24
    20fc:	39 07       	cpc	r19, r25
    20fe:	69 f4       	brne	.+26     	; 0x211a <free+0x118>
    2100:	30 97       	sbiw	r30, 0x00	; 0
    2102:	29 f4       	brne	.+10     	; 0x210e <free+0x10c>
    2104:	10 92 7b 02 	sts	0x027B, r1
    2108:	10 92 7a 02 	sts	0x027A, r1
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <free+0x110>
    210e:	13 82       	std	Z+3, r1	; 0x03
    2110:	12 82       	std	Z+2, r1	; 0x02
    2112:	d0 93 79 02 	sts	0x0279, r29
    2116:	c0 93 78 02 	sts	0x0278, r28
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	08 95       	ret

00002120 <realloc>:
    2120:	a0 e0       	ldi	r26, 0x00	; 0
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e6 e9       	ldi	r30, 0x96	; 150
    2126:	f0 e1       	ldi	r31, 0x10	; 16
    2128:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__prologue_saves__+0x8>
    212c:	ec 01       	movw	r28, r24
    212e:	cb 01       	movw	r24, r22
    2130:	20 97       	sbiw	r28, 0x00	; 0
    2132:	19 f4       	brne	.+6      	; 0x213a <realloc+0x1a>
    2134:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <malloc>
    2138:	b8 c0       	rjmp	.+368    	; 0x22aa <realloc+0x18a>
    213a:	fe 01       	movw	r30, r28
    213c:	e6 0f       	add	r30, r22
    213e:	f7 1f       	adc	r31, r23
    2140:	9e 01       	movw	r18, r28
    2142:	22 50       	subi	r18, 0x02	; 2
    2144:	31 09       	sbc	r19, r1
    2146:	e2 17       	cp	r30, r18
    2148:	f3 07       	cpc	r31, r19
    214a:	08 f4       	brcc	.+2      	; 0x214e <realloc+0x2e>
    214c:	ac c0       	rjmp	.+344    	; 0x22a6 <realloc+0x186>
    214e:	d9 01       	movw	r26, r18
    2150:	0d 91       	ld	r16, X+
    2152:	1c 91       	ld	r17, X
    2154:	11 97       	sbiw	r26, 0x01	; 1
    2156:	06 17       	cp	r16, r22
    2158:	17 07       	cpc	r17, r23
    215a:	b8 f0       	brcs	.+46     	; 0x218a <realloc+0x6a>
    215c:	05 30       	cpi	r16, 0x05	; 5
    215e:	11 05       	cpc	r17, r1
    2160:	08 f4       	brcc	.+2      	; 0x2164 <realloc+0x44>
    2162:	9f c0       	rjmp	.+318    	; 0x22a2 <realloc+0x182>
    2164:	a8 01       	movw	r20, r16
    2166:	44 50       	subi	r20, 0x04	; 4
    2168:	51 09       	sbc	r21, r1
    216a:	46 17       	cp	r20, r22
    216c:	57 07       	cpc	r21, r23
    216e:	08 f4       	brcc	.+2      	; 0x2172 <realloc+0x52>
    2170:	98 c0       	rjmp	.+304    	; 0x22a2 <realloc+0x182>
    2172:	02 50       	subi	r16, 0x02	; 2
    2174:	11 09       	sbc	r17, r1
    2176:	06 1b       	sub	r16, r22
    2178:	17 0b       	sbc	r17, r23
    217a:	01 93       	st	Z+, r16
    217c:	11 93       	st	Z+, r17
    217e:	6d 93       	st	X+, r22
    2180:	7c 93       	st	X, r23
    2182:	cf 01       	movw	r24, r30
    2184:	0e 94 01 10 	call	0x2002	; 0x2002 <free>
    2188:	8c c0       	rjmp	.+280    	; 0x22a2 <realloc+0x182>
    218a:	5b 01       	movw	r10, r22
    218c:	a0 1a       	sub	r10, r16
    218e:	b1 0a       	sbc	r11, r17
    2190:	4e 01       	movw	r8, r28
    2192:	80 0e       	add	r8, r16
    2194:	91 1e       	adc	r9, r17
    2196:	a0 91 7a 02 	lds	r26, 0x027A
    219a:	b0 91 7b 02 	lds	r27, 0x027B
    219e:	61 2c       	mov	r6, r1
    21a0:	71 2c       	mov	r7, r1
    21a2:	60 e0       	ldi	r22, 0x00	; 0
    21a4:	70 e0       	ldi	r23, 0x00	; 0
    21a6:	10 97       	sbiw	r26, 0x00	; 0
    21a8:	09 f4       	brne	.+2      	; 0x21ac <realloc+0x8c>
    21aa:	49 c0       	rjmp	.+146    	; 0x223e <realloc+0x11e>
    21ac:	a8 15       	cp	r26, r8
    21ae:	b9 05       	cpc	r27, r9
    21b0:	c9 f5       	brne	.+114    	; 0x2224 <realloc+0x104>
    21b2:	ed 90       	ld	r14, X+
    21b4:	fc 90       	ld	r15, X
    21b6:	11 97       	sbiw	r26, 0x01	; 1
    21b8:	67 01       	movw	r12, r14
    21ba:	42 e0       	ldi	r20, 0x02	; 2
    21bc:	c4 0e       	add	r12, r20
    21be:	d1 1c       	adc	r13, r1
    21c0:	ca 14       	cp	r12, r10
    21c2:	db 04       	cpc	r13, r11
    21c4:	78 f1       	brcs	.+94     	; 0x2224 <realloc+0x104>
    21c6:	47 01       	movw	r8, r14
    21c8:	8a 18       	sub	r8, r10
    21ca:	9b 08       	sbc	r9, r11
    21cc:	64 01       	movw	r12, r8
    21ce:	42 e0       	ldi	r20, 0x02	; 2
    21d0:	c4 0e       	add	r12, r20
    21d2:	d1 1c       	adc	r13, r1
    21d4:	12 96       	adiw	r26, 0x02	; 2
    21d6:	bc 90       	ld	r11, X
    21d8:	12 97       	sbiw	r26, 0x02	; 2
    21da:	13 96       	adiw	r26, 0x03	; 3
    21dc:	ac 91       	ld	r26, X
    21de:	b5 e0       	ldi	r27, 0x05	; 5
    21e0:	cb 16       	cp	r12, r27
    21e2:	d1 04       	cpc	r13, r1
    21e4:	40 f0       	brcs	.+16     	; 0x21f6 <realloc+0xd6>
    21e6:	b2 82       	std	Z+2, r11	; 0x02
    21e8:	a3 83       	std	Z+3, r26	; 0x03
    21ea:	91 82       	std	Z+1, r9	; 0x01
    21ec:	80 82       	st	Z, r8
    21ee:	d9 01       	movw	r26, r18
    21f0:	8d 93       	st	X+, r24
    21f2:	9c 93       	st	X, r25
    21f4:	09 c0       	rjmp	.+18     	; 0x2208 <realloc+0xe8>
    21f6:	0e 5f       	subi	r16, 0xFE	; 254
    21f8:	1f 4f       	sbci	r17, 0xFF	; 255
    21fa:	0e 0d       	add	r16, r14
    21fc:	1f 1d       	adc	r17, r15
    21fe:	f9 01       	movw	r30, r18
    2200:	11 83       	std	Z+1, r17	; 0x01
    2202:	00 83       	st	Z, r16
    2204:	eb 2d       	mov	r30, r11
    2206:	fa 2f       	mov	r31, r26
    2208:	61 15       	cp	r22, r1
    220a:	71 05       	cpc	r23, r1
    220c:	31 f0       	breq	.+12     	; 0x221a <realloc+0xfa>
    220e:	db 01       	movw	r26, r22
    2210:	13 96       	adiw	r26, 0x03	; 3
    2212:	fc 93       	st	X, r31
    2214:	ee 93       	st	-X, r30
    2216:	12 97       	sbiw	r26, 0x02	; 2
    2218:	44 c0       	rjmp	.+136    	; 0x22a2 <realloc+0x182>
    221a:	f0 93 7b 02 	sts	0x027B, r31
    221e:	e0 93 7a 02 	sts	0x027A, r30
    2222:	3f c0       	rjmp	.+126    	; 0x22a2 <realloc+0x182>
    2224:	6d 91       	ld	r22, X+
    2226:	7c 91       	ld	r23, X
    2228:	11 97       	sbiw	r26, 0x01	; 1
    222a:	66 16       	cp	r6, r22
    222c:	77 06       	cpc	r7, r23
    222e:	08 f4       	brcc	.+2      	; 0x2232 <realloc+0x112>
    2230:	3b 01       	movw	r6, r22
    2232:	bd 01       	movw	r22, r26
    2234:	12 96       	adiw	r26, 0x02	; 2
    2236:	0d 90       	ld	r0, X+
    2238:	bc 91       	ld	r27, X
    223a:	a0 2d       	mov	r26, r0
    223c:	b4 cf       	rjmp	.-152    	; 0x21a6 <realloc+0x86>
    223e:	60 91 78 02 	lds	r22, 0x0278
    2242:	70 91 79 02 	lds	r23, 0x0279
    2246:	68 15       	cp	r22, r8
    2248:	79 05       	cpc	r23, r9
    224a:	e9 f4       	brne	.+58     	; 0x2286 <realloc+0x166>
    224c:	68 16       	cp	r6, r24
    224e:	79 06       	cpc	r7, r25
    2250:	d0 f4       	brcc	.+52     	; 0x2286 <realloc+0x166>
    2252:	40 91 00 01 	lds	r20, 0x0100
    2256:	50 91 01 01 	lds	r21, 0x0101
    225a:	41 15       	cp	r20, r1
    225c:	51 05       	cpc	r21, r1
    225e:	41 f4       	brne	.+16     	; 0x2270 <realloc+0x150>
    2260:	4d b7       	in	r20, 0x3d	; 61
    2262:	5e b7       	in	r21, 0x3e	; 62
    2264:	60 91 04 01 	lds	r22, 0x0104
    2268:	70 91 05 01 	lds	r23, 0x0105
    226c:	46 1b       	sub	r20, r22
    226e:	57 0b       	sbc	r21, r23
    2270:	e4 17       	cp	r30, r20
    2272:	f5 07       	cpc	r31, r21
    2274:	c0 f4       	brcc	.+48     	; 0x22a6 <realloc+0x186>
    2276:	f0 93 79 02 	sts	0x0279, r31
    227a:	e0 93 78 02 	sts	0x0278, r30
    227e:	f9 01       	movw	r30, r18
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	80 83       	st	Z, r24
    2284:	0e c0       	rjmp	.+28     	; 0x22a2 <realloc+0x182>
    2286:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <malloc>
    228a:	7c 01       	movw	r14, r24
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	59 f0       	breq	.+22     	; 0x22a6 <realloc+0x186>
    2290:	a8 01       	movw	r20, r16
    2292:	be 01       	movw	r22, r28
    2294:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <memcpy>
    2298:	ce 01       	movw	r24, r28
    229a:	0e 94 01 10 	call	0x2002	; 0x2002 <free>
    229e:	c7 01       	movw	r24, r14
    22a0:	04 c0       	rjmp	.+8      	; 0x22aa <realloc+0x18a>
    22a2:	ce 01       	movw	r24, r28
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <realloc+0x18a>
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	ee e0       	ldi	r30, 0x0E	; 14
    22b0:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <__epilogue_restores__+0x8>

000022b4 <memcpy>:
    22b4:	fb 01       	movw	r30, r22
    22b6:	dc 01       	movw	r26, r24
    22b8:	02 c0       	rjmp	.+4      	; 0x22be <memcpy+0xa>
    22ba:	01 90       	ld	r0, Z+
    22bc:	0d 92       	st	X+, r0
    22be:	41 50       	subi	r20, 0x01	; 1
    22c0:	50 40       	sbci	r21, 0x00	; 0
    22c2:	d8 f7       	brcc	.-10     	; 0x22ba <memcpy+0x6>
    22c4:	08 95       	ret

000022c6 <fdevopen>:
    22c6:	0f 93       	push	r16
    22c8:	1f 93       	push	r17
    22ca:	cf 93       	push	r28
    22cc:	df 93       	push	r29
    22ce:	ec 01       	movw	r28, r24
    22d0:	8b 01       	movw	r16, r22
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	31 f4       	brne	.+12     	; 0x22e2 <fdevopen+0x1c>
    22d6:	61 15       	cp	r22, r1
    22d8:	71 05       	cpc	r23, r1
    22da:	19 f4       	brne	.+6      	; 0x22e2 <fdevopen+0x1c>
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	38 c0       	rjmp	.+112    	; 0x2352 <fdevopen+0x8c>
    22e2:	6e e0       	ldi	r22, 0x0E	; 14
    22e4:	70 e0       	ldi	r23, 0x00	; 0
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	0e 94 c1 13 	call	0x2782	; 0x2782 <calloc>
    22ee:	fc 01       	movw	r30, r24
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	a1 f3       	breq	.-24     	; 0x22dc <fdevopen+0x16>
    22f4:	80 e8       	ldi	r24, 0x80	; 128
    22f6:	83 83       	std	Z+3, r24	; 0x03
    22f8:	01 15       	cp	r16, r1
    22fa:	11 05       	cpc	r17, r1
    22fc:	71 f0       	breq	.+28     	; 0x231a <fdevopen+0x54>
    22fe:	13 87       	std	Z+11, r17	; 0x0b
    2300:	02 87       	std	Z+10, r16	; 0x0a
    2302:	81 e8       	ldi	r24, 0x81	; 129
    2304:	83 83       	std	Z+3, r24	; 0x03
    2306:	80 91 7c 02 	lds	r24, 0x027C
    230a:	90 91 7d 02 	lds	r25, 0x027D
    230e:	89 2b       	or	r24, r25
    2310:	21 f4       	brne	.+8      	; 0x231a <fdevopen+0x54>
    2312:	f0 93 7d 02 	sts	0x027D, r31
    2316:	e0 93 7c 02 	sts	0x027C, r30
    231a:	20 97       	sbiw	r28, 0x00	; 0
    231c:	c9 f0       	breq	.+50     	; 0x2350 <fdevopen+0x8a>
    231e:	d1 87       	std	Z+9, r29	; 0x09
    2320:	c0 87       	std	Z+8, r28	; 0x08
    2322:	83 81       	ldd	r24, Z+3	; 0x03
    2324:	82 60       	ori	r24, 0x02	; 2
    2326:	83 83       	std	Z+3, r24	; 0x03
    2328:	80 91 7e 02 	lds	r24, 0x027E
    232c:	90 91 7f 02 	lds	r25, 0x027F
    2330:	89 2b       	or	r24, r25
    2332:	71 f4       	brne	.+28     	; 0x2350 <fdevopen+0x8a>
    2334:	f0 93 7f 02 	sts	0x027F, r31
    2338:	e0 93 7e 02 	sts	0x027E, r30
    233c:	80 91 80 02 	lds	r24, 0x0280
    2340:	90 91 81 02 	lds	r25, 0x0281
    2344:	89 2b       	or	r24, r25
    2346:	21 f4       	brne	.+8      	; 0x2350 <fdevopen+0x8a>
    2348:	f0 93 81 02 	sts	0x0281, r31
    234c:	e0 93 80 02 	sts	0x0280, r30
    2350:	cf 01       	movw	r24, r30
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
    235a:	08 95       	ret

0000235c <printf>:
    235c:	a0 e0       	ldi	r26, 0x00	; 0
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e4 eb       	ldi	r30, 0xB4	; 180
    2362:	f1 e1       	ldi	r31, 0x11	; 17
    2364:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__prologue_saves__+0x20>
    2368:	fe 01       	movw	r30, r28
    236a:	35 96       	adiw	r30, 0x05	; 5
    236c:	61 91       	ld	r22, Z+
    236e:	71 91       	ld	r23, Z+
    2370:	af 01       	movw	r20, r30
    2372:	80 91 7e 02 	lds	r24, 0x027E
    2376:	90 91 7f 02 	lds	r25, 0x027F
    237a:	0e 94 ef 11 	call	0x23de	; 0x23de <vfprintf>
    237e:	e2 e0       	ldi	r30, 0x02	; 2
    2380:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__epilogue_restores__+0x20>

00002384 <puts>:
    2384:	0f 93       	push	r16
    2386:	1f 93       	push	r17
    2388:	cf 93       	push	r28
    238a:	df 93       	push	r29
    238c:	e0 91 7e 02 	lds	r30, 0x027E
    2390:	f0 91 7f 02 	lds	r31, 0x027F
    2394:	23 81       	ldd	r18, Z+3	; 0x03
    2396:	21 ff       	sbrs	r18, 1
    2398:	1b c0       	rjmp	.+54     	; 0x23d0 <puts+0x4c>
    239a:	ec 01       	movw	r28, r24
    239c:	00 e0       	ldi	r16, 0x00	; 0
    239e:	10 e0       	ldi	r17, 0x00	; 0
    23a0:	89 91       	ld	r24, Y+
    23a2:	60 91 7e 02 	lds	r22, 0x027E
    23a6:	70 91 7f 02 	lds	r23, 0x027F
    23aa:	db 01       	movw	r26, r22
    23ac:	18 96       	adiw	r26, 0x08	; 8
    23ae:	ed 91       	ld	r30, X+
    23b0:	fc 91       	ld	r31, X
    23b2:	19 97       	sbiw	r26, 0x09	; 9
    23b4:	88 23       	and	r24, r24
    23b6:	31 f0       	breq	.+12     	; 0x23c4 <puts+0x40>
    23b8:	09 95       	icall
    23ba:	89 2b       	or	r24, r25
    23bc:	89 f3       	breq	.-30     	; 0x23a0 <puts+0x1c>
    23be:	0f ef       	ldi	r16, 0xFF	; 255
    23c0:	1f ef       	ldi	r17, 0xFF	; 255
    23c2:	ee cf       	rjmp	.-36     	; 0x23a0 <puts+0x1c>
    23c4:	8a e0       	ldi	r24, 0x0A	; 10
    23c6:	09 95       	icall
    23c8:	89 2b       	or	r24, r25
    23ca:	11 f4       	brne	.+4      	; 0x23d0 <puts+0x4c>
    23cc:	c8 01       	movw	r24, r16
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <puts+0x50>
    23d0:	8f ef       	ldi	r24, 0xFF	; 255
    23d2:	9f ef       	ldi	r25, 0xFF	; 255
    23d4:	df 91       	pop	r29
    23d6:	cf 91       	pop	r28
    23d8:	1f 91       	pop	r17
    23da:	0f 91       	pop	r16
    23dc:	08 95       	ret

000023de <vfprintf>:
    23de:	ac e0       	ldi	r26, 0x0C	; 12
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e5 ef       	ldi	r30, 0xF5	; 245
    23e4:	f1 e1       	ldi	r31, 0x11	; 17
    23e6:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__prologue_saves__>
    23ea:	7c 01       	movw	r14, r24
    23ec:	6b 01       	movw	r12, r22
    23ee:	8a 01       	movw	r16, r20
    23f0:	fc 01       	movw	r30, r24
    23f2:	17 82       	std	Z+7, r1	; 0x07
    23f4:	16 82       	std	Z+6, r1	; 0x06
    23f6:	83 81       	ldd	r24, Z+3	; 0x03
    23f8:	81 ff       	sbrs	r24, 1
    23fa:	bd c1       	rjmp	.+890    	; 0x2776 <vfprintf+0x398>
    23fc:	ce 01       	movw	r24, r28
    23fe:	01 96       	adiw	r24, 0x01	; 1
    2400:	4c 01       	movw	r8, r24
    2402:	f7 01       	movw	r30, r14
    2404:	93 81       	ldd	r25, Z+3	; 0x03
    2406:	f6 01       	movw	r30, r12
    2408:	93 fd       	sbrc	r25, 3
    240a:	85 91       	lpm	r24, Z+
    240c:	93 ff       	sbrs	r25, 3
    240e:	81 91       	ld	r24, Z+
    2410:	6f 01       	movw	r12, r30
    2412:	88 23       	and	r24, r24
    2414:	09 f4       	brne	.+2      	; 0x2418 <vfprintf+0x3a>
    2416:	ab c1       	rjmp	.+854    	; 0x276e <vfprintf+0x390>
    2418:	85 32       	cpi	r24, 0x25	; 37
    241a:	39 f4       	brne	.+14     	; 0x242a <vfprintf+0x4c>
    241c:	93 fd       	sbrc	r25, 3
    241e:	85 91       	lpm	r24, Z+
    2420:	93 ff       	sbrs	r25, 3
    2422:	81 91       	ld	r24, Z+
    2424:	6f 01       	movw	r12, r30
    2426:	85 32       	cpi	r24, 0x25	; 37
    2428:	29 f4       	brne	.+10     	; 0x2434 <vfprintf+0x56>
    242a:	b7 01       	movw	r22, r14
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <fputc>
    2432:	e7 cf       	rjmp	.-50     	; 0x2402 <vfprintf+0x24>
    2434:	51 2c       	mov	r5, r1
    2436:	31 2c       	mov	r3, r1
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	20 32       	cpi	r18, 0x20	; 32
    243c:	a0 f4       	brcc	.+40     	; 0x2466 <vfprintf+0x88>
    243e:	8b 32       	cpi	r24, 0x2B	; 43
    2440:	69 f0       	breq	.+26     	; 0x245c <vfprintf+0x7e>
    2442:	30 f4       	brcc	.+12     	; 0x2450 <vfprintf+0x72>
    2444:	80 32       	cpi	r24, 0x20	; 32
    2446:	59 f0       	breq	.+22     	; 0x245e <vfprintf+0x80>
    2448:	83 32       	cpi	r24, 0x23	; 35
    244a:	69 f4       	brne	.+26     	; 0x2466 <vfprintf+0x88>
    244c:	20 61       	ori	r18, 0x10	; 16
    244e:	2c c0       	rjmp	.+88     	; 0x24a8 <vfprintf+0xca>
    2450:	8d 32       	cpi	r24, 0x2D	; 45
    2452:	39 f0       	breq	.+14     	; 0x2462 <vfprintf+0x84>
    2454:	80 33       	cpi	r24, 0x30	; 48
    2456:	39 f4       	brne	.+14     	; 0x2466 <vfprintf+0x88>
    2458:	21 60       	ori	r18, 0x01	; 1
    245a:	26 c0       	rjmp	.+76     	; 0x24a8 <vfprintf+0xca>
    245c:	22 60       	ori	r18, 0x02	; 2
    245e:	24 60       	ori	r18, 0x04	; 4
    2460:	23 c0       	rjmp	.+70     	; 0x24a8 <vfprintf+0xca>
    2462:	28 60       	ori	r18, 0x08	; 8
    2464:	21 c0       	rjmp	.+66     	; 0x24a8 <vfprintf+0xca>
    2466:	27 fd       	sbrc	r18, 7
    2468:	27 c0       	rjmp	.+78     	; 0x24b8 <vfprintf+0xda>
    246a:	30 ed       	ldi	r19, 0xD0	; 208
    246c:	38 0f       	add	r19, r24
    246e:	3a 30       	cpi	r19, 0x0A	; 10
    2470:	78 f4       	brcc	.+30     	; 0x2490 <vfprintf+0xb2>
    2472:	26 ff       	sbrs	r18, 6
    2474:	06 c0       	rjmp	.+12     	; 0x2482 <vfprintf+0xa4>
    2476:	fa e0       	ldi	r31, 0x0A	; 10
    2478:	5f 9e       	mul	r5, r31
    247a:	30 0d       	add	r19, r0
    247c:	11 24       	eor	r1, r1
    247e:	53 2e       	mov	r5, r19
    2480:	13 c0       	rjmp	.+38     	; 0x24a8 <vfprintf+0xca>
    2482:	8a e0       	ldi	r24, 0x0A	; 10
    2484:	38 9e       	mul	r3, r24
    2486:	30 0d       	add	r19, r0
    2488:	11 24       	eor	r1, r1
    248a:	33 2e       	mov	r3, r19
    248c:	20 62       	ori	r18, 0x20	; 32
    248e:	0c c0       	rjmp	.+24     	; 0x24a8 <vfprintf+0xca>
    2490:	8e 32       	cpi	r24, 0x2E	; 46
    2492:	21 f4       	brne	.+8      	; 0x249c <vfprintf+0xbe>
    2494:	26 fd       	sbrc	r18, 6
    2496:	6b c1       	rjmp	.+726    	; 0x276e <vfprintf+0x390>
    2498:	20 64       	ori	r18, 0x40	; 64
    249a:	06 c0       	rjmp	.+12     	; 0x24a8 <vfprintf+0xca>
    249c:	8c 36       	cpi	r24, 0x6C	; 108
    249e:	11 f4       	brne	.+4      	; 0x24a4 <vfprintf+0xc6>
    24a0:	20 68       	ori	r18, 0x80	; 128
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <vfprintf+0xca>
    24a4:	88 36       	cpi	r24, 0x68	; 104
    24a6:	41 f4       	brne	.+16     	; 0x24b8 <vfprintf+0xda>
    24a8:	f6 01       	movw	r30, r12
    24aa:	93 fd       	sbrc	r25, 3
    24ac:	85 91       	lpm	r24, Z+
    24ae:	93 ff       	sbrs	r25, 3
    24b0:	81 91       	ld	r24, Z+
    24b2:	6f 01       	movw	r12, r30
    24b4:	81 11       	cpse	r24, r1
    24b6:	c1 cf       	rjmp	.-126    	; 0x243a <vfprintf+0x5c>
    24b8:	98 2f       	mov	r25, r24
    24ba:	9f 7d       	andi	r25, 0xDF	; 223
    24bc:	95 54       	subi	r25, 0x45	; 69
    24be:	93 30       	cpi	r25, 0x03	; 3
    24c0:	28 f4       	brcc	.+10     	; 0x24cc <vfprintf+0xee>
    24c2:	0c 5f       	subi	r16, 0xFC	; 252
    24c4:	1f 4f       	sbci	r17, 0xFF	; 255
    24c6:	ff e3       	ldi	r31, 0x3F	; 63
    24c8:	f9 83       	std	Y+1, r31	; 0x01
    24ca:	0d c0       	rjmp	.+26     	; 0x24e6 <vfprintf+0x108>
    24cc:	83 36       	cpi	r24, 0x63	; 99
    24ce:	31 f0       	breq	.+12     	; 0x24dc <vfprintf+0xfe>
    24d0:	83 37       	cpi	r24, 0x73	; 115
    24d2:	71 f0       	breq	.+28     	; 0x24f0 <vfprintf+0x112>
    24d4:	83 35       	cpi	r24, 0x53	; 83
    24d6:	09 f0       	breq	.+2      	; 0x24da <vfprintf+0xfc>
    24d8:	5b c0       	rjmp	.+182    	; 0x2590 <vfprintf+0x1b2>
    24da:	22 c0       	rjmp	.+68     	; 0x2520 <vfprintf+0x142>
    24dc:	f8 01       	movw	r30, r16
    24de:	80 81       	ld	r24, Z
    24e0:	89 83       	std	Y+1, r24	; 0x01
    24e2:	0e 5f       	subi	r16, 0xFE	; 254
    24e4:	1f 4f       	sbci	r17, 0xFF	; 255
    24e6:	44 24       	eor	r4, r4
    24e8:	43 94       	inc	r4
    24ea:	51 2c       	mov	r5, r1
    24ec:	54 01       	movw	r10, r8
    24ee:	15 c0       	rjmp	.+42     	; 0x251a <vfprintf+0x13c>
    24f0:	38 01       	movw	r6, r16
    24f2:	f2 e0       	ldi	r31, 0x02	; 2
    24f4:	6f 0e       	add	r6, r31
    24f6:	71 1c       	adc	r7, r1
    24f8:	f8 01       	movw	r30, r16
    24fa:	a0 80       	ld	r10, Z
    24fc:	b1 80       	ldd	r11, Z+1	; 0x01
    24fe:	26 ff       	sbrs	r18, 6
    2500:	03 c0       	rjmp	.+6      	; 0x2508 <vfprintf+0x12a>
    2502:	65 2d       	mov	r22, r5
    2504:	70 e0       	ldi	r23, 0x00	; 0
    2506:	02 c0       	rjmp	.+4      	; 0x250c <vfprintf+0x12e>
    2508:	6f ef       	ldi	r22, 0xFF	; 255
    250a:	7f ef       	ldi	r23, 0xFF	; 255
    250c:	c5 01       	movw	r24, r10
    250e:	2c 87       	std	Y+12, r18	; 0x0c
    2510:	0e 94 ef 13 	call	0x27de	; 0x27de <strnlen>
    2514:	2c 01       	movw	r4, r24
    2516:	83 01       	movw	r16, r6
    2518:	2c 85       	ldd	r18, Y+12	; 0x0c
    251a:	2f 77       	andi	r18, 0x7F	; 127
    251c:	22 2e       	mov	r2, r18
    251e:	17 c0       	rjmp	.+46     	; 0x254e <vfprintf+0x170>
    2520:	38 01       	movw	r6, r16
    2522:	f2 e0       	ldi	r31, 0x02	; 2
    2524:	6f 0e       	add	r6, r31
    2526:	71 1c       	adc	r7, r1
    2528:	f8 01       	movw	r30, r16
    252a:	a0 80       	ld	r10, Z
    252c:	b1 80       	ldd	r11, Z+1	; 0x01
    252e:	26 ff       	sbrs	r18, 6
    2530:	03 c0       	rjmp	.+6      	; 0x2538 <vfprintf+0x15a>
    2532:	65 2d       	mov	r22, r5
    2534:	70 e0       	ldi	r23, 0x00	; 0
    2536:	02 c0       	rjmp	.+4      	; 0x253c <vfprintf+0x15e>
    2538:	6f ef       	ldi	r22, 0xFF	; 255
    253a:	7f ef       	ldi	r23, 0xFF	; 255
    253c:	c5 01       	movw	r24, r10
    253e:	2c 87       	std	Y+12, r18	; 0x0c
    2540:	0e 94 dd 13 	call	0x27ba	; 0x27ba <strnlen_P>
    2544:	2c 01       	movw	r4, r24
    2546:	2c 85       	ldd	r18, Y+12	; 0x0c
    2548:	20 68       	ori	r18, 0x80	; 128
    254a:	22 2e       	mov	r2, r18
    254c:	83 01       	movw	r16, r6
    254e:	23 fc       	sbrc	r2, 3
    2550:	1b c0       	rjmp	.+54     	; 0x2588 <vfprintf+0x1aa>
    2552:	83 2d       	mov	r24, r3
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	48 16       	cp	r4, r24
    2558:	59 06       	cpc	r5, r25
    255a:	b0 f4       	brcc	.+44     	; 0x2588 <vfprintf+0x1aa>
    255c:	b7 01       	movw	r22, r14
    255e:	80 e2       	ldi	r24, 0x20	; 32
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <fputc>
    2566:	3a 94       	dec	r3
    2568:	f4 cf       	rjmp	.-24     	; 0x2552 <vfprintf+0x174>
    256a:	f5 01       	movw	r30, r10
    256c:	27 fc       	sbrc	r2, 7
    256e:	85 91       	lpm	r24, Z+
    2570:	27 fe       	sbrs	r2, 7
    2572:	81 91       	ld	r24, Z+
    2574:	5f 01       	movw	r10, r30
    2576:	b7 01       	movw	r22, r14
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <fputc>
    257e:	31 10       	cpse	r3, r1
    2580:	3a 94       	dec	r3
    2582:	f1 e0       	ldi	r31, 0x01	; 1
    2584:	4f 1a       	sub	r4, r31
    2586:	51 08       	sbc	r5, r1
    2588:	41 14       	cp	r4, r1
    258a:	51 04       	cpc	r5, r1
    258c:	71 f7       	brne	.-36     	; 0x256a <vfprintf+0x18c>
    258e:	e5 c0       	rjmp	.+458    	; 0x275a <vfprintf+0x37c>
    2590:	84 36       	cpi	r24, 0x64	; 100
    2592:	11 f0       	breq	.+4      	; 0x2598 <vfprintf+0x1ba>
    2594:	89 36       	cpi	r24, 0x69	; 105
    2596:	39 f5       	brne	.+78     	; 0x25e6 <vfprintf+0x208>
    2598:	f8 01       	movw	r30, r16
    259a:	27 ff       	sbrs	r18, 7
    259c:	07 c0       	rjmp	.+14     	; 0x25ac <vfprintf+0x1ce>
    259e:	60 81       	ld	r22, Z
    25a0:	71 81       	ldd	r23, Z+1	; 0x01
    25a2:	82 81       	ldd	r24, Z+2	; 0x02
    25a4:	93 81       	ldd	r25, Z+3	; 0x03
    25a6:	0c 5f       	subi	r16, 0xFC	; 252
    25a8:	1f 4f       	sbci	r17, 0xFF	; 255
    25aa:	08 c0       	rjmp	.+16     	; 0x25bc <vfprintf+0x1de>
    25ac:	60 81       	ld	r22, Z
    25ae:	71 81       	ldd	r23, Z+1	; 0x01
    25b0:	88 27       	eor	r24, r24
    25b2:	77 fd       	sbrc	r23, 7
    25b4:	80 95       	com	r24
    25b6:	98 2f       	mov	r25, r24
    25b8:	0e 5f       	subi	r16, 0xFE	; 254
    25ba:	1f 4f       	sbci	r17, 0xFF	; 255
    25bc:	2f 76       	andi	r18, 0x6F	; 111
    25be:	b2 2e       	mov	r11, r18
    25c0:	97 ff       	sbrs	r25, 7
    25c2:	09 c0       	rjmp	.+18     	; 0x25d6 <vfprintf+0x1f8>
    25c4:	90 95       	com	r25
    25c6:	80 95       	com	r24
    25c8:	70 95       	com	r23
    25ca:	61 95       	neg	r22
    25cc:	7f 4f       	sbci	r23, 0xFF	; 255
    25ce:	8f 4f       	sbci	r24, 0xFF	; 255
    25d0:	9f 4f       	sbci	r25, 0xFF	; 255
    25d2:	20 68       	ori	r18, 0x80	; 128
    25d4:	b2 2e       	mov	r11, r18
    25d6:	2a e0       	ldi	r18, 0x0A	; 10
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	a4 01       	movw	r20, r8
    25dc:	0e 94 2c 14 	call	0x2858	; 0x2858 <__ultoa_invert>
    25e0:	a8 2e       	mov	r10, r24
    25e2:	a8 18       	sub	r10, r8
    25e4:	44 c0       	rjmp	.+136    	; 0x266e <vfprintf+0x290>
    25e6:	85 37       	cpi	r24, 0x75	; 117
    25e8:	29 f4       	brne	.+10     	; 0x25f4 <vfprintf+0x216>
    25ea:	2f 7e       	andi	r18, 0xEF	; 239
    25ec:	b2 2e       	mov	r11, r18
    25ee:	2a e0       	ldi	r18, 0x0A	; 10
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	25 c0       	rjmp	.+74     	; 0x263e <vfprintf+0x260>
    25f4:	f2 2f       	mov	r31, r18
    25f6:	f9 7f       	andi	r31, 0xF9	; 249
    25f8:	bf 2e       	mov	r11, r31
    25fa:	8f 36       	cpi	r24, 0x6F	; 111
    25fc:	c1 f0       	breq	.+48     	; 0x262e <vfprintf+0x250>
    25fe:	18 f4       	brcc	.+6      	; 0x2606 <vfprintf+0x228>
    2600:	88 35       	cpi	r24, 0x58	; 88
    2602:	79 f0       	breq	.+30     	; 0x2622 <vfprintf+0x244>
    2604:	b4 c0       	rjmp	.+360    	; 0x276e <vfprintf+0x390>
    2606:	80 37       	cpi	r24, 0x70	; 112
    2608:	19 f0       	breq	.+6      	; 0x2610 <vfprintf+0x232>
    260a:	88 37       	cpi	r24, 0x78	; 120
    260c:	21 f0       	breq	.+8      	; 0x2616 <vfprintf+0x238>
    260e:	af c0       	rjmp	.+350    	; 0x276e <vfprintf+0x390>
    2610:	2f 2f       	mov	r18, r31
    2612:	20 61       	ori	r18, 0x10	; 16
    2614:	b2 2e       	mov	r11, r18
    2616:	b4 fe       	sbrs	r11, 4
    2618:	0d c0       	rjmp	.+26     	; 0x2634 <vfprintf+0x256>
    261a:	8b 2d       	mov	r24, r11
    261c:	84 60       	ori	r24, 0x04	; 4
    261e:	b8 2e       	mov	r11, r24
    2620:	09 c0       	rjmp	.+18     	; 0x2634 <vfprintf+0x256>
    2622:	24 ff       	sbrs	r18, 4
    2624:	0a c0       	rjmp	.+20     	; 0x263a <vfprintf+0x25c>
    2626:	9f 2f       	mov	r25, r31
    2628:	96 60       	ori	r25, 0x06	; 6
    262a:	b9 2e       	mov	r11, r25
    262c:	06 c0       	rjmp	.+12     	; 0x263a <vfprintf+0x25c>
    262e:	28 e0       	ldi	r18, 0x08	; 8
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	05 c0       	rjmp	.+10     	; 0x263e <vfprintf+0x260>
    2634:	20 e1       	ldi	r18, 0x10	; 16
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	02 c0       	rjmp	.+4      	; 0x263e <vfprintf+0x260>
    263a:	20 e1       	ldi	r18, 0x10	; 16
    263c:	32 e0       	ldi	r19, 0x02	; 2
    263e:	f8 01       	movw	r30, r16
    2640:	b7 fe       	sbrs	r11, 7
    2642:	07 c0       	rjmp	.+14     	; 0x2652 <vfprintf+0x274>
    2644:	60 81       	ld	r22, Z
    2646:	71 81       	ldd	r23, Z+1	; 0x01
    2648:	82 81       	ldd	r24, Z+2	; 0x02
    264a:	93 81       	ldd	r25, Z+3	; 0x03
    264c:	0c 5f       	subi	r16, 0xFC	; 252
    264e:	1f 4f       	sbci	r17, 0xFF	; 255
    2650:	06 c0       	rjmp	.+12     	; 0x265e <vfprintf+0x280>
    2652:	60 81       	ld	r22, Z
    2654:	71 81       	ldd	r23, Z+1	; 0x01
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	0e 5f       	subi	r16, 0xFE	; 254
    265c:	1f 4f       	sbci	r17, 0xFF	; 255
    265e:	a4 01       	movw	r20, r8
    2660:	0e 94 2c 14 	call	0x2858	; 0x2858 <__ultoa_invert>
    2664:	a8 2e       	mov	r10, r24
    2666:	a8 18       	sub	r10, r8
    2668:	fb 2d       	mov	r31, r11
    266a:	ff 77       	andi	r31, 0x7F	; 127
    266c:	bf 2e       	mov	r11, r31
    266e:	b6 fe       	sbrs	r11, 6
    2670:	0b c0       	rjmp	.+22     	; 0x2688 <vfprintf+0x2aa>
    2672:	2b 2d       	mov	r18, r11
    2674:	2e 7f       	andi	r18, 0xFE	; 254
    2676:	a5 14       	cp	r10, r5
    2678:	50 f4       	brcc	.+20     	; 0x268e <vfprintf+0x2b0>
    267a:	b4 fe       	sbrs	r11, 4
    267c:	0a c0       	rjmp	.+20     	; 0x2692 <vfprintf+0x2b4>
    267e:	b2 fc       	sbrc	r11, 2
    2680:	08 c0       	rjmp	.+16     	; 0x2692 <vfprintf+0x2b4>
    2682:	2b 2d       	mov	r18, r11
    2684:	2e 7e       	andi	r18, 0xEE	; 238
    2686:	05 c0       	rjmp	.+10     	; 0x2692 <vfprintf+0x2b4>
    2688:	7a 2c       	mov	r7, r10
    268a:	2b 2d       	mov	r18, r11
    268c:	03 c0       	rjmp	.+6      	; 0x2694 <vfprintf+0x2b6>
    268e:	7a 2c       	mov	r7, r10
    2690:	01 c0       	rjmp	.+2      	; 0x2694 <vfprintf+0x2b6>
    2692:	75 2c       	mov	r7, r5
    2694:	24 ff       	sbrs	r18, 4
    2696:	0d c0       	rjmp	.+26     	; 0x26b2 <vfprintf+0x2d4>
    2698:	fe 01       	movw	r30, r28
    269a:	ea 0d       	add	r30, r10
    269c:	f1 1d       	adc	r31, r1
    269e:	80 81       	ld	r24, Z
    26a0:	80 33       	cpi	r24, 0x30	; 48
    26a2:	11 f4       	brne	.+4      	; 0x26a8 <vfprintf+0x2ca>
    26a4:	29 7e       	andi	r18, 0xE9	; 233
    26a6:	09 c0       	rjmp	.+18     	; 0x26ba <vfprintf+0x2dc>
    26a8:	22 ff       	sbrs	r18, 2
    26aa:	06 c0       	rjmp	.+12     	; 0x26b8 <vfprintf+0x2da>
    26ac:	73 94       	inc	r7
    26ae:	73 94       	inc	r7
    26b0:	04 c0       	rjmp	.+8      	; 0x26ba <vfprintf+0x2dc>
    26b2:	82 2f       	mov	r24, r18
    26b4:	86 78       	andi	r24, 0x86	; 134
    26b6:	09 f0       	breq	.+2      	; 0x26ba <vfprintf+0x2dc>
    26b8:	73 94       	inc	r7
    26ba:	23 fd       	sbrc	r18, 3
    26bc:	13 c0       	rjmp	.+38     	; 0x26e4 <vfprintf+0x306>
    26be:	20 ff       	sbrs	r18, 0
    26c0:	06 c0       	rjmp	.+12     	; 0x26ce <vfprintf+0x2f0>
    26c2:	5a 2c       	mov	r5, r10
    26c4:	73 14       	cp	r7, r3
    26c6:	18 f4       	brcc	.+6      	; 0x26ce <vfprintf+0x2f0>
    26c8:	53 0c       	add	r5, r3
    26ca:	57 18       	sub	r5, r7
    26cc:	73 2c       	mov	r7, r3
    26ce:	73 14       	cp	r7, r3
    26d0:	68 f4       	brcc	.+26     	; 0x26ec <vfprintf+0x30e>
    26d2:	b7 01       	movw	r22, r14
    26d4:	80 e2       	ldi	r24, 0x20	; 32
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	2c 87       	std	Y+12, r18	; 0x0c
    26da:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <fputc>
    26de:	73 94       	inc	r7
    26e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    26e2:	f5 cf       	rjmp	.-22     	; 0x26ce <vfprintf+0x2f0>
    26e4:	73 14       	cp	r7, r3
    26e6:	10 f4       	brcc	.+4      	; 0x26ec <vfprintf+0x30e>
    26e8:	37 18       	sub	r3, r7
    26ea:	01 c0       	rjmp	.+2      	; 0x26ee <vfprintf+0x310>
    26ec:	31 2c       	mov	r3, r1
    26ee:	24 ff       	sbrs	r18, 4
    26f0:	12 c0       	rjmp	.+36     	; 0x2716 <vfprintf+0x338>
    26f2:	b7 01       	movw	r22, r14
    26f4:	80 e3       	ldi	r24, 0x30	; 48
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	2c 87       	std	Y+12, r18	; 0x0c
    26fa:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <fputc>
    26fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    2700:	22 ff       	sbrs	r18, 2
    2702:	17 c0       	rjmp	.+46     	; 0x2732 <vfprintf+0x354>
    2704:	21 ff       	sbrs	r18, 1
    2706:	03 c0       	rjmp	.+6      	; 0x270e <vfprintf+0x330>
    2708:	88 e5       	ldi	r24, 0x58	; 88
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	02 c0       	rjmp	.+4      	; 0x2712 <vfprintf+0x334>
    270e:	88 e7       	ldi	r24, 0x78	; 120
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	b7 01       	movw	r22, r14
    2714:	0c c0       	rjmp	.+24     	; 0x272e <vfprintf+0x350>
    2716:	82 2f       	mov	r24, r18
    2718:	86 78       	andi	r24, 0x86	; 134
    271a:	59 f0       	breq	.+22     	; 0x2732 <vfprintf+0x354>
    271c:	21 fd       	sbrc	r18, 1
    271e:	02 c0       	rjmp	.+4      	; 0x2724 <vfprintf+0x346>
    2720:	80 e2       	ldi	r24, 0x20	; 32
    2722:	01 c0       	rjmp	.+2      	; 0x2726 <vfprintf+0x348>
    2724:	8b e2       	ldi	r24, 0x2B	; 43
    2726:	27 fd       	sbrc	r18, 7
    2728:	8d e2       	ldi	r24, 0x2D	; 45
    272a:	b7 01       	movw	r22, r14
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <fputc>
    2732:	a5 14       	cp	r10, r5
    2734:	38 f4       	brcc	.+14     	; 0x2744 <vfprintf+0x366>
    2736:	b7 01       	movw	r22, r14
    2738:	80 e3       	ldi	r24, 0x30	; 48
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <fputc>
    2740:	5a 94       	dec	r5
    2742:	f7 cf       	rjmp	.-18     	; 0x2732 <vfprintf+0x354>
    2744:	aa 94       	dec	r10
    2746:	f4 01       	movw	r30, r8
    2748:	ea 0d       	add	r30, r10
    274a:	f1 1d       	adc	r31, r1
    274c:	80 81       	ld	r24, Z
    274e:	b7 01       	movw	r22, r14
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <fputc>
    2756:	a1 10       	cpse	r10, r1
    2758:	f5 cf       	rjmp	.-22     	; 0x2744 <vfprintf+0x366>
    275a:	33 20       	and	r3, r3
    275c:	09 f4       	brne	.+2      	; 0x2760 <vfprintf+0x382>
    275e:	51 ce       	rjmp	.-862    	; 0x2402 <vfprintf+0x24>
    2760:	b7 01       	movw	r22, r14
    2762:	80 e2       	ldi	r24, 0x20	; 32
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <fputc>
    276a:	3a 94       	dec	r3
    276c:	f6 cf       	rjmp	.-20     	; 0x275a <vfprintf+0x37c>
    276e:	f7 01       	movw	r30, r14
    2770:	86 81       	ldd	r24, Z+6	; 0x06
    2772:	97 81       	ldd	r25, Z+7	; 0x07
    2774:	02 c0       	rjmp	.+4      	; 0x277a <vfprintf+0x39c>
    2776:	8f ef       	ldi	r24, 0xFF	; 255
    2778:	9f ef       	ldi	r25, 0xFF	; 255
    277a:	2c 96       	adiw	r28, 0x0c	; 12
    277c:	e2 e1       	ldi	r30, 0x12	; 18
    277e:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__epilogue_restores__>

00002782 <calloc>:
    2782:	0f 93       	push	r16
    2784:	1f 93       	push	r17
    2786:	cf 93       	push	r28
    2788:	df 93       	push	r29
    278a:	86 9f       	mul	r24, r22
    278c:	80 01       	movw	r16, r0
    278e:	87 9f       	mul	r24, r23
    2790:	10 0d       	add	r17, r0
    2792:	96 9f       	mul	r25, r22
    2794:	10 0d       	add	r17, r0
    2796:	11 24       	eor	r1, r1
    2798:	c8 01       	movw	r24, r16
    279a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <malloc>
    279e:	ec 01       	movw	r28, r24
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	29 f0       	breq	.+10     	; 0x27ae <calloc+0x2c>
    27a4:	a8 01       	movw	r20, r16
    27a6:	60 e0       	ldi	r22, 0x00	; 0
    27a8:	70 e0       	ldi	r23, 0x00	; 0
    27aa:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <memset>
    27ae:	ce 01       	movw	r24, r28
    27b0:	df 91       	pop	r29
    27b2:	cf 91       	pop	r28
    27b4:	1f 91       	pop	r17
    27b6:	0f 91       	pop	r16
    27b8:	08 95       	ret

000027ba <strnlen_P>:
    27ba:	fc 01       	movw	r30, r24
    27bc:	05 90       	lpm	r0, Z+
    27be:	61 50       	subi	r22, 0x01	; 1
    27c0:	70 40       	sbci	r23, 0x00	; 0
    27c2:	01 10       	cpse	r0, r1
    27c4:	d8 f7       	brcc	.-10     	; 0x27bc <strnlen_P+0x2>
    27c6:	80 95       	com	r24
    27c8:	90 95       	com	r25
    27ca:	8e 0f       	add	r24, r30
    27cc:	9f 1f       	adc	r25, r31
    27ce:	08 95       	ret

000027d0 <memset>:
    27d0:	dc 01       	movw	r26, r24
    27d2:	01 c0       	rjmp	.+2      	; 0x27d6 <memset+0x6>
    27d4:	6d 93       	st	X+, r22
    27d6:	41 50       	subi	r20, 0x01	; 1
    27d8:	50 40       	sbci	r21, 0x00	; 0
    27da:	e0 f7       	brcc	.-8      	; 0x27d4 <memset+0x4>
    27dc:	08 95       	ret

000027de <strnlen>:
    27de:	fc 01       	movw	r30, r24
    27e0:	61 50       	subi	r22, 0x01	; 1
    27e2:	70 40       	sbci	r23, 0x00	; 0
    27e4:	01 90       	ld	r0, Z+
    27e6:	01 10       	cpse	r0, r1
    27e8:	d8 f7       	brcc	.-10     	; 0x27e0 <strnlen+0x2>
    27ea:	80 95       	com	r24
    27ec:	90 95       	com	r25
    27ee:	8e 0f       	add	r24, r30
    27f0:	9f 1f       	adc	r25, r31
    27f2:	08 95       	ret

000027f4 <fputc>:
    27f4:	0f 93       	push	r16
    27f6:	1f 93       	push	r17
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	18 2f       	mov	r17, r24
    27fe:	09 2f       	mov	r16, r25
    2800:	eb 01       	movw	r28, r22
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	81 fd       	sbrc	r24, 1
    2806:	03 c0       	rjmp	.+6      	; 0x280e <fputc+0x1a>
    2808:	8f ef       	ldi	r24, 0xFF	; 255
    280a:	9f ef       	ldi	r25, 0xFF	; 255
    280c:	20 c0       	rjmp	.+64     	; 0x284e <fputc+0x5a>
    280e:	82 ff       	sbrs	r24, 2
    2810:	10 c0       	rjmp	.+32     	; 0x2832 <fputc+0x3e>
    2812:	4e 81       	ldd	r20, Y+6	; 0x06
    2814:	5f 81       	ldd	r21, Y+7	; 0x07
    2816:	2c 81       	ldd	r18, Y+4	; 0x04
    2818:	3d 81       	ldd	r19, Y+5	; 0x05
    281a:	42 17       	cp	r20, r18
    281c:	53 07       	cpc	r21, r19
    281e:	7c f4       	brge	.+30     	; 0x283e <fputc+0x4a>
    2820:	e8 81       	ld	r30, Y
    2822:	f9 81       	ldd	r31, Y+1	; 0x01
    2824:	9f 01       	movw	r18, r30
    2826:	2f 5f       	subi	r18, 0xFF	; 255
    2828:	3f 4f       	sbci	r19, 0xFF	; 255
    282a:	39 83       	std	Y+1, r19	; 0x01
    282c:	28 83       	st	Y, r18
    282e:	10 83       	st	Z, r17
    2830:	06 c0       	rjmp	.+12     	; 0x283e <fputc+0x4a>
    2832:	e8 85       	ldd	r30, Y+8	; 0x08
    2834:	f9 85       	ldd	r31, Y+9	; 0x09
    2836:	81 2f       	mov	r24, r17
    2838:	09 95       	icall
    283a:	89 2b       	or	r24, r25
    283c:	29 f7       	brne	.-54     	; 0x2808 <fputc+0x14>
    283e:	2e 81       	ldd	r18, Y+6	; 0x06
    2840:	3f 81       	ldd	r19, Y+7	; 0x07
    2842:	2f 5f       	subi	r18, 0xFF	; 255
    2844:	3f 4f       	sbci	r19, 0xFF	; 255
    2846:	3f 83       	std	Y+7, r19	; 0x07
    2848:	2e 83       	std	Y+6, r18	; 0x06
    284a:	81 2f       	mov	r24, r17
    284c:	90 2f       	mov	r25, r16
    284e:	df 91       	pop	r29
    2850:	cf 91       	pop	r28
    2852:	1f 91       	pop	r17
    2854:	0f 91       	pop	r16
    2856:	08 95       	ret

00002858 <__ultoa_invert>:
    2858:	fa 01       	movw	r30, r20
    285a:	aa 27       	eor	r26, r26
    285c:	28 30       	cpi	r18, 0x08	; 8
    285e:	51 f1       	breq	.+84     	; 0x28b4 <__ultoa_invert+0x5c>
    2860:	20 31       	cpi	r18, 0x10	; 16
    2862:	81 f1       	breq	.+96     	; 0x28c4 <__ultoa_invert+0x6c>
    2864:	e8 94       	clt
    2866:	6f 93       	push	r22
    2868:	6e 7f       	andi	r22, 0xFE	; 254
    286a:	6e 5f       	subi	r22, 0xFE	; 254
    286c:	7f 4f       	sbci	r23, 0xFF	; 255
    286e:	8f 4f       	sbci	r24, 0xFF	; 255
    2870:	9f 4f       	sbci	r25, 0xFF	; 255
    2872:	af 4f       	sbci	r26, 0xFF	; 255
    2874:	b1 e0       	ldi	r27, 0x01	; 1
    2876:	3e d0       	rcall	.+124    	; 0x28f4 <__ultoa_invert+0x9c>
    2878:	b4 e0       	ldi	r27, 0x04	; 4
    287a:	3c d0       	rcall	.+120    	; 0x28f4 <__ultoa_invert+0x9c>
    287c:	67 0f       	add	r22, r23
    287e:	78 1f       	adc	r23, r24
    2880:	89 1f       	adc	r24, r25
    2882:	9a 1f       	adc	r25, r26
    2884:	a1 1d       	adc	r26, r1
    2886:	68 0f       	add	r22, r24
    2888:	79 1f       	adc	r23, r25
    288a:	8a 1f       	adc	r24, r26
    288c:	91 1d       	adc	r25, r1
    288e:	a1 1d       	adc	r26, r1
    2890:	6a 0f       	add	r22, r26
    2892:	71 1d       	adc	r23, r1
    2894:	81 1d       	adc	r24, r1
    2896:	91 1d       	adc	r25, r1
    2898:	a1 1d       	adc	r26, r1
    289a:	20 d0       	rcall	.+64     	; 0x28dc <__ultoa_invert+0x84>
    289c:	09 f4       	brne	.+2      	; 0x28a0 <__ultoa_invert+0x48>
    289e:	68 94       	set
    28a0:	3f 91       	pop	r19
    28a2:	2a e0       	ldi	r18, 0x0A	; 10
    28a4:	26 9f       	mul	r18, r22
    28a6:	11 24       	eor	r1, r1
    28a8:	30 19       	sub	r19, r0
    28aa:	30 5d       	subi	r19, 0xD0	; 208
    28ac:	31 93       	st	Z+, r19
    28ae:	de f6       	brtc	.-74     	; 0x2866 <__ultoa_invert+0xe>
    28b0:	cf 01       	movw	r24, r30
    28b2:	08 95       	ret
    28b4:	46 2f       	mov	r20, r22
    28b6:	47 70       	andi	r20, 0x07	; 7
    28b8:	40 5d       	subi	r20, 0xD0	; 208
    28ba:	41 93       	st	Z+, r20
    28bc:	b3 e0       	ldi	r27, 0x03	; 3
    28be:	0f d0       	rcall	.+30     	; 0x28de <__ultoa_invert+0x86>
    28c0:	c9 f7       	brne	.-14     	; 0x28b4 <__ultoa_invert+0x5c>
    28c2:	f6 cf       	rjmp	.-20     	; 0x28b0 <__ultoa_invert+0x58>
    28c4:	46 2f       	mov	r20, r22
    28c6:	4f 70       	andi	r20, 0x0F	; 15
    28c8:	40 5d       	subi	r20, 0xD0	; 208
    28ca:	4a 33       	cpi	r20, 0x3A	; 58
    28cc:	18 f0       	brcs	.+6      	; 0x28d4 <__ultoa_invert+0x7c>
    28ce:	49 5d       	subi	r20, 0xD9	; 217
    28d0:	31 fd       	sbrc	r19, 1
    28d2:	40 52       	subi	r20, 0x20	; 32
    28d4:	41 93       	st	Z+, r20
    28d6:	02 d0       	rcall	.+4      	; 0x28dc <__ultoa_invert+0x84>
    28d8:	a9 f7       	brne	.-22     	; 0x28c4 <__ultoa_invert+0x6c>
    28da:	ea cf       	rjmp	.-44     	; 0x28b0 <__ultoa_invert+0x58>
    28dc:	b4 e0       	ldi	r27, 0x04	; 4
    28de:	a6 95       	lsr	r26
    28e0:	97 95       	ror	r25
    28e2:	87 95       	ror	r24
    28e4:	77 95       	ror	r23
    28e6:	67 95       	ror	r22
    28e8:	ba 95       	dec	r27
    28ea:	c9 f7       	brne	.-14     	; 0x28de <__ultoa_invert+0x86>
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	61 05       	cpc	r22, r1
    28f0:	71 05       	cpc	r23, r1
    28f2:	08 95       	ret
    28f4:	9b 01       	movw	r18, r22
    28f6:	ac 01       	movw	r20, r24
    28f8:	0a 2e       	mov	r0, r26
    28fa:	06 94       	lsr	r0
    28fc:	57 95       	ror	r21
    28fe:	47 95       	ror	r20
    2900:	37 95       	ror	r19
    2902:	27 95       	ror	r18
    2904:	ba 95       	dec	r27
    2906:	c9 f7       	brne	.-14     	; 0x28fa <__ultoa_invert+0xa2>
    2908:	62 0f       	add	r22, r18
    290a:	73 1f       	adc	r23, r19
    290c:	84 1f       	adc	r24, r20
    290e:	95 1f       	adc	r25, r21
    2910:	a0 1d       	adc	r26, r0
    2912:	08 95       	ret

00002914 <__prologue_saves__>:
    2914:	2f 92       	push	r2
    2916:	3f 92       	push	r3
    2918:	4f 92       	push	r4
    291a:	5f 92       	push	r5
    291c:	6f 92       	push	r6
    291e:	7f 92       	push	r7
    2920:	8f 92       	push	r8
    2922:	9f 92       	push	r9
    2924:	af 92       	push	r10
    2926:	bf 92       	push	r11
    2928:	cf 92       	push	r12
    292a:	df 92       	push	r13
    292c:	ef 92       	push	r14
    292e:	ff 92       	push	r15
    2930:	0f 93       	push	r16
    2932:	1f 93       	push	r17
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	ca 1b       	sub	r28, r26
    293e:	db 0b       	sbc	r29, r27
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	09 94       	ijmp

0000294c <__epilogue_restores__>:
    294c:	2a 88       	ldd	r2, Y+18	; 0x12
    294e:	39 88       	ldd	r3, Y+17	; 0x11
    2950:	48 88       	ldd	r4, Y+16	; 0x10
    2952:	5f 84       	ldd	r5, Y+15	; 0x0f
    2954:	6e 84       	ldd	r6, Y+14	; 0x0e
    2956:	7d 84       	ldd	r7, Y+13	; 0x0d
    2958:	8c 84       	ldd	r8, Y+12	; 0x0c
    295a:	9b 84       	ldd	r9, Y+11	; 0x0b
    295c:	aa 84       	ldd	r10, Y+10	; 0x0a
    295e:	b9 84       	ldd	r11, Y+9	; 0x09
    2960:	c8 84       	ldd	r12, Y+8	; 0x08
    2962:	df 80       	ldd	r13, Y+7	; 0x07
    2964:	ee 80       	ldd	r14, Y+6	; 0x06
    2966:	fd 80       	ldd	r15, Y+5	; 0x05
    2968:	0c 81       	ldd	r16, Y+4	; 0x04
    296a:	1b 81       	ldd	r17, Y+3	; 0x03
    296c:	aa 81       	ldd	r26, Y+2	; 0x02
    296e:	b9 81       	ldd	r27, Y+1	; 0x01
    2970:	ce 0f       	add	r28, r30
    2972:	d1 1d       	adc	r29, r1
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	f8 94       	cli
    2978:	de bf       	out	0x3e, r29	; 62
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	cd bf       	out	0x3d, r28	; 61
    297e:	ed 01       	movw	r28, r26
    2980:	08 95       	ret

00002982 <_exit>:
    2982:	f8 94       	cli

00002984 <__stop_program>:
    2984:	ff cf       	rjmp	.-2      	; 0x2984 <__stop_program>

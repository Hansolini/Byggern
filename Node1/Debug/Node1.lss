
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800100  00002af6  00002b8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002af6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800252  00800252  00002cdc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002cdc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002c8  00000000  00000000  00002d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002fac  00000000  00000000  00003000  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001048  00000000  00000000  00005fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ed5  00000000  00000000  00006ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000874  00000000  00000000  00007ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000088e  00000000  00000000  00008740  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002169  00000000  00000000  00008fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000260  00000000  00000000  0000b137  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__ctors_end>
       4:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       8:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      10:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      14:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      18:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      1c:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__vector_7>
      20:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      24:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      28:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      2c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      30:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      34:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__vector_13>
      38:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      3c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      40:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      44:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      48:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      4c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      50:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      54:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      58:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      5c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      60:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      64:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      68:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      6c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	00 5c       	subi	r16, 0xC0	; 192
      a4:	00 00       	nop
      a6:	0c 00       	.word	0x000c	; ????
      a8:	0c 00       	.word	0x000c	; ????
      aa:	7c 28       	or	r7, r12
      ac:	7c 28       	or	r7, r12
      ae:	58 dc       	rcall	.-1872   	; 0xfffff960 <__eeprom_end+0xff7ef960>
      b0:	68 00       	.word	0x0068	; ????
      b2:	24 10       	cpse	r2, r4
      b4:	48 00       	.word	0x0048	; ????
      b6:	28 54       	subi	r18, 0x48	; 72
      b8:	28 40       	sbci	r18, 0x08	; 8
      ba:	00 0c       	add	r0, r0
      bc:	00 00       	nop
      be:	00 78       	andi	r16, 0x80	; 128
      c0:	84 00       	.word	0x0084	; ????
      c2:	84 78       	andi	r24, 0x84	; 132
      c4:	00 00       	nop
      c6:	54 38       	cpi	r21, 0x84	; 132
      c8:	54 00       	.word	0x0054	; ????
      ca:	10 7c       	andi	r17, 0xC0	; 192
      cc:	10 00       	.word	0x0010	; ????
      ce:	80 40       	sbci	r24, 0x00	; 0
      d0:	00 00       	nop
      d2:	10 10       	cpse	r1, r0
      d4:	10 00       	.word	0x0010	; ????
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	00 00       	nop
      da:	60 10       	cpse	r6, r0
      dc:	0c 00       	.word	0x000c	; ????
      de:	38 54       	subi	r19, 0x48	; 72
      e0:	38 00       	.word	0x0038	; ????
      e2:	48 7c       	andi	r20, 0xC8	; 200
      e4:	40 00       	.word	0x0040	; ????
      e6:	48 64       	ori	r20, 0x48	; 72
      e8:	58 00       	.word	0x0058	; ????
      ea:	44 54       	subi	r20, 0x44	; 68
      ec:	2c 00       	.word	0x002c	; ????
      ee:	1c 10       	cpse	r1, r12
      f0:	7c 00       	.word	0x007c	; ????
      f2:	5c 54       	subi	r21, 0x4C	; 76
      f4:	24 00       	.word	0x0024	; ????
      f6:	38 54       	subi	r19, 0x48	; 72
      f8:	24 00       	.word	0x0024	; ????
      fa:	64 14       	cp	r6, r4
      fc:	0c 00       	.word	0x000c	; ????
      fe:	68 54       	subi	r22, 0x48	; 72
     100:	2c 00       	.word	0x002c	; ????
     102:	48 54       	subi	r20, 0x48	; 72
     104:	38 00       	.word	0x0038	; ????
     106:	00 48       	sbci	r16, 0x80	; 128
     108:	00 00       	nop
     10a:	80 48       	sbci	r24, 0x80	; 128
     10c:	00 00       	nop
     10e:	10 28       	or	r1, r0
     110:	44 00       	.word	0x0044	; ????
     112:	28 28       	or	r2, r8
     114:	28 00       	.word	0x0028	; ????
     116:	44 28       	or	r4, r4
     118:	10 00       	.word	0x0010	; ????
     11a:	04 54       	subi	r16, 0x44	; 68
     11c:	08 00       	.word	0x0008	; ????
     11e:	38 44       	sbci	r19, 0x48	; 72
     120:	5c 00       	.word	0x005c	; ????
     122:	78 14       	cp	r7, r8
     124:	78 00       	.word	0x0078	; ????
     126:	7c 54       	subi	r23, 0x4C	; 76
     128:	28 00       	.word	0x0028	; ????
     12a:	38 44       	sbci	r19, 0x48	; 72
     12c:	28 00       	.word	0x0028	; ????
     12e:	7c 44       	sbci	r23, 0x4C	; 76
     130:	38 00       	.word	0x0038	; ????
     132:	7c 54       	subi	r23, 0x4C	; 76
     134:	44 00       	.word	0x0044	; ????
     136:	7c 14       	cp	r7, r12
     138:	04 00       	.word	0x0004	; ????
     13a:	38 44       	sbci	r19, 0x48	; 72
     13c:	74 00       	.word	0x0074	; ????
     13e:	7c 10       	cpse	r7, r12
     140:	7c 00       	.word	0x007c	; ????
     142:	44 7c       	andi	r20, 0xC4	; 196
     144:	44 00       	.word	0x0044	; ????
     146:	20 40       	sbci	r18, 0x00	; 0
     148:	3c 00       	.word	0x003c	; ????
     14a:	7c 10       	cpse	r7, r12
     14c:	6c 00       	.word	0x006c	; ????
     14e:	7c 40       	sbci	r23, 0x0C	; 12
     150:	40 00       	.word	0x0040	; ????
     152:	7c 18       	sub	r7, r12
     154:	7c 00       	.word	0x007c	; ????
     156:	78 10       	cpse	r7, r8
     158:	3c 00       	.word	0x003c	; ????
     15a:	38 44       	sbci	r19, 0x48	; 72
     15c:	38 00       	.word	0x0038	; ????
     15e:	7c 14       	cp	r7, r12
     160:	08 00       	.word	0x0008	; ????
     162:	38 44       	sbci	r19, 0x48	; 72
     164:	b8 00       	.word	0x00b8	; ????
     166:	7c 14       	cp	r7, r12
     168:	68 00       	.word	0x0068	; ????
     16a:	48 54       	subi	r20, 0x48	; 72
     16c:	24 00       	.word	0x0024	; ????
     16e:	04 7c       	andi	r16, 0xC4	; 196
     170:	04 00       	.word	0x0004	; ????
     172:	7c 40       	sbci	r23, 0x0C	; 12
     174:	7c 00       	.word	0x007c	; ????
     176:	3c 60       	ori	r19, 0x0C	; 12
     178:	3c 00       	.word	0x003c	; ????
     17a:	7c 30       	cpi	r23, 0x0C	; 12
     17c:	7c 00       	.word	0x007c	; ????
     17e:	6c 10       	cpse	r6, r12
     180:	6c 00       	.word	0x006c	; ????
     182:	0c 70       	andi	r16, 0x0C	; 12
     184:	0c 00       	.word	0x000c	; ????
     186:	64 54       	subi	r22, 0x44	; 68
     188:	4c 00       	.word	0x004c	; ????
     18a:	00 7c       	andi	r16, 0xC0	; 192
     18c:	44 00       	.word	0x0044	; ????
     18e:	0c 10       	cpse	r0, r12
     190:	60 00       	.word	0x0060	; ????
     192:	44 7c       	andi	r20, 0xC4	; 196
     194:	00 00       	nop
     196:	08 04       	cpc	r0, r8
     198:	08 00       	.word	0x0008	; ????
     19a:	80 80       	ld	r8, Z
     19c:	80 00       	.word	0x0080	; ????
     19e:	00 04       	cpc	r0, r0
     1a0:	08 00       	.word	0x0008	; ????
     1a2:	30 48       	sbci	r19, 0x80	; 128
     1a4:	78 00       	.word	0x0078	; ????
     1a6:	7c 48       	sbci	r23, 0x8C	; 140
     1a8:	30 00       	.word	0x0030	; ????
     1aa:	30 48       	sbci	r19, 0x80	; 128
     1ac:	48 00       	.word	0x0048	; ????
     1ae:	30 48       	sbci	r19, 0x80	; 128
     1b0:	7c 00       	.word	0x007c	; ????
     1b2:	30 68       	ori	r19, 0x80	; 128
     1b4:	50 00       	.word	0x0050	; ????
     1b6:	10 78       	andi	r17, 0x80	; 128
     1b8:	14 00       	.word	0x0014	; ????
     1ba:	90 a8       	ldd	r9, Z+48	; 0x30
     1bc:	78 00       	.word	0x0078	; ????
     1be:	7c 08       	sbc	r7, r12
     1c0:	70 00       	.word	0x0070	; ????
     1c2:	50 74       	andi	r21, 0x40	; 64
     1c4:	40 00       	.word	0x0040	; ????
     1c6:	80 80       	ld	r8, Z
     1c8:	74 00       	.word	0x0074	; ????
     1ca:	7c 10       	cpse	r7, r12
     1cc:	68 00       	.word	0x0068	; ????
     1ce:	44 7c       	andi	r20, 0xC4	; 196
     1d0:	40 00       	.word	0x0040	; ????
     1d2:	78 10       	cpse	r7, r8
     1d4:	78 00       	.word	0x0078	; ????
     1d6:	78 08       	sbc	r7, r8
     1d8:	70 00       	.word	0x0070	; ????
     1da:	30 48       	sbci	r19, 0x80	; 128
     1dc:	30 00       	.word	0x0030	; ????
     1de:	f8 28       	or	r15, r8
     1e0:	10 00       	.word	0x0010	; ????
     1e2:	30 48       	sbci	r19, 0x80	; 128
     1e4:	f8 00       	.word	0x00f8	; ????
     1e6:	78 10       	cpse	r7, r8
     1e8:	08 00       	.word	0x0008	; ????
     1ea:	50 58       	subi	r21, 0x80	; 128
     1ec:	28 00       	.word	0x0028	; ????
     1ee:	08 3c       	cpi	r16, 0xC8	; 200
     1f0:	48 00       	.word	0x0048	; ????
     1f2:	38 40       	sbci	r19, 0x08	; 8
     1f4:	78 00       	.word	0x0078	; ????
     1f6:	38 40       	sbci	r19, 0x08	; 8
     1f8:	38 00       	.word	0x0038	; ????
     1fa:	78 20       	and	r7, r8
     1fc:	78 00       	.word	0x0078	; ????
     1fe:	48 30       	cpi	r20, 0x08	; 8
     200:	48 00       	.word	0x0048	; ????
     202:	98 a0       	ldd	r9, Y+32	; 0x20
     204:	78 00       	.word	0x0078	; ????
     206:	48 68       	ori	r20, 0x88	; 136
     208:	58 00       	.word	0x0058	; ????
     20a:	10 78       	andi	r17, 0x80	; 128
     20c:	84 00       	.word	0x0084	; ????
     20e:	00 7c       	andi	r16, 0xC0	; 192
     210:	00 00       	nop
     212:	84 78       	andi	r24, 0x84	; 132
     214:	10 00       	.word	0x0010	; ????
     216:	08 04       	cpc	r0, r8
     218:	08 04       	cpc	r0, r8

0000021a <font5>:
     21a:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     22a:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     23a:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     24a:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     25a:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     26a:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     27a:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     28a:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     29a:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     2aa:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     2ba:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     2ca:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2da:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2ea:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2fa:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     30a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     31a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     32a:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     33a:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     34a:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     35a:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     36a:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     37a:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     38a:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     39a:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     3aa:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     3ba:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     3ca:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3da:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3ea:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003f5 <font8>:
	...
     3fd:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     40d:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     41d:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     42d:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     43d:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     44d:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     45d:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     46d:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     47d:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     48d:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     49d:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     4ad:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     4bd:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     4cd:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4dd:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4ed:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4fd:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     50d:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     51d:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     52d:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     53d:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     54d:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     55d:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     56d:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     57d:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     58d:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     59d:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     5ad:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     5bd:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     5cd:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5dd:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5ed:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5fd:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     60d:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     61d:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     62d:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     63d:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     64d:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     65d:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     66d:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     67d:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     68d:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     69d:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     6ad:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     6bd:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     6cd:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6dd:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006ee <__ctors_end>:
     6ee:	11 24       	eor	r1, r1
     6f0:	1f be       	out	0x3f, r1	; 63
     6f2:	cf ef       	ldi	r28, 0xFF	; 255
     6f4:	d4 e0       	ldi	r29, 0x04	; 4
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	cd bf       	out	0x3d, r28	; 61

000006fa <__do_copy_data>:
     6fa:	12 e0       	ldi	r17, 0x02	; 2
     6fc:	a0 e0       	ldi	r26, 0x00	; 0
     6fe:	b1 e0       	ldi	r27, 0x01	; 1
     700:	e6 ef       	ldi	r30, 0xF6	; 246
     702:	fa e2       	ldi	r31, 0x2A	; 42
     704:	02 c0       	rjmp	.+4      	; 0x70a <__do_copy_data+0x10>
     706:	05 90       	lpm	r0, Z+
     708:	0d 92       	st	X+, r0
     70a:	a2 35       	cpi	r26, 0x52	; 82
     70c:	b1 07       	cpc	r27, r17
     70e:	d9 f7       	brne	.-10     	; 0x706 <__do_copy_data+0xc>

00000710 <__do_clear_bss>:
     710:	22 e0       	ldi	r18, 0x02	; 2
     712:	a2 e5       	ldi	r26, 0x52	; 82
     714:	b2 e0       	ldi	r27, 0x02	; 2
     716:	01 c0       	rjmp	.+2      	; 0x71a <.do_clear_bss_start>

00000718 <.do_clear_bss_loop>:
     718:	1d 92       	st	X+, r1

0000071a <.do_clear_bss_start>:
     71a:	a5 37       	cpi	r26, 0x75	; 117
     71c:	b2 07       	cpc	r27, r18
     71e:	e1 f7       	brne	.-8      	; 0x718 <.do_clear_bss_loop>
     720:	0e 94 25 07 	call	0xe4a	; 0xe4a <main>
     724:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <_exit>

00000728 <__bad_interrupt>:
     728:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000072c <adc_init>:
	adcConversionRunning = 0;
}*/

#ifdef NODE_1
	void adc_init(){
	clear_bit(DDRE, PE0); //Set DDR to input for interrupt flag
     72c:	30 98       	cbi	0x06, 0	; 6
     72e:	08 95       	ret

00000730 <adc_read>:
}
	uint8_t adc_read(char channel){
		volatile char *ext_adc = (char *) 0x1400; 
		if (channel == 'x'){
     730:	88 37       	cpi	r24, 0x78	; 120
     732:	21 f4       	brne	.+8      	; 0x73c <adc_read+0xc>
			*ext_adc = 0b0100;
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	80 93 00 14 	sts	0x1400, r24
     73a:	11 c0       	rjmp	.+34     	; 0x75e <adc_read+0x2e>
		}
	
		else if (channel == 'y'){
     73c:	89 37       	cpi	r24, 0x79	; 121
     73e:	21 f4       	brne	.+8      	; 0x748 <adc_read+0x18>
			*ext_adc = 0b0101;
     740:	85 e0       	ldi	r24, 0x05	; 5
     742:	80 93 00 14 	sts	0x1400, r24
     746:	0b c0       	rjmp	.+22     	; 0x75e <adc_read+0x2e>
		}
	
		else if (channel == 'l'){
     748:	8c 36       	cpi	r24, 0x6C	; 108
     74a:	21 f4       	brne	.+8      	; 0x754 <adc_read+0x24>
			*ext_adc = 0b0110;
     74c:	86 e0       	ldi	r24, 0x06	; 6
     74e:	80 93 00 14 	sts	0x1400, r24
     752:	05 c0       	rjmp	.+10     	; 0x75e <adc_read+0x2e>
		}
	
		else if (channel == 'r'){
     754:	82 37       	cpi	r24, 0x72	; 114
     756:	19 f4       	brne	.+6      	; 0x75e <adc_read+0x2e>
			*ext_adc = 0b0111;
     758:	87 e0       	ldi	r24, 0x07	; 7
     75a:	80 93 00 14 	sts	0x1400, r24
		}
		while(test_bit(PINE, PE0)); //Wait for interrupt flag to signify completed conversion
     75e:	28 99       	sbic	0x05, 0	; 5
     760:	fe cf       	rjmp	.-4      	; 0x75e <adc_read+0x2e>
		return (uint8_t) *ext_adc;
     762:	80 91 00 14 	lds	r24, 0x1400
}
     766:	08 95       	ret

00000768 <can_init>:
#include <string.h>
#include <util/delay.h>
#include "can.h"


void can_init(int mode){
     768:	cf 93       	push	r28
     76a:	c8 2f       	mov	r28, r24
	mcp_init();
     76c:	0e 94 10 06 	call	0xc20	; 0xc20 <mcp_init>
	
	mcp_bit_modify(0x2B,0b00011100, 0b00000000); //Disables interrupts from empty buffers
     770:	40 e0       	ldi	r20, 0x00	; 0
     772:	6c e1       	ldi	r22, 0x1C	; 28
     774:	8b e2       	ldi	r24, 0x2B	; 43
     776:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <mcp_bit_modify>
	mcp_bit_modify(MCP_RXB0CTRL, 0b01100000, 0b01100000); //Disable filters
     77a:	40 e6       	ldi	r20, 0x60	; 96
     77c:	60 e6       	ldi	r22, 0x60	; 96
     77e:	80 e6       	ldi	r24, 0x60	; 96
     780:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <mcp_bit_modify>
	mcp_bit_modify(MCP_CANCTRL, 0xFF, mode); //Sets operation mode 
     784:	4c 2f       	mov	r20, r28
     786:	6f ef       	ldi	r22, 0xFF	; 255
     788:	8f e0       	ldi	r24, 0x0F	; 15
     78a:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <mcp_bit_modify>
	
	//TODO: Filter initialization
	//NOTES: CANINTE.TXInE
	//priority bits? TXP
}
     78e:	cf 91       	pop	r28
     790:	08 95       	ret

00000792 <can_transmit>:

void can_transmit(Msg msg){
     792:	ef 92       	push	r14
     794:	ff 92       	push	r15
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	00 d0       	rcall	.+0      	; 0x7a0 <can_transmit+0xe>
     7a0:	00 d0       	rcall	.+0      	; 0x7a2 <can_transmit+0x10>
     7a2:	00 d0       	rcall	.+0      	; 0x7a4 <can_transmit+0x12>
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	49 83       	std	Y+1, r20	; 0x01
     7aa:	5a 83       	std	Y+2, r21	; 0x02
     7ac:	6b 83       	std	Y+3, r22	; 0x03
     7ae:	7c 83       	std	Y+4, r23	; 0x04
     7b0:	8d 83       	std	Y+5, r24	; 0x05
     7b2:	9e 83       	std	Y+6, r25	; 0x06
     7b4:	09 81       	ldd	r16, Y+1	; 0x01
     7b6:	1a 81       	ldd	r17, Y+2	; 0x02
     7b8:	eb 80       	ldd	r14, Y+3	; 0x03
     7ba:	fc 80       	ldd	r15, Y+4	; 0x04
	int buffer = 2; //n = 1, 2 or 3
	
	mcp_write(0x31 + 0x10*buffer, msg.id >> 3);  //TXBnSIDH
     7bc:	b8 01       	movw	r22, r16
     7be:	75 95       	asr	r23
     7c0:	67 95       	ror	r22
     7c2:	75 95       	asr	r23
     7c4:	67 95       	ror	r22
     7c6:	75 95       	asr	r23
     7c8:	67 95       	ror	r22
     7ca:	81 e5       	ldi	r24, 0x51	; 81
     7cc:	0e 94 d0 05 	call	0xba0	; 0xba0 <mcp_write>
	mcp_write(0x32 + 0x10*buffer, msg.id << 5);  //TXBnSIDL
     7d0:	60 2f       	mov	r22, r16
     7d2:	62 95       	swap	r22
     7d4:	66 0f       	add	r22, r22
     7d6:	60 7e       	andi	r22, 0xE0	; 224
     7d8:	82 e5       	ldi	r24, 0x52	; 82
     7da:	0e 94 d0 05 	call	0xba0	; 0xba0 <mcp_write>
	mcp_write(0x35 + 0x10*buffer, msg.length); //TXBnDLC	//RTR will be set to 0 (Data Frame message)
     7de:	6e 2d       	mov	r22, r14
     7e0:	85 e5       	ldi	r24, 0x55	; 85
     7e2:	0e 94 d0 05 	call	0xba0	; 0xba0 <mcp_write>
	
	for(int i = 0; i < msg.length; i++){
     7e6:	1e 14       	cp	r1, r14
     7e8:	1f 04       	cpc	r1, r15
     7ea:	84 f4       	brge	.+32     	; 0x80c <can_transmit+0x7a>
     7ec:	00 e0       	ldi	r16, 0x00	; 0
     7ee:	10 e0       	ldi	r17, 0x00	; 0
		mcp_write(0x36 + 0x10*buffer + i, msg.data[i]); //TXBnDm
     7f0:	ed 81       	ldd	r30, Y+5	; 0x05
     7f2:	fe 81       	ldd	r31, Y+6	; 0x06
     7f4:	e0 0f       	add	r30, r16
     7f6:	f1 1f       	adc	r31, r17
     7f8:	60 81       	ld	r22, Z
     7fa:	86 e5       	ldi	r24, 0x56	; 86
     7fc:	80 0f       	add	r24, r16
     7fe:	0e 94 d0 05 	call	0xba0	; 0xba0 <mcp_write>
	
	mcp_write(0x31 + 0x10*buffer, msg.id >> 3);  //TXBnSIDH
	mcp_write(0x32 + 0x10*buffer, msg.id << 5);  //TXBnSIDL
	mcp_write(0x35 + 0x10*buffer, msg.length); //TXBnDLC	//RTR will be set to 0 (Data Frame message)
	
	for(int i = 0; i < msg.length; i++){
     802:	0f 5f       	subi	r16, 0xFF	; 255
     804:	1f 4f       	sbci	r17, 0xFF	; 255
     806:	0e 15       	cp	r16, r14
     808:	1f 05       	cpc	r17, r15
     80a:	91 f7       	brne	.-28     	; 0x7f0 <can_transmit+0x5e>
		mcp_write(0x36 + 0x10*buffer + i, msg.data[i]); //TXBnDm
	}
	
	mcp_request_to_send(buffer == 2, buffer == 1, buffer == 0);	//Request to send - sending will start as soon as the bus is clear
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <mcp_request_to_send>
	
	//TODO: (maybe) print error message?
	//TXBnCTRL.TXERR and the CANINTF.MERRF bits will be set and an interrupt will be generated on the INT pin if the CANINTE.MERRE bit is set
}
     81c:	26 96       	adiw	r28, 0x06	; 6
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	de bf       	out	0x3e, r29	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	cd bf       	out	0x3d, r28	; 61
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	ff 90       	pop	r15
     832:	ef 90       	pop	r14
     834:	08 95       	ret

00000836 <can_receive>:

Msg can_receive(){
     836:	8f 92       	push	r8
     838:	9f 92       	push	r9
     83a:	af 92       	push	r10
     83c:	bf 92       	push	r11
     83e:	cf 92       	push	r12
     840:	df 92       	push	r13
     842:	ef 92       	push	r14
     844:	ff 92       	push	r15
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	00 d0       	rcall	.+0      	; 0x850 <can_receive+0x1a>
     850:	00 d0       	rcall	.+0      	; 0x852 <can_receive+0x1c>
     852:	00 d0       	rcall	.+0      	; 0x854 <can_receive+0x1e>
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
	int buffer = 0; //n = 1 or 2
	
	Msg msg;
	msg.id = ((int)mcp_read(0x61 + 0x10*buffer) << 3) | (mcp_read(0x62 + 0x10*buffer) >> 5); //Put together RXBnSIDH and RXBnSIDL
     858:	81 e6       	ldi	r24, 0x61	; 97
     85a:	0e 94 c1 05 	call	0xb82	; 0xb82 <mcp_read>
     85e:	a8 2e       	mov	r10, r24
     860:	82 e6       	ldi	r24, 0x62	; 98
     862:	0e 94 c1 05 	call	0xb82	; 0xb82 <mcp_read>
     866:	82 95       	swap	r24
     868:	86 95       	lsr	r24
     86a:	87 70       	andi	r24, 0x07	; 7
     86c:	b1 2c       	mov	r11, r1
     86e:	aa 0c       	add	r10, r10
     870:	bb 1c       	adc	r11, r11
     872:	aa 0c       	add	r10, r10
     874:	bb 1c       	adc	r11, r11
     876:	aa 0c       	add	r10, r10
     878:	bb 1c       	adc	r11, r11
     87a:	a8 2a       	or	r10, r24
	msg.length = mcp_read(0x65 + 0x10*buffer) & 0b00001111; //RXBnDLC
     87c:	85 e6       	ldi	r24, 0x65	; 101
     87e:	0e 94 c1 05 	call	0xb82	; 0xb82 <mcp_read>
     882:	8f 70       	andi	r24, 0x0F	; 15
     884:	c8 2e       	mov	r12, r24
     886:	d1 2c       	mov	r13, r1
	msg.data = malloc(msg.length);
     888:	c6 01       	movw	r24, r12
     88a:	0e 94 2c 10 	call	0x2058	; 0x2058 <malloc>
     88e:	98 2e       	mov	r9, r24
     890:	89 2e       	mov	r8, r25
	
	for(int i = 0; i < msg.length; i++){
     892:	1c 14       	cp	r1, r12
     894:	1d 04       	cpc	r1, r13
     896:	84 f4       	brge	.+32     	; 0x8b8 <can_receive+0x82>
     898:	e8 2e       	mov	r14, r24
     89a:	f9 2e       	mov	r15, r25
     89c:	00 e0       	ldi	r16, 0x00	; 0
     89e:	10 e0       	ldi	r17, 0x00	; 0
		msg.data[i] = mcp_read(0x66 + 0x10*buffer + i);
     8a0:	86 e6       	ldi	r24, 0x66	; 102
     8a2:	80 0f       	add	r24, r16
     8a4:	0e 94 c1 05 	call	0xb82	; 0xb82 <mcp_read>
     8a8:	f7 01       	movw	r30, r14
     8aa:	81 93       	st	Z+, r24
     8ac:	7f 01       	movw	r14, r30
	Msg msg;
	msg.id = ((int)mcp_read(0x61 + 0x10*buffer) << 3) | (mcp_read(0x62 + 0x10*buffer) >> 5); //Put together RXBnSIDH and RXBnSIDL
	msg.length = mcp_read(0x65 + 0x10*buffer) & 0b00001111; //RXBnDLC
	msg.data = malloc(msg.length);
	
	for(int i = 0; i < msg.length; i++){
     8ae:	0f 5f       	subi	r16, 0xFF	; 255
     8b0:	1f 4f       	sbci	r17, 0xFF	; 255
     8b2:	0c 15       	cp	r16, r12
     8b4:	1d 05       	cpc	r17, r13
     8b6:	a4 f3       	brlt	.-24     	; 0x8a0 <can_receive+0x6a>
		msg.data[i] = mcp_read(0x66 + 0x10*buffer + i);
	}
	
	mcp_bit_modify(0x2C, buffer + 1, 0); //CANINTF - Sets RX0IF to 0
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	61 e0       	ldi	r22, 0x01	; 1
     8bc:	8c e2       	ldi	r24, 0x2C	; 44
     8be:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <mcp_bit_modify>
	return msg;
     8c2:	ba 82       	std	Y+2, r11	; 0x02
     8c4:	a9 82       	std	Y+1, r10	; 0x01
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	9d 82       	std	Y+5, r9	; 0x05
     8cc:	8e 82       	std	Y+6, r8	; 0x06
     8ce:	2a 2d       	mov	r18, r10
     8d0:	3a 81       	ldd	r19, Y+2	; 0x02
     8d2:	4c 2d       	mov	r20, r12
     8d4:	5c 81       	ldd	r21, Y+4	; 0x04
     8d6:	69 2d       	mov	r22, r9
     8d8:	78 2d       	mov	r23, r8
}
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	26 96       	adiw	r28, 0x06	; 6
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	f8 94       	cli
     8e4:	de bf       	out	0x3e, r29	; 62
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	cd bf       	out	0x3d, r28	; 61
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	ff 90       	pop	r15
     8f4:	ef 90       	pop	r14
     8f6:	df 90       	pop	r13
     8f8:	cf 90       	pop	r12
     8fa:	bf 90       	pop	r11
     8fc:	af 90       	pop	r10
     8fe:	9f 90       	pop	r9
     900:	8f 90       	pop	r8
     902:	08 95       	ret

00000904 <joy_init>:
int ymin = 0;
int ymean = 127;
int ymax = 255;

void joy_init(){
	clear_bit(DDRB,PB2);	//Set joystick button pin to input
     904:	ba 98       	cbi	0x17, 2	; 23
	set_bit(PORTB,PB2);		//Set the internal pull-up resistor needed for the button
     906:	c2 9a       	sbi	0x18, 2	; 24
     908:	08 95       	ret

0000090a <joy_get_position>:
	oled_clear_screen();
	oled_print_string("Calibrated!",0,0,8,0);
	oled_refresh();
}

Position joy_get_position(){
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	00 d0       	rcall	.+0      	; 0x910 <joy_get_position+0x6>
     910:	00 d0       	rcall	.+0      	; 0x912 <joy_get_position+0x8>
     912:	00 d0       	rcall	.+0      	; 0x914 <joy_get_position+0xa>
     914:	cd b7       	in	r28, 0x3d	; 61
     916:	de b7       	in	r29, 0x3e	; 62
		x = adc_read('x');
     918:	88 e7       	ldi	r24, 0x78	; 120
     91a:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	90 93 68 02 	sts	0x0268, r25
     924:	80 93 67 02 	sts	0x0267, r24
		y = adc_read('y');
     928:	89 e7       	ldi	r24, 0x79	; 121
     92a:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     92e:	28 2f       	mov	r18, r24
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	30 93 6a 02 	sts	0x026A, r19
     936:	20 93 69 02 	sts	0x0269, r18
		z = !test_bit(PINB, PB2);
     93a:	e6 b3       	in	r30, 0x16	; 22
     93c:	e6 95       	lsr	r30
     93e:	e6 95       	lsr	r30
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	e8 27       	eor	r30, r24
     944:	e1 70       	andi	r30, 0x01	; 1
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	e0 93 56 02 	sts	0x0256, r30
     94c:	f0 93 57 02 	sts	0x0257, r31
		
		if (x > xmean){
     950:	80 91 67 02 	lds	r24, 0x0267
     954:	90 91 68 02 	lds	r25, 0x0268
     958:	40 91 0c 01 	lds	r20, 0x010C
     95c:	50 91 0d 01 	lds	r21, 0x010D
     960:	48 17       	cp	r20, r24
     962:	59 07       	cpc	r21, r25
     964:	b4 f4       	brge	.+44     	; 0x992 <joy_get_position+0x88>
			x = ((x - xmean) * 100) / (xmax - xmean);
     966:	bc 01       	movw	r22, r24
     968:	64 1b       	sub	r22, r20
     96a:	75 0b       	sbc	r23, r21
     96c:	a4 e6       	ldi	r26, 0x64	; 100
     96e:	a6 9f       	mul	r26, r22
     970:	c0 01       	movw	r24, r0
     972:	a7 9f       	mul	r26, r23
     974:	90 0d       	add	r25, r0
     976:	11 24       	eor	r1, r1
     978:	60 91 0a 01 	lds	r22, 0x010A
     97c:	70 91 0b 01 	lds	r23, 0x010B
     980:	64 1b       	sub	r22, r20
     982:	75 0b       	sbc	r23, r21
     984:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__divmodhi4>
     988:	70 93 68 02 	sts	0x0268, r23
     98c:	60 93 67 02 	sts	0x0267, r22
     990:	17 c0       	rjmp	.+46     	; 0x9c0 <joy_get_position+0xb6>
		}
		else{
			x = ((x - xmean) * 100) / (xmean - xmin);
     992:	bc 01       	movw	r22, r24
     994:	64 1b       	sub	r22, r20
     996:	75 0b       	sbc	r23, r21
     998:	a4 e6       	ldi	r26, 0x64	; 100
     99a:	a6 9f       	mul	r26, r22
     99c:	c0 01       	movw	r24, r0
     99e:	a7 9f       	mul	r26, r23
     9a0:	90 0d       	add	r25, r0
     9a2:	11 24       	eor	r1, r1
     9a4:	60 91 54 02 	lds	r22, 0x0254
     9a8:	70 91 55 02 	lds	r23, 0x0255
     9ac:	da 01       	movw	r26, r20
     9ae:	a6 1b       	sub	r26, r22
     9b0:	b7 0b       	sbc	r27, r23
     9b2:	bd 01       	movw	r22, r26
     9b4:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__divmodhi4>
     9b8:	70 93 68 02 	sts	0x0268, r23
     9bc:	60 93 67 02 	sts	0x0267, r22
		}
		if (y > ymean){
     9c0:	40 91 08 01 	lds	r20, 0x0108
     9c4:	50 91 09 01 	lds	r21, 0x0109
     9c8:	42 17       	cp	r20, r18
     9ca:	53 07       	cpc	r21, r19
     9cc:	ac f4       	brge	.+42     	; 0x9f8 <joy_get_position+0xee>
			y = ((y - ymean) * 100) / (ymax - ymean);
     9ce:	24 1b       	sub	r18, r20
     9d0:	35 0b       	sbc	r19, r21
     9d2:	64 e6       	ldi	r22, 0x64	; 100
     9d4:	62 9f       	mul	r22, r18
     9d6:	c0 01       	movw	r24, r0
     9d8:	63 9f       	mul	r22, r19
     9da:	90 0d       	add	r25, r0
     9dc:	11 24       	eor	r1, r1
     9de:	60 91 06 01 	lds	r22, 0x0106
     9e2:	70 91 07 01 	lds	r23, 0x0107
     9e6:	64 1b       	sub	r22, r20
     9e8:	75 0b       	sbc	r23, r21
     9ea:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__divmodhi4>
     9ee:	70 93 6a 02 	sts	0x026A, r23
     9f2:	60 93 69 02 	sts	0x0269, r22
     9f6:	15 c0       	rjmp	.+42     	; 0xa22 <joy_get_position+0x118>
		}
		else{
			y = ((y - ymean)  * 100) / (ymean - ymin);
     9f8:	24 1b       	sub	r18, r20
     9fa:	35 0b       	sbc	r19, r21
     9fc:	64 e6       	ldi	r22, 0x64	; 100
     9fe:	62 9f       	mul	r22, r18
     a00:	c0 01       	movw	r24, r0
     a02:	63 9f       	mul	r22, r19
     a04:	90 0d       	add	r25, r0
     a06:	11 24       	eor	r1, r1
     a08:	20 91 52 02 	lds	r18, 0x0252
     a0c:	30 91 53 02 	lds	r19, 0x0253
     a10:	ba 01       	movw	r22, r20
     a12:	62 1b       	sub	r22, r18
     a14:	73 0b       	sbc	r23, r19
     a16:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__divmodhi4>
     a1a:	70 93 6a 02 	sts	0x026A, r23
     a1e:	60 93 69 02 	sts	0x0269, r22
		}
		
		Position pos;
		pos.x = x;
     a22:	20 91 67 02 	lds	r18, 0x0267
     a26:	30 91 68 02 	lds	r19, 0x0268
		pos.y = y;
     a2a:	40 91 69 02 	lds	r20, 0x0269
     a2e:	50 91 6a 02 	lds	r21, 0x026A
		pos.z = z;
		
		if (x < 4 && x > -4)
     a32:	c9 01       	movw	r24, r18
     a34:	03 96       	adiw	r24, 0x03	; 3
     a36:	07 97       	sbiw	r24, 0x07	; 7
     a38:	10 f4       	brcc	.+4      	; 0xa3e <joy_get_position+0x134>
		{
			pos.x = 0;
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
		}
		if (y < 4 && y > -4)
     a3e:	ca 01       	movw	r24, r20
     a40:	03 96       	adiw	r24, 0x03	; 3
     a42:	07 97       	sbiw	r24, 0x07	; 7
     a44:	10 f4       	brcc	.+4      	; 0xa4a <joy_get_position+0x140>
		{
			pos.y = 0;
     a46:	40 e0       	ldi	r20, 0x00	; 0
     a48:	50 e0       	ldi	r21, 0x00	; 0
		}
		return pos;
     a4a:	3a 83       	std	Y+2, r19	; 0x02
     a4c:	29 83       	std	Y+1, r18	; 0x01
     a4e:	5c 83       	std	Y+4, r21	; 0x04
     a50:	4b 83       	std	Y+3, r20	; 0x03
     a52:	ed 83       	std	Y+5, r30	; 0x05
     a54:	fe 83       	std	Y+6, r31	; 0x06
     a56:	3a 81       	ldd	r19, Y+2	; 0x02
     a58:	5c 81       	ldd	r21, Y+4	; 0x04
     a5a:	6e 2f       	mov	r22, r30
     a5c:	7f 2f       	mov	r23, r31
}
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	26 96       	adiw	r28, 0x06	; 6
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	f8 94       	cli
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	cd bf       	out	0x3d, r28	; 61
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <joy_get_position_polar>:

Position_polar joy_get_position_polar(){
     a74:	8f 92       	push	r8
     a76:	9f 92       	push	r9
     a78:	af 92       	push	r10
     a7a:	bf 92       	push	r11
     a7c:	cf 92       	push	r12
     a7e:	df 92       	push	r13
     a80:	ef 92       	push	r14
     a82:	ff 92       	push	r15
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	00 d0       	rcall	.+0      	; 0xa8a <joy_get_position_polar+0x16>
     a8a:	00 d0       	rcall	.+0      	; 0xa8c <joy_get_position_polar+0x18>
     a8c:	00 d0       	rcall	.+0      	; 0xa8e <joy_get_position_polar+0x1a>
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
	Position pos_cart = joy_get_position();
     a92:	0e 94 85 04 	call	0x90a	; 0x90a <joy_get_position>
     a96:	29 83       	std	Y+1, r18	; 0x01
     a98:	3a 83       	std	Y+2, r19	; 0x02
     a9a:	4b 83       	std	Y+3, r20	; 0x03
     a9c:	5c 83       	std	Y+4, r21	; 0x04
     a9e:	89 80       	ldd	r8, Y+1	; 0x01
     aa0:	9a 80       	ldd	r9, Y+2	; 0x02
     aa2:	ab 80       	ldd	r10, Y+3	; 0x03
     aa4:	bc 80       	ldd	r11, Y+4	; 0x04
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     aa6:	b4 01       	movw	r22, r8
     aa8:	88 27       	eor	r24, r24
     aaa:	77 fd       	sbrc	r23, 7
     aac:	80 95       	com	r24
     aae:	98 2f       	mov	r25, r24
     ab0:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__floatsisf>
     ab4:	6b 01       	movw	r12, r22
     ab6:	7c 01       	movw	r14, r24
     ab8:	b5 01       	movw	r22, r10
     aba:	88 27       	eor	r24, r24
     abc:	77 fd       	sbrc	r23, 7
     abe:	80 95       	com	r24
     ac0:	98 2f       	mov	r25, r24
     ac2:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__floatsisf>
     ac6:	a7 01       	movw	r20, r14
     ac8:	96 01       	movw	r18, r12
     aca:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <atan2>
     ace:	6b 01       	movw	r12, r22
     ad0:	7c 01       	movw	r14, r24
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     ad2:	88 9c       	mul	r8, r8
     ad4:	b0 01       	movw	r22, r0
     ad6:	89 9c       	mul	r8, r9
     ad8:	70 0d       	add	r23, r0
     ada:	70 0d       	add	r23, r0
     adc:	11 24       	eor	r1, r1
     ade:	aa 9c       	mul	r10, r10
     ae0:	c0 01       	movw	r24, r0
     ae2:	ab 9c       	mul	r10, r11
     ae4:	90 0d       	add	r25, r0
     ae6:	90 0d       	add	r25, r0
     ae8:	11 24       	eor	r1, r1
     aea:	68 0f       	add	r22, r24
     aec:	79 1f       	adc	r23, r25
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__floatunsisf>
     af6:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <sqrt>
     afa:	4b 01       	movw	r8, r22
     afc:	5c 01       	movw	r10, r24
}

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     afe:	20 ee       	ldi	r18, 0xE0	; 224
     b00:	3e e2       	ldi	r19, 0x2E	; 46
     b02:	45 e6       	ldi	r20, 0x65	; 101
     b04:	52 e4       	ldi	r21, 0x42	; 66
     b06:	c7 01       	movw	r24, r14
     b08:	b6 01       	movw	r22, r12
     b0a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__mulsf3>
     b0e:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__fixsfsi>
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
	return pos_pol;
     b12:	6b 01       	movw	r12, r22

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     b14:	c5 01       	movw	r24, r10
     b16:	b4 01       	movw	r22, r8
     b18:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__fixsfsi>
	return pos_pol;
     b1c:	7b 01       	movw	r14, r22
}
     b1e:	c7 01       	movw	r24, r14
     b20:	b6 01       	movw	r22, r12
     b22:	26 96       	adiw	r28, 0x06	; 6
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	cd bf       	out	0x3d, r28	; 61
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	ff 90       	pop	r15
     b34:	ef 90       	pop	r14
     b36:	df 90       	pop	r13
     b38:	cf 90       	pop	r12
     b3a:	bf 90       	pop	r11
     b3c:	af 90       	pop	r10
     b3e:	9f 90       	pop	r9
     b40:	8f 90       	pop	r8
     b42:	08 95       	ret

00000b44 <joy_get_direction>:

Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
     b44:	0e 94 3a 05 	call	0xa74	; 0xa74 <joy_get_position_polar>
     b48:	9b 01       	movw	r18, r22
	
	if(pos_pol.amplitude > 80){
     b4a:	81 35       	cpi	r24, 0x51	; 81
     b4c:	91 05       	cpc	r25, r1
     b4e:	7c f0       	brlt	.+30     	; 0xb6e <joy_get_direction+0x2a>
		if (pos_pol.angle > 135){
     b50:	68 38       	cpi	r22, 0x88	; 136
     b52:	71 05       	cpc	r23, r1
     b54:	74 f4       	brge	.+28     	; 0xb72 <joy_get_direction+0x2e>
			return LEFT;
		}
		else if(pos_pol.angle > 45){
     b56:	6e 32       	cpi	r22, 0x2E	; 46
     b58:	71 05       	cpc	r23, r1
     b5a:	6c f4       	brge	.+26     	; 0xb76 <joy_get_direction+0x32>
			return UP;
		}
		else if(pos_pol.angle > -45){
     b5c:	24 3d       	cpi	r18, 0xD4	; 212
     b5e:	8f ef       	ldi	r24, 0xFF	; 255
     b60:	38 07       	cpc	r19, r24
     b62:	5c f4       	brge	.+22     	; 0xb7a <joy_get_direction+0x36>
			return RIGHT;
		}
		else if(pos_pol.angle > -135){
     b64:	2a 37       	cpi	r18, 0x7A	; 122
     b66:	3f 4f       	sbci	r19, 0xFF	; 255
     b68:	54 f0       	brlt	.+20     	; 0xb7e <joy_get_direction+0x3a>
			return DOWN;
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	08 95       	ret
		}
		else{
			return LEFT;
		}
	}
	return NEUTRAL;
     b6e:	8f ef       	ldi	r24, 0xFF	; 255
     b70:	08 95       	ret
Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
	
	if(pos_pol.amplitude > 80){
		if (pos_pol.angle > 135){
			return LEFT;
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	08 95       	ret
		}
		else if(pos_pol.angle > 45){
			return UP;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	08 95       	ret
		}
		else if(pos_pol.angle > -45){
			return RIGHT;
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	08 95       	ret
		}
		else if(pos_pol.angle > -135){
			return DOWN;
		}
		else{
			return LEFT;
     b7e:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	return NEUTRAL;
} 
     b80:	08 95       	ret

00000b82 <mcp_read>:
#include "settings.h"
#include "spi.h"
#include "mcp.h"

char mcp_read(char address){
     b82:	cf 93       	push	r28
     b84:	c8 2f       	mov	r28, r24
	clear_bit(PORTB, MCP_PIN);
     b86:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_READ);
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <spi_master_transmit>
	spi_master_transmit(address);
     b8e:	8c 2f       	mov	r24, r28
     b90:	0e 94 1d 06 	call	0xc3a	; 0xc3a <spi_master_transmit>
	char data = spi_master_transmit(0x0); //0x0 = dummy value
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	0e 94 1d 06 	call	0xc3a	; 0xc3a <spi_master_transmit>
	set_bit(PORTB,MCP_PIN);
     b9a:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <mcp_write>:

void mcp_write(char address, char data){
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	d8 2f       	mov	r29, r24
     ba6:	c6 2f       	mov	r28, r22
	clear_bit(PORTB, MCP_PIN);
     ba8:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_WRITE);
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	0e 94 1d 06 	call	0xc3a	; 0xc3a <spi_master_transmit>
	spi_master_transmit(address);
     bb0:	8d 2f       	mov	r24, r29
     bb2:	0e 94 1d 06 	call	0xc3a	; 0xc3a <spi_master_transmit>
	spi_master_transmit(data);
     bb6:	8c 2f       	mov	r24, r28
     bb8:	0e 94 1d 06 	call	0xc3a	; 0xc3a <spi_master_transmit>
	set_bit(PORTB,MCP_PIN);
     bbc:	c4 9a       	sbi	0x18, 4	; 24
}
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	08 95       	ret

00000bc4 <mcp_request_to_send>:

void mcp_request_to_send(int TXB2, int TXB1, int TXB0){
	int command = 0b10000000 | TXB0 | (TXB1 << 1) | (TXB2 << 2);
	clear_bit(PORTB, MCP_PIN);
     bc4:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(data);
	set_bit(PORTB,MCP_PIN);
}

void mcp_request_to_send(int TXB2, int TXB1, int TXB0){
	int command = 0b10000000 | TXB0 | (TXB1 << 1) | (TXB2 << 2);
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	80 68       	ori	r24, 0x80	; 128
     bd0:	48 2b       	or	r20, r24
     bd2:	59 2b       	or	r21, r25
     bd4:	cb 01       	movw	r24, r22
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
	clear_bit(PORTB, MCP_PIN);
	spi_master_transmit(command);
     bda:	84 2b       	or	r24, r20
     bdc:	0e 94 1d 06 	call	0xc3a	; 0xc3a <spi_master_transmit>
	set_bit(PORTB, MCP_PIN);
     be0:	c4 9a       	sbi	0x18, 4	; 24
     be2:	08 95       	ret

00000be4 <mcp_bit_modify>:
	char status = spi_master_transmit(0x00);
	set_bit(PORTB ,MCP_PIN);
	return status;
}

void mcp_bit_modify(char address, char mask, char data){
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	18 2f       	mov	r17, r24
     bec:	d6 2f       	mov	r29, r22
     bee:	c4 2f       	mov	r28, r20
	clear_bit(PORTB, MCP_PIN);
     bf0:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_BITMOD);	
     bf2:	85 e0       	ldi	r24, 0x05	; 5
     bf4:	0e 94 1d 06 	call	0xc3a	; 0xc3a <spi_master_transmit>
	spi_master_transmit(address);
     bf8:	81 2f       	mov	r24, r17
     bfa:	0e 94 1d 06 	call	0xc3a	; 0xc3a <spi_master_transmit>
	spi_master_transmit(mask);
     bfe:	8d 2f       	mov	r24, r29
     c00:	0e 94 1d 06 	call	0xc3a	; 0xc3a <spi_master_transmit>
	spi_master_transmit(data);
     c04:	8c 2f       	mov	r24, r28
     c06:	0e 94 1d 06 	call	0xc3a	; 0xc3a <spi_master_transmit>
	set_bit(PORTB, MCP_PIN);
     c0a:	c4 9a       	sbi	0x18, 4	; 24
}
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	08 95       	ret

00000c14 <mcp_reset>:
		
void mcp_reset(){
	clear_bit(PORTB, MCP_PIN);
     c14:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_RESET);	
     c16:	80 ec       	ldi	r24, 0xC0	; 192
     c18:	0e 94 1d 06 	call	0xc3a	; 0xc3a <spi_master_transmit>
	set_bit(PORTB, MCP_PIN);
     c1c:	c4 9a       	sbi	0x18, 4	; 24
     c1e:	08 95       	ret

00000c20 <mcp_init>:
}
	
void mcp_init(){
	spi_master_init();
     c20:	0e 94 15 06 	call	0xc2a	; 0xc2a <spi_master_init>
	mcp_reset();
     c24:	0e 94 0a 06 	call	0xc14	; 0xc14 <mcp_reset>
     c28:	08 95       	ret

00000c2a <spi_master_init>:
#include "spi.h"

void spi_master_init()
{
	#ifdef NODE_1
		DDRB |= (1<<DDB4)|(1<<DDB5)|(1<<DDB7); //Set MOSI and SCK output, all others input
     c2a:	87 b3       	in	r24, 0x17	; 23
     c2c:	80 6b       	ori	r24, 0xB0	; 176
     c2e:	87 bb       	out	0x17, r24	; 23
		DDRB &= ~(1 << DDB6);
     c30:	be 98       	cbi	0x17, 6	; 23
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X); //Enable SPI, Master, set clock rate fck/16
     c32:	81 e5       	ldi	r24, 0x51	; 81
     c34:	8d b9       	out	0x0d, r24	; 13
		set_bit(PORTB,PB4); //Disable chip
     c36:	c4 9a       	sbi	0x18, 4	; 24
     c38:	08 95       	ret

00000c3a <spi_master_transmit>:
	#endif
}

char spi_master_transmit(char cData)
{
	SPDR = cData; //Start transmission
     c3a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))); //Wait for transmission complete	
     c3c:	77 9b       	sbis	0x0e, 7	; 14
     c3e:	fe cf       	rjmp	.-4      	; 0xc3c <spi_master_transmit+0x2>
	return SPDR;
     c40:	8f b1       	in	r24, 0x0f	; 15
}
     c42:	08 95       	ret

00000c44 <uart_putchar>:
	#endif
	fdevopen(uart_putchar, uart_getchar);
}

void uart_putchar(char c){
	while (!( UCSR0A & (1<<UDRE0))); //Wait for empty transmit buffer
     c44:	5d 9b       	sbis	0x0b, 5	; 11
     c46:	fe cf       	rjmp	.-4      	; 0xc44 <uart_putchar>
	UDR0 = c; //Put data into buffer, sends the data
     c48:	8c b9       	out	0x0c, r24	; 12
     c4a:	08 95       	ret

00000c4c <uart_getchar>:
}

unsigned char uart_getchar(){
	while (!( UCSR0A & (1<<RXC0)));
     c4c:	5f 9b       	sbis	0x0b, 7	; 11
     c4e:	fe cf       	rjmp	.-4      	; 0xc4c <uart_getchar>
	return UDR0;
     c50:	8c b1       	in	r24, 0x0c	; 12
     c52:	08 95       	ret

00000c54 <uart_init>:
#include <stdio.h>
#include "settings.h"
#include "uart.h"

void uart_init(int baudRate){
	int UBRR = ((long)F_CPU/((long)16*baudRate) - 1);
     c54:	aa 27       	eor	r26, r26
     c56:	97 fd       	sbrc	r25, 7
     c58:	a0 95       	com	r26
     c5a:	ba 2f       	mov	r27, r26
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	aa 1f       	adc	r26, r26
     c62:	bb 1f       	adc	r27, r27
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	aa 1f       	adc	r26, r26
     c6a:	bb 1f       	adc	r27, r27
     c6c:	9c 01       	movw	r18, r24
     c6e:	ad 01       	movw	r20, r26
     c70:	22 0f       	add	r18, r18
     c72:	33 1f       	adc	r19, r19
     c74:	44 1f       	adc	r20, r20
     c76:	55 1f       	adc	r21, r21
     c78:	22 0f       	add	r18, r18
     c7a:	33 1f       	adc	r19, r19
     c7c:	44 1f       	adc	r20, r20
     c7e:	55 1f       	adc	r21, r21
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	8b e4       	ldi	r24, 0x4B	; 75
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <__divmodsi4>
     c8c:	21 50       	subi	r18, 0x01	; 1
     c8e:	31 09       	sbc	r19, r1
	UBRR0L = UBRR;
     c90:	29 b9       	out	0x09, r18	; 9
    UBRR0H = (UBRR>>8);
     c92:	30 bd       	out	0x20, r19	; 32
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); //Enable receiver and transmitter 
     c94:	88 e1       	ldi	r24, 0x18	; 24
     c96:	8a b9       	out	0x0a, r24	; 10
	
	#ifdef NODE_1
		UCSR0C = ((1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00));
     c98:	8e e8       	ldi	r24, 0x8E	; 142
     c9a:	80 bd       	out	0x20, r24	; 32
	#else
		UCSR0C = ((1<<USBS0)|(3<<UCSZ00)); //Set frame format: 2 stop bits, 8 data bits //Asynchronous - No parity (?) //URSEL makes sure we won't access UBRRH during operation, but UCSRC. //URSEL should not be set in node 2
	#endif
	fdevopen(uart_putchar, uart_getchar);
     c9c:	66 e2       	ldi	r22, 0x26	; 38
     c9e:	76 e0       	ldi	r23, 0x06	; 6
     ca0:	82 e2       	ldi	r24, 0x22	; 34
     ca2:	96 e0       	ldi	r25, 0x06	; 6
     ca4:	0e 94 26 12 	call	0x244c	; 0x244c <fdevopen>
     ca8:	08 95       	ret

00000caa <game_init>:
		}
		free(msg_received.data);	
	}
	*/
	
	TCCR3A = (1 << WGM31) | (1 << WGM30);				//Compare match mode
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = (1 << WGM33) | (1 << WGM32) | (1 << CS31); //clock source to be used by the Timer/Counter clkI/O/8
     cb0:	8a e1       	ldi	r24, 0x1A	; 26
     cb2:	80 93 8a 00 	sts	0x008A, r24
	ETIMSK = (1 << OCIE3A);								//Interrupt on compare match
     cb6:	80 e1       	ldi	r24, 0x10	; 16
     cb8:	80 93 7d 00 	sts	0x007D, r24
	int OCRA_num = (long)F_CPU/(8); //Prescale with 256 to get seconds
	OCR3AH = OCRA_num >> 8;
     cbc:	80 e6       	ldi	r24, 0x60	; 96
     cbe:	80 93 87 00 	sts	0x0087, r24
	OCR3AL = OCRA_num; //Sets the value for the compare match to 10240
     cc2:	10 92 86 00 	sts	0x0086, r1
     cc6:	08 95       	ret

00000cc8 <game_run>:
}


void game_run(){
     cc8:	ef 92       	push	r14
     cca:	ff 92       	push	r15
     ccc:	0f 93       	push	r16
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	62 97       	sbiw	r28, 0x12	; 18
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
	if (!initiated){
     ce4:	80 91 5a 02 	lds	r24, 0x025A
     ce8:	90 91 5b 02 	lds	r25, 0x025B
     cec:	89 2b       	or	r24, r25
     cee:	41 f4       	brne	.+16     	; 0xd00 <game_run+0x38>
		game_init();
     cf0:	0e 94 55 06 	call	0xcaa	; 0xcaa <game_init>
		initiated = 1;
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	90 93 5b 02 	sts	0x025B, r25
     cfc:	80 93 5a 02 	sts	0x025A, r24
	}
	   
	if(game_second_passed == 1){
     d00:	80 91 61 02 	lds	r24, 0x0261
     d04:	90 91 62 02 	lds	r25, 0x0262
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	09 f0       	breq	.+2      	; 0xd0e <game_run+0x46>
     d0c:	45 c0       	rjmp	.+138    	; 0xd98 <game_run+0xd0>
		printf("%d\r\n", game_second_passed);
     d0e:	80 91 61 02 	lds	r24, 0x0261
     d12:	90 91 62 02 	lds	r25, 0x0262
     d16:	9f 93       	push	r25
     d18:	8f 93       	push	r24
     d1a:	86 e9       	ldi	r24, 0x96	; 150
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	9f 93       	push	r25
     d20:	8f 93       	push	r24
     d22:	0e 94 71 12 	call	0x24e2	; 0x24e2 <printf>
		game_time++;
     d26:	80 91 58 02 	lds	r24, 0x0258
     d2a:	90 91 59 02 	lds	r25, 0x0259
     d2e:	01 96       	adiw	r24, 0x01	; 1
     d30:	90 93 59 02 	sts	0x0259, r25
     d34:	80 93 58 02 	sts	0x0258, r24
		char str[5];
		sprintf(str,"%5d",game_time);
     d38:	9f 93       	push	r25
     d3a:	8f 93       	push	r24
     d3c:	8b e9       	ldi	r24, 0x9B	; 155
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	9f 93       	push	r25
     d42:	8f 93       	push	r24
     d44:	7e 01       	movw	r14, r28
     d46:	8d e0       	ldi	r24, 0x0D	; 13
     d48:	e8 0e       	add	r14, r24
     d4a:	f1 1c       	adc	r15, r1
     d4c:	ff 92       	push	r15
     d4e:	ef 92       	push	r14
     d50:	0e 94 85 12 	call	0x250a	; 0x250a <sprintf>
		oled_clear_screen();
     d54:	0e 94 bb 0b 	call	0x1776	; 0x1776 <oled_clear_screen>
		oled_print_string(str,0,0,8,0);
     d58:	00 e0       	ldi	r16, 0x00	; 0
     d5a:	10 e0       	ldi	r17, 0x00	; 0
     d5c:	28 e0       	ldi	r18, 0x08	; 8
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e0       	ldi	r20, 0x00	; 0
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	c7 01       	movw	r24, r14
     d6a:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <oled_print_string>
		oled_print_string("Herman er best",0,1,8,0);
     d6e:	28 e0       	ldi	r18, 0x08	; 8
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	41 e0       	ldi	r20, 0x01	; 1
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	8f e9       	ldi	r24, 0x9F	; 159
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <oled_print_string>
		oled_refresh();
     d82:	0e 94 4f 0c 	call	0x189e	; 0x189e <oled_refresh>
		game_second_passed = 0;
     d86:	10 92 62 02 	sts	0x0262, r1
     d8a:	10 92 61 02 	sts	0x0261, r1
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
		
	}
	//SEND POSITION
	Position position = joy_get_position();
     d98:	0e 94 85 04 	call	0x90a	; 0x90a <joy_get_position>
     d9c:	29 83       	std	Y+1, r18	; 0x01
     d9e:	3a 83       	std	Y+2, r19	; 0x02
     da0:	4b 83       	std	Y+3, r20	; 0x03
     da2:	5c 83       	std	Y+4, r21	; 0x04
     da4:	6d 83       	std	Y+5, r22	; 0x05
     da6:	7e 83       	std	Y+6, r23	; 0x06
	Msg msg;
	msg.id = 42;
     da8:	8a e2       	ldi	r24, 0x2A	; 42
     daa:	48 2f       	mov	r20, r24
     dac:	8f 83       	std	Y+7, r24	; 0x07
     dae:	18 86       	std	Y+8, r1	; 0x08
	msg.length = sizeof(position);
     db0:	86 e0       	ldi	r24, 0x06	; 6
     db2:	68 2f       	mov	r22, r24
     db4:	89 87       	std	Y+9, r24	; 0x09
     db6:	1a 86       	std	Y+10, r1	; 0x0a
	msg.data = (char*) &position;
     db8:	ce 01       	movw	r24, r28
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	9c 87       	std	Y+12, r25	; 0x0c
     dbe:	8b 87       	std	Y+11, r24	; 0x0b
	can_transmit(msg);
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	9c 85       	ldd	r25, Y+12	; 0x0c
     dc6:	0e 94 c9 03 	call	0x792	; 0x792 <can_transmit>
	
	//GET SCORE
	if (can_message_received){
     dca:	80 91 0e 01 	lds	r24, 0x010E
     dce:	90 91 0f 01 	lds	r25, 0x010F
     dd2:	89 2b       	or	r24, r25
     dd4:	c9 f0       	breq	.+50     	; 0xe08 <game_run+0x140>
		Msg msg_received = can_receive();
     dd6:	0e 94 1b 04 	call	0x836	; 0x836 <can_receive>
     dda:	2d 87       	std	Y+13, r18	; 0x0d
     ddc:	3e 87       	std	Y+14, r19	; 0x0e
     dde:	4f 87       	std	Y+15, r20	; 0x0f
     de0:	58 8b       	std	Y+16, r21	; 0x10
     de2:	69 8b       	std	Y+17, r22	; 0x11
     de4:	7a 8b       	std	Y+18, r23	; 0x12
		if(msg_received.id == 2){
     de6:	8d 85       	ldd	r24, Y+13	; 0x0d
     de8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dea:	02 97       	sbiw	r24, 0x02	; 2
     dec:	49 f4       	brne	.+18     	; 0xe00 <game_run+0x138>
			score++;
     dee:	80 91 5c 02 	lds	r24, 0x025C
     df2:	90 91 5d 02 	lds	r25, 0x025D
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	90 93 5d 02 	sts	0x025D, r25
     dfc:	80 93 5c 02 	sts	0x025C, r24
		}
		free(msg_received.data);
     e00:	89 89       	ldd	r24, Y+17	; 0x11
     e02:	9a 89       	ldd	r25, Y+18	; 0x12
     e04:	0e 94 c4 10 	call	0x2188	; 0x2188 <free>
	}
}
     e08:	62 96       	adiw	r28, 0x12	; 18
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	08 95       	ret

00000e22 <__vector_7>:

ISR(TIMER3_COMPA_vect)
{
     e22:	1f 92       	push	r1
     e24:	0f 92       	push	r0
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	0f 92       	push	r0
     e2a:	11 24       	eor	r1, r1
     e2c:	8f 93       	push	r24
     e2e:	9f 93       	push	r25
	game_second_passed = 1;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	90 93 62 02 	sts	0x0262, r25
     e38:	80 93 61 02 	sts	0x0261, r24
     e3c:	9f 91       	pop	r25
     e3e:	8f 91       	pop	r24
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	0f 90       	pop	r0
     e46:	1f 90       	pop	r1
     e48:	18 95       	reti

00000e4a <main>:



int main(void)
{
	MCUCR |= (1<<SRE);	//Enable external memory
     e4a:	85 b7       	in	r24, 0x35	; 53
     e4c:	80 68       	ori	r24, 0x80	; 128
     e4e:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2); 
     e50:	80 b7       	in	r24, 0x30	; 48
     e52:	80 62       	ori	r24, 0x20	; 32
     e54:	80 bf       	out	0x30, r24	; 48
	
	uart_init(9600);
     e56:	80 e8       	ldi	r24, 0x80	; 128
     e58:	95 e2       	ldi	r25, 0x25	; 37
     e5a:	0e 94 2a 06 	call	0xc54	; 0xc54 <uart_init>
	can_init(MODE_NORMAL); 
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 b4 03 	call	0x768	; 0x768 <can_init>
	adc_init();
     e66:	0e 94 96 03 	call	0x72c	; 0x72c <adc_init>
	oled_init();
     e6a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <oled_init>
	joy_init();
     e6e:	0e 94 82 04 	call	0x904	; 0x904 <joy_init>
	touch_init();
     e72:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <touch_init>
	menu_init();
     e76:	0e 94 b7 09 	call	0x136e	; 0x136e <menu_init>
	sei();
     e7a:	78 94       	sei
	
	
	
	while (1)
	{	
		switch (state)
     e7c:	80 91 5e 02 	lds	r24, 0x025E
     e80:	88 23       	and	r24, r24
     e82:	19 f0       	breq	.+6      	; 0xe8a <main+0x40>
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	71 f0       	breq	.+28     	; 0xea4 <main+0x5a>
     e88:	fb cf       	rjmp	.-10     	; 0xe80 <main+0x36>
		{
			case in_menu:
				if(oled_refresh_timer == 1){
     e8a:	80 91 5f 02 	lds	r24, 0x025F
     e8e:	90 91 60 02 	lds	r25, 0x0260
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	99 f7       	brne	.-26     	; 0xe7c <main+0x32>
					menu_run_display();
     e96:	0e 94 39 0a 	call	0x1472	; 0x1472 <menu_run_display>
					oled_refresh_timer = 0;
     e9a:	10 92 60 02 	sts	0x0260, r1
     e9e:	10 92 5f 02 	sts	0x025F, r1
     ea2:	ec cf       	rjmp	.-40     	; 0xe7c <main+0x32>
				}
				
				break;
			case in_game:		
				game_run();
     ea4:	0e 94 64 06 	call	0xcc8	; 0xcc8 <game_run>
				break;
     ea8:	e9 cf       	rjmp	.-46     	; 0xe7c <main+0x32>

00000eaa <draw_list>:
		joy_moved = 0;
	}

	return self;
}
Menu* draw_list(Menu* self){
     eaa:	ef 92       	push	r14
     eac:	ff 92       	push	r15
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	7c 01       	movw	r14, r24

	for(int i = 0; i < self->num_of_entries; i++){
     eb8:	dc 01       	movw	r26, r24
     eba:	14 96       	adiw	r26, 0x04	; 4
     ebc:	8d 91       	ld	r24, X+
     ebe:	9c 91       	ld	r25, X
     ec0:	15 97       	sbiw	r26, 0x05	; 5
     ec2:	18 16       	cp	r1, r24
     ec4:	19 06       	cpc	r1, r25
     ec6:	e4 f4       	brge	.+56     	; 0xf00 <draw_list+0x56>
     ec8:	c0 e0       	ldi	r28, 0x00	; 0
     eca:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_string(self->entries[i],0,i,5,0);
     ecc:	ce 01       	movw	r24, r28
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	d7 01       	movw	r26, r14
     ed4:	12 96       	adiw	r26, 0x02	; 2
     ed6:	ed 91       	ld	r30, X+
     ed8:	fc 91       	ld	r31, X
     eda:	13 97       	sbiw	r26, 0x03	; 3
     edc:	e8 0f       	add	r30, r24
     ede:	f9 1f       	adc	r31, r25
     ee0:	00 e0       	ldi	r16, 0x00	; 0
     ee2:	10 e0       	ldi	r17, 0x00	; 0
     ee4:	25 e0       	ldi	r18, 0x05	; 5
     ee6:	4c 2f       	mov	r20, r28
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	91 81       	ldd	r25, Z+1	; 0x01
     eee:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <oled_print_string>

	return self;
}
Menu* draw_list(Menu* self){

	for(int i = 0; i < self->num_of_entries; i++){
     ef2:	21 96       	adiw	r28, 0x01	; 1
     ef4:	f7 01       	movw	r30, r14
     ef6:	84 81       	ldd	r24, Z+4	; 0x04
     ef8:	95 81       	ldd	r25, Z+5	; 0x05
     efa:	c8 17       	cp	r28, r24
     efc:	d9 07       	cpc	r29, r25
     efe:	34 f3       	brlt	.-52     	; 0xecc <draw_list+0x22>
		oled_print_string(self->entries[i],0,i,5,0);
	}

	//Where to go next
	Direction dir = joy_get_direction();
     f00:	0e 94 a2 05 	call	0xb44	; 0xb44 <joy_get_direction>
	if(!joy_moved){//THIS IS NEW
     f04:	20 91 63 02 	lds	r18, 0x0263
     f08:	30 91 64 02 	lds	r19, 0x0264
     f0c:	23 2b       	or	r18, r19
     f0e:	d9 f4       	brne	.+54     	; 0xf46 <draw_list+0x9c>
		if((dir == LEFT) & (self->super_menu != NULL)){
     f10:	d7 01       	movw	r26, r14
     f12:	18 96       	adiw	r26, 0x08	; 8
     f14:	2d 91       	ld	r18, X+
     f16:	3c 91       	ld	r19, X
     f18:	19 97       	sbiw	r26, 0x09	; 9
     f1a:	91 e0       	ldi	r25, 0x01	; 1
     f1c:	82 30       	cpi	r24, 0x02	; 2
     f1e:	09 f0       	breq	.+2      	; 0xf22 <draw_list+0x78>
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	99 23       	and	r25, r25
     f24:	39 f0       	breq	.+14     	; 0xf34 <draw_list+0x8a>
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	21 15       	cp	r18, r1
     f2a:	31 05       	cpc	r19, r1
     f2c:	09 f4       	brne	.+2      	; 0xf30 <draw_list+0x86>
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	81 11       	cpse	r24, r1
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <draw_list+0x8c>
     f34:	97 01       	movw	r18, r14
			self = self->super_menu;
		}
		joy_moved = 1;		
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	90 93 64 02 	sts	0x0264, r25
     f3e:	80 93 63 02 	sts	0x0263, r24
     f42:	79 01       	movw	r14, r18
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <draw_list+0xa8>
	}
	else if (dir == NEUTRAL){ //THIS IS NEW
     f46:	8f 3f       	cpi	r24, 0xFF	; 255
     f48:	21 f4       	brne	.+8      	; 0xf52 <draw_list+0xa8>
		joy_moved = 0;
     f4a:	10 92 64 02 	sts	0x0264, r1
     f4e:	10 92 63 02 	sts	0x0263, r1
	}
	
	return self;
}
     f52:	c7 01       	movw	r24, r14
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	ff 90       	pop	r15
     f5e:	ef 90       	pop	r14
     f60:	08 95       	ret

00000f62 <draw_menu>:
	super->entries[super->num_of_entries - 1] = malloc(strlen(sub->name) * sizeof(char));
	super->entries[super->num_of_entries - 1] = sub->name;
}

//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
     f62:	ef 92       	push	r14
     f64:	ff 92       	push	r15
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	7c 01       	movw	r14, r24
	
	for(int i = 0; i < self->num_of_entries; i++){
     f70:	dc 01       	movw	r26, r24
     f72:	14 96       	adiw	r26, 0x04	; 4
     f74:	8d 91       	ld	r24, X+
     f76:	9c 91       	ld	r25, X
     f78:	15 97       	sbiw	r26, 0x05	; 5
     f7a:	18 16       	cp	r1, r24
     f7c:	19 06       	cpc	r1, r25
     f7e:	e4 f4       	brge	.+56     	; 0xfb8 <draw_menu+0x56>
     f80:	c0 e0       	ldi	r28, 0x00	; 0
     f82:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_string(self->entries[i],0,i,5,0);
     f84:	ce 01       	movw	r24, r28
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	d7 01       	movw	r26, r14
     f8c:	12 96       	adiw	r26, 0x02	; 2
     f8e:	ed 91       	ld	r30, X+
     f90:	fc 91       	ld	r31, X
     f92:	13 97       	sbiw	r26, 0x03	; 3
     f94:	e8 0f       	add	r30, r24
     f96:	f9 1f       	adc	r31, r25
     f98:	00 e0       	ldi	r16, 0x00	; 0
     f9a:	10 e0       	ldi	r17, 0x00	; 0
     f9c:	25 e0       	ldi	r18, 0x05	; 5
     f9e:	4c 2f       	mov	r20, r28
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	91 81       	ldd	r25, Z+1	; 0x01
     fa6:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <oled_print_string>
}

//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
	
	for(int i = 0; i < self->num_of_entries; i++){
     faa:	21 96       	adiw	r28, 0x01	; 1
     fac:	f7 01       	movw	r30, r14
     fae:	84 81       	ldd	r24, Z+4	; 0x04
     fb0:	95 81       	ldd	r25, Z+5	; 0x05
     fb2:	c8 17       	cp	r28, r24
     fb4:	d9 07       	cpc	r29, r25
     fb6:	34 f3       	brlt	.-52     	; 0xf84 <draw_menu+0x22>
		oled_print_string(self->entries[i],0,i,5,0);
	}
	oled_invert_rectangle(0,8*(self->cursor),64,8*((self->cursor) + 1));
     fb8:	d7 01       	movw	r26, r14
     fba:	16 96       	adiw	r26, 0x06	; 6
     fbc:	2d 91       	ld	r18, X+
     fbe:	3c 91       	ld	r19, X
     fc0:	17 97       	sbiw	r26, 0x07	; 7
     fc2:	2f 5f       	subi	r18, 0xFF	; 255
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	22 0f       	add	r18, r18
     fc8:	33 1f       	adc	r19, r19
     fca:	22 0f       	add	r18, r18
     fcc:	33 1f       	adc	r19, r19
     fce:	22 0f       	add	r18, r18
     fd0:	33 1f       	adc	r19, r19
     fd2:	b9 01       	movw	r22, r18
     fd4:	68 50       	subi	r22, 0x08	; 8
     fd6:	71 09       	sbc	r23, r1
     fd8:	40 e4       	ldi	r20, 0x40	; 64
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 b3 0c 	call	0x1966	; 0x1966 <oled_invert_rectangle>
	
	//Where to go next
	Direction dir = joy_get_direction();
     fe4:	0e 94 a2 05 	call	0xb44	; 0xb44 <joy_get_direction>
	if(1){//THIS MUST CHANGE
		if((dir == UP)){// & (self->cursor != 0)){
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	09 f0       	breq	.+2      	; 0xfee <draw_menu+0x8c>
     fec:	4d c0       	rjmp	.+154    	; 0x1088 <draw_menu+0x126>
     fee:	c0 e0       	ldi	r28, 0x00	; 0
     ff0:	d0 e0       	ldi	r29, 0x00	; 0
			for (int i = 0; i < 8; i++,i++){
				oled_invert_rectangle(0,8*(self->cursor) - i - 2,64,8*((self->cursor) + 1) - i - 2);
     ff2:	f7 01       	movw	r30, r14
     ff4:	66 81       	ldd	r22, Z+6	; 0x06
     ff6:	77 81       	ldd	r23, Z+7	; 0x07
     ff8:	6f 5f       	subi	r22, 0xFF	; 255
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	66 0f       	add	r22, r22
     ffe:	77 1f       	adc	r23, r23
    1000:	66 0f       	add	r22, r22
    1002:	77 1f       	adc	r23, r23
    1004:	66 0f       	add	r22, r22
    1006:	77 1f       	adc	r23, r23
    1008:	9b 01       	movw	r18, r22
    100a:	2c 1b       	sub	r18, r28
    100c:	3d 0b       	sbc	r19, r29
    100e:	22 50       	subi	r18, 0x02	; 2
    1010:	31 09       	sbc	r19, r1
    1012:	6c 1b       	sub	r22, r28
    1014:	7d 0b       	sbc	r23, r29
    1016:	6a 50       	subi	r22, 0x0A	; 10
    1018:	71 09       	sbc	r23, r1
    101a:	40 e4       	ldi	r20, 0x40	; 64
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 b3 0c 	call	0x1966	; 0x1966 <oled_invert_rectangle>
				oled_invert_rectangle(0,8*(self->cursor) - i,64,8*((self->cursor) + 1) - i);
    1026:	d7 01       	movw	r26, r14
    1028:	16 96       	adiw	r26, 0x06	; 6
    102a:	6d 91       	ld	r22, X+
    102c:	7c 91       	ld	r23, X
    102e:	17 97       	sbiw	r26, 0x07	; 7
    1030:	6f 5f       	subi	r22, 0xFF	; 255
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	66 0f       	add	r22, r22
    1036:	77 1f       	adc	r23, r23
    1038:	66 0f       	add	r22, r22
    103a:	77 1f       	adc	r23, r23
    103c:	66 0f       	add	r22, r22
    103e:	77 1f       	adc	r23, r23
    1040:	9b 01       	movw	r18, r22
    1042:	2c 1b       	sub	r18, r28
    1044:	3d 0b       	sbc	r19, r29
    1046:	68 50       	subi	r22, 0x08	; 8
    1048:	71 09       	sbc	r23, r1
    104a:	6c 1b       	sub	r22, r28
    104c:	7d 0b       	sbc	r23, r29
    104e:	40 e4       	ldi	r20, 0x40	; 64
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 b3 0c 	call	0x1966	; 0x1966 <oled_invert_rectangle>
				oled_refresh();
    105a:	0e 94 4f 0c 	call	0x189e	; 0x189e <oled_refresh>
	
	//Where to go next
	Direction dir = joy_get_direction();
	if(1){//THIS MUST CHANGE
		if((dir == UP)){// & (self->cursor != 0)){
			for (int i = 0; i < 8; i++,i++){
    105e:	22 96       	adiw	r28, 0x02	; 2
    1060:	c8 30       	cpi	r28, 0x08	; 8
    1062:	d1 05       	cpc	r29, r1
    1064:	31 f6       	brne	.-116    	; 0xff2 <draw_menu+0x90>
				oled_invert_rectangle(0,8*(self->cursor) - i - 2,64,8*((self->cursor) + 1) - i - 2);
				oled_invert_rectangle(0,8*(self->cursor) - i,64,8*((self->cursor) + 1) - i);
				oled_refresh();
			}
			self->cursor--;
    1066:	f7 01       	movw	r30, r14
    1068:	86 81       	ldd	r24, Z+6	; 0x06
    106a:	97 81       	ldd	r25, Z+7	; 0x07
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	30 f0       	brcs	.+12     	; 0x107c <draw_menu+0x11a>
    1070:	d7 01       	movw	r26, r14
    1072:	17 96       	adiw	r26, 0x07	; 7
    1074:	9c 93       	st	X, r25
    1076:	8e 93       	st	-X, r24
    1078:	16 97       	sbiw	r26, 0x06	; 6
    107a:	8b c0       	rjmp	.+278    	; 0x1192 <draw_menu+0x230>
			//Wrapping
			if(self->cursor == -1){
				self->cursor = 2;
    107c:	82 e0       	ldi	r24, 0x02	; 2
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	f7 01       	movw	r30, r14
    1082:	97 83       	std	Z+7, r25	; 0x07
    1084:	86 83       	std	Z+6, r24	; 0x06
    1086:	85 c0       	rjmp	.+266    	; 0x1192 <draw_menu+0x230>
			}
						
		}
		else if((dir == DOWN)){// & (self->cursor != (self->num_of_entries - 1))){
    1088:	83 30       	cpi	r24, 0x03	; 3
    108a:	09 f0       	breq	.+2      	; 0x108e <draw_menu+0x12c>
    108c:	52 c0       	rjmp	.+164    	; 0x1132 <draw_menu+0x1d0>
    108e:	c0 e0       	ldi	r28, 0x00	; 0
    1090:	d0 e0       	ldi	r29, 0x00	; 0


 			//---NEW--- ANIMATION FOR DOWNWARDS MOVEMENT
 			for (int i = 0; i < 8; i++,i++){
	 				oled_invert_rectangle(0,8*(self->cursor) + i,64,8*((self->cursor) + 1) + i);
    1092:	d7 01       	movw	r26, r14
    1094:	16 96       	adiw	r26, 0x06	; 6
    1096:	6d 91       	ld	r22, X+
    1098:	7c 91       	ld	r23, X
    109a:	17 97       	sbiw	r26, 0x07	; 7
    109c:	6f 5f       	subi	r22, 0xFF	; 255
    109e:	7f 4f       	sbci	r23, 0xFF	; 255
    10a0:	66 0f       	add	r22, r22
    10a2:	77 1f       	adc	r23, r23
    10a4:	66 0f       	add	r22, r22
    10a6:	77 1f       	adc	r23, r23
    10a8:	66 0f       	add	r22, r22
    10aa:	77 1f       	adc	r23, r23
    10ac:	9b 01       	movw	r18, r22
    10ae:	2c 0f       	add	r18, r28
    10b0:	3d 1f       	adc	r19, r29
    10b2:	68 50       	subi	r22, 0x08	; 8
    10b4:	71 09       	sbc	r23, r1
    10b6:	6c 0f       	add	r22, r28
    10b8:	7d 1f       	adc	r23, r29
    10ba:	40 e4       	ldi	r20, 0x40	; 64
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 b3 0c 	call	0x1966	; 0x1966 <oled_invert_rectangle>
	 				oled_invert_rectangle(0,8*(self->cursor) + i + 2,64,8*((self->cursor) + 1) + i + 2);
    10c6:	f7 01       	movw	r30, r14
    10c8:	66 81       	ldd	r22, Z+6	; 0x06
    10ca:	77 81       	ldd	r23, Z+7	; 0x07
    10cc:	6f 5f       	subi	r22, 0xFF	; 255
    10ce:	7f 4f       	sbci	r23, 0xFF	; 255
    10d0:	66 0f       	add	r22, r22
    10d2:	77 1f       	adc	r23, r23
    10d4:	66 0f       	add	r22, r22
    10d6:	77 1f       	adc	r23, r23
    10d8:	66 0f       	add	r22, r22
    10da:	77 1f       	adc	r23, r23
    10dc:	9b 01       	movw	r18, r22
    10de:	2c 0f       	add	r18, r28
    10e0:	3d 1f       	adc	r19, r29
    10e2:	2e 5f       	subi	r18, 0xFE	; 254
    10e4:	3f 4f       	sbci	r19, 0xFF	; 255
    10e6:	6c 0f       	add	r22, r28
    10e8:	7d 1f       	adc	r23, r29
    10ea:	66 50       	subi	r22, 0x06	; 6
    10ec:	71 09       	sbc	r23, r1
    10ee:	40 e4       	ldi	r20, 0x40	; 64
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 b3 0c 	call	0x1966	; 0x1966 <oled_invert_rectangle>
	 				oled_refresh();
    10fa:	0e 94 4f 0c 	call	0x189e	; 0x189e <oled_refresh>
		}
		else if((dir == DOWN)){// & (self->cursor != (self->num_of_entries - 1))){


 			//---NEW--- ANIMATION FOR DOWNWARDS MOVEMENT
 			for (int i = 0; i < 8; i++,i++){
    10fe:	22 96       	adiw	r28, 0x02	; 2
    1100:	c8 30       	cpi	r28, 0x08	; 8
    1102:	d1 05       	cpc	r29, r1
    1104:	31 f6       	brne	.-116    	; 0x1092 <draw_menu+0x130>
	 				oled_invert_rectangle(0,8*(self->cursor) + i + 2,64,8*((self->cursor) + 1) + i + 2);
	 				oled_refresh();
 			}
 			//-------------

			self->cursor++;
    1106:	d7 01       	movw	r26, r14
    1108:	16 96       	adiw	r26, 0x06	; 6
    110a:	8d 91       	ld	r24, X+
    110c:	9c 91       	ld	r25, X
    110e:	17 97       	sbiw	r26, 0x07	; 7
    1110:	01 96       	adiw	r24, 0x01	; 1
    1112:	17 96       	adiw	r26, 0x07	; 7
    1114:	9c 93       	st	X, r25
    1116:	8e 93       	st	-X, r24
    1118:	16 97       	sbiw	r26, 0x06	; 6
			//Wrapping
			if(self->cursor == self->num_of_entries){
    111a:	14 96       	adiw	r26, 0x04	; 4
    111c:	2d 91       	ld	r18, X+
    111e:	3c 91       	ld	r19, X
    1120:	15 97       	sbiw	r26, 0x05	; 5
    1122:	82 17       	cp	r24, r18
    1124:	93 07       	cpc	r25, r19
    1126:	a9 f5       	brne	.+106    	; 0x1192 <draw_menu+0x230>
				self->cursor = 0;
    1128:	17 96       	adiw	r26, 0x07	; 7
    112a:	1c 92       	st	X, r1
    112c:	1e 92       	st	-X, r1
    112e:	16 97       	sbiw	r26, 0x06	; 6
    1130:	30 c0       	rjmp	.+96     	; 0x1192 <draw_menu+0x230>
			}
	
			
		}
		else if((dir == RIGHT) & (self->sub_menus[self->cursor]->num_of_entries != 0)){ //THIS IS CHANGED
    1132:	f7 01       	movw	r30, r14
    1134:	26 81       	ldd	r18, Z+6	; 0x06
    1136:	37 81       	ldd	r19, Z+7	; 0x07
    1138:	22 0f       	add	r18, r18
    113a:	33 1f       	adc	r19, r19
    113c:	02 84       	ldd	r0, Z+10	; 0x0a
    113e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1140:	e0 2d       	mov	r30, r0
    1142:	e2 0f       	add	r30, r18
    1144:	f3 1f       	adc	r31, r19
    1146:	01 90       	ld	r0, Z+
    1148:	f0 81       	ld	r31, Z
    114a:	e0 2d       	mov	r30, r0
    114c:	91 e0       	ldi	r25, 0x01	; 1
    114e:	81 11       	cpse	r24, r1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	99 23       	and	r25, r25
    1154:	41 f0       	breq	.+16     	; 0x1166 <draw_menu+0x204>
    1156:	91 e0       	ldi	r25, 0x01	; 1
    1158:	24 81       	ldd	r18, Z+4	; 0x04
    115a:	35 81       	ldd	r19, Z+5	; 0x05
    115c:	23 2b       	or	r18, r19
    115e:	09 f4       	brne	.+2      	; 0x1162 <draw_menu+0x200>
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	91 11       	cpse	r25, r1
    1164:	13 c0       	rjmp	.+38     	; 0x118c <draw_menu+0x22a>
			self = self->sub_menus[self->cursor];
		}
		else if((dir == LEFT) & (self->super_menu != NULL)){
    1166:	d7 01       	movw	r26, r14
    1168:	18 96       	adiw	r26, 0x08	; 8
    116a:	2d 91       	ld	r18, X+
    116c:	3c 91       	ld	r19, X
    116e:	19 97       	sbiw	r26, 0x09	; 9
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	82 30       	cpi	r24, 0x02	; 2
    1174:	09 f0       	breq	.+2      	; 0x1178 <draw_menu+0x216>
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	99 23       	and	r25, r25
    117a:	59 f0       	breq	.+22     	; 0x1192 <draw_menu+0x230>
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	21 15       	cp	r18, r1
    1180:	31 05       	cpc	r19, r1
    1182:	09 f4       	brne	.+2      	; 0x1186 <draw_menu+0x224>
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	81 11       	cpse	r24, r1
    1188:	03 c0       	rjmp	.+6      	; 0x1190 <draw_menu+0x22e>
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <draw_menu+0x230>
			}
	
			
		}
		else if((dir == RIGHT) & (self->sub_menus[self->cursor]->num_of_entries != 0)){ //THIS IS CHANGED
			self = self->sub_menus[self->cursor];
    118c:	7f 01       	movw	r14, r30
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <draw_menu+0x230>
		}
		else if((dir == LEFT) & (self->super_menu != NULL)){
			self = self->super_menu;
    1190:	79 01       	movw	r14, r18
		}
		joy_moved = 1;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	90 93 64 02 	sts	0x0264, r25
    119a:	80 93 63 02 	sts	0x0263, r24
	else if (dir == NEUTRAL){ //THIS IS NEW
		joy_moved = 0;
	}

	return self;
}
    119e:	c7 01       	movw	r24, r14
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	08 95       	ret

000011ae <run_game>:
	current_menu = current_menu->draw(current_menu);
	current_menu->action();
	oled_refresh();
}

void run_game(){
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <run_game+0x6>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <run_game+0x8>
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <run_game+0xa>
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
	if(joy_get_position().z == 1){
    11bc:	0e 94 85 04 	call	0x90a	; 0x90a <joy_get_position>
    11c0:	6d 83       	std	Y+5, r22	; 0x05
    11c2:	7e 83       	std	Y+6, r23	; 0x06
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	9e 81       	ldd	r25, Y+6	; 0x06
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	19 f4       	brne	.+6      	; 0x11d2 <run_game+0x24>
		state = in_game;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	80 93 5e 02 	sts	0x025E, r24
	}
	
}
    11d2:	26 96       	adiw	r28, 0x06	; 6
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	08 95       	ret

000011e4 <add_entries>:
	
}
//----------NO NEED TO CHANGE THINGS BEYOND THIS POINT----------

//Functions for adding entries and nodes
void add_entries(Menu* menu, char* entries[], int num_of_new_entries){
    11e4:	af 92       	push	r10
    11e6:	bf 92       	push	r11
    11e8:	cf 92       	push	r12
    11ea:	df 92       	push	r13
    11ec:	ef 92       	push	r14
    11ee:	ff 92       	push	r15
    11f0:	0f 93       	push	r16
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	8c 01       	movw	r16, r24
    11fa:	e6 2e       	mov	r14, r22
    11fc:	f7 2e       	mov	r15, r23
    11fe:	ea 01       	movw	r28, r20
	
	menu->entries = malloc(num_of_new_entries * sizeof(char*));	//Correct size of double pointer
    1200:	6a 01       	movw	r12, r20
    1202:	cc 0c       	add	r12, r12
    1204:	dd 1c       	adc	r13, r13
    1206:	c6 01       	movw	r24, r12
    1208:	0e 94 2c 10 	call	0x2058	; 0x2058 <malloc>
    120c:	d8 01       	movw	r26, r16
    120e:	13 96       	adiw	r26, 0x03	; 3
    1210:	9c 93       	st	X, r25
    1212:	8e 93       	st	-X, r24
    1214:	12 97       	sbiw	r26, 0x02	; 2
	
	for(int i = 0; i < num_of_new_entries; i++){
    1216:	1c 16       	cp	r1, r28
    1218:	1d 06       	cpc	r1, r29
    121a:	54 f5       	brge	.+84     	; 0x1270 <add_entries+0x8c>
    121c:	ae 2c       	mov	r10, r14
    121e:	bf 2c       	mov	r11, r15
    1220:	c0 e0       	ldi	r28, 0x00	; 0
    1222:	d0 e0       	ldi	r29, 0x00	; 0
		menu->entries[i] = malloc(strlen(entries[i]) * sizeof(char)); //Allocate space for each string
    1224:	f8 01       	movw	r30, r16
    1226:	e2 80       	ldd	r14, Z+2	; 0x02
    1228:	f3 80       	ldd	r15, Z+3	; 0x03
    122a:	ec 0e       	add	r14, r28
    122c:	fd 1e       	adc	r15, r29
    122e:	f5 01       	movw	r30, r10
    1230:	a0 81       	ld	r26, Z
    1232:	b1 81       	ldd	r27, Z+1	; 0x01
    1234:	fd 01       	movw	r30, r26
    1236:	01 90       	ld	r0, Z+
    1238:	00 20       	and	r0, r0
    123a:	e9 f7       	brne	.-6      	; 0x1236 <add_entries+0x52>
    123c:	31 97       	sbiw	r30, 0x01	; 1
    123e:	cf 01       	movw	r24, r30
    1240:	8a 1b       	sub	r24, r26
    1242:	9b 0b       	sbc	r25, r27
    1244:	0e 94 2c 10 	call	0x2058	; 0x2058 <malloc>
    1248:	d7 01       	movw	r26, r14
    124a:	8d 93       	st	X+, r24
    124c:	9c 93       	st	X, r25
		menu->entries[i] =  entries[i];								  //Adds each string
    124e:	f5 01       	movw	r30, r10
    1250:	81 91       	ld	r24, Z+
    1252:	91 91       	ld	r25, Z+
    1254:	5f 01       	movw	r10, r30
    1256:	d8 01       	movw	r26, r16
    1258:	12 96       	adiw	r26, 0x02	; 2
    125a:	ed 91       	ld	r30, X+
    125c:	fc 91       	ld	r31, X
    125e:	13 97       	sbiw	r26, 0x03	; 3
    1260:	ec 0f       	add	r30, r28
    1262:	fd 1f       	adc	r31, r29
    1264:	91 83       	std	Z+1, r25	; 0x01
    1266:	80 83       	st	Z, r24
    1268:	22 96       	adiw	r28, 0x02	; 2
//Functions for adding entries and nodes
void add_entries(Menu* menu, char* entries[], int num_of_new_entries){
	
	menu->entries = malloc(num_of_new_entries * sizeof(char*));	//Correct size of double pointer
	
	for(int i = 0; i < num_of_new_entries; i++){
    126a:	cc 16       	cp	r12, r28
    126c:	dd 06       	cpc	r13, r29
    126e:	d1 f6       	brne	.-76     	; 0x1224 <add_entries+0x40>
		//empty->name = entries[i];
		//add_sub_menu(menu, empty);
		//menu->num_of_entries+=1;
	}
	//menu->num_of_entries = num_of_new_entries;
	menu->cursor = 0; //To make sure the cursor is not something else
    1270:	f8 01       	movw	r30, r16
    1272:	17 82       	std	Z+7, r1	; 0x07
    1274:	16 82       	std	Z+6, r1	; 0x06
}
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	ff 90       	pop	r15
    1280:	ef 90       	pop	r14
    1282:	df 90       	pop	r13
    1284:	cf 90       	pop	r12
    1286:	bf 90       	pop	r11
    1288:	af 90       	pop	r10
    128a:	08 95       	ret

0000128c <add_sub_menu>:

void add_sub_menu(Menu* super, Menu* sub){
    128c:	ef 92       	push	r14
    128e:	ff 92       	push	r15
    1290:	0f 93       	push	r16
    1292:	1f 93       	push	r17
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	ec 01       	movw	r28, r24
    129a:	8b 01       	movw	r16, r22
	super->num_of_entries += 1;		//Num of entries in super are updated
    129c:	8c 81       	ldd	r24, Y+4	; 0x04
    129e:	9d 81       	ldd	r25, Y+5	; 0x05
    12a0:	01 96       	adiw	r24, 0x01	; 1
    12a2:	9d 83       	std	Y+5, r25	; 0x05
    12a4:	8c 83       	std	Y+4, r24	; 0x04
	
	//Pointers to and from the menus are set correctly
	sub->super_menu = super;
    12a6:	fb 01       	movw	r30, r22
    12a8:	d1 87       	std	Z+9, r29	; 0x09
    12aa:	c0 87       	std	Z+8, r28	; 0x08
	super->sub_menus = realloc(super->sub_menus, super->num_of_entries * sizeof(Menu*));
    12ac:	6c 81       	ldd	r22, Y+4	; 0x04
    12ae:	7d 81       	ldd	r23, Y+5	; 0x05
    12b0:	66 0f       	add	r22, r22
    12b2:	77 1f       	adc	r23, r23
    12b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    12b8:	0e 94 53 11 	call	0x22a6	; 0x22a6 <realloc>
    12bc:	9b 87       	std	Y+11, r25	; 0x0b
    12be:	8a 87       	std	Y+10, r24	; 0x0a
	super->sub_menus[super->num_of_entries - 1] = malloc(sizeof(Menu));
    12c0:	ec 80       	ldd	r14, Y+4	; 0x04
    12c2:	fd 80       	ldd	r15, Y+5	; 0x05
    12c4:	f1 e0       	ldi	r31, 0x01	; 1
    12c6:	ef 1a       	sub	r14, r31
    12c8:	f0 e8       	ldi	r31, 0x80	; 128
    12ca:	ff 0a       	sbc	r15, r31
    12cc:	ee 0c       	add	r14, r14
    12ce:	ff 1c       	adc	r15, r15
    12d0:	e8 0e       	add	r14, r24
    12d2:	f9 1e       	adc	r15, r25
    12d4:	80 e1       	ldi	r24, 0x10	; 16
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 2c 10 	call	0x2058	; 0x2058 <malloc>
    12dc:	f7 01       	movw	r30, r14
    12de:	91 83       	std	Z+1, r25	; 0x01
    12e0:	80 83       	st	Z, r24
	super->sub_menus[super->num_of_entries - 1] = sub;
    12e2:	ec 81       	ldd	r30, Y+4	; 0x04
    12e4:	fd 81       	ldd	r31, Y+5	; 0x05
    12e6:	e1 50       	subi	r30, 0x01	; 1
    12e8:	f0 48       	sbci	r31, 0x80	; 128
    12ea:	ee 0f       	add	r30, r30
    12ec:	ff 1f       	adc	r31, r31
    12ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    12f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    12f2:	e8 0f       	add	r30, r24
    12f4:	f9 1f       	adc	r31, r25
    12f6:	11 83       	std	Z+1, r17	; 0x01
    12f8:	00 83       	st	Z, r16
	
	//Name of entries in the super menu are updated
	super->entries = realloc(super->entries, super->num_of_entries * sizeof(char*));
    12fa:	6c 81       	ldd	r22, Y+4	; 0x04
    12fc:	7d 81       	ldd	r23, Y+5	; 0x05
    12fe:	66 0f       	add	r22, r22
    1300:	77 1f       	adc	r23, r23
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	9b 81       	ldd	r25, Y+3	; 0x03
    1306:	0e 94 53 11 	call	0x22a6	; 0x22a6 <realloc>
    130a:	9b 83       	std	Y+3, r25	; 0x03
    130c:	8a 83       	std	Y+2, r24	; 0x02
	super->entries[super->num_of_entries - 1] = malloc(strlen(sub->name) * sizeof(char));
    130e:	ec 80       	ldd	r14, Y+4	; 0x04
    1310:	fd 80       	ldd	r15, Y+5	; 0x05
    1312:	f1 e0       	ldi	r31, 0x01	; 1
    1314:	ef 1a       	sub	r14, r31
    1316:	f0 e8       	ldi	r31, 0x80	; 128
    1318:	ff 0a       	sbc	r15, r31
    131a:	ee 0c       	add	r14, r14
    131c:	ff 1c       	adc	r15, r15
    131e:	e8 0e       	add	r14, r24
    1320:	f9 1e       	adc	r15, r25
    1322:	f8 01       	movw	r30, r16
    1324:	a0 81       	ld	r26, Z
    1326:	b1 81       	ldd	r27, Z+1	; 0x01
    1328:	fd 01       	movw	r30, r26
    132a:	01 90       	ld	r0, Z+
    132c:	00 20       	and	r0, r0
    132e:	e9 f7       	brne	.-6      	; 0x132a <add_sub_menu+0x9e>
    1330:	31 97       	sbiw	r30, 0x01	; 1
    1332:	cf 01       	movw	r24, r30
    1334:	8a 1b       	sub	r24, r26
    1336:	9b 0b       	sbc	r25, r27
    1338:	0e 94 2c 10 	call	0x2058	; 0x2058 <malloc>
    133c:	f7 01       	movw	r30, r14
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	80 83       	st	Z, r24
	super->entries[super->num_of_entries - 1] = sub->name;
    1342:	f8 01       	movw	r30, r16
    1344:	80 81       	ld	r24, Z
    1346:	91 81       	ldd	r25, Z+1	; 0x01
    1348:	ec 81       	ldd	r30, Y+4	; 0x04
    134a:	fd 81       	ldd	r31, Y+5	; 0x05
    134c:	e1 50       	subi	r30, 0x01	; 1
    134e:	f0 48       	sbci	r31, 0x80	; 128
    1350:	ee 0f       	add	r30, r30
    1352:	ff 1f       	adc	r31, r31
    1354:	2a 81       	ldd	r18, Y+2	; 0x02
    1356:	3b 81       	ldd	r19, Y+3	; 0x03
    1358:	e2 0f       	add	r30, r18
    135a:	f3 1f       	adc	r31, r19
    135c:	91 83       	std	Z+1, r25	; 0x01
    135e:	80 83       	st	Z, r24
}
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	1f 91       	pop	r17
    1366:	0f 91       	pop	r16
    1368:	ff 90       	pop	r15
    136a:	ef 90       	pop	r14
    136c:	08 95       	ret

0000136e <menu_init>:
	//.type = MENU,
	.draw = draw_menu
};

//The initializer - How the menus are related
void menu_init(){
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	6c 97       	sbiw	r28, 0x1c	; 28
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
	
	char* control_entr[3] = {"Player1", "Player2", "Player3"};
    1382:	86 e0       	ldi	r24, 0x06	; 6
    1384:	ea e7       	ldi	r30, 0x7A	; 122
    1386:	f1 e0       	ldi	r31, 0x01	; 1
    1388:	de 01       	movw	r26, r28
    138a:	11 96       	adiw	r26, 0x01	; 1
    138c:	01 90       	ld	r0, Z+
    138e:	0d 92       	st	X+, r0
    1390:	8a 95       	dec	r24
    1392:	e1 f7       	brne	.-8      	; 0x138c <menu_init+0x1e>
	add_entries(&control, control_entr, 3);
    1394:	43 e0       	ldi	r20, 0x03	; 3
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	be 01       	movw	r22, r28
    139a:	6f 5f       	subi	r22, 0xFF	; 255
    139c:	7f 4f       	sbci	r23, 0xFF	; 255
    139e:	82 e2       	ldi	r24, 0x22	; 34
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <add_entries>
	add_sub_menu(&options, &control);
    13a6:	62 e2       	ldi	r22, 0x22	; 34
    13a8:	71 e0       	ldi	r23, 0x01	; 1
    13aa:	82 e4       	ldi	r24, 0x42	; 66
    13ac:	91 e0       	ldi	r25, 0x01	; 1
    13ae:	0e 94 46 09 	call	0x128c	; 0x128c <add_sub_menu>
	
	char* contro_entr[4] = {"Low", "Medium", "High","Ultra"};
    13b2:	88 e0       	ldi	r24, 0x08	; 8
    13b4:	e0 e8       	ldi	r30, 0x80	; 128
    13b6:	f1 e0       	ldi	r31, 0x01	; 1
    13b8:	de 01       	movw	r26, r28
    13ba:	17 96       	adiw	r26, 0x07	; 7
    13bc:	01 90       	ld	r0, Z+
    13be:	0d 92       	st	X+, r0
    13c0:	8a 95       	dec	r24
    13c2:	e1 f7       	brne	.-8      	; 0x13bc <menu_init+0x4e>
	add_entries(&contro, contro_entr, 4);
    13c4:	44 e0       	ldi	r20, 0x04	; 4
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	be 01       	movw	r22, r28
    13ca:	69 5f       	subi	r22, 0xF9	; 249
    13cc:	7f 4f       	sbci	r23, 0xFF	; 255
    13ce:	82 e1       	ldi	r24, 0x12	; 18
    13d0:	91 e0       	ldi	r25, 0x01	; 1
    13d2:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <add_entries>
	add_sub_menu(&options, &contro);
    13d6:	62 e1       	ldi	r22, 0x12	; 18
    13d8:	71 e0       	ldi	r23, 0x01	; 1
    13da:	82 e4       	ldi	r24, 0x42	; 66
    13dc:	91 e0       	ldi	r25, 0x01	; 1
    13de:	0e 94 46 09 	call	0x128c	; 0x128c <add_sub_menu>
	
	add_sub_menu(&main_menu, &options);
    13e2:	62 e4       	ldi	r22, 0x42	; 66
    13e4:	71 e0       	ldi	r23, 0x01	; 1
    13e6:	82 e6       	ldi	r24, 0x62	; 98
    13e8:	91 e0       	ldi	r25, 0x01	; 1
    13ea:	0e 94 46 09 	call	0x128c	; 0x128c <add_sub_menu>
	
	char* diff_entr[3] = {"Easy", "Medium", "Hard"};
    13ee:	86 e0       	ldi	r24, 0x06	; 6
    13f0:	e8 e8       	ldi	r30, 0x88	; 136
    13f2:	f1 e0       	ldi	r31, 0x01	; 1
    13f4:	de 01       	movw	r26, r28
    13f6:	1f 96       	adiw	r26, 0x0f	; 15
    13f8:	01 90       	ld	r0, Z+
    13fa:	0d 92       	st	X+, r0
    13fc:	8a 95       	dec	r24
    13fe:	e1 f7       	brne	.-8      	; 0x13f8 <menu_init+0x8a>
	add_entries(&difficulty, diff_entr, 3);
    1400:	43 e0       	ldi	r20, 0x03	; 3
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	be 01       	movw	r22, r28
    1406:	61 5f       	subi	r22, 0xF1	; 241
    1408:	7f 4f       	sbci	r23, 0xFF	; 255
    140a:	82 e5       	ldi	r24, 0x52	; 82
    140c:	91 e0       	ldi	r25, 0x01	; 1
    140e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <add_entries>
	add_sub_menu(&main_menu, &difficulty);
    1412:	62 e5       	ldi	r22, 0x52	; 82
    1414:	71 e0       	ldi	r23, 0x01	; 1
    1416:	82 e6       	ldi	r24, 0x62	; 98
    1418:	91 e0       	ldi	r25, 0x01	; 1
    141a:	0e 94 46 09 	call	0x128c	; 0x128c <add_sub_menu>
	
	char* high_entr[4] = {"1. Herman","2. Raoul","3. Alle andre","-inf^inf. Hans"};
    141e:	88 e0       	ldi	r24, 0x08	; 8
    1420:	ee e8       	ldi	r30, 0x8E	; 142
    1422:	f1 e0       	ldi	r31, 0x01	; 1
    1424:	de 01       	movw	r26, r28
    1426:	55 96       	adiw	r26, 0x15	; 21
    1428:	01 90       	ld	r0, Z+
    142a:	0d 92       	st	X+, r0
    142c:	8a 95       	dec	r24
    142e:	e1 f7       	brne	.-8      	; 0x1428 <menu_init+0xba>
	add_entries(&highscore, high_entr,4);
    1430:	44 e0       	ldi	r20, 0x04	; 4
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	be 01       	movw	r22, r28
    1436:	6b 5e       	subi	r22, 0xEB	; 235
    1438:	7f 4f       	sbci	r23, 0xFF	; 255
    143a:	82 e3       	ldi	r24, 0x32	; 50
    143c:	91 e0       	ldi	r25, 0x01	; 1
    143e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <add_entries>
	add_sub_menu(&main_menu, &highscore);
    1442:	62 e3       	ldi	r22, 0x32	; 50
    1444:	71 e0       	ldi	r23, 0x01	; 1
    1446:	82 e6       	ldi	r24, 0x62	; 98
    1448:	91 e0       	ldi	r25, 0x01	; 1
    144a:	0e 94 46 09 	call	0x128c	; 0x128c <add_sub_menu>
		
	//Initialize interrupts
	// Set up timer, enable timer/counter compare match interrupt
	TCCR1A = (1 << WGM11) | (1 << WGM10);				//Compare match mode
    144e:	83 e0       	ldi	r24, 0x03	; 3
    1450:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); //clock source to be used by the Timer/Counter clkI/O/8
    1452:	8a e1       	ldi	r24, 0x1A	; 26
    1454:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << OCIE1A);								//Interrupt on compare match
    1456:	80 e4       	ldi	r24, 0x40	; 64
    1458:	89 bf       	out	0x39, r24	; 57
	int OCRA_num = (long)F_CPU/(refresh_rate*8);
		
	OCR1AH = OCRA_num >> 8;
    145a:	88 e2       	ldi	r24, 0x28	; 40
    145c:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = OCRA_num; //Sets the value for the compare match to 10240
    145e:	1a bc       	out	0x2a, r1	; 42
	
}
    1460:	6c 96       	adiw	r28, 0x1c	; 28
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret

00001472 <menu_run_display>:
	//
	
Menu* current_menu = &main_menu;

void menu_run_display(){
	oled_clear_screen();
    1472:	0e 94 bb 0b 	call	0x1776	; 0x1776 <oled_clear_screen>
	current_menu = current_menu->draw(current_menu);
    1476:	80 91 10 01 	lds	r24, 0x0110
    147a:	90 91 11 01 	lds	r25, 0x0111
    147e:	dc 01       	movw	r26, r24
    1480:	1c 96       	adiw	r26, 0x0c	; 12
    1482:	ed 91       	ld	r30, X+
    1484:	fc 91       	ld	r31, X
    1486:	1d 97       	sbiw	r26, 0x0d	; 13
    1488:	09 95       	icall
    148a:	90 93 11 01 	sts	0x0111, r25
    148e:	80 93 10 01 	sts	0x0110, r24
	current_menu->action();
    1492:	dc 01       	movw	r26, r24
    1494:	1e 96       	adiw	r26, 0x0e	; 14
    1496:	ed 91       	ld	r30, X+
    1498:	fc 91       	ld	r31, X
    149a:	1f 97       	sbiw	r26, 0x0f	; 15
    149c:	09 95       	icall
	oled_refresh();
    149e:	0e 94 4f 0c 	call	0x189e	; 0x189e <oled_refresh>
    14a2:	08 95       	ret

000014a4 <__vector_13>:
	
}

//Oled refresh timer - called with interval 0.016s (60FPS)
ISR(TIMER1_COMPA_vect)
{
    14a4:	1f 92       	push	r1
    14a6:	0f 92       	push	r0
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	0f 92       	push	r0
    14ac:	11 24       	eor	r1, r1
    14ae:	8f 93       	push	r24
    14b0:	9f 93       	push	r25
	oled_refresh_timer = 1;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	90 93 60 02 	sts	0x0260, r25
    14ba:	80 93 5f 02 	sts	0x025F, r24
    14be:	9f 91       	pop	r25
    14c0:	8f 91       	pop	r24
    14c2:	0f 90       	pop	r0
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	0f 90       	pop	r0
    14c8:	1f 90       	pop	r1
    14ca:	18 95       	reti

000014cc <oled_write_data>:
void oled_write_command(char command){
	*oled_command = command;
}

void oled_write_data(char data){
	if(doublebuffering){
    14cc:	20 91 78 01 	lds	r18, 0x0178
    14d0:	30 91 79 01 	lds	r19, 0x0179
    14d4:	23 2b       	or	r18, r19
    14d6:	d1 f0       	breq	.+52     	; 0x150c <oled_write_data+0x40>
		if (oled_back_buffer_index > 1023){
    14d8:	20 91 65 02 	lds	r18, 0x0265
    14dc:	30 91 66 02 	lds	r19, 0x0266
    14e0:	21 15       	cp	r18, r1
    14e2:	94 e0       	ldi	r25, 0x04	; 4
    14e4:	39 07       	cpc	r19, r25
    14e6:	bc f4       	brge	.+46     	; 0x1516 <oled_write_data+0x4a>
			//printf("Outside of screen!\n");
			return -1;
		}
		oled_back_buffer[oled_back_buffer_index] = data;
    14e8:	40 91 74 01 	lds	r20, 0x0174
    14ec:	50 91 75 01 	lds	r21, 0x0175
    14f0:	fa 01       	movw	r30, r20
    14f2:	e2 0f       	add	r30, r18
    14f4:	f3 1f       	adc	r31, r19
    14f6:	80 83       	st	Z, r24
		oled_back_buffer_index++;	
    14f8:	80 91 65 02 	lds	r24, 0x0265
    14fc:	90 91 66 02 	lds	r25, 0x0266
    1500:	01 96       	adiw	r24, 0x01	; 1
    1502:	90 93 66 02 	sts	0x0266, r25
    1506:	80 93 65 02 	sts	0x0265, r24
    150a:	08 95       	ret
	}
	else{
		*oled_front_buffer = data;
    150c:	e0 91 72 01 	lds	r30, 0x0172
    1510:	f0 91 73 01 	lds	r31, 0x0173
    1514:	80 83       	st	Z, r24
    1516:	08 95       	ret

00001518 <oled_print_char>:
			oled_goto_line(line);
		}
	}
}

void oled_print_char(char character, uint8_t font_size, int invert){
    1518:	ef 92       	push	r14
    151a:	ff 92       	push	r15
    151c:	0f 93       	push	r16
    151e:	1f 93       	push	r17
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
	int font_address;
	if (font_size == 8){
    1524:	68 30       	cpi	r22, 0x08	; 8
    1526:	59 f4       	brne	.+22     	; 0x153e <oled_print_char+0x26>
		font_address = &font8[character-' '];
    1528:	08 2f       	mov	r16, r24
    152a:	10 e0       	ldi	r17, 0x00	; 0
    152c:	00 0f       	add	r16, r16
    152e:	11 1f       	adc	r17, r17
    1530:	00 0f       	add	r16, r16
    1532:	11 1f       	adc	r17, r17
    1534:	00 0f       	add	r16, r16
    1536:	11 1f       	adc	r17, r17
    1538:	0b 50       	subi	r16, 0x0B	; 11
    153a:	1d 4f       	sbci	r17, 0xFD	; 253
    153c:	1a c0       	rjmp	.+52     	; 0x1572 <oled_print_char+0x5a>
	}
	else if (font_size == 5){
    153e:	65 30       	cpi	r22, 0x05	; 5
    1540:	71 f4       	brne	.+28     	; 0x155e <oled_print_char+0x46>
		font_address = &font5[character-' '];
    1542:	08 2f       	mov	r16, r24
    1544:	10 e0       	ldi	r17, 0x00	; 0
    1546:	00 52       	subi	r16, 0x20	; 32
    1548:	11 09       	sbc	r17, r1
    154a:	c8 01       	movw	r24, r16
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	08 0f       	add	r16, r24
    1556:	19 1f       	adc	r17, r25
    1558:	06 5e       	subi	r16, 0xE6	; 230
    155a:	1d 4f       	sbci	r17, 0xFD	; 253
    155c:	0a c0       	rjmp	.+20     	; 0x1572 <oled_print_char+0x5a>
	}
	else if (font_size == 4){
    155e:	64 30       	cpi	r22, 0x04	; 4
    1560:	41 f4       	brne	.+16     	; 0x1572 <oled_print_char+0x5a>
		font_address = &font4[character-' '];
    1562:	08 2f       	mov	r16, r24
    1564:	10 e0       	ldi	r17, 0x00	; 0
    1566:	00 0f       	add	r16, r16
    1568:	11 1f       	adc	r17, r17
    156a:	00 0f       	add	r16, r16
    156c:	11 1f       	adc	r17, r17
    156e:	02 5e       	subi	r16, 0xE2	; 226
    1570:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	if(!invert){
    1572:	45 2b       	or	r20, r21
    1574:	31 f0       	breq	.+12     	; 0x1582 <oled_print_char+0x6a>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    1576:	e6 2e       	mov	r14, r22
    1578:	f1 2c       	mov	r15, r1
    157a:	1e 14       	cp	r1, r14
    157c:	1f 04       	cpc	r1, r15
    157e:	9c f0       	brlt	.+38     	; 0x15a6 <oled_print_char+0x8e>
    1580:	1f c0       	rjmp	.+62     	; 0x15c0 <oled_print_char+0xa8>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
    1582:	e6 2e       	mov	r14, r22
    1584:	f1 2c       	mov	r15, r1
    1586:	1e 14       	cp	r1, r14
    1588:	1f 04       	cpc	r1, r15
    158a:	d4 f4       	brge	.+52     	; 0x15c0 <oled_print_char+0xa8>
    158c:	c0 e0       	ldi	r28, 0x00	; 0
    158e:	d0 e0       	ldi	r29, 0x00	; 0
    1590:	fe 01       	movw	r30, r28
    1592:	e0 0f       	add	r30, r16
    1594:	f1 1f       	adc	r31, r17
			oled_write_data(pgm_read_byte(font_address + i));
    1596:	84 91       	lpm	r24, Z
    1598:	0e 94 66 0a 	call	0x14cc	; 0x14cc <oled_write_data>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
    159c:	21 96       	adiw	r28, 0x01	; 1
    159e:	ce 15       	cp	r28, r14
    15a0:	df 05       	cpc	r29, r15
    15a2:	b4 f3       	brlt	.-20     	; 0x1590 <oled_print_char+0x78>
    15a4:	0d c0       	rjmp	.+26     	; 0x15c0 <oled_print_char+0xa8>
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    15a6:	c0 e0       	ldi	r28, 0x00	; 0
    15a8:	d0 e0       	ldi	r29, 0x00	; 0
    15aa:	fe 01       	movw	r30, r28
    15ac:	e0 0f       	add	r30, r16
    15ae:	f1 1f       	adc	r31, r17
			oled_write_data(~pgm_read_byte(font_address + i));
    15b0:	84 91       	lpm	r24, Z
    15b2:	80 95       	com	r24
    15b4:	0e 94 66 0a 	call	0x14cc	; 0x14cc <oled_write_data>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    15b8:	21 96       	adiw	r28, 0x01	; 1
    15ba:	ce 15       	cp	r28, r14
    15bc:	df 05       	cpc	r29, r15
    15be:	ac f3       	brlt	.-22     	; 0x15aa <oled_print_char+0x92>
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	ff 90       	pop	r15
    15ca:	ef 90       	pop	r14
    15cc:	08 95       	ret

000015ce <oled_read_data>:
		*oled_front_buffer = data;
	}	
}

char oled_read_data(){
	if(doublebuffering){
    15ce:	80 91 78 01 	lds	r24, 0x0178
    15d2:	90 91 79 01 	lds	r25, 0x0179
    15d6:	89 2b       	or	r24, r25
    15d8:	89 f0       	breq	.+34     	; 0x15fc <oled_read_data+0x2e>
		if (oled_back_buffer_index > 1023){
    15da:	80 91 65 02 	lds	r24, 0x0265
    15de:	90 91 66 02 	lds	r25, 0x0266
    15e2:	81 15       	cp	r24, r1
    15e4:	24 e0       	ldi	r18, 0x04	; 4
    15e6:	92 07       	cpc	r25, r18
    15e8:	5c f4       	brge	.+22     	; 0x1600 <oled_read_data+0x32>
			//printf("Outside of screen!\n");
			//return -1;
			return 0x00;
		}
		return oled_back_buffer[oled_back_buffer_index];
    15ea:	20 91 74 01 	lds	r18, 0x0174
    15ee:	30 91 75 01 	lds	r19, 0x0175
    15f2:	f9 01       	movw	r30, r18
    15f4:	e8 0f       	add	r30, r24
    15f6:	f9 1f       	adc	r31, r25
    15f8:	80 81       	ld	r24, Z
    15fa:	08 95       	ret
	}
	else{
		return 0x00; //Alternatively NULL
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	08 95       	ret
char oled_read_data(){
	if(doublebuffering){
		if (oled_back_buffer_index > 1023){
			//printf("Outside of screen!\n");
			//return -1;
			return 0x00;
    1600:	80 e0       	ldi	r24, 0x00	; 0
		return oled_back_buffer[oled_back_buffer_index];
	}
	else{
		return 0x00; //Alternatively NULL
	}
}
    1602:	08 95       	ret

00001604 <oled_goto_line>:

void oled_goto_line(int line){
	if(doublebuffering){
    1604:	40 91 78 01 	lds	r20, 0x0178
    1608:	50 91 79 01 	lds	r21, 0x0179
    160c:	45 2b       	or	r20, r21
    160e:	d1 f0       	breq	.+52     	; 0x1644 <oled_goto_line+0x40>
		oled_back_buffer_index = oled_back_buffer_index % 128 + line*128;	
    1610:	20 91 65 02 	lds	r18, 0x0265
    1614:	30 91 66 02 	lds	r19, 0x0266
    1618:	2f 77       	andi	r18, 0x7F	; 127
    161a:	30 78       	andi	r19, 0x80	; 128
    161c:	33 23       	and	r19, r19
    161e:	34 f4       	brge	.+12     	; 0x162c <oled_goto_line+0x28>
    1620:	21 50       	subi	r18, 0x01	; 1
    1622:	31 09       	sbc	r19, r1
    1624:	20 68       	ori	r18, 0x80	; 128
    1626:	3f 6f       	ori	r19, 0xFF	; 255
    1628:	2f 5f       	subi	r18, 0xFF	; 255
    162a:	3f 4f       	sbci	r19, 0xFF	; 255
    162c:	96 95       	lsr	r25
    162e:	98 2f       	mov	r25, r24
    1630:	88 27       	eor	r24, r24
    1632:	97 95       	ror	r25
    1634:	87 95       	ror	r24
    1636:	28 0f       	add	r18, r24
    1638:	39 1f       	adc	r19, r25
    163a:	30 93 66 02 	sts	0x0266, r19
    163e:	20 93 65 02 	sts	0x0265, r18
    1642:	08 95       	ret
	}
	else{
		oled_write_command(0xB0 + line);
    1644:	80 55       	subi	r24, 0x50	; 80
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1646:	e0 91 76 01 	lds	r30, 0x0176
    164a:	f0 91 77 01 	lds	r31, 0x0177
    164e:	80 83       	st	Z, r24
    1650:	08 95       	ret

00001652 <oled_goto_column>:
		oled_write_command(0xB0 + line);
	}
}

void oled_goto_column(int column){ 
	if(doublebuffering){
    1652:	20 91 78 01 	lds	r18, 0x0178
    1656:	30 91 79 01 	lds	r19, 0x0179
    165a:	23 2b       	or	r18, r19
    165c:	c1 f0       	breq	.+48     	; 0x168e <oled_goto_column+0x3c>
		oled_back_buffer_index = oled_back_buffer_index - oled_back_buffer_index % 128 + column;
    165e:	40 91 65 02 	lds	r20, 0x0265
    1662:	50 91 66 02 	lds	r21, 0x0266
    1666:	9a 01       	movw	r18, r20
    1668:	2f 77       	andi	r18, 0x7F	; 127
    166a:	30 78       	andi	r19, 0x80	; 128
    166c:	33 23       	and	r19, r19
    166e:	34 f4       	brge	.+12     	; 0x167c <oled_goto_column+0x2a>
    1670:	21 50       	subi	r18, 0x01	; 1
    1672:	31 09       	sbc	r19, r1
    1674:	20 68       	ori	r18, 0x80	; 128
    1676:	3f 6f       	ori	r19, 0xFF	; 255
    1678:	2f 5f       	subi	r18, 0xFF	; 255
    167a:	3f 4f       	sbci	r19, 0xFF	; 255
    167c:	42 1b       	sub	r20, r18
    167e:	53 0b       	sbc	r21, r19
    1680:	84 0f       	add	r24, r20
    1682:	95 1f       	adc	r25, r21
    1684:	90 93 66 02 	sts	0x0266, r25
    1688:	80 93 65 02 	sts	0x0265, r24
    168c:	08 95       	ret
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    168e:	e0 91 76 01 	lds	r30, 0x0176
    1692:	f0 91 77 01 	lds	r31, 0x0177
    1696:	10 82       	st	Z, r1
    1698:	e0 91 76 01 	lds	r30, 0x0176
    169c:	f0 91 77 01 	lds	r31, 0x0177
    16a0:	80 e1       	ldi	r24, 0x10	; 16
    16a2:	80 83       	st	Z, r24
    16a4:	08 95       	ret

000016a6 <oled_print_string>:
	oled_clear_screen(); //Sets all buffer data to 0
	
	
}

void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
    16a6:	6f 92       	push	r6
    16a8:	7f 92       	push	r7
    16aa:	8f 92       	push	r8
    16ac:	9f 92       	push	r9
    16ae:	af 92       	push	r10
    16b0:	bf 92       	push	r11
    16b2:	cf 92       	push	r12
    16b4:	df 92       	push	r13
    16b6:	ef 92       	push	r14
    16b8:	ff 92       	push	r15
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	ec 01       	movw	r28, r24
    16c4:	96 2e       	mov	r9, r22
    16c6:	74 2e       	mov	r7, r20
    16c8:	82 2e       	mov	r8, r18
	oled_goto_column(column);
    16ca:	86 2f       	mov	r24, r22
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	0e 94 29 0b 	call	0x1652	; 0x1652 <oled_goto_column>
	oled_goto_line(line);
    16d2:	87 2d       	mov	r24, r7
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 02 0b 	call	0x1604	; 0x1604 <oled_goto_line>
	
	int length = strlen(string);
    16da:	fe 01       	movw	r30, r28
    16dc:	01 90       	ld	r0, Z+
    16de:	00 20       	and	r0, r0
    16e0:	e9 f7       	brne	.-6      	; 0x16dc <oled_print_string+0x36>
    16e2:	31 97       	sbiw	r30, 0x01	; 1
    16e4:	6f 01       	movw	r12, r30
    16e6:	cc 1a       	sub	r12, r28
    16e8:	dd 0a       	sbc	r13, r29
	for (int i = 0; i < length; i++){
    16ea:	1c 14       	cp	r1, r12
    16ec:	1d 04       	cpc	r1, r13
    16ee:	24 f5       	brge	.+72     	; 0x1738 <oled_print_string+0x92>
    16f0:	7e 01       	movw	r14, r28
    16f2:	c0 e0       	ldi	r28, 0x00	; 0
    16f4:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
    16f6:	8f e7       	ldi	r24, 0x7F	; 127
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	5c 01       	movw	r10, r24
    16fc:	a8 18       	sub	r10, r8
    16fe:	b1 08       	sbc	r11, r1
			column = 0;
    1700:	61 2c       	mov	r6, r1
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
    1702:	a8 01       	movw	r20, r16
    1704:	68 2d       	mov	r22, r8
    1706:	f7 01       	movw	r30, r14
    1708:	81 91       	ld	r24, Z+
    170a:	7f 01       	movw	r14, r30
    170c:	0e 94 8c 0a 	call	0x1518	; 0x1518 <oled_print_char>
		column = column + font_size;
    1710:	98 0c       	add	r9, r8
		if (column > (127 - font_size)){ //if no space for another char
    1712:	89 2d       	mov	r24, r9
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	a8 16       	cp	r10, r24
    1718:	b9 06       	cpc	r11, r25
    171a:	54 f4       	brge	.+20     	; 0x1730 <oled_print_string+0x8a>
			column = 0;
			line++;
    171c:	73 94       	inc	r7
			oled_goto_column(column);
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 29 0b 	call	0x1652	; 0x1652 <oled_goto_column>
			oled_goto_line(line);
    1726:	87 2d       	mov	r24, r7
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	0e 94 02 0b 	call	0x1604	; 0x1604 <oled_goto_line>
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
			column = 0;
    172e:	96 2c       	mov	r9, r6
void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
    1730:	21 96       	adiw	r28, 0x01	; 1
    1732:	cc 16       	cp	r12, r28
    1734:	dd 06       	cpc	r13, r29
    1736:	29 f7       	brne	.-54     	; 0x1702 <oled_print_string+0x5c>
			line++;
			oled_goto_column(column);
			oled_goto_line(line);
		}
	}
}
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	ff 90       	pop	r15
    1742:	ef 90       	pop	r14
    1744:	df 90       	pop	r13
    1746:	cf 90       	pop	r12
    1748:	bf 90       	pop	r11
    174a:	af 90       	pop	r10
    174c:	9f 90       	pop	r9
    174e:	8f 90       	pop	r8
    1750:	7f 90       	pop	r7
    1752:	6f 90       	pop	r6
    1754:	08 95       	ret

00001756 <oled_clear_line>:
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
	}
}

void oled_clear_line(int line){
    1756:	cf 93       	push	r28
	oled_goto_line(line);
    1758:	0e 94 02 0b 	call	0x1604	; 0x1604 <oled_goto_line>
	oled_goto_column(0);
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 29 0b 	call	0x1652	; 0x1652 <oled_goto_column>
	for (uint8_t i = 0; i < 128; i++){
    1764:	c0 e0       	ldi	r28, 0x00	; 0
		oled_write_data(0x00);
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	0e 94 66 0a 	call	0x14cc	; 0x14cc <oled_write_data>
}

void oled_clear_line(int line){
	oled_goto_line(line);
	oled_goto_column(0);
	for (uint8_t i = 0; i < 128; i++){
    176c:	cf 5f       	subi	r28, 0xFF	; 255
    176e:	c0 38       	cpi	r28, 0x80	; 128
    1770:	d1 f7       	brne	.-12     	; 0x1766 <oled_clear_line+0x10>
		oled_write_data(0x00);
	}
}
    1772:	cf 91       	pop	r28
    1774:	08 95       	ret

00001776 <oled_clear_screen>:
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}

void oled_clear_screen(){
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	c0 e0       	ldi	r28, 0x00	; 0
    177c:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
    177e:	ce 01       	movw	r24, r28
    1780:	0e 94 ab 0b 	call	0x1756	; 0x1756 <oled_clear_line>
    1784:	21 96       	adiw	r28, 0x01	; 1
		}
	}
}

void oled_clear_screen(){
	for (uint8_t line = 0; line < 8; line++){
    1786:	c8 30       	cpi	r28, 0x08	; 8
    1788:	d1 05       	cpc	r29, r1
    178a:	c9 f7       	brne	.-14     	; 0x177e <oled_clear_screen+0x8>
		oled_clear_line(line);
	}
}
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	08 95       	ret

00001792 <oled_init>:
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1792:	e0 91 76 01 	lds	r30, 0x0176
    1796:	f0 91 77 01 	lds	r31, 0x0177
    179a:	8e ea       	ldi	r24, 0xAE	; 174
    179c:	80 83       	st	Z, r24
    179e:	e0 91 76 01 	lds	r30, 0x0176
    17a2:	f0 91 77 01 	lds	r31, 0x0177
    17a6:	81 ea       	ldi	r24, 0xA1	; 161
    17a8:	80 83       	st	Z, r24
    17aa:	e0 91 76 01 	lds	r30, 0x0176
    17ae:	f0 91 77 01 	lds	r31, 0x0177
    17b2:	8a ed       	ldi	r24, 0xDA	; 218
    17b4:	80 83       	st	Z, r24
    17b6:	e0 91 76 01 	lds	r30, 0x0176
    17ba:	f0 91 77 01 	lds	r31, 0x0177
    17be:	82 e1       	ldi	r24, 0x12	; 18
    17c0:	80 83       	st	Z, r24
    17c2:	e0 91 76 01 	lds	r30, 0x0176
    17c6:	f0 91 77 01 	lds	r31, 0x0177
    17ca:	88 ec       	ldi	r24, 0xC8	; 200
    17cc:	80 83       	st	Z, r24
    17ce:	e0 91 76 01 	lds	r30, 0x0176
    17d2:	f0 91 77 01 	lds	r31, 0x0177
    17d6:	88 ea       	ldi	r24, 0xA8	; 168
    17d8:	80 83       	st	Z, r24
    17da:	e0 91 76 01 	lds	r30, 0x0176
    17de:	f0 91 77 01 	lds	r31, 0x0177
    17e2:	8f e3       	ldi	r24, 0x3F	; 63
    17e4:	80 83       	st	Z, r24
    17e6:	e0 91 76 01 	lds	r30, 0x0176
    17ea:	f0 91 77 01 	lds	r31, 0x0177
    17ee:	85 ed       	ldi	r24, 0xD5	; 213
    17f0:	80 83       	st	Z, r24
    17f2:	e0 91 76 01 	lds	r30, 0x0176
    17f6:	f0 91 77 01 	lds	r31, 0x0177
    17fa:	80 e8       	ldi	r24, 0x80	; 128
    17fc:	80 83       	st	Z, r24
    17fe:	e0 91 76 01 	lds	r30, 0x0176
    1802:	f0 91 77 01 	lds	r31, 0x0177
    1806:	81 e8       	ldi	r24, 0x81	; 129
    1808:	80 83       	st	Z, r24
    180a:	e0 91 76 01 	lds	r30, 0x0176
    180e:	f0 91 77 01 	lds	r31, 0x0177
    1812:	80 e5       	ldi	r24, 0x50	; 80
    1814:	80 83       	st	Z, r24
    1816:	e0 91 76 01 	lds	r30, 0x0176
    181a:	f0 91 77 01 	lds	r31, 0x0177
    181e:	89 ed       	ldi	r24, 0xD9	; 217
    1820:	80 83       	st	Z, r24
    1822:	e0 91 76 01 	lds	r30, 0x0176
    1826:	f0 91 77 01 	lds	r31, 0x0177
    182a:	81 e2       	ldi	r24, 0x21	; 33
    182c:	80 83       	st	Z, r24
    182e:	e0 91 76 01 	lds	r30, 0x0176
    1832:	f0 91 77 01 	lds	r31, 0x0177
    1836:	80 e2       	ldi	r24, 0x20	; 32
    1838:	80 83       	st	Z, r24
    183a:	e0 91 76 01 	lds	r30, 0x0176
    183e:	f0 91 77 01 	lds	r31, 0x0177
    1842:	82 e0       	ldi	r24, 0x02	; 2
    1844:	80 83       	st	Z, r24
    1846:	e0 91 76 01 	lds	r30, 0x0176
    184a:	f0 91 77 01 	lds	r31, 0x0177
    184e:	8b ed       	ldi	r24, 0xDB	; 219
    1850:	80 83       	st	Z, r24
    1852:	e0 91 76 01 	lds	r30, 0x0176
    1856:	f0 91 77 01 	lds	r31, 0x0177
    185a:	80 e3       	ldi	r24, 0x30	; 48
    185c:	80 83       	st	Z, r24
    185e:	e0 91 76 01 	lds	r30, 0x0176
    1862:	f0 91 77 01 	lds	r31, 0x0177
    1866:	8d ea       	ldi	r24, 0xAD	; 173
    1868:	80 83       	st	Z, r24
    186a:	e0 91 76 01 	lds	r30, 0x0176
    186e:	f0 91 77 01 	lds	r31, 0x0177
    1872:	10 82       	st	Z, r1
    1874:	e0 91 76 01 	lds	r30, 0x0176
    1878:	f0 91 77 01 	lds	r31, 0x0177
    187c:	84 ea       	ldi	r24, 0xA4	; 164
    187e:	80 83       	st	Z, r24
    1880:	e0 91 76 01 	lds	r30, 0x0176
    1884:	f0 91 77 01 	lds	r31, 0x0177
    1888:	86 ea       	ldi	r24, 0xA6	; 166
    188a:	80 83       	st	Z, r24
    188c:	e0 91 76 01 	lds	r30, 0x0176
    1890:	f0 91 77 01 	lds	r31, 0x0177
    1894:	8f ea       	ldi	r24, 0xAF	; 175
    1896:	80 83       	st	Z, r24
	oled_write_command(0xad); //master configuration
	oled_write_command(0x00);
	oled_write_command(0xa4); //out follows RAM content
	oled_write_command(0xa6); //set normal display
	oled_write_command(0xaf); // display on
	oled_clear_screen(); //Sets all buffer data to 0
    1898:	0e 94 bb 0b 	call	0x1776	; 0x1776 <oled_clear_screen>
    189c:	08 95       	ret

0000189e <oled_refresh>:
		oled_write_command(lower);
		oled_write_command(0b00010000 | upper);
	}
}

void oled_refresh(){
    189e:	cf 93       	push	r28
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    18a0:	e0 91 76 01 	lds	r30, 0x0176
    18a4:	f0 91 77 01 	lds	r31, 0x0177
    18a8:	10 82       	st	Z, r1
    18aa:	e0 91 76 01 	lds	r30, 0x0176
    18ae:	f0 91 77 01 	lds	r31, 0x0177
    18b2:	80 e1       	ldi	r24, 0x10	; 16
    18b4:	80 83       	st	Z, r24
	uint8_t lower = 0 & 0b00001111; // set column to 0
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
    18b6:	80 91 78 01 	lds	r24, 0x0178
    18ba:	90 91 79 01 	lds	r25, 0x0179
    18be:	89 2b       	or	r24, r25
    18c0:	21 f1       	breq	.+72     	; 0x190a <oled_refresh+0x6c>
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	50 e0       	ldi	r21, 0x00	; 0
    18c6:	60 eb       	ldi	r22, 0xB0	; 176
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    18c8:	c0 e0       	ldi	r28, 0x00	; 0
    18ca:	70 e0       	ldi	r23, 0x00	; 0
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    18cc:	e0 91 76 01 	lds	r30, 0x0176
    18d0:	f0 91 77 01 	lds	r31, 0x0177
    18d4:	60 83       	st	Z, r22
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    18d6:	8c 2f       	mov	r24, r28
    18d8:	97 2f       	mov	r25, r23
				*oled_front_buffer = oled_back_buffer[column + page*128];
    18da:	e0 91 72 01 	lds	r30, 0x0172
    18de:	f0 91 73 01 	lds	r31, 0x0173
    18e2:	9c 01       	movw	r18, r24
    18e4:	24 0f       	add	r18, r20
    18e6:	35 1f       	adc	r19, r21
    18e8:	a0 91 74 01 	lds	r26, 0x0174
    18ec:	b0 91 75 01 	lds	r27, 0x0175
    18f0:	a2 0f       	add	r26, r18
    18f2:	b3 1f       	adc	r27, r19
    18f4:	2c 91       	ld	r18, X
    18f6:	20 83       	st	Z, r18
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	80 38       	cpi	r24, 0x80	; 128
    18fc:	91 05       	cpc	r25, r1
    18fe:	69 f7       	brne	.-38     	; 0x18da <oled_refresh+0x3c>
    1900:	6f 5f       	subi	r22, 0xFF	; 255
    1902:	40 58       	subi	r20, 0x80	; 128
    1904:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
    1906:	68 3b       	cpi	r22, 0xB8	; 184
    1908:	09 f7       	brne	.-62     	; 0x18cc <oled_refresh+0x2e>
			for(int column = 0; column < 128; column++){
				*oled_front_buffer = oled_back_buffer[column + page*128];
			}
		}	
	}
}
    190a:	cf 91       	pop	r28
    190c:	08 95       	ret

0000190e <oled_invert_pixel>:
	oled_goto_column(x);
	oled_goto_line(y/8);
	oled_write_data(~(1 << (y % 8)) & oled_read_data());
}

void oled_invert_pixel(int x, int y){
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	eb 01       	movw	r28, r22
	oled_goto_column(x);
    1914:	0e 94 29 0b 	call	0x1652	; 0x1652 <oled_goto_column>
	oled_goto_line(y/8);
    1918:	ce 01       	movw	r24, r28
    191a:	dd 23       	and	r29, r29
    191c:	0c f4       	brge	.+2      	; 0x1920 <oled_invert_pixel+0x12>
    191e:	07 96       	adiw	r24, 0x07	; 7
    1920:	95 95       	asr	r25
    1922:	87 95       	ror	r24
    1924:	95 95       	asr	r25
    1926:	87 95       	ror	r24
    1928:	95 95       	asr	r25
    192a:	87 95       	ror	r24
    192c:	0e 94 02 0b 	call	0x1604	; 0x1604 <oled_goto_line>
	oled_write_data((1 << (y % 8)) ^ oled_read_data()); //exclusive or
    1930:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <oled_read_data>
    1934:	be 01       	movw	r22, r28
    1936:	67 70       	andi	r22, 0x07	; 7
    1938:	70 78       	andi	r23, 0x80	; 128
    193a:	77 23       	and	r23, r23
    193c:	34 f4       	brge	.+12     	; 0x194a <oled_invert_pixel+0x3c>
    193e:	61 50       	subi	r22, 0x01	; 1
    1940:	71 09       	sbc	r23, r1
    1942:	68 6f       	ori	r22, 0xF8	; 248
    1944:	7f 6f       	ori	r23, 0xFF	; 255
    1946:	6f 5f       	subi	r22, 0xFF	; 255
    1948:	7f 4f       	sbci	r23, 0xFF	; 255
    194a:	21 e0       	ldi	r18, 0x01	; 1
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	a9 01       	movw	r20, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <oled_invert_pixel+0x48>
    1952:	44 0f       	add	r20, r20
    1954:	55 1f       	adc	r21, r21
    1956:	6a 95       	dec	r22
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <oled_invert_pixel+0x44>
    195a:	84 27       	eor	r24, r20
    195c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <oled_write_data>
}
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	08 95       	ret

00001966 <oled_invert_rectangle>:
	}
	
	//not finished
}

void oled_invert_rectangle(int x1, int y1, int x2, int y2){
    1966:	8f 92       	push	r8
    1968:	9f 92       	push	r9
    196a:	af 92       	push	r10
    196c:	bf 92       	push	r11
    196e:	cf 92       	push	r12
    1970:	df 92       	push	r13
    1972:	ef 92       	push	r14
    1974:	ff 92       	push	r15
    1976:	0f 93       	push	r16
    1978:	1f 93       	push	r17
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	8c 01       	movw	r16, r24
    1980:	6b 01       	movw	r12, r22
    1982:	5a 01       	movw	r10, r20
    1984:	79 01       	movw	r14, r18
	for (int x = x1; x < x2; x++){
    1986:	84 17       	cp	r24, r20
    1988:	95 07       	cpc	r25, r21
    198a:	b4 f4       	brge	.+44     	; 0x19b8 <oled_invert_rectangle+0x52>
		for (int y = y1; y < y2; y++){
    198c:	86 2e       	mov	r8, r22
    198e:	9d 2c       	mov	r9, r13
    1990:	0d c0       	rjmp	.+26     	; 0x19ac <oled_invert_rectangle+0x46>
			oled_invert_pixel(x, y);
    1992:	be 01       	movw	r22, r28
    1994:	c8 01       	movw	r24, r16
    1996:	0e 94 87 0c 	call	0x190e	; 0x190e <oled_invert_pixel>
	//not finished
}

void oled_invert_rectangle(int x1, int y1, int x2, int y2){
	for (int x = x1; x < x2; x++){
		for (int y = y1; y < y2; y++){
    199a:	21 96       	adiw	r28, 0x01	; 1
    199c:	ce 15       	cp	r28, r14
    199e:	df 05       	cpc	r29, r15
    19a0:	c4 f3       	brlt	.-16     	; 0x1992 <oled_invert_rectangle+0x2c>
	
	//not finished
}

void oled_invert_rectangle(int x1, int y1, int x2, int y2){
	for (int x = x1; x < x2; x++){
    19a2:	0f 5f       	subi	r16, 0xFF	; 255
    19a4:	1f 4f       	sbci	r17, 0xFF	; 255
    19a6:	0a 15       	cp	r16, r10
    19a8:	1b 05       	cpc	r17, r11
    19aa:	34 f4       	brge	.+12     	; 0x19b8 <oled_invert_rectangle+0x52>
		for (int y = y1; y < y2; y++){
    19ac:	ce 14       	cp	r12, r14
    19ae:	df 04       	cpc	r13, r15
    19b0:	c4 f7       	brge	.-16     	; 0x19a2 <oled_invert_rectangle+0x3c>
    19b2:	c8 2d       	mov	r28, r8
    19b4:	d9 2d       	mov	r29, r9
    19b6:	ed cf       	rjmp	.-38     	; 0x1992 <oled_invert_rectangle+0x2c>
			oled_invert_pixel(x, y);
		}
	}
}
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	ff 90       	pop	r15
    19c2:	ef 90       	pop	r14
    19c4:	df 90       	pop	r13
    19c6:	cf 90       	pop	r12
    19c8:	bf 90       	pop	r11
    19ca:	af 90       	pop	r10
    19cc:	9f 90       	pop	r9
    19ce:	8f 90       	pop	r8
    19d0:	08 95       	ret

000019d2 <touch_init>:
#include <avr/io.h>
#include "touch.h"

void touch_init(){
	clear_bit(DDRB, PB0); //Set DDR to input for button
    19d2:	b8 98       	cbi	0x17, 0	; 23
	clear_bit(DDRB, PB1); //Set DDR to input for button
    19d4:	b9 98       	cbi	0x17, 1	; 23
    19d6:	08 95       	ret

000019d8 <__subsf3>:
    19d8:	50 58       	subi	r21, 0x80	; 128

000019da <__addsf3>:
    19da:	bb 27       	eor	r27, r27
    19dc:	aa 27       	eor	r26, r26
    19de:	0e d0       	rcall	.+28     	; 0x19fc <__addsf3x>
    19e0:	d4 c1       	rjmp	.+936    	; 0x1d8a <__fp_round>
    19e2:	c5 d1       	rcall	.+906    	; 0x1d6e <__fp_pscA>
    19e4:	30 f0       	brcs	.+12     	; 0x19f2 <__addsf3+0x18>
    19e6:	ca d1       	rcall	.+916    	; 0x1d7c <__fp_pscB>
    19e8:	20 f0       	brcs	.+8      	; 0x19f2 <__addsf3+0x18>
    19ea:	31 f4       	brne	.+12     	; 0x19f8 <__addsf3+0x1e>
    19ec:	9f 3f       	cpi	r25, 0xFF	; 255
    19ee:	11 f4       	brne	.+4      	; 0x19f4 <__addsf3+0x1a>
    19f0:	1e f4       	brtc	.+6      	; 0x19f8 <__addsf3+0x1e>
    19f2:	95 c1       	rjmp	.+810    	; 0x1d1e <__fp_nan>
    19f4:	0e f4       	brtc	.+2      	; 0x19f8 <__addsf3+0x1e>
    19f6:	e0 95       	com	r30
    19f8:	e7 fb       	bst	r30, 7
    19fa:	8b c1       	rjmp	.+790    	; 0x1d12 <__fp_inf>

000019fc <__addsf3x>:
    19fc:	e9 2f       	mov	r30, r25
    19fe:	d6 d1       	rcall	.+940    	; 0x1dac <__fp_split3>
    1a00:	80 f3       	brcs	.-32     	; 0x19e2 <__addsf3+0x8>
    1a02:	ba 17       	cp	r27, r26
    1a04:	62 07       	cpc	r22, r18
    1a06:	73 07       	cpc	r23, r19
    1a08:	84 07       	cpc	r24, r20
    1a0a:	95 07       	cpc	r25, r21
    1a0c:	18 f0       	brcs	.+6      	; 0x1a14 <__addsf3x+0x18>
    1a0e:	71 f4       	brne	.+28     	; 0x1a2c <__addsf3x+0x30>
    1a10:	9e f5       	brtc	.+102    	; 0x1a78 <__addsf3x+0x7c>
    1a12:	ee c1       	rjmp	.+988    	; 0x1df0 <__fp_zero>
    1a14:	0e f4       	brtc	.+2      	; 0x1a18 <__addsf3x+0x1c>
    1a16:	e0 95       	com	r30
    1a18:	0b 2e       	mov	r0, r27
    1a1a:	ba 2f       	mov	r27, r26
    1a1c:	a0 2d       	mov	r26, r0
    1a1e:	0b 01       	movw	r0, r22
    1a20:	b9 01       	movw	r22, r18
    1a22:	90 01       	movw	r18, r0
    1a24:	0c 01       	movw	r0, r24
    1a26:	ca 01       	movw	r24, r20
    1a28:	a0 01       	movw	r20, r0
    1a2a:	11 24       	eor	r1, r1
    1a2c:	ff 27       	eor	r31, r31
    1a2e:	59 1b       	sub	r21, r25
    1a30:	99 f0       	breq	.+38     	; 0x1a58 <__addsf3x+0x5c>
    1a32:	59 3f       	cpi	r21, 0xF9	; 249
    1a34:	50 f4       	brcc	.+20     	; 0x1a4a <__addsf3x+0x4e>
    1a36:	50 3e       	cpi	r21, 0xE0	; 224
    1a38:	68 f1       	brcs	.+90     	; 0x1a94 <__addsf3x+0x98>
    1a3a:	1a 16       	cp	r1, r26
    1a3c:	f0 40       	sbci	r31, 0x00	; 0
    1a3e:	a2 2f       	mov	r26, r18
    1a40:	23 2f       	mov	r18, r19
    1a42:	34 2f       	mov	r19, r20
    1a44:	44 27       	eor	r20, r20
    1a46:	58 5f       	subi	r21, 0xF8	; 248
    1a48:	f3 cf       	rjmp	.-26     	; 0x1a30 <__addsf3x+0x34>
    1a4a:	46 95       	lsr	r20
    1a4c:	37 95       	ror	r19
    1a4e:	27 95       	ror	r18
    1a50:	a7 95       	ror	r26
    1a52:	f0 40       	sbci	r31, 0x00	; 0
    1a54:	53 95       	inc	r21
    1a56:	c9 f7       	brne	.-14     	; 0x1a4a <__addsf3x+0x4e>
    1a58:	7e f4       	brtc	.+30     	; 0x1a78 <__addsf3x+0x7c>
    1a5a:	1f 16       	cp	r1, r31
    1a5c:	ba 0b       	sbc	r27, r26
    1a5e:	62 0b       	sbc	r22, r18
    1a60:	73 0b       	sbc	r23, r19
    1a62:	84 0b       	sbc	r24, r20
    1a64:	ba f0       	brmi	.+46     	; 0x1a94 <__addsf3x+0x98>
    1a66:	91 50       	subi	r25, 0x01	; 1
    1a68:	a1 f0       	breq	.+40     	; 0x1a92 <__addsf3x+0x96>
    1a6a:	ff 0f       	add	r31, r31
    1a6c:	bb 1f       	adc	r27, r27
    1a6e:	66 1f       	adc	r22, r22
    1a70:	77 1f       	adc	r23, r23
    1a72:	88 1f       	adc	r24, r24
    1a74:	c2 f7       	brpl	.-16     	; 0x1a66 <__addsf3x+0x6a>
    1a76:	0e c0       	rjmp	.+28     	; 0x1a94 <__addsf3x+0x98>
    1a78:	ba 0f       	add	r27, r26
    1a7a:	62 1f       	adc	r22, r18
    1a7c:	73 1f       	adc	r23, r19
    1a7e:	84 1f       	adc	r24, r20
    1a80:	48 f4       	brcc	.+18     	; 0x1a94 <__addsf3x+0x98>
    1a82:	87 95       	ror	r24
    1a84:	77 95       	ror	r23
    1a86:	67 95       	ror	r22
    1a88:	b7 95       	ror	r27
    1a8a:	f7 95       	ror	r31
    1a8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a8e:	08 f0       	brcs	.+2      	; 0x1a92 <__addsf3x+0x96>
    1a90:	b3 cf       	rjmp	.-154    	; 0x19f8 <__addsf3+0x1e>
    1a92:	93 95       	inc	r25
    1a94:	88 0f       	add	r24, r24
    1a96:	08 f0       	brcs	.+2      	; 0x1a9a <__addsf3x+0x9e>
    1a98:	99 27       	eor	r25, r25
    1a9a:	ee 0f       	add	r30, r30
    1a9c:	97 95       	ror	r25
    1a9e:	87 95       	ror	r24
    1aa0:	08 95       	ret
    1aa2:	65 d1       	rcall	.+714    	; 0x1d6e <__fp_pscA>
    1aa4:	58 f0       	brcs	.+22     	; 0x1abc <__addsf3x+0xc0>
    1aa6:	80 e8       	ldi	r24, 0x80	; 128
    1aa8:	91 e0       	ldi	r25, 0x01	; 1
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <__addsf3x+0xb2>
    1aac:	9e ef       	ldi	r25, 0xFE	; 254
    1aae:	66 d1       	rcall	.+716    	; 0x1d7c <__fp_pscB>
    1ab0:	28 f0       	brcs	.+10     	; 0x1abc <__addsf3x+0xc0>
    1ab2:	40 e8       	ldi	r20, 0x80	; 128
    1ab4:	51 e0       	ldi	r21, 0x01	; 1
    1ab6:	59 f4       	brne	.+22     	; 0x1ace <atan2+0xe>
    1ab8:	5e ef       	ldi	r21, 0xFE	; 254
    1aba:	09 c0       	rjmp	.+18     	; 0x1ace <atan2+0xe>
    1abc:	30 c1       	rjmp	.+608    	; 0x1d1e <__fp_nan>
    1abe:	98 c1       	rjmp	.+816    	; 0x1df0 <__fp_zero>

00001ac0 <atan2>:
    1ac0:	e9 2f       	mov	r30, r25
    1ac2:	e0 78       	andi	r30, 0x80	; 128
    1ac4:	73 d1       	rcall	.+742    	; 0x1dac <__fp_split3>
    1ac6:	68 f3       	brcs	.-38     	; 0x1aa2 <__addsf3x+0xa6>
    1ac8:	09 2e       	mov	r0, r25
    1aca:	05 2a       	or	r0, r21
    1acc:	c1 f3       	breq	.-16     	; 0x1abe <__addsf3x+0xc2>
    1ace:	26 17       	cp	r18, r22
    1ad0:	37 07       	cpc	r19, r23
    1ad2:	48 07       	cpc	r20, r24
    1ad4:	59 07       	cpc	r21, r25
    1ad6:	38 f0       	brcs	.+14     	; 0x1ae6 <atan2+0x26>
    1ad8:	0e 2e       	mov	r0, r30
    1ada:	07 f8       	bld	r0, 7
    1adc:	e0 25       	eor	r30, r0
    1ade:	69 f0       	breq	.+26     	; 0x1afa <atan2+0x3a>
    1ae0:	e0 25       	eor	r30, r0
    1ae2:	e0 64       	ori	r30, 0x40	; 64
    1ae4:	0a c0       	rjmp	.+20     	; 0x1afa <atan2+0x3a>
    1ae6:	ef 63       	ori	r30, 0x3F	; 63
    1ae8:	07 f8       	bld	r0, 7
    1aea:	00 94       	com	r0
    1aec:	07 fa       	bst	r0, 7
    1aee:	db 01       	movw	r26, r22
    1af0:	b9 01       	movw	r22, r18
    1af2:	9d 01       	movw	r18, r26
    1af4:	dc 01       	movw	r26, r24
    1af6:	ca 01       	movw	r24, r20
    1af8:	ad 01       	movw	r20, r26
    1afa:	ef 93       	push	r30
    1afc:	43 d0       	rcall	.+134    	; 0x1b84 <__divsf3_pse>
    1afe:	45 d1       	rcall	.+650    	; 0x1d8a <__fp_round>
    1b00:	0a d0       	rcall	.+20     	; 0x1b16 <atan>
    1b02:	5f 91       	pop	r21
    1b04:	55 23       	and	r21, r21
    1b06:	31 f0       	breq	.+12     	; 0x1b14 <atan2+0x54>
    1b08:	2b ed       	ldi	r18, 0xDB	; 219
    1b0a:	3f e0       	ldi	r19, 0x0F	; 15
    1b0c:	49 e4       	ldi	r20, 0x49	; 73
    1b0e:	50 fd       	sbrc	r21, 0
    1b10:	49 ec       	ldi	r20, 0xC9	; 201
    1b12:	63 cf       	rjmp	.-314    	; 0x19da <__addsf3>
    1b14:	08 95       	ret

00001b16 <atan>:
    1b16:	df 93       	push	r29
    1b18:	dd 27       	eor	r29, r29
    1b1a:	b9 2f       	mov	r27, r25
    1b1c:	bf 77       	andi	r27, 0x7F	; 127
    1b1e:	40 e8       	ldi	r20, 0x80	; 128
    1b20:	5f e3       	ldi	r21, 0x3F	; 63
    1b22:	16 16       	cp	r1, r22
    1b24:	17 06       	cpc	r1, r23
    1b26:	48 07       	cpc	r20, r24
    1b28:	5b 07       	cpc	r21, r27
    1b2a:	10 f4       	brcc	.+4      	; 0x1b30 <atan+0x1a>
    1b2c:	d9 2f       	mov	r29, r25
    1b2e:	67 d1       	rcall	.+718    	; 0x1dfe <inverse>
    1b30:	9f 93       	push	r25
    1b32:	8f 93       	push	r24
    1b34:	7f 93       	push	r23
    1b36:	6f 93       	push	r22
    1b38:	0e d2       	rcall	.+1052   	; 0x1f56 <square>
    1b3a:	e0 e7       	ldi	r30, 0x70	; 112
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	f2 d0       	rcall	.+484    	; 0x1d24 <__fp_powser>
    1b40:	24 d1       	rcall	.+584    	; 0x1d8a <__fp_round>
    1b42:	2f 91       	pop	r18
    1b44:	3f 91       	pop	r19
    1b46:	4f 91       	pop	r20
    1b48:	5f 91       	pop	r21
    1b4a:	6c d1       	rcall	.+728    	; 0x1e24 <__mulsf3x>
    1b4c:	dd 23       	and	r29, r29
    1b4e:	49 f0       	breq	.+18     	; 0x1b62 <atan+0x4c>
    1b50:	90 58       	subi	r25, 0x80	; 128
    1b52:	a2 ea       	ldi	r26, 0xA2	; 162
    1b54:	2a ed       	ldi	r18, 0xDA	; 218
    1b56:	3f e0       	ldi	r19, 0x0F	; 15
    1b58:	49 ec       	ldi	r20, 0xC9	; 201
    1b5a:	5f e3       	ldi	r21, 0x3F	; 63
    1b5c:	d0 78       	andi	r29, 0x80	; 128
    1b5e:	5d 27       	eor	r21, r29
    1b60:	4d df       	rcall	.-358    	; 0x19fc <__addsf3x>
    1b62:	df 91       	pop	r29
    1b64:	12 c1       	rjmp	.+548    	; 0x1d8a <__fp_round>

00001b66 <__divsf3>:
    1b66:	0c d0       	rcall	.+24     	; 0x1b80 <__divsf3x>
    1b68:	10 c1       	rjmp	.+544    	; 0x1d8a <__fp_round>
    1b6a:	08 d1       	rcall	.+528    	; 0x1d7c <__fp_pscB>
    1b6c:	40 f0       	brcs	.+16     	; 0x1b7e <__divsf3+0x18>
    1b6e:	ff d0       	rcall	.+510    	; 0x1d6e <__fp_pscA>
    1b70:	30 f0       	brcs	.+12     	; 0x1b7e <__divsf3+0x18>
    1b72:	21 f4       	brne	.+8      	; 0x1b7c <__divsf3+0x16>
    1b74:	5f 3f       	cpi	r21, 0xFF	; 255
    1b76:	19 f0       	breq	.+6      	; 0x1b7e <__divsf3+0x18>
    1b78:	cc c0       	rjmp	.+408    	; 0x1d12 <__fp_inf>
    1b7a:	51 11       	cpse	r21, r1
    1b7c:	3a c1       	rjmp	.+628    	; 0x1df2 <__fp_szero>
    1b7e:	cf c0       	rjmp	.+414    	; 0x1d1e <__fp_nan>

00001b80 <__divsf3x>:
    1b80:	15 d1       	rcall	.+554    	; 0x1dac <__fp_split3>
    1b82:	98 f3       	brcs	.-26     	; 0x1b6a <__divsf3+0x4>

00001b84 <__divsf3_pse>:
    1b84:	99 23       	and	r25, r25
    1b86:	c9 f3       	breq	.-14     	; 0x1b7a <__divsf3+0x14>
    1b88:	55 23       	and	r21, r21
    1b8a:	b1 f3       	breq	.-20     	; 0x1b78 <__divsf3+0x12>
    1b8c:	95 1b       	sub	r25, r21
    1b8e:	55 0b       	sbc	r21, r21
    1b90:	bb 27       	eor	r27, r27
    1b92:	aa 27       	eor	r26, r26
    1b94:	62 17       	cp	r22, r18
    1b96:	73 07       	cpc	r23, r19
    1b98:	84 07       	cpc	r24, r20
    1b9a:	38 f0       	brcs	.+14     	; 0x1baa <__divsf3_pse+0x26>
    1b9c:	9f 5f       	subi	r25, 0xFF	; 255
    1b9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba0:	22 0f       	add	r18, r18
    1ba2:	33 1f       	adc	r19, r19
    1ba4:	44 1f       	adc	r20, r20
    1ba6:	aa 1f       	adc	r26, r26
    1ba8:	a9 f3       	breq	.-22     	; 0x1b94 <__divsf3_pse+0x10>
    1baa:	33 d0       	rcall	.+102    	; 0x1c12 <__divsf3_pse+0x8e>
    1bac:	0e 2e       	mov	r0, r30
    1bae:	3a f0       	brmi	.+14     	; 0x1bbe <__divsf3_pse+0x3a>
    1bb0:	e0 e8       	ldi	r30, 0x80	; 128
    1bb2:	30 d0       	rcall	.+96     	; 0x1c14 <__divsf3_pse+0x90>
    1bb4:	91 50       	subi	r25, 0x01	; 1
    1bb6:	50 40       	sbci	r21, 0x00	; 0
    1bb8:	e6 95       	lsr	r30
    1bba:	00 1c       	adc	r0, r0
    1bbc:	ca f7       	brpl	.-14     	; 0x1bb0 <__divsf3_pse+0x2c>
    1bbe:	29 d0       	rcall	.+82     	; 0x1c12 <__divsf3_pse+0x8e>
    1bc0:	fe 2f       	mov	r31, r30
    1bc2:	27 d0       	rcall	.+78     	; 0x1c12 <__divsf3_pse+0x8e>
    1bc4:	66 0f       	add	r22, r22
    1bc6:	77 1f       	adc	r23, r23
    1bc8:	88 1f       	adc	r24, r24
    1bca:	bb 1f       	adc	r27, r27
    1bcc:	26 17       	cp	r18, r22
    1bce:	37 07       	cpc	r19, r23
    1bd0:	48 07       	cpc	r20, r24
    1bd2:	ab 07       	cpc	r26, r27
    1bd4:	b0 e8       	ldi	r27, 0x80	; 128
    1bd6:	09 f0       	breq	.+2      	; 0x1bda <__divsf3_pse+0x56>
    1bd8:	bb 0b       	sbc	r27, r27
    1bda:	80 2d       	mov	r24, r0
    1bdc:	bf 01       	movw	r22, r30
    1bde:	ff 27       	eor	r31, r31
    1be0:	93 58       	subi	r25, 0x83	; 131
    1be2:	5f 4f       	sbci	r21, 0xFF	; 255
    1be4:	2a f0       	brmi	.+10     	; 0x1bf0 <__divsf3_pse+0x6c>
    1be6:	9e 3f       	cpi	r25, 0xFE	; 254
    1be8:	51 05       	cpc	r21, r1
    1bea:	68 f0       	brcs	.+26     	; 0x1c06 <__divsf3_pse+0x82>
    1bec:	92 c0       	rjmp	.+292    	; 0x1d12 <__fp_inf>
    1bee:	01 c1       	rjmp	.+514    	; 0x1df2 <__fp_szero>
    1bf0:	5f 3f       	cpi	r21, 0xFF	; 255
    1bf2:	ec f3       	brlt	.-6      	; 0x1bee <__divsf3_pse+0x6a>
    1bf4:	98 3e       	cpi	r25, 0xE8	; 232
    1bf6:	dc f3       	brlt	.-10     	; 0x1bee <__divsf3_pse+0x6a>
    1bf8:	86 95       	lsr	r24
    1bfa:	77 95       	ror	r23
    1bfc:	67 95       	ror	r22
    1bfe:	b7 95       	ror	r27
    1c00:	f7 95       	ror	r31
    1c02:	9f 5f       	subi	r25, 0xFF	; 255
    1c04:	c9 f7       	brne	.-14     	; 0x1bf8 <__divsf3_pse+0x74>
    1c06:	88 0f       	add	r24, r24
    1c08:	91 1d       	adc	r25, r1
    1c0a:	96 95       	lsr	r25
    1c0c:	87 95       	ror	r24
    1c0e:	97 f9       	bld	r25, 7
    1c10:	08 95       	ret
    1c12:	e1 e0       	ldi	r30, 0x01	; 1
    1c14:	66 0f       	add	r22, r22
    1c16:	77 1f       	adc	r23, r23
    1c18:	88 1f       	adc	r24, r24
    1c1a:	bb 1f       	adc	r27, r27
    1c1c:	62 17       	cp	r22, r18
    1c1e:	73 07       	cpc	r23, r19
    1c20:	84 07       	cpc	r24, r20
    1c22:	ba 07       	cpc	r27, r26
    1c24:	20 f0       	brcs	.+8      	; 0x1c2e <__divsf3_pse+0xaa>
    1c26:	62 1b       	sub	r22, r18
    1c28:	73 0b       	sbc	r23, r19
    1c2a:	84 0b       	sbc	r24, r20
    1c2c:	ba 0b       	sbc	r27, r26
    1c2e:	ee 1f       	adc	r30, r30
    1c30:	88 f7       	brcc	.-30     	; 0x1c14 <__divsf3_pse+0x90>
    1c32:	e0 95       	com	r30
    1c34:	08 95       	ret

00001c36 <__fixsfsi>:
    1c36:	04 d0       	rcall	.+8      	; 0x1c40 <__fixunssfsi>
    1c38:	68 94       	set
    1c3a:	b1 11       	cpse	r27, r1
    1c3c:	da c0       	rjmp	.+436    	; 0x1df2 <__fp_szero>
    1c3e:	08 95       	ret

00001c40 <__fixunssfsi>:
    1c40:	bd d0       	rcall	.+378    	; 0x1dbc <__fp_splitA>
    1c42:	88 f0       	brcs	.+34     	; 0x1c66 <__fixunssfsi+0x26>
    1c44:	9f 57       	subi	r25, 0x7F	; 127
    1c46:	90 f0       	brcs	.+36     	; 0x1c6c <__fixunssfsi+0x2c>
    1c48:	b9 2f       	mov	r27, r25
    1c4a:	99 27       	eor	r25, r25
    1c4c:	b7 51       	subi	r27, 0x17	; 23
    1c4e:	a0 f0       	brcs	.+40     	; 0x1c78 <__fixunssfsi+0x38>
    1c50:	d1 f0       	breq	.+52     	; 0x1c86 <__fixunssfsi+0x46>
    1c52:	66 0f       	add	r22, r22
    1c54:	77 1f       	adc	r23, r23
    1c56:	88 1f       	adc	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	1a f0       	brmi	.+6      	; 0x1c62 <__fixunssfsi+0x22>
    1c5c:	ba 95       	dec	r27
    1c5e:	c9 f7       	brne	.-14     	; 0x1c52 <__fixunssfsi+0x12>
    1c60:	12 c0       	rjmp	.+36     	; 0x1c86 <__fixunssfsi+0x46>
    1c62:	b1 30       	cpi	r27, 0x01	; 1
    1c64:	81 f0       	breq	.+32     	; 0x1c86 <__fixunssfsi+0x46>
    1c66:	c4 d0       	rcall	.+392    	; 0x1df0 <__fp_zero>
    1c68:	b1 e0       	ldi	r27, 0x01	; 1
    1c6a:	08 95       	ret
    1c6c:	c1 c0       	rjmp	.+386    	; 0x1df0 <__fp_zero>
    1c6e:	67 2f       	mov	r22, r23
    1c70:	78 2f       	mov	r23, r24
    1c72:	88 27       	eor	r24, r24
    1c74:	b8 5f       	subi	r27, 0xF8	; 248
    1c76:	39 f0       	breq	.+14     	; 0x1c86 <__fixunssfsi+0x46>
    1c78:	b9 3f       	cpi	r27, 0xF9	; 249
    1c7a:	cc f3       	brlt	.-14     	; 0x1c6e <__fixunssfsi+0x2e>
    1c7c:	86 95       	lsr	r24
    1c7e:	77 95       	ror	r23
    1c80:	67 95       	ror	r22
    1c82:	b3 95       	inc	r27
    1c84:	d9 f7       	brne	.-10     	; 0x1c7c <__fixunssfsi+0x3c>
    1c86:	3e f4       	brtc	.+14     	; 0x1c96 <__fixunssfsi+0x56>
    1c88:	90 95       	com	r25
    1c8a:	80 95       	com	r24
    1c8c:	70 95       	com	r23
    1c8e:	61 95       	neg	r22
    1c90:	7f 4f       	sbci	r23, 0xFF	; 255
    1c92:	8f 4f       	sbci	r24, 0xFF	; 255
    1c94:	9f 4f       	sbci	r25, 0xFF	; 255
    1c96:	08 95       	ret

00001c98 <__floatunsisf>:
    1c98:	e8 94       	clt
    1c9a:	09 c0       	rjmp	.+18     	; 0x1cae <__floatsisf+0x12>

00001c9c <__floatsisf>:
    1c9c:	97 fb       	bst	r25, 7
    1c9e:	3e f4       	brtc	.+14     	; 0x1cae <__floatsisf+0x12>
    1ca0:	90 95       	com	r25
    1ca2:	80 95       	com	r24
    1ca4:	70 95       	com	r23
    1ca6:	61 95       	neg	r22
    1ca8:	7f 4f       	sbci	r23, 0xFF	; 255
    1caa:	8f 4f       	sbci	r24, 0xFF	; 255
    1cac:	9f 4f       	sbci	r25, 0xFF	; 255
    1cae:	99 23       	and	r25, r25
    1cb0:	a9 f0       	breq	.+42     	; 0x1cdc <__floatsisf+0x40>
    1cb2:	f9 2f       	mov	r31, r25
    1cb4:	96 e9       	ldi	r25, 0x96	; 150
    1cb6:	bb 27       	eor	r27, r27
    1cb8:	93 95       	inc	r25
    1cba:	f6 95       	lsr	r31
    1cbc:	87 95       	ror	r24
    1cbe:	77 95       	ror	r23
    1cc0:	67 95       	ror	r22
    1cc2:	b7 95       	ror	r27
    1cc4:	f1 11       	cpse	r31, r1
    1cc6:	f8 cf       	rjmp	.-16     	; 0x1cb8 <__floatsisf+0x1c>
    1cc8:	fa f4       	brpl	.+62     	; 0x1d08 <__floatsisf+0x6c>
    1cca:	bb 0f       	add	r27, r27
    1ccc:	11 f4       	brne	.+4      	; 0x1cd2 <__floatsisf+0x36>
    1cce:	60 ff       	sbrs	r22, 0
    1cd0:	1b c0       	rjmp	.+54     	; 0x1d08 <__floatsisf+0x6c>
    1cd2:	6f 5f       	subi	r22, 0xFF	; 255
    1cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cda:	16 c0       	rjmp	.+44     	; 0x1d08 <__floatsisf+0x6c>
    1cdc:	88 23       	and	r24, r24
    1cde:	11 f0       	breq	.+4      	; 0x1ce4 <__floatsisf+0x48>
    1ce0:	96 e9       	ldi	r25, 0x96	; 150
    1ce2:	11 c0       	rjmp	.+34     	; 0x1d06 <__floatsisf+0x6a>
    1ce4:	77 23       	and	r23, r23
    1ce6:	21 f0       	breq	.+8      	; 0x1cf0 <__floatsisf+0x54>
    1ce8:	9e e8       	ldi	r25, 0x8E	; 142
    1cea:	87 2f       	mov	r24, r23
    1cec:	76 2f       	mov	r23, r22
    1cee:	05 c0       	rjmp	.+10     	; 0x1cfa <__floatsisf+0x5e>
    1cf0:	66 23       	and	r22, r22
    1cf2:	71 f0       	breq	.+28     	; 0x1d10 <__floatsisf+0x74>
    1cf4:	96 e8       	ldi	r25, 0x86	; 134
    1cf6:	86 2f       	mov	r24, r22
    1cf8:	70 e0       	ldi	r23, 0x00	; 0
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	2a f0       	brmi	.+10     	; 0x1d08 <__floatsisf+0x6c>
    1cfe:	9a 95       	dec	r25
    1d00:	66 0f       	add	r22, r22
    1d02:	77 1f       	adc	r23, r23
    1d04:	88 1f       	adc	r24, r24
    1d06:	da f7       	brpl	.-10     	; 0x1cfe <__floatsisf+0x62>
    1d08:	88 0f       	add	r24, r24
    1d0a:	96 95       	lsr	r25
    1d0c:	87 95       	ror	r24
    1d0e:	97 f9       	bld	r25, 7
    1d10:	08 95       	ret

00001d12 <__fp_inf>:
    1d12:	97 f9       	bld	r25, 7
    1d14:	9f 67       	ori	r25, 0x7F	; 127
    1d16:	80 e8       	ldi	r24, 0x80	; 128
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	60 e0       	ldi	r22, 0x00	; 0
    1d1c:	08 95       	ret

00001d1e <__fp_nan>:
    1d1e:	9f ef       	ldi	r25, 0xFF	; 255
    1d20:	80 ec       	ldi	r24, 0xC0	; 192
    1d22:	08 95       	ret

00001d24 <__fp_powser>:
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	1f 93       	push	r17
    1d2a:	0f 93       	push	r16
    1d2c:	ff 92       	push	r15
    1d2e:	ef 92       	push	r14
    1d30:	df 92       	push	r13
    1d32:	7b 01       	movw	r14, r22
    1d34:	8c 01       	movw	r16, r24
    1d36:	68 94       	set
    1d38:	05 c0       	rjmp	.+10     	; 0x1d44 <__fp_powser+0x20>
    1d3a:	da 2e       	mov	r13, r26
    1d3c:	ef 01       	movw	r28, r30
    1d3e:	72 d0       	rcall	.+228    	; 0x1e24 <__mulsf3x>
    1d40:	fe 01       	movw	r30, r28
    1d42:	e8 94       	clt
    1d44:	a5 91       	lpm	r26, Z+
    1d46:	25 91       	lpm	r18, Z+
    1d48:	35 91       	lpm	r19, Z+
    1d4a:	45 91       	lpm	r20, Z+
    1d4c:	55 91       	lpm	r21, Z+
    1d4e:	ae f3       	brts	.-22     	; 0x1d3a <__fp_powser+0x16>
    1d50:	ef 01       	movw	r28, r30
    1d52:	54 de       	rcall	.-856    	; 0x19fc <__addsf3x>
    1d54:	fe 01       	movw	r30, r28
    1d56:	97 01       	movw	r18, r14
    1d58:	a8 01       	movw	r20, r16
    1d5a:	da 94       	dec	r13
    1d5c:	79 f7       	brne	.-34     	; 0x1d3c <__fp_powser+0x18>
    1d5e:	df 90       	pop	r13
    1d60:	ef 90       	pop	r14
    1d62:	ff 90       	pop	r15
    1d64:	0f 91       	pop	r16
    1d66:	1f 91       	pop	r17
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	08 95       	ret

00001d6e <__fp_pscA>:
    1d6e:	00 24       	eor	r0, r0
    1d70:	0a 94       	dec	r0
    1d72:	16 16       	cp	r1, r22
    1d74:	17 06       	cpc	r1, r23
    1d76:	18 06       	cpc	r1, r24
    1d78:	09 06       	cpc	r0, r25
    1d7a:	08 95       	ret

00001d7c <__fp_pscB>:
    1d7c:	00 24       	eor	r0, r0
    1d7e:	0a 94       	dec	r0
    1d80:	12 16       	cp	r1, r18
    1d82:	13 06       	cpc	r1, r19
    1d84:	14 06       	cpc	r1, r20
    1d86:	05 06       	cpc	r0, r21
    1d88:	08 95       	ret

00001d8a <__fp_round>:
    1d8a:	09 2e       	mov	r0, r25
    1d8c:	03 94       	inc	r0
    1d8e:	00 0c       	add	r0, r0
    1d90:	11 f4       	brne	.+4      	; 0x1d96 <__fp_round+0xc>
    1d92:	88 23       	and	r24, r24
    1d94:	52 f0       	brmi	.+20     	; 0x1daa <__fp_round+0x20>
    1d96:	bb 0f       	add	r27, r27
    1d98:	40 f4       	brcc	.+16     	; 0x1daa <__fp_round+0x20>
    1d9a:	bf 2b       	or	r27, r31
    1d9c:	11 f4       	brne	.+4      	; 0x1da2 <__fp_round+0x18>
    1d9e:	60 ff       	sbrs	r22, 0
    1da0:	04 c0       	rjmp	.+8      	; 0x1daa <__fp_round+0x20>
    1da2:	6f 5f       	subi	r22, 0xFF	; 255
    1da4:	7f 4f       	sbci	r23, 0xFF	; 255
    1da6:	8f 4f       	sbci	r24, 0xFF	; 255
    1da8:	9f 4f       	sbci	r25, 0xFF	; 255
    1daa:	08 95       	ret

00001dac <__fp_split3>:
    1dac:	57 fd       	sbrc	r21, 7
    1dae:	90 58       	subi	r25, 0x80	; 128
    1db0:	44 0f       	add	r20, r20
    1db2:	55 1f       	adc	r21, r21
    1db4:	59 f0       	breq	.+22     	; 0x1dcc <__fp_splitA+0x10>
    1db6:	5f 3f       	cpi	r21, 0xFF	; 255
    1db8:	71 f0       	breq	.+28     	; 0x1dd6 <__fp_splitA+0x1a>
    1dba:	47 95       	ror	r20

00001dbc <__fp_splitA>:
    1dbc:	88 0f       	add	r24, r24
    1dbe:	97 fb       	bst	r25, 7
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	61 f0       	breq	.+24     	; 0x1ddc <__fp_splitA+0x20>
    1dc4:	9f 3f       	cpi	r25, 0xFF	; 255
    1dc6:	79 f0       	breq	.+30     	; 0x1de6 <__fp_splitA+0x2a>
    1dc8:	87 95       	ror	r24
    1dca:	08 95       	ret
    1dcc:	12 16       	cp	r1, r18
    1dce:	13 06       	cpc	r1, r19
    1dd0:	14 06       	cpc	r1, r20
    1dd2:	55 1f       	adc	r21, r21
    1dd4:	f2 cf       	rjmp	.-28     	; 0x1dba <__fp_split3+0xe>
    1dd6:	46 95       	lsr	r20
    1dd8:	f1 df       	rcall	.-30     	; 0x1dbc <__fp_splitA>
    1dda:	08 c0       	rjmp	.+16     	; 0x1dec <__fp_splitA+0x30>
    1ddc:	16 16       	cp	r1, r22
    1dde:	17 06       	cpc	r1, r23
    1de0:	18 06       	cpc	r1, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	f1 cf       	rjmp	.-30     	; 0x1dc8 <__fp_splitA+0xc>
    1de6:	86 95       	lsr	r24
    1de8:	71 05       	cpc	r23, r1
    1dea:	61 05       	cpc	r22, r1
    1dec:	08 94       	sec
    1dee:	08 95       	ret

00001df0 <__fp_zero>:
    1df0:	e8 94       	clt

00001df2 <__fp_szero>:
    1df2:	bb 27       	eor	r27, r27
    1df4:	66 27       	eor	r22, r22
    1df6:	77 27       	eor	r23, r23
    1df8:	cb 01       	movw	r24, r22
    1dfa:	97 f9       	bld	r25, 7
    1dfc:	08 95       	ret

00001dfe <inverse>:
    1dfe:	9b 01       	movw	r18, r22
    1e00:	ac 01       	movw	r20, r24
    1e02:	60 e0       	ldi	r22, 0x00	; 0
    1e04:	70 e0       	ldi	r23, 0x00	; 0
    1e06:	80 e8       	ldi	r24, 0x80	; 128
    1e08:	9f e3       	ldi	r25, 0x3F	; 63
    1e0a:	ad ce       	rjmp	.-678    	; 0x1b66 <__divsf3>

00001e0c <__mulsf3>:
    1e0c:	0b d0       	rcall	.+22     	; 0x1e24 <__mulsf3x>
    1e0e:	bd cf       	rjmp	.-134    	; 0x1d8a <__fp_round>
    1e10:	ae df       	rcall	.-164    	; 0x1d6e <__fp_pscA>
    1e12:	28 f0       	brcs	.+10     	; 0x1e1e <__mulsf3+0x12>
    1e14:	b3 df       	rcall	.-154    	; 0x1d7c <__fp_pscB>
    1e16:	18 f0       	brcs	.+6      	; 0x1e1e <__mulsf3+0x12>
    1e18:	95 23       	and	r25, r21
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <__mulsf3+0x12>
    1e1c:	7a cf       	rjmp	.-268    	; 0x1d12 <__fp_inf>
    1e1e:	7f cf       	rjmp	.-258    	; 0x1d1e <__fp_nan>
    1e20:	11 24       	eor	r1, r1
    1e22:	e7 cf       	rjmp	.-50     	; 0x1df2 <__fp_szero>

00001e24 <__mulsf3x>:
    1e24:	c3 df       	rcall	.-122    	; 0x1dac <__fp_split3>
    1e26:	a0 f3       	brcs	.-24     	; 0x1e10 <__mulsf3+0x4>

00001e28 <__mulsf3_pse>:
    1e28:	95 9f       	mul	r25, r21
    1e2a:	d1 f3       	breq	.-12     	; 0x1e20 <__mulsf3+0x14>
    1e2c:	95 0f       	add	r25, r21
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	55 1f       	adc	r21, r21
    1e32:	62 9f       	mul	r22, r18
    1e34:	f0 01       	movw	r30, r0
    1e36:	72 9f       	mul	r23, r18
    1e38:	bb 27       	eor	r27, r27
    1e3a:	f0 0d       	add	r31, r0
    1e3c:	b1 1d       	adc	r27, r1
    1e3e:	63 9f       	mul	r22, r19
    1e40:	aa 27       	eor	r26, r26
    1e42:	f0 0d       	add	r31, r0
    1e44:	b1 1d       	adc	r27, r1
    1e46:	aa 1f       	adc	r26, r26
    1e48:	64 9f       	mul	r22, r20
    1e4a:	66 27       	eor	r22, r22
    1e4c:	b0 0d       	add	r27, r0
    1e4e:	a1 1d       	adc	r26, r1
    1e50:	66 1f       	adc	r22, r22
    1e52:	82 9f       	mul	r24, r18
    1e54:	22 27       	eor	r18, r18
    1e56:	b0 0d       	add	r27, r0
    1e58:	a1 1d       	adc	r26, r1
    1e5a:	62 1f       	adc	r22, r18
    1e5c:	73 9f       	mul	r23, r19
    1e5e:	b0 0d       	add	r27, r0
    1e60:	a1 1d       	adc	r26, r1
    1e62:	62 1f       	adc	r22, r18
    1e64:	83 9f       	mul	r24, r19
    1e66:	a0 0d       	add	r26, r0
    1e68:	61 1d       	adc	r22, r1
    1e6a:	22 1f       	adc	r18, r18
    1e6c:	74 9f       	mul	r23, r20
    1e6e:	33 27       	eor	r19, r19
    1e70:	a0 0d       	add	r26, r0
    1e72:	61 1d       	adc	r22, r1
    1e74:	23 1f       	adc	r18, r19
    1e76:	84 9f       	mul	r24, r20
    1e78:	60 0d       	add	r22, r0
    1e7a:	21 1d       	adc	r18, r1
    1e7c:	82 2f       	mov	r24, r18
    1e7e:	76 2f       	mov	r23, r22
    1e80:	6a 2f       	mov	r22, r26
    1e82:	11 24       	eor	r1, r1
    1e84:	9f 57       	subi	r25, 0x7F	; 127
    1e86:	50 40       	sbci	r21, 0x00	; 0
    1e88:	8a f0       	brmi	.+34     	; 0x1eac <__mulsf3_pse+0x84>
    1e8a:	e1 f0       	breq	.+56     	; 0x1ec4 <__mulsf3_pse+0x9c>
    1e8c:	88 23       	and	r24, r24
    1e8e:	4a f0       	brmi	.+18     	; 0x1ea2 <__mulsf3_pse+0x7a>
    1e90:	ee 0f       	add	r30, r30
    1e92:	ff 1f       	adc	r31, r31
    1e94:	bb 1f       	adc	r27, r27
    1e96:	66 1f       	adc	r22, r22
    1e98:	77 1f       	adc	r23, r23
    1e9a:	88 1f       	adc	r24, r24
    1e9c:	91 50       	subi	r25, 0x01	; 1
    1e9e:	50 40       	sbci	r21, 0x00	; 0
    1ea0:	a9 f7       	brne	.-22     	; 0x1e8c <__mulsf3_pse+0x64>
    1ea2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ea4:	51 05       	cpc	r21, r1
    1ea6:	70 f0       	brcs	.+28     	; 0x1ec4 <__mulsf3_pse+0x9c>
    1ea8:	34 cf       	rjmp	.-408    	; 0x1d12 <__fp_inf>
    1eaa:	a3 cf       	rjmp	.-186    	; 0x1df2 <__fp_szero>
    1eac:	5f 3f       	cpi	r21, 0xFF	; 255
    1eae:	ec f3       	brlt	.-6      	; 0x1eaa <__mulsf3_pse+0x82>
    1eb0:	98 3e       	cpi	r25, 0xE8	; 232
    1eb2:	dc f3       	brlt	.-10     	; 0x1eaa <__mulsf3_pse+0x82>
    1eb4:	86 95       	lsr	r24
    1eb6:	77 95       	ror	r23
    1eb8:	67 95       	ror	r22
    1eba:	b7 95       	ror	r27
    1ebc:	f7 95       	ror	r31
    1ebe:	e7 95       	ror	r30
    1ec0:	9f 5f       	subi	r25, 0xFF	; 255
    1ec2:	c1 f7       	brne	.-16     	; 0x1eb4 <__mulsf3_pse+0x8c>
    1ec4:	fe 2b       	or	r31, r30
    1ec6:	88 0f       	add	r24, r24
    1ec8:	91 1d       	adc	r25, r1
    1eca:	96 95       	lsr	r25
    1ecc:	87 95       	ror	r24
    1ece:	97 f9       	bld	r25, 7
    1ed0:	08 95       	ret
    1ed2:	11 f4       	brne	.+4      	; 0x1ed8 <__mulsf3_pse+0xb0>
    1ed4:	0e f4       	brtc	.+2      	; 0x1ed8 <__mulsf3_pse+0xb0>
    1ed6:	23 cf       	rjmp	.-442    	; 0x1d1e <__fp_nan>
    1ed8:	41 c0       	rjmp	.+130    	; 0x1f5c <__fp_mpack>

00001eda <sqrt>:
    1eda:	70 df       	rcall	.-288    	; 0x1dbc <__fp_splitA>
    1edc:	d0 f3       	brcs	.-12     	; 0x1ed2 <__mulsf3_pse+0xaa>
    1ede:	99 23       	and	r25, r25
    1ee0:	d9 f3       	breq	.-10     	; 0x1ed8 <__mulsf3_pse+0xb0>
    1ee2:	ce f3       	brts	.-14     	; 0x1ed6 <__mulsf3_pse+0xae>
    1ee4:	9f 57       	subi	r25, 0x7F	; 127
    1ee6:	55 0b       	sbc	r21, r21
    1ee8:	87 ff       	sbrs	r24, 7
    1eea:	46 d0       	rcall	.+140    	; 0x1f78 <__fp_norm2>
    1eec:	00 24       	eor	r0, r0
    1eee:	a0 e6       	ldi	r26, 0x60	; 96
    1ef0:	40 ea       	ldi	r20, 0xA0	; 160
    1ef2:	90 01       	movw	r18, r0
    1ef4:	80 58       	subi	r24, 0x80	; 128
    1ef6:	56 95       	lsr	r21
    1ef8:	97 95       	ror	r25
    1efa:	28 f4       	brcc	.+10     	; 0x1f06 <sqrt+0x2c>
    1efc:	80 5c       	subi	r24, 0xC0	; 192
    1efe:	66 0f       	add	r22, r22
    1f00:	77 1f       	adc	r23, r23
    1f02:	88 1f       	adc	r24, r24
    1f04:	20 f0       	brcs	.+8      	; 0x1f0e <sqrt+0x34>
    1f06:	26 17       	cp	r18, r22
    1f08:	37 07       	cpc	r19, r23
    1f0a:	48 07       	cpc	r20, r24
    1f0c:	30 f4       	brcc	.+12     	; 0x1f1a <sqrt+0x40>
    1f0e:	62 1b       	sub	r22, r18
    1f10:	73 0b       	sbc	r23, r19
    1f12:	84 0b       	sbc	r24, r20
    1f14:	20 29       	or	r18, r0
    1f16:	31 29       	or	r19, r1
    1f18:	4a 2b       	or	r20, r26
    1f1a:	a6 95       	lsr	r26
    1f1c:	17 94       	ror	r1
    1f1e:	07 94       	ror	r0
    1f20:	20 25       	eor	r18, r0
    1f22:	31 25       	eor	r19, r1
    1f24:	4a 27       	eor	r20, r26
    1f26:	58 f7       	brcc	.-42     	; 0x1efe <sqrt+0x24>
    1f28:	66 0f       	add	r22, r22
    1f2a:	77 1f       	adc	r23, r23
    1f2c:	88 1f       	adc	r24, r24
    1f2e:	20 f0       	brcs	.+8      	; 0x1f38 <sqrt+0x5e>
    1f30:	26 17       	cp	r18, r22
    1f32:	37 07       	cpc	r19, r23
    1f34:	48 07       	cpc	r20, r24
    1f36:	30 f4       	brcc	.+12     	; 0x1f44 <sqrt+0x6a>
    1f38:	62 0b       	sbc	r22, r18
    1f3a:	73 0b       	sbc	r23, r19
    1f3c:	84 0b       	sbc	r24, r20
    1f3e:	20 0d       	add	r18, r0
    1f40:	31 1d       	adc	r19, r1
    1f42:	41 1d       	adc	r20, r1
    1f44:	a0 95       	com	r26
    1f46:	81 f7       	brne	.-32     	; 0x1f28 <sqrt+0x4e>
    1f48:	b9 01       	movw	r22, r18
    1f4a:	84 2f       	mov	r24, r20
    1f4c:	91 58       	subi	r25, 0x81	; 129
    1f4e:	88 0f       	add	r24, r24
    1f50:	96 95       	lsr	r25
    1f52:	87 95       	ror	r24
    1f54:	08 95       	ret

00001f56 <square>:
    1f56:	9b 01       	movw	r18, r22
    1f58:	ac 01       	movw	r20, r24
    1f5a:	58 cf       	rjmp	.-336    	; 0x1e0c <__mulsf3>

00001f5c <__fp_mpack>:
    1f5c:	9f 3f       	cpi	r25, 0xFF	; 255
    1f5e:	31 f0       	breq	.+12     	; 0x1f6c <__fp_mpack_finite+0xc>

00001f60 <__fp_mpack_finite>:
    1f60:	91 50       	subi	r25, 0x01	; 1
    1f62:	20 f4       	brcc	.+8      	; 0x1f6c <__fp_mpack_finite+0xc>
    1f64:	87 95       	ror	r24
    1f66:	77 95       	ror	r23
    1f68:	67 95       	ror	r22
    1f6a:	b7 95       	ror	r27
    1f6c:	88 0f       	add	r24, r24
    1f6e:	91 1d       	adc	r25, r1
    1f70:	96 95       	lsr	r25
    1f72:	87 95       	ror	r24
    1f74:	97 f9       	bld	r25, 7
    1f76:	08 95       	ret

00001f78 <__fp_norm2>:
    1f78:	91 50       	subi	r25, 0x01	; 1
    1f7a:	50 40       	sbci	r21, 0x00	; 0
    1f7c:	66 0f       	add	r22, r22
    1f7e:	77 1f       	adc	r23, r23
    1f80:	88 1f       	adc	r24, r24
    1f82:	d2 f7       	brpl	.-12     	; 0x1f78 <__fp_norm2>
    1f84:	08 95       	ret

00001f86 <__divmodhi4>:
    1f86:	97 fb       	bst	r25, 7
    1f88:	07 2e       	mov	r0, r23
    1f8a:	16 f4       	brtc	.+4      	; 0x1f90 <__divmodhi4+0xa>
    1f8c:	00 94       	com	r0
    1f8e:	07 d0       	rcall	.+14     	; 0x1f9e <__divmodhi4_neg1>
    1f90:	77 fd       	sbrc	r23, 7
    1f92:	09 d0       	rcall	.+18     	; 0x1fa6 <__divmodhi4_neg2>
    1f94:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__udivmodhi4>
    1f98:	07 fc       	sbrc	r0, 7
    1f9a:	05 d0       	rcall	.+10     	; 0x1fa6 <__divmodhi4_neg2>
    1f9c:	3e f4       	brtc	.+14     	; 0x1fac <__divmodhi4_exit>

00001f9e <__divmodhi4_neg1>:
    1f9e:	90 95       	com	r25
    1fa0:	81 95       	neg	r24
    1fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa4:	08 95       	ret

00001fa6 <__divmodhi4_neg2>:
    1fa6:	70 95       	com	r23
    1fa8:	61 95       	neg	r22
    1faa:	7f 4f       	sbci	r23, 0xFF	; 255

00001fac <__divmodhi4_exit>:
    1fac:	08 95       	ret

00001fae <__divmodsi4>:
    1fae:	05 2e       	mov	r0, r21
    1fb0:	97 fb       	bst	r25, 7
    1fb2:	1e f4       	brtc	.+6      	; 0x1fba <__divmodsi4+0xc>
    1fb4:	00 94       	com	r0
    1fb6:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__negsi2>
    1fba:	57 fd       	sbrc	r21, 7
    1fbc:	07 d0       	rcall	.+14     	; 0x1fcc <__divmodsi4_neg2>
    1fbe:	0e 94 0a 10 	call	0x2014	; 0x2014 <__udivmodsi4>
    1fc2:	07 fc       	sbrc	r0, 7
    1fc4:	03 d0       	rcall	.+6      	; 0x1fcc <__divmodsi4_neg2>
    1fc6:	4e f4       	brtc	.+18     	; 0x1fda <__divmodsi4_exit>
    1fc8:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <__negsi2>

00001fcc <__divmodsi4_neg2>:
    1fcc:	50 95       	com	r21
    1fce:	40 95       	com	r20
    1fd0:	30 95       	com	r19
    1fd2:	21 95       	neg	r18
    1fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd6:	4f 4f       	sbci	r20, 0xFF	; 255
    1fd8:	5f 4f       	sbci	r21, 0xFF	; 255

00001fda <__divmodsi4_exit>:
    1fda:	08 95       	ret

00001fdc <__negsi2>:
    1fdc:	90 95       	com	r25
    1fde:	80 95       	com	r24
    1fe0:	70 95       	com	r23
    1fe2:	61 95       	neg	r22
    1fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe6:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fea:	08 95       	ret

00001fec <__udivmodhi4>:
    1fec:	aa 1b       	sub	r26, r26
    1fee:	bb 1b       	sub	r27, r27
    1ff0:	51 e1       	ldi	r21, 0x11	; 17
    1ff2:	07 c0       	rjmp	.+14     	; 0x2002 <__udivmodhi4_ep>

00001ff4 <__udivmodhi4_loop>:
    1ff4:	aa 1f       	adc	r26, r26
    1ff6:	bb 1f       	adc	r27, r27
    1ff8:	a6 17       	cp	r26, r22
    1ffa:	b7 07       	cpc	r27, r23
    1ffc:	10 f0       	brcs	.+4      	; 0x2002 <__udivmodhi4_ep>
    1ffe:	a6 1b       	sub	r26, r22
    2000:	b7 0b       	sbc	r27, r23

00002002 <__udivmodhi4_ep>:
    2002:	88 1f       	adc	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	5a 95       	dec	r21
    2008:	a9 f7       	brne	.-22     	; 0x1ff4 <__udivmodhi4_loop>
    200a:	80 95       	com	r24
    200c:	90 95       	com	r25
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	08 95       	ret

00002014 <__udivmodsi4>:
    2014:	a1 e2       	ldi	r26, 0x21	; 33
    2016:	1a 2e       	mov	r1, r26
    2018:	aa 1b       	sub	r26, r26
    201a:	bb 1b       	sub	r27, r27
    201c:	fd 01       	movw	r30, r26
    201e:	0d c0       	rjmp	.+26     	; 0x203a <__udivmodsi4_ep>

00002020 <__udivmodsi4_loop>:
    2020:	aa 1f       	adc	r26, r26
    2022:	bb 1f       	adc	r27, r27
    2024:	ee 1f       	adc	r30, r30
    2026:	ff 1f       	adc	r31, r31
    2028:	a2 17       	cp	r26, r18
    202a:	b3 07       	cpc	r27, r19
    202c:	e4 07       	cpc	r30, r20
    202e:	f5 07       	cpc	r31, r21
    2030:	20 f0       	brcs	.+8      	; 0x203a <__udivmodsi4_ep>
    2032:	a2 1b       	sub	r26, r18
    2034:	b3 0b       	sbc	r27, r19
    2036:	e4 0b       	sbc	r30, r20
    2038:	f5 0b       	sbc	r31, r21

0000203a <__udivmodsi4_ep>:
    203a:	66 1f       	adc	r22, r22
    203c:	77 1f       	adc	r23, r23
    203e:	88 1f       	adc	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	1a 94       	dec	r1
    2044:	69 f7       	brne	.-38     	; 0x2020 <__udivmodsi4_loop>
    2046:	60 95       	com	r22
    2048:	70 95       	com	r23
    204a:	80 95       	com	r24
    204c:	90 95       	com	r25
    204e:	9b 01       	movw	r18, r22
    2050:	ac 01       	movw	r20, r24
    2052:	bd 01       	movw	r22, r26
    2054:	cf 01       	movw	r24, r30
    2056:	08 95       	ret

00002058 <malloc>:
    2058:	cf 93       	push	r28
    205a:	df 93       	push	r29
    205c:	82 30       	cpi	r24, 0x02	; 2
    205e:	91 05       	cpc	r25, r1
    2060:	10 f4       	brcc	.+4      	; 0x2066 <malloc+0xe>
    2062:	82 e0       	ldi	r24, 0x02	; 2
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	e0 91 6d 02 	lds	r30, 0x026D
    206a:	f0 91 6e 02 	lds	r31, 0x026E
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	a0 e0       	ldi	r26, 0x00	; 0
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	30 97       	sbiw	r30, 0x00	; 0
    2078:	39 f1       	breq	.+78     	; 0x20c8 <malloc+0x70>
    207a:	40 81       	ld	r20, Z
    207c:	51 81       	ldd	r21, Z+1	; 0x01
    207e:	48 17       	cp	r20, r24
    2080:	59 07       	cpc	r21, r25
    2082:	b8 f0       	brcs	.+46     	; 0x20b2 <malloc+0x5a>
    2084:	48 17       	cp	r20, r24
    2086:	59 07       	cpc	r21, r25
    2088:	71 f4       	brne	.+28     	; 0x20a6 <malloc+0x4e>
    208a:	82 81       	ldd	r24, Z+2	; 0x02
    208c:	93 81       	ldd	r25, Z+3	; 0x03
    208e:	10 97       	sbiw	r26, 0x00	; 0
    2090:	29 f0       	breq	.+10     	; 0x209c <malloc+0x44>
    2092:	13 96       	adiw	r26, 0x03	; 3
    2094:	9c 93       	st	X, r25
    2096:	8e 93       	st	-X, r24
    2098:	12 97       	sbiw	r26, 0x02	; 2
    209a:	2c c0       	rjmp	.+88     	; 0x20f4 <malloc+0x9c>
    209c:	90 93 6e 02 	sts	0x026E, r25
    20a0:	80 93 6d 02 	sts	0x026D, r24
    20a4:	27 c0       	rjmp	.+78     	; 0x20f4 <malloc+0x9c>
    20a6:	21 15       	cp	r18, r1
    20a8:	31 05       	cpc	r19, r1
    20aa:	31 f0       	breq	.+12     	; 0x20b8 <malloc+0x60>
    20ac:	42 17       	cp	r20, r18
    20ae:	53 07       	cpc	r21, r19
    20b0:	18 f0       	brcs	.+6      	; 0x20b8 <malloc+0x60>
    20b2:	a9 01       	movw	r20, r18
    20b4:	db 01       	movw	r26, r22
    20b6:	01 c0       	rjmp	.+2      	; 0x20ba <malloc+0x62>
    20b8:	ef 01       	movw	r28, r30
    20ba:	9a 01       	movw	r18, r20
    20bc:	bd 01       	movw	r22, r26
    20be:	df 01       	movw	r26, r30
    20c0:	02 80       	ldd	r0, Z+2	; 0x02
    20c2:	f3 81       	ldd	r31, Z+3	; 0x03
    20c4:	e0 2d       	mov	r30, r0
    20c6:	d7 cf       	rjmp	.-82     	; 0x2076 <malloc+0x1e>
    20c8:	21 15       	cp	r18, r1
    20ca:	31 05       	cpc	r19, r1
    20cc:	f9 f0       	breq	.+62     	; 0x210c <malloc+0xb4>
    20ce:	28 1b       	sub	r18, r24
    20d0:	39 0b       	sbc	r19, r25
    20d2:	24 30       	cpi	r18, 0x04	; 4
    20d4:	31 05       	cpc	r19, r1
    20d6:	80 f4       	brcc	.+32     	; 0x20f8 <malloc+0xa0>
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	9b 81       	ldd	r25, Y+3	; 0x03
    20dc:	61 15       	cp	r22, r1
    20de:	71 05       	cpc	r23, r1
    20e0:	21 f0       	breq	.+8      	; 0x20ea <malloc+0x92>
    20e2:	fb 01       	movw	r30, r22
    20e4:	93 83       	std	Z+3, r25	; 0x03
    20e6:	82 83       	std	Z+2, r24	; 0x02
    20e8:	04 c0       	rjmp	.+8      	; 0x20f2 <malloc+0x9a>
    20ea:	90 93 6e 02 	sts	0x026E, r25
    20ee:	80 93 6d 02 	sts	0x026D, r24
    20f2:	fe 01       	movw	r30, r28
    20f4:	32 96       	adiw	r30, 0x02	; 2
    20f6:	44 c0       	rjmp	.+136    	; 0x2180 <malloc+0x128>
    20f8:	fe 01       	movw	r30, r28
    20fa:	e2 0f       	add	r30, r18
    20fc:	f3 1f       	adc	r31, r19
    20fe:	81 93       	st	Z+, r24
    2100:	91 93       	st	Z+, r25
    2102:	22 50       	subi	r18, 0x02	; 2
    2104:	31 09       	sbc	r19, r1
    2106:	39 83       	std	Y+1, r19	; 0x01
    2108:	28 83       	st	Y, r18
    210a:	3a c0       	rjmp	.+116    	; 0x2180 <malloc+0x128>
    210c:	20 91 6b 02 	lds	r18, 0x026B
    2110:	30 91 6c 02 	lds	r19, 0x026C
    2114:	23 2b       	or	r18, r19
    2116:	41 f4       	brne	.+16     	; 0x2128 <malloc+0xd0>
    2118:	20 91 02 01 	lds	r18, 0x0102
    211c:	30 91 03 01 	lds	r19, 0x0103
    2120:	30 93 6c 02 	sts	0x026C, r19
    2124:	20 93 6b 02 	sts	0x026B, r18
    2128:	20 91 00 01 	lds	r18, 0x0100
    212c:	30 91 01 01 	lds	r19, 0x0101
    2130:	21 15       	cp	r18, r1
    2132:	31 05       	cpc	r19, r1
    2134:	41 f4       	brne	.+16     	; 0x2146 <malloc+0xee>
    2136:	2d b7       	in	r18, 0x3d	; 61
    2138:	3e b7       	in	r19, 0x3e	; 62
    213a:	40 91 04 01 	lds	r20, 0x0104
    213e:	50 91 05 01 	lds	r21, 0x0105
    2142:	24 1b       	sub	r18, r20
    2144:	35 0b       	sbc	r19, r21
    2146:	e0 91 6b 02 	lds	r30, 0x026B
    214a:	f0 91 6c 02 	lds	r31, 0x026C
    214e:	e2 17       	cp	r30, r18
    2150:	f3 07       	cpc	r31, r19
    2152:	a0 f4       	brcc	.+40     	; 0x217c <malloc+0x124>
    2154:	2e 1b       	sub	r18, r30
    2156:	3f 0b       	sbc	r19, r31
    2158:	28 17       	cp	r18, r24
    215a:	39 07       	cpc	r19, r25
    215c:	78 f0       	brcs	.+30     	; 0x217c <malloc+0x124>
    215e:	ac 01       	movw	r20, r24
    2160:	4e 5f       	subi	r20, 0xFE	; 254
    2162:	5f 4f       	sbci	r21, 0xFF	; 255
    2164:	24 17       	cp	r18, r20
    2166:	35 07       	cpc	r19, r21
    2168:	48 f0       	brcs	.+18     	; 0x217c <malloc+0x124>
    216a:	4e 0f       	add	r20, r30
    216c:	5f 1f       	adc	r21, r31
    216e:	50 93 6c 02 	sts	0x026C, r21
    2172:	40 93 6b 02 	sts	0x026B, r20
    2176:	81 93       	st	Z+, r24
    2178:	91 93       	st	Z+, r25
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <malloc+0x128>
    217c:	e0 e0       	ldi	r30, 0x00	; 0
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	cf 01       	movw	r24, r30
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	08 95       	ret

00002188 <free>:
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	09 f4       	brne	.+2      	; 0x2192 <free+0xa>
    2190:	87 c0       	rjmp	.+270    	; 0x22a0 <free+0x118>
    2192:	fc 01       	movw	r30, r24
    2194:	32 97       	sbiw	r30, 0x02	; 2
    2196:	13 82       	std	Z+3, r1	; 0x03
    2198:	12 82       	std	Z+2, r1	; 0x02
    219a:	c0 91 6d 02 	lds	r28, 0x026D
    219e:	d0 91 6e 02 	lds	r29, 0x026E
    21a2:	20 97       	sbiw	r28, 0x00	; 0
    21a4:	81 f4       	brne	.+32     	; 0x21c6 <free+0x3e>
    21a6:	20 81       	ld	r18, Z
    21a8:	31 81       	ldd	r19, Z+1	; 0x01
    21aa:	28 0f       	add	r18, r24
    21ac:	39 1f       	adc	r19, r25
    21ae:	80 91 6b 02 	lds	r24, 0x026B
    21b2:	90 91 6c 02 	lds	r25, 0x026C
    21b6:	82 17       	cp	r24, r18
    21b8:	93 07       	cpc	r25, r19
    21ba:	79 f5       	brne	.+94     	; 0x221a <free+0x92>
    21bc:	f0 93 6c 02 	sts	0x026C, r31
    21c0:	e0 93 6b 02 	sts	0x026B, r30
    21c4:	6d c0       	rjmp	.+218    	; 0x22a0 <free+0x118>
    21c6:	de 01       	movw	r26, r28
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	ae 17       	cp	r26, r30
    21ce:	bf 07       	cpc	r27, r31
    21d0:	50 f4       	brcc	.+20     	; 0x21e6 <free+0x5e>
    21d2:	12 96       	adiw	r26, 0x02	; 2
    21d4:	4d 91       	ld	r20, X+
    21d6:	5c 91       	ld	r21, X
    21d8:	13 97       	sbiw	r26, 0x03	; 3
    21da:	9d 01       	movw	r18, r26
    21dc:	41 15       	cp	r20, r1
    21de:	51 05       	cpc	r21, r1
    21e0:	09 f1       	breq	.+66     	; 0x2224 <free+0x9c>
    21e2:	da 01       	movw	r26, r20
    21e4:	f3 cf       	rjmp	.-26     	; 0x21cc <free+0x44>
    21e6:	b3 83       	std	Z+3, r27	; 0x03
    21e8:	a2 83       	std	Z+2, r26	; 0x02
    21ea:	40 81       	ld	r20, Z
    21ec:	51 81       	ldd	r21, Z+1	; 0x01
    21ee:	84 0f       	add	r24, r20
    21f0:	95 1f       	adc	r25, r21
    21f2:	8a 17       	cp	r24, r26
    21f4:	9b 07       	cpc	r25, r27
    21f6:	71 f4       	brne	.+28     	; 0x2214 <free+0x8c>
    21f8:	8d 91       	ld	r24, X+
    21fa:	9c 91       	ld	r25, X
    21fc:	11 97       	sbiw	r26, 0x01	; 1
    21fe:	84 0f       	add	r24, r20
    2200:	95 1f       	adc	r25, r21
    2202:	02 96       	adiw	r24, 0x02	; 2
    2204:	91 83       	std	Z+1, r25	; 0x01
    2206:	80 83       	st	Z, r24
    2208:	12 96       	adiw	r26, 0x02	; 2
    220a:	8d 91       	ld	r24, X+
    220c:	9c 91       	ld	r25, X
    220e:	13 97       	sbiw	r26, 0x03	; 3
    2210:	93 83       	std	Z+3, r25	; 0x03
    2212:	82 83       	std	Z+2, r24	; 0x02
    2214:	21 15       	cp	r18, r1
    2216:	31 05       	cpc	r19, r1
    2218:	29 f4       	brne	.+10     	; 0x2224 <free+0x9c>
    221a:	f0 93 6e 02 	sts	0x026E, r31
    221e:	e0 93 6d 02 	sts	0x026D, r30
    2222:	3e c0       	rjmp	.+124    	; 0x22a0 <free+0x118>
    2224:	d9 01       	movw	r26, r18
    2226:	13 96       	adiw	r26, 0x03	; 3
    2228:	fc 93       	st	X, r31
    222a:	ee 93       	st	-X, r30
    222c:	12 97       	sbiw	r26, 0x02	; 2
    222e:	4d 91       	ld	r20, X+
    2230:	5d 91       	ld	r21, X+
    2232:	a4 0f       	add	r26, r20
    2234:	b5 1f       	adc	r27, r21
    2236:	ea 17       	cp	r30, r26
    2238:	fb 07       	cpc	r31, r27
    223a:	79 f4       	brne	.+30     	; 0x225a <free+0xd2>
    223c:	80 81       	ld	r24, Z
    223e:	91 81       	ldd	r25, Z+1	; 0x01
    2240:	84 0f       	add	r24, r20
    2242:	95 1f       	adc	r25, r21
    2244:	02 96       	adiw	r24, 0x02	; 2
    2246:	d9 01       	movw	r26, r18
    2248:	11 96       	adiw	r26, 0x01	; 1
    224a:	9c 93       	st	X, r25
    224c:	8e 93       	st	-X, r24
    224e:	82 81       	ldd	r24, Z+2	; 0x02
    2250:	93 81       	ldd	r25, Z+3	; 0x03
    2252:	13 96       	adiw	r26, 0x03	; 3
    2254:	9c 93       	st	X, r25
    2256:	8e 93       	st	-X, r24
    2258:	12 97       	sbiw	r26, 0x02	; 2
    225a:	e0 e0       	ldi	r30, 0x00	; 0
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	9b 81       	ldd	r25, Y+3	; 0x03
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	19 f0       	breq	.+6      	; 0x226c <free+0xe4>
    2266:	fe 01       	movw	r30, r28
    2268:	ec 01       	movw	r28, r24
    226a:	f9 cf       	rjmp	.-14     	; 0x225e <free+0xd6>
    226c:	ce 01       	movw	r24, r28
    226e:	02 96       	adiw	r24, 0x02	; 2
    2270:	28 81       	ld	r18, Y
    2272:	39 81       	ldd	r19, Y+1	; 0x01
    2274:	82 0f       	add	r24, r18
    2276:	93 1f       	adc	r25, r19
    2278:	20 91 6b 02 	lds	r18, 0x026B
    227c:	30 91 6c 02 	lds	r19, 0x026C
    2280:	28 17       	cp	r18, r24
    2282:	39 07       	cpc	r19, r25
    2284:	69 f4       	brne	.+26     	; 0x22a0 <free+0x118>
    2286:	30 97       	sbiw	r30, 0x00	; 0
    2288:	29 f4       	brne	.+10     	; 0x2294 <free+0x10c>
    228a:	10 92 6e 02 	sts	0x026E, r1
    228e:	10 92 6d 02 	sts	0x026D, r1
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <free+0x110>
    2294:	13 82       	std	Z+3, r1	; 0x03
    2296:	12 82       	std	Z+2, r1	; 0x02
    2298:	d0 93 6c 02 	sts	0x026C, r29
    229c:	c0 93 6b 02 	sts	0x026B, r28
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	08 95       	ret

000022a6 <realloc>:
    22a6:	a0 e0       	ldi	r26, 0x00	; 0
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	e9 e5       	ldi	r30, 0x59	; 89
    22ac:	f1 e1       	ldi	r31, 0x11	; 17
    22ae:	0c 94 46 15 	jmp	0x2a8c	; 0x2a8c <__prologue_saves__+0x8>
    22b2:	ec 01       	movw	r28, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	20 97       	sbiw	r28, 0x00	; 0
    22b8:	19 f4       	brne	.+6      	; 0x22c0 <realloc+0x1a>
    22ba:	0e 94 2c 10 	call	0x2058	; 0x2058 <malloc>
    22be:	b8 c0       	rjmp	.+368    	; 0x2430 <realloc+0x18a>
    22c0:	fe 01       	movw	r30, r28
    22c2:	e6 0f       	add	r30, r22
    22c4:	f7 1f       	adc	r31, r23
    22c6:	9e 01       	movw	r18, r28
    22c8:	22 50       	subi	r18, 0x02	; 2
    22ca:	31 09       	sbc	r19, r1
    22cc:	e2 17       	cp	r30, r18
    22ce:	f3 07       	cpc	r31, r19
    22d0:	08 f4       	brcc	.+2      	; 0x22d4 <realloc+0x2e>
    22d2:	ac c0       	rjmp	.+344    	; 0x242c <realloc+0x186>
    22d4:	d9 01       	movw	r26, r18
    22d6:	0d 91       	ld	r16, X+
    22d8:	1c 91       	ld	r17, X
    22da:	11 97       	sbiw	r26, 0x01	; 1
    22dc:	06 17       	cp	r16, r22
    22de:	17 07       	cpc	r17, r23
    22e0:	b8 f0       	brcs	.+46     	; 0x2310 <realloc+0x6a>
    22e2:	05 30       	cpi	r16, 0x05	; 5
    22e4:	11 05       	cpc	r17, r1
    22e6:	08 f4       	brcc	.+2      	; 0x22ea <realloc+0x44>
    22e8:	9f c0       	rjmp	.+318    	; 0x2428 <realloc+0x182>
    22ea:	a8 01       	movw	r20, r16
    22ec:	44 50       	subi	r20, 0x04	; 4
    22ee:	51 09       	sbc	r21, r1
    22f0:	46 17       	cp	r20, r22
    22f2:	57 07       	cpc	r21, r23
    22f4:	08 f4       	brcc	.+2      	; 0x22f8 <realloc+0x52>
    22f6:	98 c0       	rjmp	.+304    	; 0x2428 <realloc+0x182>
    22f8:	02 50       	subi	r16, 0x02	; 2
    22fa:	11 09       	sbc	r17, r1
    22fc:	06 1b       	sub	r16, r22
    22fe:	17 0b       	sbc	r17, r23
    2300:	01 93       	st	Z+, r16
    2302:	11 93       	st	Z+, r17
    2304:	6d 93       	st	X+, r22
    2306:	7c 93       	st	X, r23
    2308:	cf 01       	movw	r24, r30
    230a:	0e 94 c4 10 	call	0x2188	; 0x2188 <free>
    230e:	8c c0       	rjmp	.+280    	; 0x2428 <realloc+0x182>
    2310:	5b 01       	movw	r10, r22
    2312:	a0 1a       	sub	r10, r16
    2314:	b1 0a       	sbc	r11, r17
    2316:	4e 01       	movw	r8, r28
    2318:	80 0e       	add	r8, r16
    231a:	91 1e       	adc	r9, r17
    231c:	a0 91 6d 02 	lds	r26, 0x026D
    2320:	b0 91 6e 02 	lds	r27, 0x026E
    2324:	61 2c       	mov	r6, r1
    2326:	71 2c       	mov	r7, r1
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	70 e0       	ldi	r23, 0x00	; 0
    232c:	10 97       	sbiw	r26, 0x00	; 0
    232e:	09 f4       	brne	.+2      	; 0x2332 <realloc+0x8c>
    2330:	49 c0       	rjmp	.+146    	; 0x23c4 <realloc+0x11e>
    2332:	a8 15       	cp	r26, r8
    2334:	b9 05       	cpc	r27, r9
    2336:	c9 f5       	brne	.+114    	; 0x23aa <realloc+0x104>
    2338:	ed 90       	ld	r14, X+
    233a:	fc 90       	ld	r15, X
    233c:	11 97       	sbiw	r26, 0x01	; 1
    233e:	67 01       	movw	r12, r14
    2340:	42 e0       	ldi	r20, 0x02	; 2
    2342:	c4 0e       	add	r12, r20
    2344:	d1 1c       	adc	r13, r1
    2346:	ca 14       	cp	r12, r10
    2348:	db 04       	cpc	r13, r11
    234a:	78 f1       	brcs	.+94     	; 0x23aa <realloc+0x104>
    234c:	47 01       	movw	r8, r14
    234e:	8a 18       	sub	r8, r10
    2350:	9b 08       	sbc	r9, r11
    2352:	64 01       	movw	r12, r8
    2354:	42 e0       	ldi	r20, 0x02	; 2
    2356:	c4 0e       	add	r12, r20
    2358:	d1 1c       	adc	r13, r1
    235a:	12 96       	adiw	r26, 0x02	; 2
    235c:	bc 90       	ld	r11, X
    235e:	12 97       	sbiw	r26, 0x02	; 2
    2360:	13 96       	adiw	r26, 0x03	; 3
    2362:	ac 91       	ld	r26, X
    2364:	b5 e0       	ldi	r27, 0x05	; 5
    2366:	cb 16       	cp	r12, r27
    2368:	d1 04       	cpc	r13, r1
    236a:	40 f0       	brcs	.+16     	; 0x237c <realloc+0xd6>
    236c:	b2 82       	std	Z+2, r11	; 0x02
    236e:	a3 83       	std	Z+3, r26	; 0x03
    2370:	91 82       	std	Z+1, r9	; 0x01
    2372:	80 82       	st	Z, r8
    2374:	d9 01       	movw	r26, r18
    2376:	8d 93       	st	X+, r24
    2378:	9c 93       	st	X, r25
    237a:	09 c0       	rjmp	.+18     	; 0x238e <realloc+0xe8>
    237c:	0e 5f       	subi	r16, 0xFE	; 254
    237e:	1f 4f       	sbci	r17, 0xFF	; 255
    2380:	0e 0d       	add	r16, r14
    2382:	1f 1d       	adc	r17, r15
    2384:	f9 01       	movw	r30, r18
    2386:	11 83       	std	Z+1, r17	; 0x01
    2388:	00 83       	st	Z, r16
    238a:	eb 2d       	mov	r30, r11
    238c:	fa 2f       	mov	r31, r26
    238e:	61 15       	cp	r22, r1
    2390:	71 05       	cpc	r23, r1
    2392:	31 f0       	breq	.+12     	; 0x23a0 <realloc+0xfa>
    2394:	db 01       	movw	r26, r22
    2396:	13 96       	adiw	r26, 0x03	; 3
    2398:	fc 93       	st	X, r31
    239a:	ee 93       	st	-X, r30
    239c:	12 97       	sbiw	r26, 0x02	; 2
    239e:	44 c0       	rjmp	.+136    	; 0x2428 <realloc+0x182>
    23a0:	f0 93 6e 02 	sts	0x026E, r31
    23a4:	e0 93 6d 02 	sts	0x026D, r30
    23a8:	3f c0       	rjmp	.+126    	; 0x2428 <realloc+0x182>
    23aa:	6d 91       	ld	r22, X+
    23ac:	7c 91       	ld	r23, X
    23ae:	11 97       	sbiw	r26, 0x01	; 1
    23b0:	66 16       	cp	r6, r22
    23b2:	77 06       	cpc	r7, r23
    23b4:	08 f4       	brcc	.+2      	; 0x23b8 <realloc+0x112>
    23b6:	3b 01       	movw	r6, r22
    23b8:	bd 01       	movw	r22, r26
    23ba:	12 96       	adiw	r26, 0x02	; 2
    23bc:	0d 90       	ld	r0, X+
    23be:	bc 91       	ld	r27, X
    23c0:	a0 2d       	mov	r26, r0
    23c2:	b4 cf       	rjmp	.-152    	; 0x232c <realloc+0x86>
    23c4:	60 91 6b 02 	lds	r22, 0x026B
    23c8:	70 91 6c 02 	lds	r23, 0x026C
    23cc:	68 15       	cp	r22, r8
    23ce:	79 05       	cpc	r23, r9
    23d0:	e9 f4       	brne	.+58     	; 0x240c <realloc+0x166>
    23d2:	68 16       	cp	r6, r24
    23d4:	79 06       	cpc	r7, r25
    23d6:	d0 f4       	brcc	.+52     	; 0x240c <realloc+0x166>
    23d8:	40 91 00 01 	lds	r20, 0x0100
    23dc:	50 91 01 01 	lds	r21, 0x0101
    23e0:	41 15       	cp	r20, r1
    23e2:	51 05       	cpc	r21, r1
    23e4:	41 f4       	brne	.+16     	; 0x23f6 <realloc+0x150>
    23e6:	4d b7       	in	r20, 0x3d	; 61
    23e8:	5e b7       	in	r21, 0x3e	; 62
    23ea:	60 91 04 01 	lds	r22, 0x0104
    23ee:	70 91 05 01 	lds	r23, 0x0105
    23f2:	46 1b       	sub	r20, r22
    23f4:	57 0b       	sbc	r21, r23
    23f6:	e4 17       	cp	r30, r20
    23f8:	f5 07       	cpc	r31, r21
    23fa:	c0 f4       	brcc	.+48     	; 0x242c <realloc+0x186>
    23fc:	f0 93 6c 02 	sts	0x026C, r31
    2400:	e0 93 6b 02 	sts	0x026B, r30
    2404:	f9 01       	movw	r30, r18
    2406:	91 83       	std	Z+1, r25	; 0x01
    2408:	80 83       	st	Z, r24
    240a:	0e c0       	rjmp	.+28     	; 0x2428 <realloc+0x182>
    240c:	0e 94 2c 10 	call	0x2058	; 0x2058 <malloc>
    2410:	7c 01       	movw	r14, r24
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	59 f0       	breq	.+22     	; 0x242c <realloc+0x186>
    2416:	a8 01       	movw	r20, r16
    2418:	be 01       	movw	r22, r28
    241a:	0e 94 1d 12 	call	0x243a	; 0x243a <memcpy>
    241e:	ce 01       	movw	r24, r28
    2420:	0e 94 c4 10 	call	0x2188	; 0x2188 <free>
    2424:	c7 01       	movw	r24, r14
    2426:	04 c0       	rjmp	.+8      	; 0x2430 <realloc+0x18a>
    2428:	ce 01       	movw	r24, r28
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <realloc+0x18a>
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
    2434:	ee e0       	ldi	r30, 0x0E	; 14
    2436:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <__epilogue_restores__+0x8>

0000243a <memcpy>:
    243a:	fb 01       	movw	r30, r22
    243c:	dc 01       	movw	r26, r24
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <memcpy+0xa>
    2440:	01 90       	ld	r0, Z+
    2442:	0d 92       	st	X+, r0
    2444:	41 50       	subi	r20, 0x01	; 1
    2446:	50 40       	sbci	r21, 0x00	; 0
    2448:	d8 f7       	brcc	.-10     	; 0x2440 <memcpy+0x6>
    244a:	08 95       	ret

0000244c <fdevopen>:
    244c:	0f 93       	push	r16
    244e:	1f 93       	push	r17
    2450:	cf 93       	push	r28
    2452:	df 93       	push	r29
    2454:	ec 01       	movw	r28, r24
    2456:	8b 01       	movw	r16, r22
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	31 f4       	brne	.+12     	; 0x2468 <fdevopen+0x1c>
    245c:	61 15       	cp	r22, r1
    245e:	71 05       	cpc	r23, r1
    2460:	19 f4       	brne	.+6      	; 0x2468 <fdevopen+0x1c>
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	38 c0       	rjmp	.+112    	; 0x24d8 <fdevopen+0x8c>
    2468:	6e e0       	ldi	r22, 0x0E	; 14
    246a:	70 e0       	ldi	r23, 0x00	; 0
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	0e 94 79 14 	call	0x28f2	; 0x28f2 <calloc>
    2474:	fc 01       	movw	r30, r24
    2476:	00 97       	sbiw	r24, 0x00	; 0
    2478:	a1 f3       	breq	.-24     	; 0x2462 <fdevopen+0x16>
    247a:	80 e8       	ldi	r24, 0x80	; 128
    247c:	83 83       	std	Z+3, r24	; 0x03
    247e:	01 15       	cp	r16, r1
    2480:	11 05       	cpc	r17, r1
    2482:	71 f0       	breq	.+28     	; 0x24a0 <fdevopen+0x54>
    2484:	13 87       	std	Z+11, r17	; 0x0b
    2486:	02 87       	std	Z+10, r16	; 0x0a
    2488:	81 e8       	ldi	r24, 0x81	; 129
    248a:	83 83       	std	Z+3, r24	; 0x03
    248c:	80 91 6f 02 	lds	r24, 0x026F
    2490:	90 91 70 02 	lds	r25, 0x0270
    2494:	89 2b       	or	r24, r25
    2496:	21 f4       	brne	.+8      	; 0x24a0 <fdevopen+0x54>
    2498:	f0 93 70 02 	sts	0x0270, r31
    249c:	e0 93 6f 02 	sts	0x026F, r30
    24a0:	20 97       	sbiw	r28, 0x00	; 0
    24a2:	c9 f0       	breq	.+50     	; 0x24d6 <fdevopen+0x8a>
    24a4:	d1 87       	std	Z+9, r29	; 0x09
    24a6:	c0 87       	std	Z+8, r28	; 0x08
    24a8:	83 81       	ldd	r24, Z+3	; 0x03
    24aa:	82 60       	ori	r24, 0x02	; 2
    24ac:	83 83       	std	Z+3, r24	; 0x03
    24ae:	80 91 71 02 	lds	r24, 0x0271
    24b2:	90 91 72 02 	lds	r25, 0x0272
    24b6:	89 2b       	or	r24, r25
    24b8:	71 f4       	brne	.+28     	; 0x24d6 <fdevopen+0x8a>
    24ba:	f0 93 72 02 	sts	0x0272, r31
    24be:	e0 93 71 02 	sts	0x0271, r30
    24c2:	80 91 73 02 	lds	r24, 0x0273
    24c6:	90 91 74 02 	lds	r25, 0x0274
    24ca:	89 2b       	or	r24, r25
    24cc:	21 f4       	brne	.+8      	; 0x24d6 <fdevopen+0x8a>
    24ce:	f0 93 74 02 	sts	0x0274, r31
    24d2:	e0 93 73 02 	sts	0x0273, r30
    24d6:	cf 01       	movw	r24, r30
    24d8:	df 91       	pop	r29
    24da:	cf 91       	pop	r28
    24dc:	1f 91       	pop	r17
    24de:	0f 91       	pop	r16
    24e0:	08 95       	ret

000024e2 <printf>:
    24e2:	a0 e0       	ldi	r26, 0x00	; 0
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	e7 e7       	ldi	r30, 0x77	; 119
    24e8:	f2 e1       	ldi	r31, 0x12	; 18
    24ea:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__prologue_saves__+0x20>
    24ee:	fe 01       	movw	r30, r28
    24f0:	35 96       	adiw	r30, 0x05	; 5
    24f2:	61 91       	ld	r22, Z+
    24f4:	71 91       	ld	r23, Z+
    24f6:	af 01       	movw	r20, r30
    24f8:	80 91 71 02 	lds	r24, 0x0271
    24fc:	90 91 72 02 	lds	r25, 0x0272
    2500:	0e 94 a7 12 	call	0x254e	; 0x254e <vfprintf>
    2504:	e2 e0       	ldi	r30, 0x02	; 2
    2506:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__epilogue_restores__+0x20>

0000250a <sprintf>:
    250a:	ae e0       	ldi	r26, 0x0E	; 14
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	eb e8       	ldi	r30, 0x8B	; 139
    2510:	f2 e1       	ldi	r31, 0x12	; 18
    2512:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__prologue_saves__+0x1c>
    2516:	0d 89       	ldd	r16, Y+21	; 0x15
    2518:	1e 89       	ldd	r17, Y+22	; 0x16
    251a:	86 e0       	ldi	r24, 0x06	; 6
    251c:	8c 83       	std	Y+4, r24	; 0x04
    251e:	1a 83       	std	Y+2, r17	; 0x02
    2520:	09 83       	std	Y+1, r16	; 0x01
    2522:	8f ef       	ldi	r24, 0xFF	; 255
    2524:	9f e7       	ldi	r25, 0x7F	; 127
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
    252a:	ae 01       	movw	r20, r28
    252c:	47 5e       	subi	r20, 0xE7	; 231
    252e:	5f 4f       	sbci	r21, 0xFF	; 255
    2530:	6f 89       	ldd	r22, Y+23	; 0x17
    2532:	78 8d       	ldd	r23, Y+24	; 0x18
    2534:	ce 01       	movw	r24, r28
    2536:	01 96       	adiw	r24, 0x01	; 1
    2538:	0e 94 a7 12 	call	0x254e	; 0x254e <vfprintf>
    253c:	ef 81       	ldd	r30, Y+7	; 0x07
    253e:	f8 85       	ldd	r31, Y+8	; 0x08
    2540:	e0 0f       	add	r30, r16
    2542:	f1 1f       	adc	r31, r17
    2544:	10 82       	st	Z, r1
    2546:	2e 96       	adiw	r28, 0x0e	; 14
    2548:	e4 e0       	ldi	r30, 0x04	; 4
    254a:	0c 94 6c 15 	jmp	0x2ad8	; 0x2ad8 <__epilogue_restores__+0x1c>

0000254e <vfprintf>:
    254e:	ac e0       	ldi	r26, 0x0C	; 12
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	ed ea       	ldi	r30, 0xAD	; 173
    2554:	f2 e1       	ldi	r31, 0x12	; 18
    2556:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <__prologue_saves__>
    255a:	7c 01       	movw	r14, r24
    255c:	6b 01       	movw	r12, r22
    255e:	8a 01       	movw	r16, r20
    2560:	fc 01       	movw	r30, r24
    2562:	17 82       	std	Z+7, r1	; 0x07
    2564:	16 82       	std	Z+6, r1	; 0x06
    2566:	83 81       	ldd	r24, Z+3	; 0x03
    2568:	81 ff       	sbrs	r24, 1
    256a:	bd c1       	rjmp	.+890    	; 0x28e6 <vfprintf+0x398>
    256c:	ce 01       	movw	r24, r28
    256e:	01 96       	adiw	r24, 0x01	; 1
    2570:	4c 01       	movw	r8, r24
    2572:	f7 01       	movw	r30, r14
    2574:	93 81       	ldd	r25, Z+3	; 0x03
    2576:	f6 01       	movw	r30, r12
    2578:	93 fd       	sbrc	r25, 3
    257a:	85 91       	lpm	r24, Z+
    257c:	93 ff       	sbrs	r25, 3
    257e:	81 91       	ld	r24, Z+
    2580:	6f 01       	movw	r12, r30
    2582:	88 23       	and	r24, r24
    2584:	09 f4       	brne	.+2      	; 0x2588 <vfprintf+0x3a>
    2586:	ab c1       	rjmp	.+854    	; 0x28de <vfprintf+0x390>
    2588:	85 32       	cpi	r24, 0x25	; 37
    258a:	39 f4       	brne	.+14     	; 0x259a <vfprintf+0x4c>
    258c:	93 fd       	sbrc	r25, 3
    258e:	85 91       	lpm	r24, Z+
    2590:	93 ff       	sbrs	r25, 3
    2592:	81 91       	ld	r24, Z+
    2594:	6f 01       	movw	r12, r30
    2596:	85 32       	cpi	r24, 0x25	; 37
    2598:	29 f4       	brne	.+10     	; 0x25a4 <vfprintf+0x56>
    259a:	b7 01       	movw	r22, r14
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	0e 94 b2 14 	call	0x2964	; 0x2964 <fputc>
    25a2:	e7 cf       	rjmp	.-50     	; 0x2572 <vfprintf+0x24>
    25a4:	51 2c       	mov	r5, r1
    25a6:	31 2c       	mov	r3, r1
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	20 32       	cpi	r18, 0x20	; 32
    25ac:	a0 f4       	brcc	.+40     	; 0x25d6 <vfprintf+0x88>
    25ae:	8b 32       	cpi	r24, 0x2B	; 43
    25b0:	69 f0       	breq	.+26     	; 0x25cc <vfprintf+0x7e>
    25b2:	30 f4       	brcc	.+12     	; 0x25c0 <vfprintf+0x72>
    25b4:	80 32       	cpi	r24, 0x20	; 32
    25b6:	59 f0       	breq	.+22     	; 0x25ce <vfprintf+0x80>
    25b8:	83 32       	cpi	r24, 0x23	; 35
    25ba:	69 f4       	brne	.+26     	; 0x25d6 <vfprintf+0x88>
    25bc:	20 61       	ori	r18, 0x10	; 16
    25be:	2c c0       	rjmp	.+88     	; 0x2618 <vfprintf+0xca>
    25c0:	8d 32       	cpi	r24, 0x2D	; 45
    25c2:	39 f0       	breq	.+14     	; 0x25d2 <vfprintf+0x84>
    25c4:	80 33       	cpi	r24, 0x30	; 48
    25c6:	39 f4       	brne	.+14     	; 0x25d6 <vfprintf+0x88>
    25c8:	21 60       	ori	r18, 0x01	; 1
    25ca:	26 c0       	rjmp	.+76     	; 0x2618 <vfprintf+0xca>
    25cc:	22 60       	ori	r18, 0x02	; 2
    25ce:	24 60       	ori	r18, 0x04	; 4
    25d0:	23 c0       	rjmp	.+70     	; 0x2618 <vfprintf+0xca>
    25d2:	28 60       	ori	r18, 0x08	; 8
    25d4:	21 c0       	rjmp	.+66     	; 0x2618 <vfprintf+0xca>
    25d6:	27 fd       	sbrc	r18, 7
    25d8:	27 c0       	rjmp	.+78     	; 0x2628 <vfprintf+0xda>
    25da:	30 ed       	ldi	r19, 0xD0	; 208
    25dc:	38 0f       	add	r19, r24
    25de:	3a 30       	cpi	r19, 0x0A	; 10
    25e0:	78 f4       	brcc	.+30     	; 0x2600 <vfprintf+0xb2>
    25e2:	26 ff       	sbrs	r18, 6
    25e4:	06 c0       	rjmp	.+12     	; 0x25f2 <vfprintf+0xa4>
    25e6:	fa e0       	ldi	r31, 0x0A	; 10
    25e8:	5f 9e       	mul	r5, r31
    25ea:	30 0d       	add	r19, r0
    25ec:	11 24       	eor	r1, r1
    25ee:	53 2e       	mov	r5, r19
    25f0:	13 c0       	rjmp	.+38     	; 0x2618 <vfprintf+0xca>
    25f2:	8a e0       	ldi	r24, 0x0A	; 10
    25f4:	38 9e       	mul	r3, r24
    25f6:	30 0d       	add	r19, r0
    25f8:	11 24       	eor	r1, r1
    25fa:	33 2e       	mov	r3, r19
    25fc:	20 62       	ori	r18, 0x20	; 32
    25fe:	0c c0       	rjmp	.+24     	; 0x2618 <vfprintf+0xca>
    2600:	8e 32       	cpi	r24, 0x2E	; 46
    2602:	21 f4       	brne	.+8      	; 0x260c <vfprintf+0xbe>
    2604:	26 fd       	sbrc	r18, 6
    2606:	6b c1       	rjmp	.+726    	; 0x28de <vfprintf+0x390>
    2608:	20 64       	ori	r18, 0x40	; 64
    260a:	06 c0       	rjmp	.+12     	; 0x2618 <vfprintf+0xca>
    260c:	8c 36       	cpi	r24, 0x6C	; 108
    260e:	11 f4       	brne	.+4      	; 0x2614 <vfprintf+0xc6>
    2610:	20 68       	ori	r18, 0x80	; 128
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <vfprintf+0xca>
    2614:	88 36       	cpi	r24, 0x68	; 104
    2616:	41 f4       	brne	.+16     	; 0x2628 <vfprintf+0xda>
    2618:	f6 01       	movw	r30, r12
    261a:	93 fd       	sbrc	r25, 3
    261c:	85 91       	lpm	r24, Z+
    261e:	93 ff       	sbrs	r25, 3
    2620:	81 91       	ld	r24, Z+
    2622:	6f 01       	movw	r12, r30
    2624:	81 11       	cpse	r24, r1
    2626:	c1 cf       	rjmp	.-126    	; 0x25aa <vfprintf+0x5c>
    2628:	98 2f       	mov	r25, r24
    262a:	9f 7d       	andi	r25, 0xDF	; 223
    262c:	95 54       	subi	r25, 0x45	; 69
    262e:	93 30       	cpi	r25, 0x03	; 3
    2630:	28 f4       	brcc	.+10     	; 0x263c <vfprintf+0xee>
    2632:	0c 5f       	subi	r16, 0xFC	; 252
    2634:	1f 4f       	sbci	r17, 0xFF	; 255
    2636:	ff e3       	ldi	r31, 0x3F	; 63
    2638:	f9 83       	std	Y+1, r31	; 0x01
    263a:	0d c0       	rjmp	.+26     	; 0x2656 <vfprintf+0x108>
    263c:	83 36       	cpi	r24, 0x63	; 99
    263e:	31 f0       	breq	.+12     	; 0x264c <vfprintf+0xfe>
    2640:	83 37       	cpi	r24, 0x73	; 115
    2642:	71 f0       	breq	.+28     	; 0x2660 <vfprintf+0x112>
    2644:	83 35       	cpi	r24, 0x53	; 83
    2646:	09 f0       	breq	.+2      	; 0x264a <vfprintf+0xfc>
    2648:	5b c0       	rjmp	.+182    	; 0x2700 <vfprintf+0x1b2>
    264a:	22 c0       	rjmp	.+68     	; 0x2690 <vfprintf+0x142>
    264c:	f8 01       	movw	r30, r16
    264e:	80 81       	ld	r24, Z
    2650:	89 83       	std	Y+1, r24	; 0x01
    2652:	0e 5f       	subi	r16, 0xFE	; 254
    2654:	1f 4f       	sbci	r17, 0xFF	; 255
    2656:	44 24       	eor	r4, r4
    2658:	43 94       	inc	r4
    265a:	51 2c       	mov	r5, r1
    265c:	54 01       	movw	r10, r8
    265e:	15 c0       	rjmp	.+42     	; 0x268a <vfprintf+0x13c>
    2660:	38 01       	movw	r6, r16
    2662:	f2 e0       	ldi	r31, 0x02	; 2
    2664:	6f 0e       	add	r6, r31
    2666:	71 1c       	adc	r7, r1
    2668:	f8 01       	movw	r30, r16
    266a:	a0 80       	ld	r10, Z
    266c:	b1 80       	ldd	r11, Z+1	; 0x01
    266e:	26 ff       	sbrs	r18, 6
    2670:	03 c0       	rjmp	.+6      	; 0x2678 <vfprintf+0x12a>
    2672:	65 2d       	mov	r22, r5
    2674:	70 e0       	ldi	r23, 0x00	; 0
    2676:	02 c0       	rjmp	.+4      	; 0x267c <vfprintf+0x12e>
    2678:	6f ef       	ldi	r22, 0xFF	; 255
    267a:	7f ef       	ldi	r23, 0xFF	; 255
    267c:	c5 01       	movw	r24, r10
    267e:	2c 87       	std	Y+12, r18	; 0x0c
    2680:	0e 94 a7 14 	call	0x294e	; 0x294e <strnlen>
    2684:	2c 01       	movw	r4, r24
    2686:	83 01       	movw	r16, r6
    2688:	2c 85       	ldd	r18, Y+12	; 0x0c
    268a:	2f 77       	andi	r18, 0x7F	; 127
    268c:	22 2e       	mov	r2, r18
    268e:	17 c0       	rjmp	.+46     	; 0x26be <vfprintf+0x170>
    2690:	38 01       	movw	r6, r16
    2692:	f2 e0       	ldi	r31, 0x02	; 2
    2694:	6f 0e       	add	r6, r31
    2696:	71 1c       	adc	r7, r1
    2698:	f8 01       	movw	r30, r16
    269a:	a0 80       	ld	r10, Z
    269c:	b1 80       	ldd	r11, Z+1	; 0x01
    269e:	26 ff       	sbrs	r18, 6
    26a0:	03 c0       	rjmp	.+6      	; 0x26a8 <vfprintf+0x15a>
    26a2:	65 2d       	mov	r22, r5
    26a4:	70 e0       	ldi	r23, 0x00	; 0
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <vfprintf+0x15e>
    26a8:	6f ef       	ldi	r22, 0xFF	; 255
    26aa:	7f ef       	ldi	r23, 0xFF	; 255
    26ac:	c5 01       	movw	r24, r10
    26ae:	2c 87       	std	Y+12, r18	; 0x0c
    26b0:	0e 94 95 14 	call	0x292a	; 0x292a <strnlen_P>
    26b4:	2c 01       	movw	r4, r24
    26b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    26b8:	20 68       	ori	r18, 0x80	; 128
    26ba:	22 2e       	mov	r2, r18
    26bc:	83 01       	movw	r16, r6
    26be:	23 fc       	sbrc	r2, 3
    26c0:	1b c0       	rjmp	.+54     	; 0x26f8 <vfprintf+0x1aa>
    26c2:	83 2d       	mov	r24, r3
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	48 16       	cp	r4, r24
    26c8:	59 06       	cpc	r5, r25
    26ca:	b0 f4       	brcc	.+44     	; 0x26f8 <vfprintf+0x1aa>
    26cc:	b7 01       	movw	r22, r14
    26ce:	80 e2       	ldi	r24, 0x20	; 32
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	0e 94 b2 14 	call	0x2964	; 0x2964 <fputc>
    26d6:	3a 94       	dec	r3
    26d8:	f4 cf       	rjmp	.-24     	; 0x26c2 <vfprintf+0x174>
    26da:	f5 01       	movw	r30, r10
    26dc:	27 fc       	sbrc	r2, 7
    26de:	85 91       	lpm	r24, Z+
    26e0:	27 fe       	sbrs	r2, 7
    26e2:	81 91       	ld	r24, Z+
    26e4:	5f 01       	movw	r10, r30
    26e6:	b7 01       	movw	r22, r14
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	0e 94 b2 14 	call	0x2964	; 0x2964 <fputc>
    26ee:	31 10       	cpse	r3, r1
    26f0:	3a 94       	dec	r3
    26f2:	f1 e0       	ldi	r31, 0x01	; 1
    26f4:	4f 1a       	sub	r4, r31
    26f6:	51 08       	sbc	r5, r1
    26f8:	41 14       	cp	r4, r1
    26fa:	51 04       	cpc	r5, r1
    26fc:	71 f7       	brne	.-36     	; 0x26da <vfprintf+0x18c>
    26fe:	e5 c0       	rjmp	.+458    	; 0x28ca <vfprintf+0x37c>
    2700:	84 36       	cpi	r24, 0x64	; 100
    2702:	11 f0       	breq	.+4      	; 0x2708 <vfprintf+0x1ba>
    2704:	89 36       	cpi	r24, 0x69	; 105
    2706:	39 f5       	brne	.+78     	; 0x2756 <vfprintf+0x208>
    2708:	f8 01       	movw	r30, r16
    270a:	27 ff       	sbrs	r18, 7
    270c:	07 c0       	rjmp	.+14     	; 0x271c <vfprintf+0x1ce>
    270e:	60 81       	ld	r22, Z
    2710:	71 81       	ldd	r23, Z+1	; 0x01
    2712:	82 81       	ldd	r24, Z+2	; 0x02
    2714:	93 81       	ldd	r25, Z+3	; 0x03
    2716:	0c 5f       	subi	r16, 0xFC	; 252
    2718:	1f 4f       	sbci	r17, 0xFF	; 255
    271a:	08 c0       	rjmp	.+16     	; 0x272c <vfprintf+0x1de>
    271c:	60 81       	ld	r22, Z
    271e:	71 81       	ldd	r23, Z+1	; 0x01
    2720:	88 27       	eor	r24, r24
    2722:	77 fd       	sbrc	r23, 7
    2724:	80 95       	com	r24
    2726:	98 2f       	mov	r25, r24
    2728:	0e 5f       	subi	r16, 0xFE	; 254
    272a:	1f 4f       	sbci	r17, 0xFF	; 255
    272c:	2f 76       	andi	r18, 0x6F	; 111
    272e:	b2 2e       	mov	r11, r18
    2730:	97 ff       	sbrs	r25, 7
    2732:	09 c0       	rjmp	.+18     	; 0x2746 <vfprintf+0x1f8>
    2734:	90 95       	com	r25
    2736:	80 95       	com	r24
    2738:	70 95       	com	r23
    273a:	61 95       	neg	r22
    273c:	7f 4f       	sbci	r23, 0xFF	; 255
    273e:	8f 4f       	sbci	r24, 0xFF	; 255
    2740:	9f 4f       	sbci	r25, 0xFF	; 255
    2742:	20 68       	ori	r18, 0x80	; 128
    2744:	b2 2e       	mov	r11, r18
    2746:	2a e0       	ldi	r18, 0x0A	; 10
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	a4 01       	movw	r20, r8
    274c:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__ultoa_invert>
    2750:	a8 2e       	mov	r10, r24
    2752:	a8 18       	sub	r10, r8
    2754:	44 c0       	rjmp	.+136    	; 0x27de <vfprintf+0x290>
    2756:	85 37       	cpi	r24, 0x75	; 117
    2758:	29 f4       	brne	.+10     	; 0x2764 <vfprintf+0x216>
    275a:	2f 7e       	andi	r18, 0xEF	; 239
    275c:	b2 2e       	mov	r11, r18
    275e:	2a e0       	ldi	r18, 0x0A	; 10
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	25 c0       	rjmp	.+74     	; 0x27ae <vfprintf+0x260>
    2764:	f2 2f       	mov	r31, r18
    2766:	f9 7f       	andi	r31, 0xF9	; 249
    2768:	bf 2e       	mov	r11, r31
    276a:	8f 36       	cpi	r24, 0x6F	; 111
    276c:	c1 f0       	breq	.+48     	; 0x279e <vfprintf+0x250>
    276e:	18 f4       	brcc	.+6      	; 0x2776 <vfprintf+0x228>
    2770:	88 35       	cpi	r24, 0x58	; 88
    2772:	79 f0       	breq	.+30     	; 0x2792 <vfprintf+0x244>
    2774:	b4 c0       	rjmp	.+360    	; 0x28de <vfprintf+0x390>
    2776:	80 37       	cpi	r24, 0x70	; 112
    2778:	19 f0       	breq	.+6      	; 0x2780 <vfprintf+0x232>
    277a:	88 37       	cpi	r24, 0x78	; 120
    277c:	21 f0       	breq	.+8      	; 0x2786 <vfprintf+0x238>
    277e:	af c0       	rjmp	.+350    	; 0x28de <vfprintf+0x390>
    2780:	2f 2f       	mov	r18, r31
    2782:	20 61       	ori	r18, 0x10	; 16
    2784:	b2 2e       	mov	r11, r18
    2786:	b4 fe       	sbrs	r11, 4
    2788:	0d c0       	rjmp	.+26     	; 0x27a4 <vfprintf+0x256>
    278a:	8b 2d       	mov	r24, r11
    278c:	84 60       	ori	r24, 0x04	; 4
    278e:	b8 2e       	mov	r11, r24
    2790:	09 c0       	rjmp	.+18     	; 0x27a4 <vfprintf+0x256>
    2792:	24 ff       	sbrs	r18, 4
    2794:	0a c0       	rjmp	.+20     	; 0x27aa <vfprintf+0x25c>
    2796:	9f 2f       	mov	r25, r31
    2798:	96 60       	ori	r25, 0x06	; 6
    279a:	b9 2e       	mov	r11, r25
    279c:	06 c0       	rjmp	.+12     	; 0x27aa <vfprintf+0x25c>
    279e:	28 e0       	ldi	r18, 0x08	; 8
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	05 c0       	rjmp	.+10     	; 0x27ae <vfprintf+0x260>
    27a4:	20 e1       	ldi	r18, 0x10	; 16
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	02 c0       	rjmp	.+4      	; 0x27ae <vfprintf+0x260>
    27aa:	20 e1       	ldi	r18, 0x10	; 16
    27ac:	32 e0       	ldi	r19, 0x02	; 2
    27ae:	f8 01       	movw	r30, r16
    27b0:	b7 fe       	sbrs	r11, 7
    27b2:	07 c0       	rjmp	.+14     	; 0x27c2 <vfprintf+0x274>
    27b4:	60 81       	ld	r22, Z
    27b6:	71 81       	ldd	r23, Z+1	; 0x01
    27b8:	82 81       	ldd	r24, Z+2	; 0x02
    27ba:	93 81       	ldd	r25, Z+3	; 0x03
    27bc:	0c 5f       	subi	r16, 0xFC	; 252
    27be:	1f 4f       	sbci	r17, 0xFF	; 255
    27c0:	06 c0       	rjmp	.+12     	; 0x27ce <vfprintf+0x280>
    27c2:	60 81       	ld	r22, Z
    27c4:	71 81       	ldd	r23, Z+1	; 0x01
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	0e 5f       	subi	r16, 0xFE	; 254
    27cc:	1f 4f       	sbci	r17, 0xFF	; 255
    27ce:	a4 01       	movw	r20, r8
    27d0:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__ultoa_invert>
    27d4:	a8 2e       	mov	r10, r24
    27d6:	a8 18       	sub	r10, r8
    27d8:	fb 2d       	mov	r31, r11
    27da:	ff 77       	andi	r31, 0x7F	; 127
    27dc:	bf 2e       	mov	r11, r31
    27de:	b6 fe       	sbrs	r11, 6
    27e0:	0b c0       	rjmp	.+22     	; 0x27f8 <vfprintf+0x2aa>
    27e2:	2b 2d       	mov	r18, r11
    27e4:	2e 7f       	andi	r18, 0xFE	; 254
    27e6:	a5 14       	cp	r10, r5
    27e8:	50 f4       	brcc	.+20     	; 0x27fe <vfprintf+0x2b0>
    27ea:	b4 fe       	sbrs	r11, 4
    27ec:	0a c0       	rjmp	.+20     	; 0x2802 <vfprintf+0x2b4>
    27ee:	b2 fc       	sbrc	r11, 2
    27f0:	08 c0       	rjmp	.+16     	; 0x2802 <vfprintf+0x2b4>
    27f2:	2b 2d       	mov	r18, r11
    27f4:	2e 7e       	andi	r18, 0xEE	; 238
    27f6:	05 c0       	rjmp	.+10     	; 0x2802 <vfprintf+0x2b4>
    27f8:	7a 2c       	mov	r7, r10
    27fa:	2b 2d       	mov	r18, r11
    27fc:	03 c0       	rjmp	.+6      	; 0x2804 <vfprintf+0x2b6>
    27fe:	7a 2c       	mov	r7, r10
    2800:	01 c0       	rjmp	.+2      	; 0x2804 <vfprintf+0x2b6>
    2802:	75 2c       	mov	r7, r5
    2804:	24 ff       	sbrs	r18, 4
    2806:	0d c0       	rjmp	.+26     	; 0x2822 <vfprintf+0x2d4>
    2808:	fe 01       	movw	r30, r28
    280a:	ea 0d       	add	r30, r10
    280c:	f1 1d       	adc	r31, r1
    280e:	80 81       	ld	r24, Z
    2810:	80 33       	cpi	r24, 0x30	; 48
    2812:	11 f4       	brne	.+4      	; 0x2818 <vfprintf+0x2ca>
    2814:	29 7e       	andi	r18, 0xE9	; 233
    2816:	09 c0       	rjmp	.+18     	; 0x282a <vfprintf+0x2dc>
    2818:	22 ff       	sbrs	r18, 2
    281a:	06 c0       	rjmp	.+12     	; 0x2828 <vfprintf+0x2da>
    281c:	73 94       	inc	r7
    281e:	73 94       	inc	r7
    2820:	04 c0       	rjmp	.+8      	; 0x282a <vfprintf+0x2dc>
    2822:	82 2f       	mov	r24, r18
    2824:	86 78       	andi	r24, 0x86	; 134
    2826:	09 f0       	breq	.+2      	; 0x282a <vfprintf+0x2dc>
    2828:	73 94       	inc	r7
    282a:	23 fd       	sbrc	r18, 3
    282c:	13 c0       	rjmp	.+38     	; 0x2854 <vfprintf+0x306>
    282e:	20 ff       	sbrs	r18, 0
    2830:	06 c0       	rjmp	.+12     	; 0x283e <vfprintf+0x2f0>
    2832:	5a 2c       	mov	r5, r10
    2834:	73 14       	cp	r7, r3
    2836:	18 f4       	brcc	.+6      	; 0x283e <vfprintf+0x2f0>
    2838:	53 0c       	add	r5, r3
    283a:	57 18       	sub	r5, r7
    283c:	73 2c       	mov	r7, r3
    283e:	73 14       	cp	r7, r3
    2840:	68 f4       	brcc	.+26     	; 0x285c <vfprintf+0x30e>
    2842:	b7 01       	movw	r22, r14
    2844:	80 e2       	ldi	r24, 0x20	; 32
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	2c 87       	std	Y+12, r18	; 0x0c
    284a:	0e 94 b2 14 	call	0x2964	; 0x2964 <fputc>
    284e:	73 94       	inc	r7
    2850:	2c 85       	ldd	r18, Y+12	; 0x0c
    2852:	f5 cf       	rjmp	.-22     	; 0x283e <vfprintf+0x2f0>
    2854:	73 14       	cp	r7, r3
    2856:	10 f4       	brcc	.+4      	; 0x285c <vfprintf+0x30e>
    2858:	37 18       	sub	r3, r7
    285a:	01 c0       	rjmp	.+2      	; 0x285e <vfprintf+0x310>
    285c:	31 2c       	mov	r3, r1
    285e:	24 ff       	sbrs	r18, 4
    2860:	12 c0       	rjmp	.+36     	; 0x2886 <vfprintf+0x338>
    2862:	b7 01       	movw	r22, r14
    2864:	80 e3       	ldi	r24, 0x30	; 48
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	2c 87       	std	Y+12, r18	; 0x0c
    286a:	0e 94 b2 14 	call	0x2964	; 0x2964 <fputc>
    286e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2870:	22 ff       	sbrs	r18, 2
    2872:	17 c0       	rjmp	.+46     	; 0x28a2 <vfprintf+0x354>
    2874:	21 ff       	sbrs	r18, 1
    2876:	03 c0       	rjmp	.+6      	; 0x287e <vfprintf+0x330>
    2878:	88 e5       	ldi	r24, 0x58	; 88
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	02 c0       	rjmp	.+4      	; 0x2882 <vfprintf+0x334>
    287e:	88 e7       	ldi	r24, 0x78	; 120
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	b7 01       	movw	r22, r14
    2884:	0c c0       	rjmp	.+24     	; 0x289e <vfprintf+0x350>
    2886:	82 2f       	mov	r24, r18
    2888:	86 78       	andi	r24, 0x86	; 134
    288a:	59 f0       	breq	.+22     	; 0x28a2 <vfprintf+0x354>
    288c:	21 fd       	sbrc	r18, 1
    288e:	02 c0       	rjmp	.+4      	; 0x2894 <vfprintf+0x346>
    2890:	80 e2       	ldi	r24, 0x20	; 32
    2892:	01 c0       	rjmp	.+2      	; 0x2896 <vfprintf+0x348>
    2894:	8b e2       	ldi	r24, 0x2B	; 43
    2896:	27 fd       	sbrc	r18, 7
    2898:	8d e2       	ldi	r24, 0x2D	; 45
    289a:	b7 01       	movw	r22, r14
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	0e 94 b2 14 	call	0x2964	; 0x2964 <fputc>
    28a2:	a5 14       	cp	r10, r5
    28a4:	38 f4       	brcc	.+14     	; 0x28b4 <vfprintf+0x366>
    28a6:	b7 01       	movw	r22, r14
    28a8:	80 e3       	ldi	r24, 0x30	; 48
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	0e 94 b2 14 	call	0x2964	; 0x2964 <fputc>
    28b0:	5a 94       	dec	r5
    28b2:	f7 cf       	rjmp	.-18     	; 0x28a2 <vfprintf+0x354>
    28b4:	aa 94       	dec	r10
    28b6:	f4 01       	movw	r30, r8
    28b8:	ea 0d       	add	r30, r10
    28ba:	f1 1d       	adc	r31, r1
    28bc:	80 81       	ld	r24, Z
    28be:	b7 01       	movw	r22, r14
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	0e 94 b2 14 	call	0x2964	; 0x2964 <fputc>
    28c6:	a1 10       	cpse	r10, r1
    28c8:	f5 cf       	rjmp	.-22     	; 0x28b4 <vfprintf+0x366>
    28ca:	33 20       	and	r3, r3
    28cc:	09 f4       	brne	.+2      	; 0x28d0 <vfprintf+0x382>
    28ce:	51 ce       	rjmp	.-862    	; 0x2572 <vfprintf+0x24>
    28d0:	b7 01       	movw	r22, r14
    28d2:	80 e2       	ldi	r24, 0x20	; 32
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	0e 94 b2 14 	call	0x2964	; 0x2964 <fputc>
    28da:	3a 94       	dec	r3
    28dc:	f6 cf       	rjmp	.-20     	; 0x28ca <vfprintf+0x37c>
    28de:	f7 01       	movw	r30, r14
    28e0:	86 81       	ldd	r24, Z+6	; 0x06
    28e2:	97 81       	ldd	r25, Z+7	; 0x07
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <vfprintf+0x39c>
    28e6:	8f ef       	ldi	r24, 0xFF	; 255
    28e8:	9f ef       	ldi	r25, 0xFF	; 255
    28ea:	2c 96       	adiw	r28, 0x0c	; 12
    28ec:	e2 e1       	ldi	r30, 0x12	; 18
    28ee:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__epilogue_restores__>

000028f2 <calloc>:
    28f2:	0f 93       	push	r16
    28f4:	1f 93       	push	r17
    28f6:	cf 93       	push	r28
    28f8:	df 93       	push	r29
    28fa:	86 9f       	mul	r24, r22
    28fc:	80 01       	movw	r16, r0
    28fe:	87 9f       	mul	r24, r23
    2900:	10 0d       	add	r17, r0
    2902:	96 9f       	mul	r25, r22
    2904:	10 0d       	add	r17, r0
    2906:	11 24       	eor	r1, r1
    2908:	c8 01       	movw	r24, r16
    290a:	0e 94 2c 10 	call	0x2058	; 0x2058 <malloc>
    290e:	ec 01       	movw	r28, r24
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	29 f0       	breq	.+10     	; 0x291e <calloc+0x2c>
    2914:	a8 01       	movw	r20, r16
    2916:	60 e0       	ldi	r22, 0x00	; 0
    2918:	70 e0       	ldi	r23, 0x00	; 0
    291a:	0e 94 a0 14 	call	0x2940	; 0x2940 <memset>
    291e:	ce 01       	movw	r24, r28
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	1f 91       	pop	r17
    2926:	0f 91       	pop	r16
    2928:	08 95       	ret

0000292a <strnlen_P>:
    292a:	fc 01       	movw	r30, r24
    292c:	05 90       	lpm	r0, Z+
    292e:	61 50       	subi	r22, 0x01	; 1
    2930:	70 40       	sbci	r23, 0x00	; 0
    2932:	01 10       	cpse	r0, r1
    2934:	d8 f7       	brcc	.-10     	; 0x292c <strnlen_P+0x2>
    2936:	80 95       	com	r24
    2938:	90 95       	com	r25
    293a:	8e 0f       	add	r24, r30
    293c:	9f 1f       	adc	r25, r31
    293e:	08 95       	ret

00002940 <memset>:
    2940:	dc 01       	movw	r26, r24
    2942:	01 c0       	rjmp	.+2      	; 0x2946 <memset+0x6>
    2944:	6d 93       	st	X+, r22
    2946:	41 50       	subi	r20, 0x01	; 1
    2948:	50 40       	sbci	r21, 0x00	; 0
    294a:	e0 f7       	brcc	.-8      	; 0x2944 <memset+0x4>
    294c:	08 95       	ret

0000294e <strnlen>:
    294e:	fc 01       	movw	r30, r24
    2950:	61 50       	subi	r22, 0x01	; 1
    2952:	70 40       	sbci	r23, 0x00	; 0
    2954:	01 90       	ld	r0, Z+
    2956:	01 10       	cpse	r0, r1
    2958:	d8 f7       	brcc	.-10     	; 0x2950 <strnlen+0x2>
    295a:	80 95       	com	r24
    295c:	90 95       	com	r25
    295e:	8e 0f       	add	r24, r30
    2960:	9f 1f       	adc	r25, r31
    2962:	08 95       	ret

00002964 <fputc>:
    2964:	0f 93       	push	r16
    2966:	1f 93       	push	r17
    2968:	cf 93       	push	r28
    296a:	df 93       	push	r29
    296c:	18 2f       	mov	r17, r24
    296e:	09 2f       	mov	r16, r25
    2970:	eb 01       	movw	r28, r22
    2972:	8b 81       	ldd	r24, Y+3	; 0x03
    2974:	81 fd       	sbrc	r24, 1
    2976:	03 c0       	rjmp	.+6      	; 0x297e <fputc+0x1a>
    2978:	8f ef       	ldi	r24, 0xFF	; 255
    297a:	9f ef       	ldi	r25, 0xFF	; 255
    297c:	20 c0       	rjmp	.+64     	; 0x29be <fputc+0x5a>
    297e:	82 ff       	sbrs	r24, 2
    2980:	10 c0       	rjmp	.+32     	; 0x29a2 <fputc+0x3e>
    2982:	4e 81       	ldd	r20, Y+6	; 0x06
    2984:	5f 81       	ldd	r21, Y+7	; 0x07
    2986:	2c 81       	ldd	r18, Y+4	; 0x04
    2988:	3d 81       	ldd	r19, Y+5	; 0x05
    298a:	42 17       	cp	r20, r18
    298c:	53 07       	cpc	r21, r19
    298e:	7c f4       	brge	.+30     	; 0x29ae <fputc+0x4a>
    2990:	e8 81       	ld	r30, Y
    2992:	f9 81       	ldd	r31, Y+1	; 0x01
    2994:	9f 01       	movw	r18, r30
    2996:	2f 5f       	subi	r18, 0xFF	; 255
    2998:	3f 4f       	sbci	r19, 0xFF	; 255
    299a:	39 83       	std	Y+1, r19	; 0x01
    299c:	28 83       	st	Y, r18
    299e:	10 83       	st	Z, r17
    29a0:	06 c0       	rjmp	.+12     	; 0x29ae <fputc+0x4a>
    29a2:	e8 85       	ldd	r30, Y+8	; 0x08
    29a4:	f9 85       	ldd	r31, Y+9	; 0x09
    29a6:	81 2f       	mov	r24, r17
    29a8:	09 95       	icall
    29aa:	89 2b       	or	r24, r25
    29ac:	29 f7       	brne	.-54     	; 0x2978 <fputc+0x14>
    29ae:	2e 81       	ldd	r18, Y+6	; 0x06
    29b0:	3f 81       	ldd	r19, Y+7	; 0x07
    29b2:	2f 5f       	subi	r18, 0xFF	; 255
    29b4:	3f 4f       	sbci	r19, 0xFF	; 255
    29b6:	3f 83       	std	Y+7, r19	; 0x07
    29b8:	2e 83       	std	Y+6, r18	; 0x06
    29ba:	81 2f       	mov	r24, r17
    29bc:	90 2f       	mov	r25, r16
    29be:	df 91       	pop	r29
    29c0:	cf 91       	pop	r28
    29c2:	1f 91       	pop	r17
    29c4:	0f 91       	pop	r16
    29c6:	08 95       	ret

000029c8 <__ultoa_invert>:
    29c8:	fa 01       	movw	r30, r20
    29ca:	aa 27       	eor	r26, r26
    29cc:	28 30       	cpi	r18, 0x08	; 8
    29ce:	51 f1       	breq	.+84     	; 0x2a24 <__ultoa_invert+0x5c>
    29d0:	20 31       	cpi	r18, 0x10	; 16
    29d2:	81 f1       	breq	.+96     	; 0x2a34 <__ultoa_invert+0x6c>
    29d4:	e8 94       	clt
    29d6:	6f 93       	push	r22
    29d8:	6e 7f       	andi	r22, 0xFE	; 254
    29da:	6e 5f       	subi	r22, 0xFE	; 254
    29dc:	7f 4f       	sbci	r23, 0xFF	; 255
    29de:	8f 4f       	sbci	r24, 0xFF	; 255
    29e0:	9f 4f       	sbci	r25, 0xFF	; 255
    29e2:	af 4f       	sbci	r26, 0xFF	; 255
    29e4:	b1 e0       	ldi	r27, 0x01	; 1
    29e6:	3e d0       	rcall	.+124    	; 0x2a64 <__ultoa_invert+0x9c>
    29e8:	b4 e0       	ldi	r27, 0x04	; 4
    29ea:	3c d0       	rcall	.+120    	; 0x2a64 <__ultoa_invert+0x9c>
    29ec:	67 0f       	add	r22, r23
    29ee:	78 1f       	adc	r23, r24
    29f0:	89 1f       	adc	r24, r25
    29f2:	9a 1f       	adc	r25, r26
    29f4:	a1 1d       	adc	r26, r1
    29f6:	68 0f       	add	r22, r24
    29f8:	79 1f       	adc	r23, r25
    29fa:	8a 1f       	adc	r24, r26
    29fc:	91 1d       	adc	r25, r1
    29fe:	a1 1d       	adc	r26, r1
    2a00:	6a 0f       	add	r22, r26
    2a02:	71 1d       	adc	r23, r1
    2a04:	81 1d       	adc	r24, r1
    2a06:	91 1d       	adc	r25, r1
    2a08:	a1 1d       	adc	r26, r1
    2a0a:	20 d0       	rcall	.+64     	; 0x2a4c <__ultoa_invert+0x84>
    2a0c:	09 f4       	brne	.+2      	; 0x2a10 <__ultoa_invert+0x48>
    2a0e:	68 94       	set
    2a10:	3f 91       	pop	r19
    2a12:	2a e0       	ldi	r18, 0x0A	; 10
    2a14:	26 9f       	mul	r18, r22
    2a16:	11 24       	eor	r1, r1
    2a18:	30 19       	sub	r19, r0
    2a1a:	30 5d       	subi	r19, 0xD0	; 208
    2a1c:	31 93       	st	Z+, r19
    2a1e:	de f6       	brtc	.-74     	; 0x29d6 <__ultoa_invert+0xe>
    2a20:	cf 01       	movw	r24, r30
    2a22:	08 95       	ret
    2a24:	46 2f       	mov	r20, r22
    2a26:	47 70       	andi	r20, 0x07	; 7
    2a28:	40 5d       	subi	r20, 0xD0	; 208
    2a2a:	41 93       	st	Z+, r20
    2a2c:	b3 e0       	ldi	r27, 0x03	; 3
    2a2e:	0f d0       	rcall	.+30     	; 0x2a4e <__ultoa_invert+0x86>
    2a30:	c9 f7       	brne	.-14     	; 0x2a24 <__ultoa_invert+0x5c>
    2a32:	f6 cf       	rjmp	.-20     	; 0x2a20 <__ultoa_invert+0x58>
    2a34:	46 2f       	mov	r20, r22
    2a36:	4f 70       	andi	r20, 0x0F	; 15
    2a38:	40 5d       	subi	r20, 0xD0	; 208
    2a3a:	4a 33       	cpi	r20, 0x3A	; 58
    2a3c:	18 f0       	brcs	.+6      	; 0x2a44 <__ultoa_invert+0x7c>
    2a3e:	49 5d       	subi	r20, 0xD9	; 217
    2a40:	31 fd       	sbrc	r19, 1
    2a42:	40 52       	subi	r20, 0x20	; 32
    2a44:	41 93       	st	Z+, r20
    2a46:	02 d0       	rcall	.+4      	; 0x2a4c <__ultoa_invert+0x84>
    2a48:	a9 f7       	brne	.-22     	; 0x2a34 <__ultoa_invert+0x6c>
    2a4a:	ea cf       	rjmp	.-44     	; 0x2a20 <__ultoa_invert+0x58>
    2a4c:	b4 e0       	ldi	r27, 0x04	; 4
    2a4e:	a6 95       	lsr	r26
    2a50:	97 95       	ror	r25
    2a52:	87 95       	ror	r24
    2a54:	77 95       	ror	r23
    2a56:	67 95       	ror	r22
    2a58:	ba 95       	dec	r27
    2a5a:	c9 f7       	brne	.-14     	; 0x2a4e <__ultoa_invert+0x86>
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	61 05       	cpc	r22, r1
    2a60:	71 05       	cpc	r23, r1
    2a62:	08 95       	ret
    2a64:	9b 01       	movw	r18, r22
    2a66:	ac 01       	movw	r20, r24
    2a68:	0a 2e       	mov	r0, r26
    2a6a:	06 94       	lsr	r0
    2a6c:	57 95       	ror	r21
    2a6e:	47 95       	ror	r20
    2a70:	37 95       	ror	r19
    2a72:	27 95       	ror	r18
    2a74:	ba 95       	dec	r27
    2a76:	c9 f7       	brne	.-14     	; 0x2a6a <__ultoa_invert+0xa2>
    2a78:	62 0f       	add	r22, r18
    2a7a:	73 1f       	adc	r23, r19
    2a7c:	84 1f       	adc	r24, r20
    2a7e:	95 1f       	adc	r25, r21
    2a80:	a0 1d       	adc	r26, r0
    2a82:	08 95       	ret

00002a84 <__prologue_saves__>:
    2a84:	2f 92       	push	r2
    2a86:	3f 92       	push	r3
    2a88:	4f 92       	push	r4
    2a8a:	5f 92       	push	r5
    2a8c:	6f 92       	push	r6
    2a8e:	7f 92       	push	r7
    2a90:	8f 92       	push	r8
    2a92:	9f 92       	push	r9
    2a94:	af 92       	push	r10
    2a96:	bf 92       	push	r11
    2a98:	cf 92       	push	r12
    2a9a:	df 92       	push	r13
    2a9c:	ef 92       	push	r14
    2a9e:	ff 92       	push	r15
    2aa0:	0f 93       	push	r16
    2aa2:	1f 93       	push	r17
    2aa4:	cf 93       	push	r28
    2aa6:	df 93       	push	r29
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	ca 1b       	sub	r28, r26
    2aae:	db 0b       	sbc	r29, r27
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	de bf       	out	0x3e, r29	; 62
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	cd bf       	out	0x3d, r28	; 61
    2aba:	09 94       	ijmp

00002abc <__epilogue_restores__>:
    2abc:	2a 88       	ldd	r2, Y+18	; 0x12
    2abe:	39 88       	ldd	r3, Y+17	; 0x11
    2ac0:	48 88       	ldd	r4, Y+16	; 0x10
    2ac2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ac4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ac6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ac8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2aca:	9b 84       	ldd	r9, Y+11	; 0x0b
    2acc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ace:	b9 84       	ldd	r11, Y+9	; 0x09
    2ad0:	c8 84       	ldd	r12, Y+8	; 0x08
    2ad2:	df 80       	ldd	r13, Y+7	; 0x07
    2ad4:	ee 80       	ldd	r14, Y+6	; 0x06
    2ad6:	fd 80       	ldd	r15, Y+5	; 0x05
    2ad8:	0c 81       	ldd	r16, Y+4	; 0x04
    2ada:	1b 81       	ldd	r17, Y+3	; 0x03
    2adc:	aa 81       	ldd	r26, Y+2	; 0x02
    2ade:	b9 81       	ldd	r27, Y+1	; 0x01
    2ae0:	ce 0f       	add	r28, r30
    2ae2:	d1 1d       	adc	r29, r1
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	de bf       	out	0x3e, r29	; 62
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	cd bf       	out	0x3d, r28	; 61
    2aee:	ed 01       	movw	r28, r26
    2af0:	08 95       	ret

00002af2 <_exit>:
    2af2:	f8 94       	cli

00002af4 <__stop_program>:
    2af4:	ff cf       	rjmp	.-2      	; 0x2af4 <__stop_program>

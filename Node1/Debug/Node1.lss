
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013c  00800100  00002360  000023f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002360  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080023c  0080023c  00002530  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002530  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002a0  00000000  00000000  00002560  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e37  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f5d  00000000  00000000  00005637  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d71  00000000  00000000  00006594  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000864  00000000  00000000  00007308  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000874  00000000  00000000  00007b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002367  00000000  00000000  000083e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000260  00000000  00000000  0000a747  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__ctors_end>
       4:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       8:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      10:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      14:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      18:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      1c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      20:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      24:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      28:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      2c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      30:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      34:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      38:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      3c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      40:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      44:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      48:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      4c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      50:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      54:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      58:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      5c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      60:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      64:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      68:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      6c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	00 5c       	subi	r16, 0xC0	; 192
      a4:	00 00       	nop
      a6:	0c 00       	.word	0x000c	; ????
      a8:	0c 00       	.word	0x000c	; ????
      aa:	7c 28       	or	r7, r12
      ac:	7c 28       	or	r7, r12
      ae:	58 dc       	rcall	.-1872   	; 0xfffff960 <__eeprom_end+0xff7ef960>
      b0:	68 00       	.word	0x0068	; ????
      b2:	24 10       	cpse	r2, r4
      b4:	48 00       	.word	0x0048	; ????
      b6:	28 54       	subi	r18, 0x48	; 72
      b8:	28 40       	sbci	r18, 0x08	; 8
      ba:	00 0c       	add	r0, r0
      bc:	00 00       	nop
      be:	00 78       	andi	r16, 0x80	; 128
      c0:	84 00       	.word	0x0084	; ????
      c2:	84 78       	andi	r24, 0x84	; 132
      c4:	00 00       	nop
      c6:	54 38       	cpi	r21, 0x84	; 132
      c8:	54 00       	.word	0x0054	; ????
      ca:	10 7c       	andi	r17, 0xC0	; 192
      cc:	10 00       	.word	0x0010	; ????
      ce:	80 40       	sbci	r24, 0x00	; 0
      d0:	00 00       	nop
      d2:	10 10       	cpse	r1, r0
      d4:	10 00       	.word	0x0010	; ????
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	00 00       	nop
      da:	60 10       	cpse	r6, r0
      dc:	0c 00       	.word	0x000c	; ????
      de:	38 54       	subi	r19, 0x48	; 72
      e0:	38 00       	.word	0x0038	; ????
      e2:	48 7c       	andi	r20, 0xC8	; 200
      e4:	40 00       	.word	0x0040	; ????
      e6:	48 64       	ori	r20, 0x48	; 72
      e8:	58 00       	.word	0x0058	; ????
      ea:	44 54       	subi	r20, 0x44	; 68
      ec:	2c 00       	.word	0x002c	; ????
      ee:	1c 10       	cpse	r1, r12
      f0:	7c 00       	.word	0x007c	; ????
      f2:	5c 54       	subi	r21, 0x4C	; 76
      f4:	24 00       	.word	0x0024	; ????
      f6:	38 54       	subi	r19, 0x48	; 72
      f8:	24 00       	.word	0x0024	; ????
      fa:	64 14       	cp	r6, r4
      fc:	0c 00       	.word	0x000c	; ????
      fe:	68 54       	subi	r22, 0x48	; 72
     100:	2c 00       	.word	0x002c	; ????
     102:	48 54       	subi	r20, 0x48	; 72
     104:	38 00       	.word	0x0038	; ????
     106:	00 48       	sbci	r16, 0x80	; 128
     108:	00 00       	nop
     10a:	80 48       	sbci	r24, 0x80	; 128
     10c:	00 00       	nop
     10e:	10 28       	or	r1, r0
     110:	44 00       	.word	0x0044	; ????
     112:	28 28       	or	r2, r8
     114:	28 00       	.word	0x0028	; ????
     116:	44 28       	or	r4, r4
     118:	10 00       	.word	0x0010	; ????
     11a:	04 54       	subi	r16, 0x44	; 68
     11c:	08 00       	.word	0x0008	; ????
     11e:	38 44       	sbci	r19, 0x48	; 72
     120:	5c 00       	.word	0x005c	; ????
     122:	78 14       	cp	r7, r8
     124:	78 00       	.word	0x0078	; ????
     126:	7c 54       	subi	r23, 0x4C	; 76
     128:	28 00       	.word	0x0028	; ????
     12a:	38 44       	sbci	r19, 0x48	; 72
     12c:	28 00       	.word	0x0028	; ????
     12e:	7c 44       	sbci	r23, 0x4C	; 76
     130:	38 00       	.word	0x0038	; ????
     132:	7c 54       	subi	r23, 0x4C	; 76
     134:	44 00       	.word	0x0044	; ????
     136:	7c 14       	cp	r7, r12
     138:	04 00       	.word	0x0004	; ????
     13a:	38 44       	sbci	r19, 0x48	; 72
     13c:	74 00       	.word	0x0074	; ????
     13e:	7c 10       	cpse	r7, r12
     140:	7c 00       	.word	0x007c	; ????
     142:	44 7c       	andi	r20, 0xC4	; 196
     144:	44 00       	.word	0x0044	; ????
     146:	20 40       	sbci	r18, 0x00	; 0
     148:	3c 00       	.word	0x003c	; ????
     14a:	7c 10       	cpse	r7, r12
     14c:	6c 00       	.word	0x006c	; ????
     14e:	7c 40       	sbci	r23, 0x0C	; 12
     150:	40 00       	.word	0x0040	; ????
     152:	7c 18       	sub	r7, r12
     154:	7c 00       	.word	0x007c	; ????
     156:	78 10       	cpse	r7, r8
     158:	3c 00       	.word	0x003c	; ????
     15a:	38 44       	sbci	r19, 0x48	; 72
     15c:	38 00       	.word	0x0038	; ????
     15e:	7c 14       	cp	r7, r12
     160:	08 00       	.word	0x0008	; ????
     162:	38 44       	sbci	r19, 0x48	; 72
     164:	b8 00       	.word	0x00b8	; ????
     166:	7c 14       	cp	r7, r12
     168:	68 00       	.word	0x0068	; ????
     16a:	48 54       	subi	r20, 0x48	; 72
     16c:	24 00       	.word	0x0024	; ????
     16e:	04 7c       	andi	r16, 0xC4	; 196
     170:	04 00       	.word	0x0004	; ????
     172:	7c 40       	sbci	r23, 0x0C	; 12
     174:	7c 00       	.word	0x007c	; ????
     176:	3c 60       	ori	r19, 0x0C	; 12
     178:	3c 00       	.word	0x003c	; ????
     17a:	7c 30       	cpi	r23, 0x0C	; 12
     17c:	7c 00       	.word	0x007c	; ????
     17e:	6c 10       	cpse	r6, r12
     180:	6c 00       	.word	0x006c	; ????
     182:	0c 70       	andi	r16, 0x0C	; 12
     184:	0c 00       	.word	0x000c	; ????
     186:	64 54       	subi	r22, 0x44	; 68
     188:	4c 00       	.word	0x004c	; ????
     18a:	00 7c       	andi	r16, 0xC0	; 192
     18c:	44 00       	.word	0x0044	; ????
     18e:	0c 10       	cpse	r0, r12
     190:	60 00       	.word	0x0060	; ????
     192:	44 7c       	andi	r20, 0xC4	; 196
     194:	00 00       	nop
     196:	08 04       	cpc	r0, r8
     198:	08 00       	.word	0x0008	; ????
     19a:	80 80       	ld	r8, Z
     19c:	80 00       	.word	0x0080	; ????
     19e:	00 04       	cpc	r0, r0
     1a0:	08 00       	.word	0x0008	; ????
     1a2:	30 48       	sbci	r19, 0x80	; 128
     1a4:	78 00       	.word	0x0078	; ????
     1a6:	7c 48       	sbci	r23, 0x8C	; 140
     1a8:	30 00       	.word	0x0030	; ????
     1aa:	30 48       	sbci	r19, 0x80	; 128
     1ac:	48 00       	.word	0x0048	; ????
     1ae:	30 48       	sbci	r19, 0x80	; 128
     1b0:	7c 00       	.word	0x007c	; ????
     1b2:	30 68       	ori	r19, 0x80	; 128
     1b4:	50 00       	.word	0x0050	; ????
     1b6:	10 78       	andi	r17, 0x80	; 128
     1b8:	14 00       	.word	0x0014	; ????
     1ba:	90 a8       	ldd	r9, Z+48	; 0x30
     1bc:	78 00       	.word	0x0078	; ????
     1be:	7c 08       	sbc	r7, r12
     1c0:	70 00       	.word	0x0070	; ????
     1c2:	50 74       	andi	r21, 0x40	; 64
     1c4:	40 00       	.word	0x0040	; ????
     1c6:	80 80       	ld	r8, Z
     1c8:	74 00       	.word	0x0074	; ????
     1ca:	7c 10       	cpse	r7, r12
     1cc:	68 00       	.word	0x0068	; ????
     1ce:	44 7c       	andi	r20, 0xC4	; 196
     1d0:	40 00       	.word	0x0040	; ????
     1d2:	78 10       	cpse	r7, r8
     1d4:	78 00       	.word	0x0078	; ????
     1d6:	78 08       	sbc	r7, r8
     1d8:	70 00       	.word	0x0070	; ????
     1da:	30 48       	sbci	r19, 0x80	; 128
     1dc:	30 00       	.word	0x0030	; ????
     1de:	f8 28       	or	r15, r8
     1e0:	10 00       	.word	0x0010	; ????
     1e2:	30 48       	sbci	r19, 0x80	; 128
     1e4:	f8 00       	.word	0x00f8	; ????
     1e6:	78 10       	cpse	r7, r8
     1e8:	08 00       	.word	0x0008	; ????
     1ea:	50 58       	subi	r21, 0x80	; 128
     1ec:	28 00       	.word	0x0028	; ????
     1ee:	08 3c       	cpi	r16, 0xC8	; 200
     1f0:	48 00       	.word	0x0048	; ????
     1f2:	38 40       	sbci	r19, 0x08	; 8
     1f4:	78 00       	.word	0x0078	; ????
     1f6:	38 40       	sbci	r19, 0x08	; 8
     1f8:	38 00       	.word	0x0038	; ????
     1fa:	78 20       	and	r7, r8
     1fc:	78 00       	.word	0x0078	; ????
     1fe:	48 30       	cpi	r20, 0x08	; 8
     200:	48 00       	.word	0x0048	; ????
     202:	98 a0       	ldd	r9, Y+32	; 0x20
     204:	78 00       	.word	0x0078	; ????
     206:	48 68       	ori	r20, 0x88	; 136
     208:	58 00       	.word	0x0058	; ????
     20a:	10 78       	andi	r17, 0x80	; 128
     20c:	84 00       	.word	0x0084	; ????
     20e:	00 7c       	andi	r16, 0xC0	; 192
     210:	00 00       	nop
     212:	84 78       	andi	r24, 0x84	; 132
     214:	10 00       	.word	0x0010	; ????
     216:	08 04       	cpc	r0, r8
     218:	08 04       	cpc	r0, r8

0000021a <font5>:
     21a:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     22a:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     23a:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     24a:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     25a:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     26a:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     27a:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     28a:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     29a:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     2aa:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     2ba:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     2ca:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2da:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2ea:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2fa:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     30a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     31a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     32a:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     33a:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     34a:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     35a:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     36a:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     37a:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     38a:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     39a:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     3aa:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     3ba:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     3ca:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3da:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3ea:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003f5 <font8>:
	...
     3fd:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     40d:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     41d:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     42d:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     43d:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     44d:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     45d:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     46d:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     47d:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     48d:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     49d:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     4ad:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     4bd:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     4cd:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4dd:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4ed:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4fd:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     50d:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     51d:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     52d:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     53d:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     54d:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     55d:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     56d:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     57d:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     58d:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     59d:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     5ad:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     5bd:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     5cd:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5dd:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5ed:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5fd:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     60d:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     61d:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     62d:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     63d:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     64d:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     65d:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     66d:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     67d:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     68d:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     69d:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     6ad:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     6bd:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     6cd:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6dd:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006ee <__ctors_end>:
     6ee:	11 24       	eor	r1, r1
     6f0:	1f be       	out	0x3f, r1	; 63
     6f2:	cf ef       	ldi	r28, 0xFF	; 255
     6f4:	d4 e0       	ldi	r29, 0x04	; 4
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	cd bf       	out	0x3d, r28	; 61

000006fa <__do_copy_data>:
     6fa:	12 e0       	ldi	r17, 0x02	; 2
     6fc:	a0 e0       	ldi	r26, 0x00	; 0
     6fe:	b1 e0       	ldi	r27, 0x01	; 1
     700:	e0 e6       	ldi	r30, 0x60	; 96
     702:	f3 e2       	ldi	r31, 0x23	; 35
     704:	02 c0       	rjmp	.+4      	; 0x70a <__do_copy_data+0x10>
     706:	05 90       	lpm	r0, Z+
     708:	0d 92       	st	X+, r0
     70a:	ac 33       	cpi	r26, 0x3C	; 60
     70c:	b1 07       	cpc	r27, r17
     70e:	d9 f7       	brne	.-10     	; 0x706 <__do_copy_data+0xc>

00000710 <__do_clear_bss>:
     710:	22 e0       	ldi	r18, 0x02	; 2
     712:	ac e3       	ldi	r26, 0x3C	; 60
     714:	b2 e0       	ldi	r27, 0x02	; 2
     716:	01 c0       	rjmp	.+2      	; 0x71a <.do_clear_bss_start>

00000718 <.do_clear_bss_loop>:
     718:	1d 92       	st	X+, r1

0000071a <.do_clear_bss_start>:
     71a:	a4 35       	cpi	r26, 0x54	; 84
     71c:	b2 07       	cpc	r27, r18
     71e:	e1 f7       	brne	.-8      	; 0x718 <.do_clear_bss_loop>
     720:	0e 94 4c 05 	call	0xa98	; 0xa98 <main>
     724:	0c 94 ae 11 	jmp	0x235c	; 0x235c <_exit>

00000728 <__bad_interrupt>:
     728:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000072c <adc_init>:
{
	adcConversionRunning = 0;
}*/

void adc_init(){
	clear_bit(DDRE, PE0); //Set DDR to input for interrupt flag
     72c:	30 98       	cbi	0x06, 0	; 6
     72e:	08 95       	ret

00000730 <adc_read>:
}

uint8_t adc_read(char channel){
	volatile char *ext_adc = (char *) 0x1400; 
	if (channel == 'x'){
     730:	88 37       	cpi	r24, 0x78	; 120
     732:	21 f4       	brne	.+8      	; 0x73c <adc_read+0xc>
		*ext_adc = 0b0100;
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	80 93 00 14 	sts	0x1400, r24
     73a:	11 c0       	rjmp	.+34     	; 0x75e <adc_read+0x2e>
	}
	
	else if (channel == 'y'){
     73c:	89 37       	cpi	r24, 0x79	; 121
     73e:	21 f4       	brne	.+8      	; 0x748 <adc_read+0x18>
		*ext_adc = 0b0101;
     740:	85 e0       	ldi	r24, 0x05	; 5
     742:	80 93 00 14 	sts	0x1400, r24
     746:	0b c0       	rjmp	.+22     	; 0x75e <adc_read+0x2e>
	}
	
	else if (channel == 'l'){
     748:	8c 36       	cpi	r24, 0x6C	; 108
     74a:	21 f4       	brne	.+8      	; 0x754 <adc_read+0x24>
		*ext_adc = 0b0110;
     74c:	86 e0       	ldi	r24, 0x06	; 6
     74e:	80 93 00 14 	sts	0x1400, r24
     752:	05 c0       	rjmp	.+10     	; 0x75e <adc_read+0x2e>
	}
	
	else if (channel == 'r'){
     754:	82 37       	cpi	r24, 0x72	; 114
     756:	19 f4       	brne	.+6      	; 0x75e <adc_read+0x2e>
		*ext_adc = 0b0111;
     758:	87 e0       	ldi	r24, 0x07	; 7
     75a:	80 93 00 14 	sts	0x1400, r24
	}
	while(test_bit(PINE, PE0)); //Wait for interrupt flag to signify completed conversion
     75e:	28 99       	sbic	0x05, 0	; 5
     760:	fe cf       	rjmp	.-4      	; 0x75e <adc_read+0x2e>
	return (uint8_t) *ext_adc;
     762:	80 91 00 14 	lds	r24, 0x1400
     766:	08 95       	ret

00000768 <can_init>:

#include "mcp.h"
#include "can.h"
#include "MCP2515.h"

void can_init(int mode){
     768:	cf 93       	push	r28
     76a:	c8 2f       	mov	r28, r24
	mcp_bit_modify(0x2B,0b00011100, 0b00000000); //Disables interrupts from empty buffers
     76c:	40 e0       	ldi	r20, 0x00	; 0
     76e:	6c e1       	ldi	r22, 0x1C	; 28
     770:	8b e2       	ldi	r24, 0x2B	; 43
     772:	0e 94 c6 05 	call	0xb8c	; 0xb8c <mcp_bit_modify>
	mcp_bit_modify(MCP_RXB0CTRL, 0b01100000, 0b01100000); //Disable filters
     776:	40 e6       	ldi	r20, 0x60	; 96
     778:	60 e6       	ldi	r22, 0x60	; 96
     77a:	80 e6       	ldi	r24, 0x60	; 96
     77c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <mcp_bit_modify>
	mcp_bit_modify(MCP_CANCTRL, 0xFF, mode); //Sets operation mode 
     780:	4c 2f       	mov	r20, r28
     782:	6f ef       	ldi	r22, 0xFF	; 255
     784:	8f e0       	ldi	r24, 0x0F	; 15
     786:	0e 94 c6 05 	call	0xb8c	; 0xb8c <mcp_bit_modify>
	
	//TODO: Filter initialization
	//NOTES: CANINTE.TXInE
	//priority bits? TXP
}
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <can_transmit>:

void can_transmit(Msg msg){
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	00 d0       	rcall	.+0      	; 0x79c <can_transmit+0xe>
     79c:	00 d0       	rcall	.+0      	; 0x79e <can_transmit+0x10>
     79e:	00 d0       	rcall	.+0      	; 0x7a0 <can_transmit+0x12>
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	49 83       	std	Y+1, r20	; 0x01
     7a6:	5a 83       	std	Y+2, r21	; 0x02
     7a8:	6b 83       	std	Y+3, r22	; 0x03
     7aa:	7c 83       	std	Y+4, r23	; 0x04
     7ac:	8d 83       	std	Y+5, r24	; 0x05
     7ae:	9e 83       	std	Y+6, r25	; 0x06
     7b0:	09 81       	ldd	r16, Y+1	; 0x01
     7b2:	1a 81       	ldd	r17, Y+2	; 0x02
     7b4:	eb 80       	ldd	r14, Y+3	; 0x03
     7b6:	fc 80       	ldd	r15, Y+4	; 0x04
	int buffer = 2; //n = 1, 2 or 3
	
	mcp_write(0x31 + 0x10*buffer, msg.id >> 3);  //TXBnSIDH
     7b8:	b8 01       	movw	r22, r16
     7ba:	75 95       	asr	r23
     7bc:	67 95       	ror	r22
     7be:	75 95       	asr	r23
     7c0:	67 95       	ror	r22
     7c2:	75 95       	asr	r23
     7c4:	67 95       	ror	r22
     7c6:	81 e5       	ldi	r24, 0x51	; 81
     7c8:	0e 94 a4 05 	call	0xb48	; 0xb48 <mcp_write>
	mcp_write(0x32 + 0x10*buffer, msg.id << 5);  //TXBnSIDL
     7cc:	60 2f       	mov	r22, r16
     7ce:	62 95       	swap	r22
     7d0:	66 0f       	add	r22, r22
     7d2:	60 7e       	andi	r22, 0xE0	; 224
     7d4:	82 e5       	ldi	r24, 0x52	; 82
     7d6:	0e 94 a4 05 	call	0xb48	; 0xb48 <mcp_write>
	mcp_write(0x35 + 0x10*buffer, msg.length); //TXBnDLC	//RTR will be set to 0 (Data Frame message)
     7da:	6e 2d       	mov	r22, r14
     7dc:	85 e5       	ldi	r24, 0x55	; 85
     7de:	0e 94 a4 05 	call	0xb48	; 0xb48 <mcp_write>
	
	for(int i = 0; i < msg.length; i++){
     7e2:	1e 14       	cp	r1, r14
     7e4:	1f 04       	cpc	r1, r15
     7e6:	84 f4       	brge	.+32     	; 0x808 <can_transmit+0x7a>
     7e8:	00 e0       	ldi	r16, 0x00	; 0
     7ea:	10 e0       	ldi	r17, 0x00	; 0
		mcp_write(0x36 + 0x10*buffer + i, msg.data[i]); //TXBnDm
     7ec:	ed 81       	ldd	r30, Y+5	; 0x05
     7ee:	fe 81       	ldd	r31, Y+6	; 0x06
     7f0:	e0 0f       	add	r30, r16
     7f2:	f1 1f       	adc	r31, r17
     7f4:	60 81       	ld	r22, Z
     7f6:	86 e5       	ldi	r24, 0x56	; 86
     7f8:	80 0f       	add	r24, r16
     7fa:	0e 94 a4 05 	call	0xb48	; 0xb48 <mcp_write>
	
	mcp_write(0x31 + 0x10*buffer, msg.id >> 3);  //TXBnSIDH
	mcp_write(0x32 + 0x10*buffer, msg.id << 5);  //TXBnSIDL
	mcp_write(0x35 + 0x10*buffer, msg.length); //TXBnDLC	//RTR will be set to 0 (Data Frame message)
	
	for(int i = 0; i < msg.length; i++){
     7fe:	0f 5f       	subi	r16, 0xFF	; 255
     800:	1f 4f       	sbci	r17, 0xFF	; 255
     802:	0e 15       	cp	r16, r14
     804:	1f 05       	cpc	r17, r15
     806:	91 f7       	brne	.-28     	; 0x7ec <can_transmit+0x5e>
		mcp_write(0x36 + 0x10*buffer + i, msg.data[i]); //TXBnDm
	}
	
	mcp_request_to_send(buffer == 2, buffer == 1, buffer == 0);	//Request to send - sending will start as soon as the bus is clear
     808:	40 e0       	ldi	r20, 0x00	; 0
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 b6 05 	call	0xb6c	; 0xb6c <mcp_request_to_send>
	
	//TODO: (maybe) print error message?
	//TXBnCTRL.TXERR and the CANINTF.MERRF bits will be set and an interrupt will be generated on the INT pin if the CANINTE.MERRE bit is set
}
     818:	26 96       	adiw	r28, 0x06	; 6
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	08 95       	ret

00000832 <joy_init>:
int ymin = 0;
int ymean = 127;
int ymax = 255;

void joy_init(){
	clear_bit(DDRB,PB2);	//Set joystick button pin to input
     832:	ba 98       	cbi	0x17, 2	; 23
	set_bit(PORTB,PB2);		//Set the internal pull-up resistor needed for the button
     834:	c2 9a       	sbi	0x18, 2	; 24
     836:	08 95       	ret

00000838 <joy_get_position>:
	oled_clear_screen();
	oled_print_string("Calibrated!",0,0,8,0);
	oled_refresh();
}

Position joy_get_position(){
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	00 d0       	rcall	.+0      	; 0x83e <joy_get_position+0x6>
     83e:	00 d0       	rcall	.+0      	; 0x840 <joy_get_position+0x8>
     840:	00 d0       	rcall	.+0      	; 0x842 <joy_get_position+0xa>
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
		x = adc_read('x');
     846:	88 e7       	ldi	r24, 0x78	; 120
     848:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	90 93 47 02 	sts	0x0247, r25
     852:	80 93 46 02 	sts	0x0246, r24
		y = adc_read('y');
     856:	89 e7       	ldi	r24, 0x79	; 121
     858:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     85c:	28 2f       	mov	r18, r24
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	30 93 49 02 	sts	0x0249, r19
     864:	20 93 48 02 	sts	0x0248, r18
		z = !test_bit(PINB, PB2);
     868:	e6 b3       	in	r30, 0x16	; 22
     86a:	e6 95       	lsr	r30
     86c:	e6 95       	lsr	r30
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	e8 27       	eor	r30, r24
     872:	e1 70       	andi	r30, 0x01	; 1
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	e0 93 40 02 	sts	0x0240, r30
     87a:	f0 93 41 02 	sts	0x0241, r31
		
		if (x > xmean){
     87e:	80 91 46 02 	lds	r24, 0x0246
     882:	90 91 47 02 	lds	r25, 0x0247
     886:	40 91 0c 01 	lds	r20, 0x010C
     88a:	50 91 0d 01 	lds	r21, 0x010D
     88e:	48 17       	cp	r20, r24
     890:	59 07       	cpc	r21, r25
     892:	b4 f4       	brge	.+44     	; 0x8c0 <joy_get_position+0x88>
			x = ((x - xmean) * 100) / (xmax - xmean);
     894:	bc 01       	movw	r22, r24
     896:	64 1b       	sub	r22, r20
     898:	75 0b       	sbc	r23, r21
     89a:	a4 e6       	ldi	r26, 0x64	; 100
     89c:	a6 9f       	mul	r26, r22
     89e:	c0 01       	movw	r24, r0
     8a0:	a7 9f       	mul	r26, r23
     8a2:	90 0d       	add	r25, r0
     8a4:	11 24       	eor	r1, r1
     8a6:	60 91 0a 01 	lds	r22, 0x010A
     8aa:	70 91 0b 01 	lds	r23, 0x010B
     8ae:	64 1b       	sub	r22, r20
     8b0:	75 0b       	sbc	r23, r21
     8b2:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__divmodhi4>
     8b6:	70 93 47 02 	sts	0x0247, r23
     8ba:	60 93 46 02 	sts	0x0246, r22
     8be:	17 c0       	rjmp	.+46     	; 0x8ee <joy_get_position+0xb6>
		}
		else{
			x = ((x - xmean) * 100) / (xmean - xmin);
     8c0:	bc 01       	movw	r22, r24
     8c2:	64 1b       	sub	r22, r20
     8c4:	75 0b       	sbc	r23, r21
     8c6:	a4 e6       	ldi	r26, 0x64	; 100
     8c8:	a6 9f       	mul	r26, r22
     8ca:	c0 01       	movw	r24, r0
     8cc:	a7 9f       	mul	r26, r23
     8ce:	90 0d       	add	r25, r0
     8d0:	11 24       	eor	r1, r1
     8d2:	60 91 3e 02 	lds	r22, 0x023E
     8d6:	70 91 3f 02 	lds	r23, 0x023F
     8da:	da 01       	movw	r26, r20
     8dc:	a6 1b       	sub	r26, r22
     8de:	b7 0b       	sbc	r27, r23
     8e0:	bd 01       	movw	r22, r26
     8e2:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__divmodhi4>
     8e6:	70 93 47 02 	sts	0x0247, r23
     8ea:	60 93 46 02 	sts	0x0246, r22
		}
		if (y > ymean){
     8ee:	40 91 08 01 	lds	r20, 0x0108
     8f2:	50 91 09 01 	lds	r21, 0x0109
     8f6:	42 17       	cp	r20, r18
     8f8:	53 07       	cpc	r21, r19
     8fa:	ac f4       	brge	.+42     	; 0x926 <joy_get_position+0xee>
			y = ((y - ymean) * 100) / (ymax - ymean);
     8fc:	24 1b       	sub	r18, r20
     8fe:	35 0b       	sbc	r19, r21
     900:	64 e6       	ldi	r22, 0x64	; 100
     902:	62 9f       	mul	r22, r18
     904:	c0 01       	movw	r24, r0
     906:	63 9f       	mul	r22, r19
     908:	90 0d       	add	r25, r0
     90a:	11 24       	eor	r1, r1
     90c:	60 91 06 01 	lds	r22, 0x0106
     910:	70 91 07 01 	lds	r23, 0x0107
     914:	64 1b       	sub	r22, r20
     916:	75 0b       	sbc	r23, r21
     918:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__divmodhi4>
     91c:	70 93 49 02 	sts	0x0249, r23
     920:	60 93 48 02 	sts	0x0248, r22
     924:	15 c0       	rjmp	.+42     	; 0x950 <joy_get_position+0x118>
		}
		else{
			y = ((y - ymean)  * 100) / (ymean - ymin);
     926:	24 1b       	sub	r18, r20
     928:	35 0b       	sbc	r19, r21
     92a:	64 e6       	ldi	r22, 0x64	; 100
     92c:	62 9f       	mul	r22, r18
     92e:	c0 01       	movw	r24, r0
     930:	63 9f       	mul	r22, r19
     932:	90 0d       	add	r25, r0
     934:	11 24       	eor	r1, r1
     936:	20 91 3c 02 	lds	r18, 0x023C
     93a:	30 91 3d 02 	lds	r19, 0x023D
     93e:	ba 01       	movw	r22, r20
     940:	62 1b       	sub	r22, r18
     942:	73 0b       	sbc	r23, r19
     944:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__divmodhi4>
     948:	70 93 49 02 	sts	0x0249, r23
     94c:	60 93 48 02 	sts	0x0248, r22
		}
		
		Position pos;
		pos.x = x;
		pos.y = y;
     950:	40 91 48 02 	lds	r20, 0x0248
     954:	80 91 49 02 	lds	r24, 0x0249
		pos.z = z;
		return pos;
     958:	20 91 46 02 	lds	r18, 0x0246
     95c:	90 91 47 02 	lds	r25, 0x0247
     960:	29 83       	std	Y+1, r18	; 0x01
     962:	9a 83       	std	Y+2, r25	; 0x02
     964:	4b 83       	std	Y+3, r20	; 0x03
     966:	8c 83       	std	Y+4, r24	; 0x04
     968:	ed 83       	std	Y+5, r30	; 0x05
     96a:	fe 83       	std	Y+6, r31	; 0x06
     96c:	39 2f       	mov	r19, r25
     96e:	58 2f       	mov	r21, r24
     970:	6e 2f       	mov	r22, r30
     972:	7f 2f       	mov	r23, r31
}
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	26 96       	adiw	r28, 0x06	; 6
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	08 95       	ret

0000098a <joy_get_position_polar>:

Position_polar joy_get_position_polar(){
     98a:	8f 92       	push	r8
     98c:	9f 92       	push	r9
     98e:	af 92       	push	r10
     990:	bf 92       	push	r11
     992:	cf 92       	push	r12
     994:	df 92       	push	r13
     996:	ef 92       	push	r14
     998:	ff 92       	push	r15
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	00 d0       	rcall	.+0      	; 0x9a0 <joy_get_position_polar+0x16>
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <joy_get_position_polar+0x18>
     9a2:	00 d0       	rcall	.+0      	; 0x9a4 <joy_get_position_polar+0x1a>
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
	Position pos_cart = joy_get_position();
     9a8:	0e 94 1c 04 	call	0x838	; 0x838 <joy_get_position>
     9ac:	29 83       	std	Y+1, r18	; 0x01
     9ae:	3a 83       	std	Y+2, r19	; 0x02
     9b0:	4b 83       	std	Y+3, r20	; 0x03
     9b2:	5c 83       	std	Y+4, r21	; 0x04
     9b4:	89 80       	ldd	r8, Y+1	; 0x01
     9b6:	9a 80       	ldd	r9, Y+2	; 0x02
     9b8:	ab 80       	ldd	r10, Y+3	; 0x03
     9ba:	bc 80       	ldd	r11, Y+4	; 0x04
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     9bc:	b4 01       	movw	r22, r8
     9be:	88 27       	eor	r24, r24
     9c0:	77 fd       	sbrc	r23, 7
     9c2:	80 95       	com	r24
     9c4:	98 2f       	mov	r25, r24
     9c6:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__floatsisf>
     9ca:	6b 01       	movw	r12, r22
     9cc:	7c 01       	movw	r14, r24
     9ce:	b5 01       	movw	r22, r10
     9d0:	88 27       	eor	r24, r24
     9d2:	77 fd       	sbrc	r23, 7
     9d4:	80 95       	com	r24
     9d6:	98 2f       	mov	r25, r24
     9d8:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__floatsisf>
     9dc:	a7 01       	movw	r20, r14
     9de:	96 01       	movw	r18, r12
     9e0:	0e 94 16 0c 	call	0x182c	; 0x182c <atan2>
     9e4:	6b 01       	movw	r12, r22
     9e6:	7c 01       	movw	r14, r24
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     9e8:	88 9c       	mul	r8, r8
     9ea:	b0 01       	movw	r22, r0
     9ec:	89 9c       	mul	r8, r9
     9ee:	70 0d       	add	r23, r0
     9f0:	70 0d       	add	r23, r0
     9f2:	11 24       	eor	r1, r1
     9f4:	aa 9c       	mul	r10, r10
     9f6:	c0 01       	movw	r24, r0
     9f8:	ab 9c       	mul	r10, r11
     9fa:	90 0d       	add	r25, r0
     9fc:	90 0d       	add	r25, r0
     9fe:	11 24       	eor	r1, r1
     a00:	68 0f       	add	r22, r24
     a02:	79 1f       	adc	r23, r25
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__floatunsisf>
     a0c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <sqrt>
     a10:	4b 01       	movw	r8, r22
     a12:	5c 01       	movw	r10, r24
}

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     a14:	20 ee       	ldi	r18, 0xE0	; 224
     a16:	3e e2       	ldi	r19, 0x2E	; 46
     a18:	45 e6       	ldi	r20, 0x65	; 101
     a1a:	52 e4       	ldi	r21, 0x42	; 66
     a1c:	c7 01       	movw	r24, r14
     a1e:	b6 01       	movw	r22, r12
     a20:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__mulsf3>
     a24:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__fixsfsi>
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
	return pos_pol;
     a28:	6b 01       	movw	r12, r22

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     a2a:	c5 01       	movw	r24, r10
     a2c:	b4 01       	movw	r22, r8
     a2e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__fixsfsi>
	return pos_pol;
     a32:	7b 01       	movw	r14, r22
}
     a34:	c7 01       	movw	r24, r14
     a36:	b6 01       	movw	r22, r12
     a38:	26 96       	adiw	r28, 0x06	; 6
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	ff 90       	pop	r15
     a4a:	ef 90       	pop	r14
     a4c:	df 90       	pop	r13
     a4e:	cf 90       	pop	r12
     a50:	bf 90       	pop	r11
     a52:	af 90       	pop	r10
     a54:	9f 90       	pop	r9
     a56:	8f 90       	pop	r8
     a58:	08 95       	ret

00000a5a <joy_get_direction>:

Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
     a5a:	0e 94 c5 04 	call	0x98a	; 0x98a <joy_get_position_polar>
     a5e:	9b 01       	movw	r18, r22
	
	if(pos_pol.amplitude > 80){
     a60:	81 35       	cpi	r24, 0x51	; 81
     a62:	91 05       	cpc	r25, r1
     a64:	7c f0       	brlt	.+30     	; 0xa84 <joy_get_direction+0x2a>
		if (pos_pol.angle > 135){
     a66:	68 38       	cpi	r22, 0x88	; 136
     a68:	71 05       	cpc	r23, r1
     a6a:	74 f4       	brge	.+28     	; 0xa88 <joy_get_direction+0x2e>
			return LEFT;
		}
		else if(pos_pol.angle > 45){
     a6c:	6e 32       	cpi	r22, 0x2E	; 46
     a6e:	71 05       	cpc	r23, r1
     a70:	6c f4       	brge	.+26     	; 0xa8c <joy_get_direction+0x32>
			return UP;
		}
		else if(pos_pol.angle > -45){
     a72:	24 3d       	cpi	r18, 0xD4	; 212
     a74:	8f ef       	ldi	r24, 0xFF	; 255
     a76:	38 07       	cpc	r19, r24
     a78:	5c f4       	brge	.+22     	; 0xa90 <joy_get_direction+0x36>
			return RIGHT;
		}
		else if(pos_pol.angle > -135){
     a7a:	2a 37       	cpi	r18, 0x7A	; 122
     a7c:	3f 4f       	sbci	r19, 0xFF	; 255
     a7e:	54 f0       	brlt	.+20     	; 0xa94 <joy_get_direction+0x3a>
			return DOWN;
     a80:	83 e0       	ldi	r24, 0x03	; 3
     a82:	08 95       	ret
		}
		else{
			return LEFT;
		}
	}
	return NEUTRAL;
     a84:	8f ef       	ldi	r24, 0xFF	; 255
     a86:	08 95       	ret
Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
	
	if(pos_pol.amplitude > 80){
		if (pos_pol.angle > 135){
			return LEFT;
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	08 95       	ret
		}
		else if(pos_pol.angle > 45){
			return UP;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	08 95       	ret
		}
		else if(pos_pol.angle > -45){
			return RIGHT;
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	08 95       	ret
		}
		else if(pos_pol.angle > -135){
			return DOWN;
		}
		else{
			return LEFT;
     a94:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	return NEUTRAL;
} 
     a96:	08 95       	ret

00000a98 <main>:
#include "menu.h"
#include "touch.h"
#include "MCP2515.h"

int main(void)
{
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	2c 97       	sbiw	r28, 0x0c	; 12
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
	MCUCR |= (1<<SRE);	//Enable external memory
     aac:	85 b7       	in	r24, 0x35	; 53
     aae:	80 68       	ori	r24, 0x80	; 128
     ab0:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2); //
     ab2:	80 b7       	in	r24, 0x30	; 48
     ab4:	80 62       	ori	r24, 0x20	; 32
     ab6:	80 bf       	out	0x30, r24	; 48
	
	uart_init(9600, NODE_1);
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	80 e8       	ldi	r24, 0x80	; 128
     abe:	95 e2       	ldi	r25, 0x25	; 37
     ac0:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <uart_init>
	printf("\r\n\x1b[4mReset\x1b[0m \r\n");
     ac4:	88 e8       	ldi	r24, 0x88	; 136
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	0e 94 27 11 	call	0x224e	; 0x224e <puts>
	adc_init();
     acc:	0e 94 96 03 	call	0x72c	; 0x72c <adc_init>
	oled_init();
     ad0:	0e 94 29 0a 	call	0x1452	; 0x1452 <oled_init>
	joy_init();
     ad4:	0e 94 19 04 	call	0x832	; 0x832 <joy_init>
	touch_init();
     ad8:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <touch_init>
	menu_init();
     adc:	0e 94 3a 08 	call	0x1074	; 0x1074 <menu_init>
	spi_master_init(NODE_1);
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 49 0b 	call	0x1692	; 0x1692 <spi_master_init>
	mcp_init();
     ae8:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <mcp_init>
	can_init(MODE_NORMAL); 
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 b4 03 	call	0x768	; 0x768 <can_init>
	
	while (1)
	{	
		Position position = joy_get_position();
		Msg msg;
		msg.id = 42;
     af4:	0f 2e       	mov	r0, r31
     af6:	fa e2       	ldi	r31, 0x2A	; 42
     af8:	ef 2e       	mov	r14, r31
     afa:	f0 2d       	mov	r31, r0
     afc:	c1 2c       	mov	r12, r1
		msg.length = sizeof(position);
     afe:	0f 2e       	mov	r0, r31
     b00:	f6 e0       	ldi	r31, 0x06	; 6
     b02:	ff 2e       	mov	r15, r31
     b04:	f0 2d       	mov	r31, r0
     b06:	d1 2c       	mov	r13, r1
		msg.data = (char*) &position;
     b08:	8e 01       	movw	r16, r28
     b0a:	09 5f       	subi	r16, 0xF9	; 249
     b0c:	1f 4f       	sbci	r17, 0xFF	; 255
	//sram_test(); //Not working
	//can_test();
	
	while (1)
	{	
		Position position = joy_get_position();
     b0e:	0e 94 1c 04 	call	0x838	; 0x838 <joy_get_position>
     b12:	2f 83       	std	Y+7, r18	; 0x07
     b14:	38 87       	std	Y+8, r19	; 0x08
     b16:	49 87       	std	Y+9, r20	; 0x09
     b18:	5a 87       	std	Y+10, r21	; 0x0a
     b1a:	6b 87       	std	Y+11, r22	; 0x0b
     b1c:	7c 87       	std	Y+12, r23	; 0x0c
		Msg msg;
		msg.id = 42;
     b1e:	4e 2d       	mov	r20, r14
     b20:	e9 82       	std	Y+1, r14	; 0x01
     b22:	ca 82       	std	Y+2, r12	; 0x02
		msg.length = sizeof(position);
     b24:	6f 2d       	mov	r22, r15
     b26:	fb 82       	std	Y+3, r15	; 0x03
     b28:	dc 82       	std	Y+4, r13	; 0x04
		msg.data = (char*) &position;
     b2a:	1e 83       	std	Y+6, r17	; 0x06
     b2c:	0d 83       	std	Y+5, r16	; 0x05
		can_transmit(msg);
     b2e:	5c 2d       	mov	r21, r12
     b30:	7d 2d       	mov	r23, r13
     b32:	80 2f       	mov	r24, r16
     b34:	9e 81       	ldd	r25, Y+6	; 0x06
     b36:	0e 94 c7 03 	call	0x78e	; 0x78e <can_transmit>
				printf("ID unknown");
		}
		free(msg_received.data);
		printf("x:%4d y:%4d z:%4d\r", position_received.x,position_received.y,position_received.z);
		*/
		menu_run_display();
     b3a:	0e 94 b3 08 	call	0x1166	; 0x1166 <menu_run_display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 ef       	ldi	r25, 0xF0	; 240
     b42:	01 97       	sbiw	r24, 0x01	; 1
     b44:	f1 f7       	brne	.-4      	; 0xb42 <main+0xaa>
     b46:	e3 cf       	rjmp	.-58     	; 0xb0e <main+0x76>

00000b48 <mcp_write>:
	char data = spi_master_transmit(0x0); //0x0 = dummy value
	set_bit(PORTB,PB4);
	return data;
}

void mcp_write(char address, char data){
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	d8 2f       	mov	r29, r24
     b4e:	c6 2f       	mov	r28, r22
	clear_bit(PORTB, PB4);
     b50:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_WRITE);
     b52:	82 e0       	ldi	r24, 0x02	; 2
     b54:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <spi_master_transmit>
	spi_master_transmit(address);
     b58:	8d 2f       	mov	r24, r29
     b5a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <spi_master_transmit>
	spi_master_transmit(data);
     b5e:	8c 2f       	mov	r24, r28
     b60:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <spi_master_transmit>
	set_bit(PORTB,PB4);
     b64:	c4 9a       	sbi	0x18, 4	; 24
}
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	08 95       	ret

00000b6c <mcp_request_to_send>:

void mcp_request_to_send(int TXB2, int TXB1, int TXB0){
	int command = 0b10000000 | TXB0 | (TXB1 << 1) | (TXB2 << 2);
	clear_bit(PORTB, PB4);
     b6c:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(data);
	set_bit(PORTB,PB4);
}

void mcp_request_to_send(int TXB2, int TXB1, int TXB0){
	int command = 0b10000000 | TXB0 | (TXB1 << 1) | (TXB2 << 2);
     b6e:	88 0f       	add	r24, r24
     b70:	99 1f       	adc	r25, r25
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	80 68       	ori	r24, 0x80	; 128
     b78:	48 2b       	or	r20, r24
     b7a:	59 2b       	or	r21, r25
     b7c:	cb 01       	movw	r24, r22
     b7e:	88 0f       	add	r24, r24
     b80:	99 1f       	adc	r25, r25
	clear_bit(PORTB, PB4);
	spi_master_transmit(command);
     b82:	84 2b       	or	r24, r20
     b84:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <spi_master_transmit>
	set_bit(PORTB, PB4);
     b88:	c4 9a       	sbi	0x18, 4	; 24
     b8a:	08 95       	ret

00000b8c <mcp_bit_modify>:
	char status = spi_master_transmit(0x00);
	set_bit(PORTB ,PB4);
	return status;
}

void mcp_bit_modify(char address, char mask, char data){
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	18 2f       	mov	r17, r24
     b94:	d6 2f       	mov	r29, r22
     b96:	c4 2f       	mov	r28, r20
	clear_bit(PORTB, PB4);
     b98:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_BITMOD);	
     b9a:	85 e0       	ldi	r24, 0x05	; 5
     b9c:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <spi_master_transmit>
	spi_master_transmit(address);
     ba0:	81 2f       	mov	r24, r17
     ba2:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <spi_master_transmit>
	spi_master_transmit(mask);
     ba6:	8d 2f       	mov	r24, r29
     ba8:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <spi_master_transmit>
	spi_master_transmit(data);
     bac:	8c 2f       	mov	r24, r28
     bae:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <spi_master_transmit>
	set_bit(PORTB, PB4);
     bb2:	c4 9a       	sbi	0x18, 4	; 24
}
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	08 95       	ret

00000bbc <mcp_reset>:
		
void mcp_reset(){
	clear_bit(PORTB, PB4);
     bbc:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_RESET);	
     bbe:	80 ec       	ldi	r24, 0xC0	; 192
     bc0:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <spi_master_transmit>
	set_bit(PORTB, PB4);
     bc4:	c4 9a       	sbi	0x18, 4	; 24
     bc6:	08 95       	ret

00000bc8 <mcp_init>:
}
	
void mcp_init(){
	mcp_reset();
     bc8:	0e 94 de 05 	call	0xbbc	; 0xbbc <mcp_reset>
     bcc:	08 95       	ret

00000bce <draw_list>:
	}
	

	return self;
}
Menu* draw_list(Menu* self){
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	7c 01       	movw	r14, r24

	for(int i = 0; i < self->num_of_entries; i++){
     bdc:	dc 01       	movw	r26, r24
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	8d 91       	ld	r24, X+
     be2:	9c 91       	ld	r25, X
     be4:	15 97       	sbiw	r26, 0x05	; 5
     be6:	18 16       	cp	r1, r24
     be8:	19 06       	cpc	r1, r25
     bea:	e4 f4       	brge	.+56     	; 0xc24 <draw_list+0x56>
     bec:	c0 e0       	ldi	r28, 0x00	; 0
     bee:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_string(self->entries[i],0,i,5,0);
     bf0:	ce 01       	movw	r24, r28
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	d7 01       	movw	r26, r14
     bf8:	12 96       	adiw	r26, 0x02	; 2
     bfa:	ed 91       	ld	r30, X+
     bfc:	fc 91       	ld	r31, X
     bfe:	13 97       	sbiw	r26, 0x03	; 3
     c00:	e8 0f       	add	r30, r24
     c02:	f9 1f       	adc	r31, r25
     c04:	00 e0       	ldi	r16, 0x00	; 0
     c06:	10 e0       	ldi	r17, 0x00	; 0
     c08:	25 e0       	ldi	r18, 0x05	; 5
     c0a:	4c 2f       	mov	r20, r28
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	91 81       	ldd	r25, Z+1	; 0x01
     c12:	0e 94 b3 09 	call	0x1366	; 0x1366 <oled_print_string>

	return self;
}
Menu* draw_list(Menu* self){

	for(int i = 0; i < self->num_of_entries; i++){
     c16:	21 96       	adiw	r28, 0x01	; 1
     c18:	f7 01       	movw	r30, r14
     c1a:	84 81       	ldd	r24, Z+4	; 0x04
     c1c:	95 81       	ldd	r25, Z+5	; 0x05
     c1e:	c8 17       	cp	r28, r24
     c20:	d9 07       	cpc	r29, r25
     c22:	34 f3       	brlt	.-52     	; 0xbf0 <draw_list+0x22>
		oled_print_string(self->entries[i],0,i,5,0);
	}

	//Where to go next
	Direction dir = joy_get_direction();
     c24:	0e 94 2d 05 	call	0xa5a	; 0xa5a <joy_get_direction>
	if(!joy_moved){//THIS IS NEW
     c28:	20 91 42 02 	lds	r18, 0x0242
     c2c:	30 91 43 02 	lds	r19, 0x0243
     c30:	23 2b       	or	r18, r19
     c32:	d9 f4       	brne	.+54     	; 0xc6a <draw_list+0x9c>
		if((dir == LEFT) & (self->super_menu != NULL)){
     c34:	d7 01       	movw	r26, r14
     c36:	18 96       	adiw	r26, 0x08	; 8
     c38:	2d 91       	ld	r18, X+
     c3a:	3c 91       	ld	r19, X
     c3c:	19 97       	sbiw	r26, 0x09	; 9
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	09 f0       	breq	.+2      	; 0xc46 <draw_list+0x78>
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	99 23       	and	r25, r25
     c48:	39 f0       	breq	.+14     	; 0xc58 <draw_list+0x8a>
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	21 15       	cp	r18, r1
     c4e:	31 05       	cpc	r19, r1
     c50:	09 f4       	brne	.+2      	; 0xc54 <draw_list+0x86>
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	81 11       	cpse	r24, r1
     c56:	01 c0       	rjmp	.+2      	; 0xc5a <draw_list+0x8c>
     c58:	97 01       	movw	r18, r14
			self = self->super_menu;
		}
		joy_moved = 1;		
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	90 93 43 02 	sts	0x0243, r25
     c62:	80 93 42 02 	sts	0x0242, r24
     c66:	79 01       	movw	r14, r18
     c68:	06 c0       	rjmp	.+12     	; 0xc76 <draw_list+0xa8>
	}
	else if (dir == NEUTRAL){ //THIS IS NEW
     c6a:	8f 3f       	cpi	r24, 0xFF	; 255
     c6c:	21 f4       	brne	.+8      	; 0xc76 <draw_list+0xa8>
		joy_moved = 0;
     c6e:	10 92 43 02 	sts	0x0243, r1
     c72:	10 92 42 02 	sts	0x0242, r1
	}
	
	return self;
}
     c76:	c7 01       	movw	r24, r14
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	08 95       	ret

00000c86 <draw_menu>:
	super->entries[super->num_of_entries - 1] = malloc(strlen(sub->name) * sizeof(char));
	super->entries[super->num_of_entries - 1] = sub->name;
}

//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	7c 01       	movw	r14, r24
	
	for(int i = 0; i < self->num_of_entries; i++){
     c94:	dc 01       	movw	r26, r24
     c96:	14 96       	adiw	r26, 0x04	; 4
     c98:	8d 91       	ld	r24, X+
     c9a:	9c 91       	ld	r25, X
     c9c:	15 97       	sbiw	r26, 0x05	; 5
     c9e:	18 16       	cp	r1, r24
     ca0:	19 06       	cpc	r1, r25
     ca2:	e4 f4       	brge	.+56     	; 0xcdc <draw_menu+0x56>
     ca4:	c0 e0       	ldi	r28, 0x00	; 0
     ca6:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_string(self->entries[i],0,i,5,0);
     ca8:	ce 01       	movw	r24, r28
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	d7 01       	movw	r26, r14
     cb0:	12 96       	adiw	r26, 0x02	; 2
     cb2:	ed 91       	ld	r30, X+
     cb4:	fc 91       	ld	r31, X
     cb6:	13 97       	sbiw	r26, 0x03	; 3
     cb8:	e8 0f       	add	r30, r24
     cba:	f9 1f       	adc	r31, r25
     cbc:	00 e0       	ldi	r16, 0x00	; 0
     cbe:	10 e0       	ldi	r17, 0x00	; 0
     cc0:	25 e0       	ldi	r18, 0x05	; 5
     cc2:	4c 2f       	mov	r20, r28
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	91 81       	ldd	r25, Z+1	; 0x01
     cca:	0e 94 b3 09 	call	0x1366	; 0x1366 <oled_print_string>
}

//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
	
	for(int i = 0; i < self->num_of_entries; i++){
     cce:	21 96       	adiw	r28, 0x01	; 1
     cd0:	f7 01       	movw	r30, r14
     cd2:	84 81       	ldd	r24, Z+4	; 0x04
     cd4:	95 81       	ldd	r25, Z+5	; 0x05
     cd6:	c8 17       	cp	r28, r24
     cd8:	d9 07       	cpc	r29, r25
     cda:	34 f3       	brlt	.-52     	; 0xca8 <draw_menu+0x22>
		oled_print_string(self->entries[i],0,i,5,0);
	}
	oled_invert_rectangle(0,8*(self->cursor),64,8*((self->cursor) + 1));
     cdc:	d7 01       	movw	r26, r14
     cde:	16 96       	adiw	r26, 0x06	; 6
     ce0:	2d 91       	ld	r18, X+
     ce2:	3c 91       	ld	r19, X
     ce4:	17 97       	sbiw	r26, 0x07	; 7
     ce6:	2f 5f       	subi	r18, 0xFF	; 255
     ce8:	3f 4f       	sbci	r19, 0xFF	; 255
     cea:	22 0f       	add	r18, r18
     cec:	33 1f       	adc	r19, r19
     cee:	22 0f       	add	r18, r18
     cf0:	33 1f       	adc	r19, r19
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	b9 01       	movw	r22, r18
     cf8:	68 50       	subi	r22, 0x08	; 8
     cfa:	71 09       	sbc	r23, r1
     cfc:	40 e4       	ldi	r20, 0x40	; 64
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 13 0b 	call	0x1626	; 0x1626 <oled_invert_rectangle>
	
	//Where to go next
	Direction dir = joy_get_direction();
     d08:	0e 94 2d 05 	call	0xa5a	; 0xa5a <joy_get_direction>
	if(1){	//THIS IS NEW
		if((dir == UP) & (self->cursor != 0)){
     d0c:	f7 01       	movw	r30, r14
     d0e:	26 81       	ldd	r18, Z+6	; 0x06
     d10:	37 81       	ldd	r19, Z+7	; 0x07
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	09 f0       	breq	.+2      	; 0xd1a <draw_menu+0x94>
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	99 23       	and	r25, r25
     d1c:	09 f4       	brne	.+2      	; 0xd20 <draw_menu+0x9a>
     d1e:	4f c0       	rjmp	.+158    	; 0xdbe <draw_menu+0x138>
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	21 15       	cp	r18, r1
     d24:	31 05       	cpc	r19, r1
     d26:	09 f4       	brne	.+2      	; 0xd2a <draw_menu+0xa4>
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	99 23       	and	r25, r25
     d2c:	09 f4       	brne	.+2      	; 0xd30 <draw_menu+0xaa>
     d2e:	47 c0       	rjmp	.+142    	; 0xdbe <draw_menu+0x138>
     d30:	c0 e0       	ldi	r28, 0x00	; 0
     d32:	d0 e0       	ldi	r29, 0x00	; 0
			for (int i = 0; i < 8; i++,i++){
				oled_invert_rectangle(0,8*(self->cursor) - i - 2,64,8*((self->cursor) + 1) - i - 2);
     d34:	d7 01       	movw	r26, r14
     d36:	16 96       	adiw	r26, 0x06	; 6
     d38:	6d 91       	ld	r22, X+
     d3a:	7c 91       	ld	r23, X
     d3c:	17 97       	sbiw	r26, 0x07	; 7
     d3e:	6f 5f       	subi	r22, 0xFF	; 255
     d40:	7f 4f       	sbci	r23, 0xFF	; 255
     d42:	66 0f       	add	r22, r22
     d44:	77 1f       	adc	r23, r23
     d46:	66 0f       	add	r22, r22
     d48:	77 1f       	adc	r23, r23
     d4a:	66 0f       	add	r22, r22
     d4c:	77 1f       	adc	r23, r23
     d4e:	9b 01       	movw	r18, r22
     d50:	2c 1b       	sub	r18, r28
     d52:	3d 0b       	sbc	r19, r29
     d54:	22 50       	subi	r18, 0x02	; 2
     d56:	31 09       	sbc	r19, r1
     d58:	6c 1b       	sub	r22, r28
     d5a:	7d 0b       	sbc	r23, r29
     d5c:	6a 50       	subi	r22, 0x0A	; 10
     d5e:	71 09       	sbc	r23, r1
     d60:	40 e4       	ldi	r20, 0x40	; 64
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 13 0b 	call	0x1626	; 0x1626 <oled_invert_rectangle>
				oled_invert_rectangle(0,8*(self->cursor) - i,64,8*((self->cursor) + 1) - i);
     d6c:	f7 01       	movw	r30, r14
     d6e:	66 81       	ldd	r22, Z+6	; 0x06
     d70:	77 81       	ldd	r23, Z+7	; 0x07
     d72:	6f 5f       	subi	r22, 0xFF	; 255
     d74:	7f 4f       	sbci	r23, 0xFF	; 255
     d76:	66 0f       	add	r22, r22
     d78:	77 1f       	adc	r23, r23
     d7a:	66 0f       	add	r22, r22
     d7c:	77 1f       	adc	r23, r23
     d7e:	66 0f       	add	r22, r22
     d80:	77 1f       	adc	r23, r23
     d82:	9b 01       	movw	r18, r22
     d84:	2c 1b       	sub	r18, r28
     d86:	3d 0b       	sbc	r19, r29
     d88:	68 50       	subi	r22, 0x08	; 8
     d8a:	71 09       	sbc	r23, r1
     d8c:	6c 1b       	sub	r22, r28
     d8e:	7d 0b       	sbc	r23, r29
     d90:	40 e4       	ldi	r20, 0x40	; 64
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 13 0b 	call	0x1626	; 0x1626 <oled_invert_rectangle>
				oled_refresh();
     d9c:	0e 94 af 0a 	call	0x155e	; 0x155e <oled_refresh>
	
	//Where to go next
	Direction dir = joy_get_direction();
	if(1){	//THIS IS NEW
		if((dir == UP) & (self->cursor != 0)){
			for (int i = 0; i < 8; i++,i++){
     da0:	22 96       	adiw	r28, 0x02	; 2
     da2:	c8 30       	cpi	r28, 0x08	; 8
     da4:	d1 05       	cpc	r29, r1
     da6:	31 f6       	brne	.-116    	; 0xd34 <draw_menu+0xae>
				oled_invert_rectangle(0,8*(self->cursor) - i - 2,64,8*((self->cursor) + 1) - i - 2);
				oled_invert_rectangle(0,8*(self->cursor) - i,64,8*((self->cursor) + 1) - i);
				oled_refresh();
			}
			self->cursor--;
     da8:	d7 01       	movw	r26, r14
     daa:	16 96       	adiw	r26, 0x06	; 6
     dac:	8d 91       	ld	r24, X+
     dae:	9c 91       	ld	r25, X
     db0:	17 97       	sbiw	r26, 0x07	; 7
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	17 96       	adiw	r26, 0x07	; 7
     db6:	9c 93       	st	X, r25
     db8:	8e 93       	st	-X, r24
     dba:	16 97       	sbiw	r26, 0x06	; 6
     dbc:	88 c0       	rjmp	.+272    	; 0xece <draw_menu+0x248>
		}
		else if((dir == DOWN) & (self->cursor != (self->num_of_entries - 1))){
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	83 30       	cpi	r24, 0x03	; 3
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <draw_menu+0x140>
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	99 23       	and	r25, r25
     dc8:	09 f4       	brne	.+2      	; 0xdcc <draw_menu+0x146>
     dca:	54 c0       	rjmp	.+168    	; 0xe74 <draw_menu+0x1ee>
     dcc:	f7 01       	movw	r30, r14
     dce:	44 81       	ldd	r20, Z+4	; 0x04
     dd0:	55 81       	ldd	r21, Z+5	; 0x05
     dd2:	41 50       	subi	r20, 0x01	; 1
     dd4:	51 09       	sbc	r21, r1
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	24 17       	cp	r18, r20
     dda:	35 07       	cpc	r19, r21
     ddc:	09 f4       	brne	.+2      	; 0xde0 <draw_menu+0x15a>
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	99 23       	and	r25, r25
     de2:	09 f4       	brne	.+2      	; 0xde6 <draw_menu+0x160>
     de4:	47 c0       	rjmp	.+142    	; 0xe74 <draw_menu+0x1ee>
     de6:	c0 e0       	ldi	r28, 0x00	; 0
     de8:	d0 e0       	ldi	r29, 0x00	; 0
			
			//---NEW--- ANIMATION FOR DOWNWARDS MOVEMENT
			for (int i = 0; i < 8; i++,i++){
				oled_invert_rectangle(0,8*(self->cursor) + i,64,8*((self->cursor) + 1) + i);
     dea:	d7 01       	movw	r26, r14
     dec:	16 96       	adiw	r26, 0x06	; 6
     dee:	6d 91       	ld	r22, X+
     df0:	7c 91       	ld	r23, X
     df2:	17 97       	sbiw	r26, 0x07	; 7
     df4:	6f 5f       	subi	r22, 0xFF	; 255
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	66 0f       	add	r22, r22
     dfa:	77 1f       	adc	r23, r23
     dfc:	66 0f       	add	r22, r22
     dfe:	77 1f       	adc	r23, r23
     e00:	66 0f       	add	r22, r22
     e02:	77 1f       	adc	r23, r23
     e04:	9b 01       	movw	r18, r22
     e06:	2c 0f       	add	r18, r28
     e08:	3d 1f       	adc	r19, r29
     e0a:	68 50       	subi	r22, 0x08	; 8
     e0c:	71 09       	sbc	r23, r1
     e0e:	6c 0f       	add	r22, r28
     e10:	7d 1f       	adc	r23, r29
     e12:	40 e4       	ldi	r20, 0x40	; 64
     e14:	50 e0       	ldi	r21, 0x00	; 0
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 13 0b 	call	0x1626	; 0x1626 <oled_invert_rectangle>
				oled_invert_rectangle(0,8*(self->cursor) + i + 2,64,8*((self->cursor) + 1) + i + 2);
     e1e:	f7 01       	movw	r30, r14
     e20:	66 81       	ldd	r22, Z+6	; 0x06
     e22:	77 81       	ldd	r23, Z+7	; 0x07
     e24:	6f 5f       	subi	r22, 0xFF	; 255
     e26:	7f 4f       	sbci	r23, 0xFF	; 255
     e28:	66 0f       	add	r22, r22
     e2a:	77 1f       	adc	r23, r23
     e2c:	66 0f       	add	r22, r22
     e2e:	77 1f       	adc	r23, r23
     e30:	66 0f       	add	r22, r22
     e32:	77 1f       	adc	r23, r23
     e34:	9b 01       	movw	r18, r22
     e36:	2c 0f       	add	r18, r28
     e38:	3d 1f       	adc	r19, r29
     e3a:	2e 5f       	subi	r18, 0xFE	; 254
     e3c:	3f 4f       	sbci	r19, 0xFF	; 255
     e3e:	6c 0f       	add	r22, r28
     e40:	7d 1f       	adc	r23, r29
     e42:	66 50       	subi	r22, 0x06	; 6
     e44:	71 09       	sbc	r23, r1
     e46:	40 e4       	ldi	r20, 0x40	; 64
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 13 0b 	call	0x1626	; 0x1626 <oled_invert_rectangle>
				oled_refresh();
     e52:	0e 94 af 0a 	call	0x155e	; 0x155e <oled_refresh>
			self->cursor--;
		}
		else if((dir == DOWN) & (self->cursor != (self->num_of_entries - 1))){
			
			//---NEW--- ANIMATION FOR DOWNWARDS MOVEMENT
			for (int i = 0; i < 8; i++,i++){
     e56:	22 96       	adiw	r28, 0x02	; 2
     e58:	c8 30       	cpi	r28, 0x08	; 8
     e5a:	d1 05       	cpc	r29, r1
     e5c:	31 f6       	brne	.-116    	; 0xdea <draw_menu+0x164>
				oled_invert_rectangle(0,8*(self->cursor) + i + 2,64,8*((self->cursor) + 1) + i + 2);
				oled_refresh();
			}
			//-------------
			
			self->cursor++;
     e5e:	d7 01       	movw	r26, r14
     e60:	16 96       	adiw	r26, 0x06	; 6
     e62:	8d 91       	ld	r24, X+
     e64:	9c 91       	ld	r25, X
     e66:	17 97       	sbiw	r26, 0x07	; 7
     e68:	01 96       	adiw	r24, 0x01	; 1
     e6a:	17 96       	adiw	r26, 0x07	; 7
     e6c:	9c 93       	st	X, r25
     e6e:	8e 93       	st	-X, r24
     e70:	16 97       	sbiw	r26, 0x06	; 6
     e72:	2d c0       	rjmp	.+90     	; 0xece <draw_menu+0x248>
		}
		else if((dir == RIGHT) & (self->sub_menus[self->cursor]->num_of_entries != 0)){ //THIS IS CHANGED
     e74:	22 0f       	add	r18, r18
     e76:	33 1f       	adc	r19, r19
     e78:	d7 01       	movw	r26, r14
     e7a:	1a 96       	adiw	r26, 0x0a	; 10
     e7c:	ed 91       	ld	r30, X+
     e7e:	fc 91       	ld	r31, X
     e80:	1b 97       	sbiw	r26, 0x0b	; 11
     e82:	e2 0f       	add	r30, r18
     e84:	f3 1f       	adc	r31, r19
     e86:	01 90       	ld	r0, Z+
     e88:	f0 81       	ld	r31, Z
     e8a:	e0 2d       	mov	r30, r0
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	81 11       	cpse	r24, r1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	99 23       	and	r25, r25
     e94:	41 f0       	breq	.+16     	; 0xea6 <draw_menu+0x220>
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	24 81       	ldd	r18, Z+4	; 0x04
     e9a:	35 81       	ldd	r19, Z+5	; 0x05
     e9c:	23 2b       	or	r18, r19
     e9e:	09 f4       	brne	.+2      	; 0xea2 <draw_menu+0x21c>
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	91 11       	cpse	r25, r1
     ea4:	11 c0       	rjmp	.+34     	; 0xec8 <draw_menu+0x242>
			self = self->sub_menus[self->cursor];
		}
		else if((dir == LEFT) & (self->super_menu != NULL)){
     ea6:	f7 01       	movw	r30, r14
     ea8:	20 85       	ldd	r18, Z+8	; 0x08
     eaa:	31 85       	ldd	r19, Z+9	; 0x09
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	82 30       	cpi	r24, 0x02	; 2
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <draw_menu+0x22e>
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	99 23       	and	r25, r25
     eb6:	59 f0       	breq	.+22     	; 0xece <draw_menu+0x248>
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	21 15       	cp	r18, r1
     ebc:	31 05       	cpc	r19, r1
     ebe:	09 f4       	brne	.+2      	; 0xec2 <draw_menu+0x23c>
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	81 11       	cpse	r24, r1
     ec4:	03 c0       	rjmp	.+6      	; 0xecc <draw_menu+0x246>
     ec6:	03 c0       	rjmp	.+6      	; 0xece <draw_menu+0x248>
			//-------------
			
			self->cursor++;
		}
		else if((dir == RIGHT) & (self->sub_menus[self->cursor]->num_of_entries != 0)){ //THIS IS CHANGED
			self = self->sub_menus[self->cursor];
     ec8:	7f 01       	movw	r14, r30
     eca:	01 c0       	rjmp	.+2      	; 0xece <draw_menu+0x248>
		}
		else if((dir == LEFT) & (self->super_menu != NULL)){
			self = self->super_menu;
     ecc:	79 01       	movw	r14, r18
		}
		joy_moved = 1;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	90 93 43 02 	sts	0x0243, r25
     ed6:	80 93 42 02 	sts	0x0242, r24
		joy_moved = 0;
	}
	

	return self;
}
     eda:	c7 01       	movw	r24, r14
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	0f 91       	pop	r16
     ee4:	ff 90       	pop	r15
     ee6:	ef 90       	pop	r14
     ee8:	08 95       	ret

00000eea <add_entries>:
	
}
//----------NO NEED TO CHANGE THINGS BEYOND THIS----------

//Functions for adding entries and nodes
void add_entries(Menu* menu, char* entries[], int num_of_new_entries){
     eea:	af 92       	push	r10
     eec:	bf 92       	push	r11
     eee:	cf 92       	push	r12
     ef0:	df 92       	push	r13
     ef2:	ef 92       	push	r14
     ef4:	ff 92       	push	r15
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	8c 01       	movw	r16, r24
     f00:	e6 2e       	mov	r14, r22
     f02:	f7 2e       	mov	r15, r23
     f04:	ea 01       	movw	r28, r20
	
	menu->entries = malloc(num_of_new_entries * sizeof(char*));	//Correct size of double pointer
     f06:	6a 01       	movw	r12, r20
     f08:	cc 0c       	add	r12, r12
     f0a:	dd 1c       	adc	r13, r13
     f0c:	c6 01       	movw	r24, r12
     f0e:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <malloc>
     f12:	d8 01       	movw	r26, r16
     f14:	13 96       	adiw	r26, 0x03	; 3
     f16:	9c 93       	st	X, r25
     f18:	8e 93       	st	-X, r24
     f1a:	12 97       	sbiw	r26, 0x02	; 2
	
	for(int i = 0; i < num_of_new_entries; i++){
     f1c:	1c 16       	cp	r1, r28
     f1e:	1d 06       	cpc	r1, r29
     f20:	54 f5       	brge	.+84     	; 0xf76 <add_entries+0x8c>
     f22:	ae 2c       	mov	r10, r14
     f24:	bf 2c       	mov	r11, r15
     f26:	c0 e0       	ldi	r28, 0x00	; 0
     f28:	d0 e0       	ldi	r29, 0x00	; 0
		menu->entries[i] = malloc(strlen(entries[i]) * sizeof(char)); //Allocate space for each string
     f2a:	f8 01       	movw	r30, r16
     f2c:	e2 80       	ldd	r14, Z+2	; 0x02
     f2e:	f3 80       	ldd	r15, Z+3	; 0x03
     f30:	ec 0e       	add	r14, r28
     f32:	fd 1e       	adc	r15, r29
     f34:	f5 01       	movw	r30, r10
     f36:	a0 81       	ld	r26, Z
     f38:	b1 81       	ldd	r27, Z+1	; 0x01
     f3a:	fd 01       	movw	r30, r26
     f3c:	01 90       	ld	r0, Z+
     f3e:	00 20       	and	r0, r0
     f40:	e9 f7       	brne	.-6      	; 0xf3c <add_entries+0x52>
     f42:	31 97       	sbiw	r30, 0x01	; 1
     f44:	cf 01       	movw	r24, r30
     f46:	8a 1b       	sub	r24, r26
     f48:	9b 0b       	sbc	r25, r27
     f4a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <malloc>
     f4e:	d7 01       	movw	r26, r14
     f50:	8d 93       	st	X+, r24
     f52:	9c 93       	st	X, r25
		menu->entries[i] =  entries[i];								  //Adds each string
     f54:	f5 01       	movw	r30, r10
     f56:	81 91       	ld	r24, Z+
     f58:	91 91       	ld	r25, Z+
     f5a:	5f 01       	movw	r10, r30
     f5c:	d8 01       	movw	r26, r16
     f5e:	12 96       	adiw	r26, 0x02	; 2
     f60:	ed 91       	ld	r30, X+
     f62:	fc 91       	ld	r31, X
     f64:	13 97       	sbiw	r26, 0x03	; 3
     f66:	ec 0f       	add	r30, r28
     f68:	fd 1f       	adc	r31, r29
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	80 83       	st	Z, r24
     f6e:	22 96       	adiw	r28, 0x02	; 2
//Functions for adding entries and nodes
void add_entries(Menu* menu, char* entries[], int num_of_new_entries){
	
	menu->entries = malloc(num_of_new_entries * sizeof(char*));	//Correct size of double pointer
	
	for(int i = 0; i < num_of_new_entries; i++){
     f70:	cc 16       	cp	r12, r28
     f72:	dd 06       	cpc	r13, r29
     f74:	d1 f6       	brne	.-76     	; 0xf2a <add_entries+0x40>
		//empty->name = entries[i];
		//add_sub_menu(menu, empty);
		//menu->num_of_entries+=1;
	}
	//menu->num_of_entries = num_of_new_entries;
	menu->cursor = 0; //To make sure the cursor is not something else
     f76:	f8 01       	movw	r30, r16
     f78:	17 82       	std	Z+7, r1	; 0x07
     f7a:	16 82       	std	Z+6, r1	; 0x06
}
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	ff 90       	pop	r15
     f86:	ef 90       	pop	r14
     f88:	df 90       	pop	r13
     f8a:	cf 90       	pop	r12
     f8c:	bf 90       	pop	r11
     f8e:	af 90       	pop	r10
     f90:	08 95       	ret

00000f92 <add_sub_menu>:

void add_sub_menu(Menu* super, Menu* sub){
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	ec 01       	movw	r28, r24
     fa0:	8b 01       	movw	r16, r22
	super->num_of_entries += 1;		//Num of entries in super are updated
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	9d 81       	ldd	r25, Y+5	; 0x05
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	9d 83       	std	Y+5, r25	; 0x05
     faa:	8c 83       	std	Y+4, r24	; 0x04
	
	//Pointers to and from the menus are set correctly
	sub->super_menu = super;
     fac:	fb 01       	movw	r30, r22
     fae:	d1 87       	std	Z+9, r29	; 0x09
     fb0:	c0 87       	std	Z+8, r28	; 0x08
	super->sub_menus = realloc(super->sub_menus, super->num_of_entries * sizeof(Menu*));
     fb2:	6c 81       	ldd	r22, Y+4	; 0x04
     fb4:	7d 81       	ldd	r23, Y+5	; 0x05
     fb6:	66 0f       	add	r22, r22
     fb8:	77 1f       	adc	r23, r23
     fba:	8a 85       	ldd	r24, Y+10	; 0x0a
     fbc:	9b 85       	ldd	r25, Y+11	; 0x0b
     fbe:	0e 94 09 10 	call	0x2012	; 0x2012 <realloc>
     fc2:	9b 87       	std	Y+11, r25	; 0x0b
     fc4:	8a 87       	std	Y+10, r24	; 0x0a
	super->sub_menus[super->num_of_entries - 1] = malloc(sizeof(Menu));
     fc6:	ec 80       	ldd	r14, Y+4	; 0x04
     fc8:	fd 80       	ldd	r15, Y+5	; 0x05
     fca:	f1 e0       	ldi	r31, 0x01	; 1
     fcc:	ef 1a       	sub	r14, r31
     fce:	f0 e8       	ldi	r31, 0x80	; 128
     fd0:	ff 0a       	sbc	r15, r31
     fd2:	ee 0c       	add	r14, r14
     fd4:	ff 1c       	adc	r15, r15
     fd6:	e8 0e       	add	r14, r24
     fd8:	f9 1e       	adc	r15, r25
     fda:	8e e0       	ldi	r24, 0x0E	; 14
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <malloc>
     fe2:	f7 01       	movw	r30, r14
     fe4:	91 83       	std	Z+1, r25	; 0x01
     fe6:	80 83       	st	Z, r24
	super->sub_menus[super->num_of_entries - 1] = sub;
     fe8:	ec 81       	ldd	r30, Y+4	; 0x04
     fea:	fd 81       	ldd	r31, Y+5	; 0x05
     fec:	e1 50       	subi	r30, 0x01	; 1
     fee:	f0 48       	sbci	r31, 0x80	; 128
     ff0:	ee 0f       	add	r30, r30
     ff2:	ff 1f       	adc	r31, r31
     ff4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ff6:	9b 85       	ldd	r25, Y+11	; 0x0b
     ff8:	e8 0f       	add	r30, r24
     ffa:	f9 1f       	adc	r31, r25
     ffc:	11 83       	std	Z+1, r17	; 0x01
     ffe:	00 83       	st	Z, r16
	
	//Name of entries in the super menu are updated
	super->entries = realloc(super->entries, super->num_of_entries * sizeof(char*));
    1000:	6c 81       	ldd	r22, Y+4	; 0x04
    1002:	7d 81       	ldd	r23, Y+5	; 0x05
    1004:	66 0f       	add	r22, r22
    1006:	77 1f       	adc	r23, r23
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	9b 81       	ldd	r25, Y+3	; 0x03
    100c:	0e 94 09 10 	call	0x2012	; 0x2012 <realloc>
    1010:	9b 83       	std	Y+3, r25	; 0x03
    1012:	8a 83       	std	Y+2, r24	; 0x02
	super->entries[super->num_of_entries - 1] = malloc(strlen(sub->name) * sizeof(char));
    1014:	ec 80       	ldd	r14, Y+4	; 0x04
    1016:	fd 80       	ldd	r15, Y+5	; 0x05
    1018:	f1 e0       	ldi	r31, 0x01	; 1
    101a:	ef 1a       	sub	r14, r31
    101c:	f0 e8       	ldi	r31, 0x80	; 128
    101e:	ff 0a       	sbc	r15, r31
    1020:	ee 0c       	add	r14, r14
    1022:	ff 1c       	adc	r15, r15
    1024:	e8 0e       	add	r14, r24
    1026:	f9 1e       	adc	r15, r25
    1028:	f8 01       	movw	r30, r16
    102a:	a0 81       	ld	r26, Z
    102c:	b1 81       	ldd	r27, Z+1	; 0x01
    102e:	fd 01       	movw	r30, r26
    1030:	01 90       	ld	r0, Z+
    1032:	00 20       	and	r0, r0
    1034:	e9 f7       	brne	.-6      	; 0x1030 <add_sub_menu+0x9e>
    1036:	31 97       	sbiw	r30, 0x01	; 1
    1038:	cf 01       	movw	r24, r30
    103a:	8a 1b       	sub	r24, r26
    103c:	9b 0b       	sbc	r25, r27
    103e:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <malloc>
    1042:	f7 01       	movw	r30, r14
    1044:	91 83       	std	Z+1, r25	; 0x01
    1046:	80 83       	st	Z, r24
	super->entries[super->num_of_entries - 1] = sub->name;
    1048:	f8 01       	movw	r30, r16
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	ec 81       	ldd	r30, Y+4	; 0x04
    1050:	fd 81       	ldd	r31, Y+5	; 0x05
    1052:	e1 50       	subi	r30, 0x01	; 1
    1054:	f0 48       	sbci	r31, 0x80	; 128
    1056:	ee 0f       	add	r30, r30
    1058:	ff 1f       	adc	r31, r31
    105a:	2a 81       	ldd	r18, Y+2	; 0x02
    105c:	3b 81       	ldd	r19, Y+3	; 0x03
    105e:	e2 0f       	add	r30, r18
    1060:	f3 1f       	adc	r31, r19
    1062:	91 83       	std	Z+1, r25	; 0x01
    1064:	80 83       	st	Z, r24
}
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	08 95       	ret

00001074 <menu_init>:
	//.type = MENU,
	.draw = draw_menu
};

//The initializer - How the menus are related
void menu_init(){
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	6c 97       	sbiw	r28, 0x1c	; 28
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
	
	char* control_entr[3] = {"Player1", "Player2", "Player3"};
    1088:	86 e0       	ldi	r24, 0x06	; 6
    108a:	ec e6       	ldi	r30, 0x6C	; 108
    108c:	f1 e0       	ldi	r31, 0x01	; 1
    108e:	de 01       	movw	r26, r28
    1090:	11 96       	adiw	r26, 0x01	; 1
    1092:	01 90       	ld	r0, Z+
    1094:	0d 92       	st	X+, r0
    1096:	8a 95       	dec	r24
    1098:	e1 f7       	brne	.-8      	; 0x1092 <menu_init+0x1e>
	add_entries(&control, control_entr, 3);
    109a:	43 e0       	ldi	r20, 0x03	; 3
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	be 01       	movw	r22, r28
    10a0:	6f 5f       	subi	r22, 0xFF	; 255
    10a2:	7f 4f       	sbci	r23, 0xFF	; 255
    10a4:	8e e1       	ldi	r24, 0x1E	; 30
    10a6:	91 e0       	ldi	r25, 0x01	; 1
    10a8:	0e 94 75 07 	call	0xeea	; 0xeea <add_entries>
	add_sub_menu(&options, &control);
    10ac:	6e e1       	ldi	r22, 0x1E	; 30
    10ae:	71 e0       	ldi	r23, 0x01	; 1
    10b0:	8a e3       	ldi	r24, 0x3A	; 58
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	0e 94 c9 07 	call	0xf92	; 0xf92 <add_sub_menu>
	
	char* contro_entr[4] = {"Low", "Medium", "High","Ultra"};
    10b8:	88 e0       	ldi	r24, 0x08	; 8
    10ba:	e2 e7       	ldi	r30, 0x72	; 114
    10bc:	f1 e0       	ldi	r31, 0x01	; 1
    10be:	de 01       	movw	r26, r28
    10c0:	17 96       	adiw	r26, 0x07	; 7
    10c2:	01 90       	ld	r0, Z+
    10c4:	0d 92       	st	X+, r0
    10c6:	8a 95       	dec	r24
    10c8:	e1 f7       	brne	.-8      	; 0x10c2 <menu_init+0x4e>
	add_entries(&contro, contro_entr, 4);
    10ca:	44 e0       	ldi	r20, 0x04	; 4
    10cc:	50 e0       	ldi	r21, 0x00	; 0
    10ce:	be 01       	movw	r22, r28
    10d0:	69 5f       	subi	r22, 0xF9	; 249
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	80 e1       	ldi	r24, 0x10	; 16
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	0e 94 75 07 	call	0xeea	; 0xeea <add_entries>
	add_sub_menu(&options, &contro);
    10dc:	60 e1       	ldi	r22, 0x10	; 16
    10de:	71 e0       	ldi	r23, 0x01	; 1
    10e0:	8a e3       	ldi	r24, 0x3A	; 58
    10e2:	91 e0       	ldi	r25, 0x01	; 1
    10e4:	0e 94 c9 07 	call	0xf92	; 0xf92 <add_sub_menu>
	
	add_sub_menu(&main_menu, &options);
    10e8:	6a e3       	ldi	r22, 0x3A	; 58
    10ea:	71 e0       	ldi	r23, 0x01	; 1
    10ec:	86 e5       	ldi	r24, 0x56	; 86
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	0e 94 c9 07 	call	0xf92	; 0xf92 <add_sub_menu>
	
	char* diff_entr[3] = {"Easy", "Medium", "Hard"};
    10f4:	86 e0       	ldi	r24, 0x06	; 6
    10f6:	ea e7       	ldi	r30, 0x7A	; 122
    10f8:	f1 e0       	ldi	r31, 0x01	; 1
    10fa:	de 01       	movw	r26, r28
    10fc:	1f 96       	adiw	r26, 0x0f	; 15
    10fe:	01 90       	ld	r0, Z+
    1100:	0d 92       	st	X+, r0
    1102:	8a 95       	dec	r24
    1104:	e1 f7       	brne	.-8      	; 0x10fe <menu_init+0x8a>
	add_entries(&difficulty, diff_entr, 3);
    1106:	43 e0       	ldi	r20, 0x03	; 3
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	be 01       	movw	r22, r28
    110c:	61 5f       	subi	r22, 0xF1	; 241
    110e:	7f 4f       	sbci	r23, 0xFF	; 255
    1110:	88 e4       	ldi	r24, 0x48	; 72
    1112:	91 e0       	ldi	r25, 0x01	; 1
    1114:	0e 94 75 07 	call	0xeea	; 0xeea <add_entries>
	add_sub_menu(&main_menu, &difficulty);
    1118:	68 e4       	ldi	r22, 0x48	; 72
    111a:	71 e0       	ldi	r23, 0x01	; 1
    111c:	86 e5       	ldi	r24, 0x56	; 86
    111e:	91 e0       	ldi	r25, 0x01	; 1
    1120:	0e 94 c9 07 	call	0xf92	; 0xf92 <add_sub_menu>
	
	char* high_entr[4] = {"1. Herman","2. Raoul","3. Alle andre","-inf^inf. Hans"};
    1124:	88 e0       	ldi	r24, 0x08	; 8
    1126:	e0 e8       	ldi	r30, 0x80	; 128
    1128:	f1 e0       	ldi	r31, 0x01	; 1
    112a:	de 01       	movw	r26, r28
    112c:	55 96       	adiw	r26, 0x15	; 21
    112e:	01 90       	ld	r0, Z+
    1130:	0d 92       	st	X+, r0
    1132:	8a 95       	dec	r24
    1134:	e1 f7       	brne	.-8      	; 0x112e <menu_init+0xba>
	add_entries(&highscore, high_entr,4);
    1136:	44 e0       	ldi	r20, 0x04	; 4
    1138:	50 e0       	ldi	r21, 0x00	; 0
    113a:	be 01       	movw	r22, r28
    113c:	6b 5e       	subi	r22, 0xEB	; 235
    113e:	7f 4f       	sbci	r23, 0xFF	; 255
    1140:	8c e2       	ldi	r24, 0x2C	; 44
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	0e 94 75 07 	call	0xeea	; 0xeea <add_entries>
	add_sub_menu(&main_menu, &highscore);
    1148:	6c e2       	ldi	r22, 0x2C	; 44
    114a:	71 e0       	ldi	r23, 0x01	; 1
    114c:	86 e5       	ldi	r24, 0x56	; 86
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	0e 94 c9 07 	call	0xf92	; 0xf92 <add_sub_menu>
	
}
    1154:	6c 96       	adiw	r28, 0x1c	; 28
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	08 95       	ret

00001166 <menu_run_display>:
	//
	
Menu* current_menu = &main_menu;

void menu_run_display(){
	oled_clear_screen();
    1166:	0e 94 1b 0a 	call	0x1436	; 0x1436 <oled_clear_screen>
	current_menu = current_menu->draw(current_menu);
    116a:	80 91 0e 01 	lds	r24, 0x010E
    116e:	90 91 0f 01 	lds	r25, 0x010F
    1172:	dc 01       	movw	r26, r24
    1174:	1c 96       	adiw	r26, 0x0c	; 12
    1176:	ed 91       	ld	r30, X+
    1178:	fc 91       	ld	r31, X
    117a:	1d 97       	sbiw	r26, 0x0d	; 13
    117c:	09 95       	icall
    117e:	90 93 0f 01 	sts	0x010F, r25
    1182:	80 93 0e 01 	sts	0x010E, r24
	oled_refresh();
    1186:	0e 94 af 0a 	call	0x155e	; 0x155e <oled_refresh>
    118a:	08 95       	ret

0000118c <oled_write_data>:
void oled_write_command(char command){
	*oled_command = command;
}

void oled_write_data(char data){
	if(doublebuffering){
    118c:	20 91 6a 01 	lds	r18, 0x016A
    1190:	30 91 6b 01 	lds	r19, 0x016B
    1194:	23 2b       	or	r18, r19
    1196:	d1 f0       	breq	.+52     	; 0x11cc <oled_write_data+0x40>
		if (oled_back_buffer_index > 1023){
    1198:	20 91 44 02 	lds	r18, 0x0244
    119c:	30 91 45 02 	lds	r19, 0x0245
    11a0:	21 15       	cp	r18, r1
    11a2:	94 e0       	ldi	r25, 0x04	; 4
    11a4:	39 07       	cpc	r19, r25
    11a6:	bc f4       	brge	.+46     	; 0x11d6 <oled_write_data+0x4a>
			//printf("Outside of screen!\n");
			return -1;
		}
		oled_back_buffer[oled_back_buffer_index] = data;
    11a8:	40 91 66 01 	lds	r20, 0x0166
    11ac:	50 91 67 01 	lds	r21, 0x0167
    11b0:	fa 01       	movw	r30, r20
    11b2:	e2 0f       	add	r30, r18
    11b4:	f3 1f       	adc	r31, r19
    11b6:	80 83       	st	Z, r24
		oled_back_buffer_index++;	
    11b8:	80 91 44 02 	lds	r24, 0x0244
    11bc:	90 91 45 02 	lds	r25, 0x0245
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	90 93 45 02 	sts	0x0245, r25
    11c6:	80 93 44 02 	sts	0x0244, r24
    11ca:	08 95       	ret
	}
	else{
		*oled_front_buffer = data;
    11cc:	e0 91 64 01 	lds	r30, 0x0164
    11d0:	f0 91 65 01 	lds	r31, 0x0165
    11d4:	80 83       	st	Z, r24
    11d6:	08 95       	ret

000011d8 <oled_print_char>:
			oled_goto_line(line);
		}
	}
}

void oled_print_char(char character, uint8_t font_size, int invert){
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
	int font_address;
	if (font_size == 8){
    11e4:	68 30       	cpi	r22, 0x08	; 8
    11e6:	59 f4       	brne	.+22     	; 0x11fe <oled_print_char+0x26>
		font_address = &font8[character-' '];
    11e8:	08 2f       	mov	r16, r24
    11ea:	10 e0       	ldi	r17, 0x00	; 0
    11ec:	00 0f       	add	r16, r16
    11ee:	11 1f       	adc	r17, r17
    11f0:	00 0f       	add	r16, r16
    11f2:	11 1f       	adc	r17, r17
    11f4:	00 0f       	add	r16, r16
    11f6:	11 1f       	adc	r17, r17
    11f8:	0b 50       	subi	r16, 0x0B	; 11
    11fa:	1d 4f       	sbci	r17, 0xFD	; 253
    11fc:	1a c0       	rjmp	.+52     	; 0x1232 <oled_print_char+0x5a>
	}
	else if (font_size == 5){
    11fe:	65 30       	cpi	r22, 0x05	; 5
    1200:	71 f4       	brne	.+28     	; 0x121e <oled_print_char+0x46>
		font_address = &font5[character-' '];
    1202:	08 2f       	mov	r16, r24
    1204:	10 e0       	ldi	r17, 0x00	; 0
    1206:	00 52       	subi	r16, 0x20	; 32
    1208:	11 09       	sbc	r17, r1
    120a:	c8 01       	movw	r24, r16
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	08 0f       	add	r16, r24
    1216:	19 1f       	adc	r17, r25
    1218:	06 5e       	subi	r16, 0xE6	; 230
    121a:	1d 4f       	sbci	r17, 0xFD	; 253
    121c:	0a c0       	rjmp	.+20     	; 0x1232 <oled_print_char+0x5a>
	}
	else if (font_size == 4){
    121e:	64 30       	cpi	r22, 0x04	; 4
    1220:	41 f4       	brne	.+16     	; 0x1232 <oled_print_char+0x5a>
		font_address = &font4[character-' '];
    1222:	08 2f       	mov	r16, r24
    1224:	10 e0       	ldi	r17, 0x00	; 0
    1226:	00 0f       	add	r16, r16
    1228:	11 1f       	adc	r17, r17
    122a:	00 0f       	add	r16, r16
    122c:	11 1f       	adc	r17, r17
    122e:	02 5e       	subi	r16, 0xE2	; 226
    1230:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	if(!invert){
    1232:	45 2b       	or	r20, r21
    1234:	31 f0       	breq	.+12     	; 0x1242 <oled_print_char+0x6a>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    1236:	e6 2e       	mov	r14, r22
    1238:	f1 2c       	mov	r15, r1
    123a:	1e 14       	cp	r1, r14
    123c:	1f 04       	cpc	r1, r15
    123e:	9c f0       	brlt	.+38     	; 0x1266 <oled_print_char+0x8e>
    1240:	1f c0       	rjmp	.+62     	; 0x1280 <oled_print_char+0xa8>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
    1242:	e6 2e       	mov	r14, r22
    1244:	f1 2c       	mov	r15, r1
    1246:	1e 14       	cp	r1, r14
    1248:	1f 04       	cpc	r1, r15
    124a:	d4 f4       	brge	.+52     	; 0x1280 <oled_print_char+0xa8>
    124c:	c0 e0       	ldi	r28, 0x00	; 0
    124e:	d0 e0       	ldi	r29, 0x00	; 0
    1250:	fe 01       	movw	r30, r28
    1252:	e0 0f       	add	r30, r16
    1254:	f1 1f       	adc	r31, r17
			oled_write_data(pgm_read_byte(font_address + i));
    1256:	84 91       	lpm	r24, Z
    1258:	0e 94 c6 08 	call	0x118c	; 0x118c <oled_write_data>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
    125c:	21 96       	adiw	r28, 0x01	; 1
    125e:	ce 15       	cp	r28, r14
    1260:	df 05       	cpc	r29, r15
    1262:	b4 f3       	brlt	.-20     	; 0x1250 <oled_print_char+0x78>
    1264:	0d c0       	rjmp	.+26     	; 0x1280 <oled_print_char+0xa8>
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    1266:	c0 e0       	ldi	r28, 0x00	; 0
    1268:	d0 e0       	ldi	r29, 0x00	; 0
    126a:	fe 01       	movw	r30, r28
    126c:	e0 0f       	add	r30, r16
    126e:	f1 1f       	adc	r31, r17
			oled_write_data(~pgm_read_byte(font_address + i));
    1270:	84 91       	lpm	r24, Z
    1272:	80 95       	com	r24
    1274:	0e 94 c6 08 	call	0x118c	; 0x118c <oled_write_data>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    1278:	21 96       	adiw	r28, 0x01	; 1
    127a:	ce 15       	cp	r28, r14
    127c:	df 05       	cpc	r29, r15
    127e:	ac f3       	brlt	.-22     	; 0x126a <oled_print_char+0x92>
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ff 90       	pop	r15
    128a:	ef 90       	pop	r14
    128c:	08 95       	ret

0000128e <oled_read_data>:
		*oled_front_buffer = data;
	}	
}

char oled_read_data(){
	if(doublebuffering){
    128e:	80 91 6a 01 	lds	r24, 0x016A
    1292:	90 91 6b 01 	lds	r25, 0x016B
    1296:	89 2b       	or	r24, r25
    1298:	89 f0       	breq	.+34     	; 0x12bc <oled_read_data+0x2e>
		if (oled_back_buffer_index > 1023){
    129a:	80 91 44 02 	lds	r24, 0x0244
    129e:	90 91 45 02 	lds	r25, 0x0245
    12a2:	81 15       	cp	r24, r1
    12a4:	24 e0       	ldi	r18, 0x04	; 4
    12a6:	92 07       	cpc	r25, r18
    12a8:	5c f4       	brge	.+22     	; 0x12c0 <oled_read_data+0x32>
			//printf("Outside of screen!\n");
			//return -1;
			return 0x00;
		}
		return oled_back_buffer[oled_back_buffer_index];
    12aa:	20 91 66 01 	lds	r18, 0x0166
    12ae:	30 91 67 01 	lds	r19, 0x0167
    12b2:	f9 01       	movw	r30, r18
    12b4:	e8 0f       	add	r30, r24
    12b6:	f9 1f       	adc	r31, r25
    12b8:	80 81       	ld	r24, Z
    12ba:	08 95       	ret
	}
	else{
		return 0x00; //Alternatively NULL
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	08 95       	ret
char oled_read_data(){
	if(doublebuffering){
		if (oled_back_buffer_index > 1023){
			//printf("Outside of screen!\n");
			//return -1;
			return 0x00;
    12c0:	80 e0       	ldi	r24, 0x00	; 0
		return oled_back_buffer[oled_back_buffer_index];
	}
	else{
		return 0x00; //Alternatively NULL
	}
}
    12c2:	08 95       	ret

000012c4 <oled_goto_line>:

void oled_goto_line(int line){
	if(doublebuffering){
    12c4:	40 91 6a 01 	lds	r20, 0x016A
    12c8:	50 91 6b 01 	lds	r21, 0x016B
    12cc:	45 2b       	or	r20, r21
    12ce:	d1 f0       	breq	.+52     	; 0x1304 <oled_goto_line+0x40>
		oled_back_buffer_index = oled_back_buffer_index % 128 + line*128;	
    12d0:	20 91 44 02 	lds	r18, 0x0244
    12d4:	30 91 45 02 	lds	r19, 0x0245
    12d8:	2f 77       	andi	r18, 0x7F	; 127
    12da:	30 78       	andi	r19, 0x80	; 128
    12dc:	33 23       	and	r19, r19
    12de:	34 f4       	brge	.+12     	; 0x12ec <oled_goto_line+0x28>
    12e0:	21 50       	subi	r18, 0x01	; 1
    12e2:	31 09       	sbc	r19, r1
    12e4:	20 68       	ori	r18, 0x80	; 128
    12e6:	3f 6f       	ori	r19, 0xFF	; 255
    12e8:	2f 5f       	subi	r18, 0xFF	; 255
    12ea:	3f 4f       	sbci	r19, 0xFF	; 255
    12ec:	96 95       	lsr	r25
    12ee:	98 2f       	mov	r25, r24
    12f0:	88 27       	eor	r24, r24
    12f2:	97 95       	ror	r25
    12f4:	87 95       	ror	r24
    12f6:	28 0f       	add	r18, r24
    12f8:	39 1f       	adc	r19, r25
    12fa:	30 93 45 02 	sts	0x0245, r19
    12fe:	20 93 44 02 	sts	0x0244, r18
    1302:	08 95       	ret
	}
	else{
		oled_write_command(0xB0 + line);
    1304:	80 55       	subi	r24, 0x50	; 80
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1306:	e0 91 68 01 	lds	r30, 0x0168
    130a:	f0 91 69 01 	lds	r31, 0x0169
    130e:	80 83       	st	Z, r24
    1310:	08 95       	ret

00001312 <oled_goto_column>:
		oled_write_command(0xB0 + line);
	}
}

void oled_goto_column(int column){ 
	if(doublebuffering){
    1312:	20 91 6a 01 	lds	r18, 0x016A
    1316:	30 91 6b 01 	lds	r19, 0x016B
    131a:	23 2b       	or	r18, r19
    131c:	c1 f0       	breq	.+48     	; 0x134e <oled_goto_column+0x3c>
		oled_back_buffer_index = oled_back_buffer_index - oled_back_buffer_index % 128 + column;
    131e:	40 91 44 02 	lds	r20, 0x0244
    1322:	50 91 45 02 	lds	r21, 0x0245
    1326:	9a 01       	movw	r18, r20
    1328:	2f 77       	andi	r18, 0x7F	; 127
    132a:	30 78       	andi	r19, 0x80	; 128
    132c:	33 23       	and	r19, r19
    132e:	34 f4       	brge	.+12     	; 0x133c <oled_goto_column+0x2a>
    1330:	21 50       	subi	r18, 0x01	; 1
    1332:	31 09       	sbc	r19, r1
    1334:	20 68       	ori	r18, 0x80	; 128
    1336:	3f 6f       	ori	r19, 0xFF	; 255
    1338:	2f 5f       	subi	r18, 0xFF	; 255
    133a:	3f 4f       	sbci	r19, 0xFF	; 255
    133c:	42 1b       	sub	r20, r18
    133e:	53 0b       	sbc	r21, r19
    1340:	84 0f       	add	r24, r20
    1342:	95 1f       	adc	r25, r21
    1344:	90 93 45 02 	sts	0x0245, r25
    1348:	80 93 44 02 	sts	0x0244, r24
    134c:	08 95       	ret
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    134e:	e0 91 68 01 	lds	r30, 0x0168
    1352:	f0 91 69 01 	lds	r31, 0x0169
    1356:	10 82       	st	Z, r1
    1358:	e0 91 68 01 	lds	r30, 0x0168
    135c:	f0 91 69 01 	lds	r31, 0x0169
    1360:	80 e1       	ldi	r24, 0x10	; 16
    1362:	80 83       	st	Z, r24
    1364:	08 95       	ret

00001366 <oled_print_string>:
	oled_write_command(0xa6); //set normal display
	oled_write_command(0xaf); // display on
	oled_clear_screen(); //Sets all buffer data to 0
}

void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
    1366:	6f 92       	push	r6
    1368:	7f 92       	push	r7
    136a:	8f 92       	push	r8
    136c:	9f 92       	push	r9
    136e:	af 92       	push	r10
    1370:	bf 92       	push	r11
    1372:	cf 92       	push	r12
    1374:	df 92       	push	r13
    1376:	ef 92       	push	r14
    1378:	ff 92       	push	r15
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	ec 01       	movw	r28, r24
    1384:	96 2e       	mov	r9, r22
    1386:	74 2e       	mov	r7, r20
    1388:	82 2e       	mov	r8, r18
	oled_goto_column(column);
    138a:	86 2f       	mov	r24, r22
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	0e 94 89 09 	call	0x1312	; 0x1312 <oled_goto_column>
	oled_goto_line(line);
    1392:	87 2d       	mov	r24, r7
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 62 09 	call	0x12c4	; 0x12c4 <oled_goto_line>
	
	int length = strlen(string);
    139a:	fe 01       	movw	r30, r28
    139c:	01 90       	ld	r0, Z+
    139e:	00 20       	and	r0, r0
    13a0:	e9 f7       	brne	.-6      	; 0x139c <oled_print_string+0x36>
    13a2:	31 97       	sbiw	r30, 0x01	; 1
    13a4:	6f 01       	movw	r12, r30
    13a6:	cc 1a       	sub	r12, r28
    13a8:	dd 0a       	sbc	r13, r29
	for (int i = 0; i < length; i++){
    13aa:	1c 14       	cp	r1, r12
    13ac:	1d 04       	cpc	r1, r13
    13ae:	24 f5       	brge	.+72     	; 0x13f8 <oled_print_string+0x92>
    13b0:	7e 01       	movw	r14, r28
    13b2:	c0 e0       	ldi	r28, 0x00	; 0
    13b4:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
    13b6:	8f e7       	ldi	r24, 0x7F	; 127
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	5c 01       	movw	r10, r24
    13bc:	a8 18       	sub	r10, r8
    13be:	b1 08       	sbc	r11, r1
			column = 0;
    13c0:	61 2c       	mov	r6, r1
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
    13c2:	a8 01       	movw	r20, r16
    13c4:	68 2d       	mov	r22, r8
    13c6:	f7 01       	movw	r30, r14
    13c8:	81 91       	ld	r24, Z+
    13ca:	7f 01       	movw	r14, r30
    13cc:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <oled_print_char>
		column = column + font_size;
    13d0:	98 0c       	add	r9, r8
		if (column > (127 - font_size)){ //if no space for another char
    13d2:	89 2d       	mov	r24, r9
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	a8 16       	cp	r10, r24
    13d8:	b9 06       	cpc	r11, r25
    13da:	54 f4       	brge	.+20     	; 0x13f0 <oled_print_string+0x8a>
			column = 0;
			line++;
    13dc:	73 94       	inc	r7
			oled_goto_column(column);
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0e 94 89 09 	call	0x1312	; 0x1312 <oled_goto_column>
			oled_goto_line(line);
    13e6:	87 2d       	mov	r24, r7
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 62 09 	call	0x12c4	; 0x12c4 <oled_goto_line>
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
			column = 0;
    13ee:	96 2c       	mov	r9, r6
void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
    13f0:	21 96       	adiw	r28, 0x01	; 1
    13f2:	cc 16       	cp	r12, r28
    13f4:	dd 06       	cpc	r13, r29
    13f6:	29 f7       	brne	.-54     	; 0x13c2 <oled_print_string+0x5c>
			line++;
			oled_goto_column(column);
			oled_goto_line(line);
		}
	}
}
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	1f 91       	pop	r17
    13fe:	0f 91       	pop	r16
    1400:	ff 90       	pop	r15
    1402:	ef 90       	pop	r14
    1404:	df 90       	pop	r13
    1406:	cf 90       	pop	r12
    1408:	bf 90       	pop	r11
    140a:	af 90       	pop	r10
    140c:	9f 90       	pop	r9
    140e:	8f 90       	pop	r8
    1410:	7f 90       	pop	r7
    1412:	6f 90       	pop	r6
    1414:	08 95       	ret

00001416 <oled_clear_line>:
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
	}
}

void oled_clear_line(int line){
    1416:	cf 93       	push	r28
	oled_goto_line(line);
    1418:	0e 94 62 09 	call	0x12c4	; 0x12c4 <oled_goto_line>
	oled_goto_column(0);
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 89 09 	call	0x1312	; 0x1312 <oled_goto_column>
	for (uint8_t i = 0; i < 128; i++){
    1424:	c0 e0       	ldi	r28, 0x00	; 0
		oled_write_data(0x00);
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	0e 94 c6 08 	call	0x118c	; 0x118c <oled_write_data>
}

void oled_clear_line(int line){
	oled_goto_line(line);
	oled_goto_column(0);
	for (uint8_t i = 0; i < 128; i++){
    142c:	cf 5f       	subi	r28, 0xFF	; 255
    142e:	c0 38       	cpi	r28, 0x80	; 128
    1430:	d1 f7       	brne	.-12     	; 0x1426 <oled_clear_line+0x10>
		oled_write_data(0x00);
	}
}
    1432:	cf 91       	pop	r28
    1434:	08 95       	ret

00001436 <oled_clear_screen>:
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}

void oled_clear_screen(){
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	c0 e0       	ldi	r28, 0x00	; 0
    143c:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
    143e:	ce 01       	movw	r24, r28
    1440:	0e 94 0b 0a 	call	0x1416	; 0x1416 <oled_clear_line>
    1444:	21 96       	adiw	r28, 0x01	; 1
		}
	}
}

void oled_clear_screen(){
	for (uint8_t line = 0; line < 8; line++){
    1446:	c8 30       	cpi	r28, 0x08	; 8
    1448:	d1 05       	cpc	r29, r1
    144a:	c9 f7       	brne	.-14     	; 0x143e <oled_clear_screen+0x8>
		oled_clear_line(line);
	}
}
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <oled_init>:
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1452:	e0 91 68 01 	lds	r30, 0x0168
    1456:	f0 91 69 01 	lds	r31, 0x0169
    145a:	8e ea       	ldi	r24, 0xAE	; 174
    145c:	80 83       	st	Z, r24
    145e:	e0 91 68 01 	lds	r30, 0x0168
    1462:	f0 91 69 01 	lds	r31, 0x0169
    1466:	81 ea       	ldi	r24, 0xA1	; 161
    1468:	80 83       	st	Z, r24
    146a:	e0 91 68 01 	lds	r30, 0x0168
    146e:	f0 91 69 01 	lds	r31, 0x0169
    1472:	8a ed       	ldi	r24, 0xDA	; 218
    1474:	80 83       	st	Z, r24
    1476:	e0 91 68 01 	lds	r30, 0x0168
    147a:	f0 91 69 01 	lds	r31, 0x0169
    147e:	82 e1       	ldi	r24, 0x12	; 18
    1480:	80 83       	st	Z, r24
    1482:	e0 91 68 01 	lds	r30, 0x0168
    1486:	f0 91 69 01 	lds	r31, 0x0169
    148a:	88 ec       	ldi	r24, 0xC8	; 200
    148c:	80 83       	st	Z, r24
    148e:	e0 91 68 01 	lds	r30, 0x0168
    1492:	f0 91 69 01 	lds	r31, 0x0169
    1496:	88 ea       	ldi	r24, 0xA8	; 168
    1498:	80 83       	st	Z, r24
    149a:	e0 91 68 01 	lds	r30, 0x0168
    149e:	f0 91 69 01 	lds	r31, 0x0169
    14a2:	8f e3       	ldi	r24, 0x3F	; 63
    14a4:	80 83       	st	Z, r24
    14a6:	e0 91 68 01 	lds	r30, 0x0168
    14aa:	f0 91 69 01 	lds	r31, 0x0169
    14ae:	85 ed       	ldi	r24, 0xD5	; 213
    14b0:	80 83       	st	Z, r24
    14b2:	e0 91 68 01 	lds	r30, 0x0168
    14b6:	f0 91 69 01 	lds	r31, 0x0169
    14ba:	80 e8       	ldi	r24, 0x80	; 128
    14bc:	80 83       	st	Z, r24
    14be:	e0 91 68 01 	lds	r30, 0x0168
    14c2:	f0 91 69 01 	lds	r31, 0x0169
    14c6:	81 e8       	ldi	r24, 0x81	; 129
    14c8:	80 83       	st	Z, r24
    14ca:	e0 91 68 01 	lds	r30, 0x0168
    14ce:	f0 91 69 01 	lds	r31, 0x0169
    14d2:	80 e5       	ldi	r24, 0x50	; 80
    14d4:	80 83       	st	Z, r24
    14d6:	e0 91 68 01 	lds	r30, 0x0168
    14da:	f0 91 69 01 	lds	r31, 0x0169
    14de:	89 ed       	ldi	r24, 0xD9	; 217
    14e0:	80 83       	st	Z, r24
    14e2:	e0 91 68 01 	lds	r30, 0x0168
    14e6:	f0 91 69 01 	lds	r31, 0x0169
    14ea:	81 e2       	ldi	r24, 0x21	; 33
    14ec:	80 83       	st	Z, r24
    14ee:	e0 91 68 01 	lds	r30, 0x0168
    14f2:	f0 91 69 01 	lds	r31, 0x0169
    14f6:	80 e2       	ldi	r24, 0x20	; 32
    14f8:	80 83       	st	Z, r24
    14fa:	e0 91 68 01 	lds	r30, 0x0168
    14fe:	f0 91 69 01 	lds	r31, 0x0169
    1502:	82 e0       	ldi	r24, 0x02	; 2
    1504:	80 83       	st	Z, r24
    1506:	e0 91 68 01 	lds	r30, 0x0168
    150a:	f0 91 69 01 	lds	r31, 0x0169
    150e:	8b ed       	ldi	r24, 0xDB	; 219
    1510:	80 83       	st	Z, r24
    1512:	e0 91 68 01 	lds	r30, 0x0168
    1516:	f0 91 69 01 	lds	r31, 0x0169
    151a:	80 e3       	ldi	r24, 0x30	; 48
    151c:	80 83       	st	Z, r24
    151e:	e0 91 68 01 	lds	r30, 0x0168
    1522:	f0 91 69 01 	lds	r31, 0x0169
    1526:	8d ea       	ldi	r24, 0xAD	; 173
    1528:	80 83       	st	Z, r24
    152a:	e0 91 68 01 	lds	r30, 0x0168
    152e:	f0 91 69 01 	lds	r31, 0x0169
    1532:	10 82       	st	Z, r1
    1534:	e0 91 68 01 	lds	r30, 0x0168
    1538:	f0 91 69 01 	lds	r31, 0x0169
    153c:	84 ea       	ldi	r24, 0xA4	; 164
    153e:	80 83       	st	Z, r24
    1540:	e0 91 68 01 	lds	r30, 0x0168
    1544:	f0 91 69 01 	lds	r31, 0x0169
    1548:	86 ea       	ldi	r24, 0xA6	; 166
    154a:	80 83       	st	Z, r24
    154c:	e0 91 68 01 	lds	r30, 0x0168
    1550:	f0 91 69 01 	lds	r31, 0x0169
    1554:	8f ea       	ldi	r24, 0xAF	; 175
    1556:	80 83       	st	Z, r24
	oled_write_command(0xad); //master configuration
	oled_write_command(0x00);
	oled_write_command(0xa4); //out follows RAM content
	oled_write_command(0xa6); //set normal display
	oled_write_command(0xaf); // display on
	oled_clear_screen(); //Sets all buffer data to 0
    1558:	0e 94 1b 0a 	call	0x1436	; 0x1436 <oled_clear_screen>
    155c:	08 95       	ret

0000155e <oled_refresh>:
		oled_write_command(lower);
		oled_write_command(0b00010000 | upper);
	}
}

void oled_refresh(){
    155e:	cf 93       	push	r28
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1560:	e0 91 68 01 	lds	r30, 0x0168
    1564:	f0 91 69 01 	lds	r31, 0x0169
    1568:	10 82       	st	Z, r1
    156a:	e0 91 68 01 	lds	r30, 0x0168
    156e:	f0 91 69 01 	lds	r31, 0x0169
    1572:	80 e1       	ldi	r24, 0x10	; 16
    1574:	80 83       	st	Z, r24
	uint8_t lower = 0 & 0b00001111; // set column to 0
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
    1576:	80 91 6a 01 	lds	r24, 0x016A
    157a:	90 91 6b 01 	lds	r25, 0x016B
    157e:	89 2b       	or	r24, r25
    1580:	21 f1       	breq	.+72     	; 0x15ca <oled_refresh+0x6c>
    1582:	40 e0       	ldi	r20, 0x00	; 0
    1584:	50 e0       	ldi	r21, 0x00	; 0
    1586:	60 eb       	ldi	r22, 0xB0	; 176
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    1588:	c0 e0       	ldi	r28, 0x00	; 0
    158a:	70 e0       	ldi	r23, 0x00	; 0
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    158c:	e0 91 68 01 	lds	r30, 0x0168
    1590:	f0 91 69 01 	lds	r31, 0x0169
    1594:	60 83       	st	Z, r22
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    1596:	8c 2f       	mov	r24, r28
    1598:	97 2f       	mov	r25, r23
				*oled_front_buffer = oled_back_buffer[column + page*128];
    159a:	e0 91 64 01 	lds	r30, 0x0164
    159e:	f0 91 65 01 	lds	r31, 0x0165
    15a2:	9c 01       	movw	r18, r24
    15a4:	24 0f       	add	r18, r20
    15a6:	35 1f       	adc	r19, r21
    15a8:	a0 91 66 01 	lds	r26, 0x0166
    15ac:	b0 91 67 01 	lds	r27, 0x0167
    15b0:	a2 0f       	add	r26, r18
    15b2:	b3 1f       	adc	r27, r19
    15b4:	2c 91       	ld	r18, X
    15b6:	20 83       	st	Z, r18
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    15b8:	01 96       	adiw	r24, 0x01	; 1
    15ba:	80 38       	cpi	r24, 0x80	; 128
    15bc:	91 05       	cpc	r25, r1
    15be:	69 f7       	brne	.-38     	; 0x159a <oled_refresh+0x3c>
    15c0:	6f 5f       	subi	r22, 0xFF	; 255
    15c2:	40 58       	subi	r20, 0x80	; 128
    15c4:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
    15c6:	68 3b       	cpi	r22, 0xB8	; 184
    15c8:	09 f7       	brne	.-62     	; 0x158c <oled_refresh+0x2e>
			for(int column = 0; column < 128; column++){
				*oled_front_buffer = oled_back_buffer[column + page*128];
			}
		}	
	}
}
    15ca:	cf 91       	pop	r28
    15cc:	08 95       	ret

000015ce <oled_invert_pixel>:
	oled_goto_column(x);
	oled_goto_line(y/8);
	oled_write_data(~(1 << (y % 8)) & oled_read_data());
}

void oled_invert_pixel(int x, int y){
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	eb 01       	movw	r28, r22
	oled_goto_column(x);
    15d4:	0e 94 89 09 	call	0x1312	; 0x1312 <oled_goto_column>
	oled_goto_line(y/8);
    15d8:	ce 01       	movw	r24, r28
    15da:	dd 23       	and	r29, r29
    15dc:	0c f4       	brge	.+2      	; 0x15e0 <oled_invert_pixel+0x12>
    15de:	07 96       	adiw	r24, 0x07	; 7
    15e0:	95 95       	asr	r25
    15e2:	87 95       	ror	r24
    15e4:	95 95       	asr	r25
    15e6:	87 95       	ror	r24
    15e8:	95 95       	asr	r25
    15ea:	87 95       	ror	r24
    15ec:	0e 94 62 09 	call	0x12c4	; 0x12c4 <oled_goto_line>
	oled_write_data((1 << (y % 8)) ^ oled_read_data()); //exclusive or
    15f0:	0e 94 47 09 	call	0x128e	; 0x128e <oled_read_data>
    15f4:	be 01       	movw	r22, r28
    15f6:	67 70       	andi	r22, 0x07	; 7
    15f8:	70 78       	andi	r23, 0x80	; 128
    15fa:	77 23       	and	r23, r23
    15fc:	34 f4       	brge	.+12     	; 0x160a <oled_invert_pixel+0x3c>
    15fe:	61 50       	subi	r22, 0x01	; 1
    1600:	71 09       	sbc	r23, r1
    1602:	68 6f       	ori	r22, 0xF8	; 248
    1604:	7f 6f       	ori	r23, 0xFF	; 255
    1606:	6f 5f       	subi	r22, 0xFF	; 255
    1608:	7f 4f       	sbci	r23, 0xFF	; 255
    160a:	21 e0       	ldi	r18, 0x01	; 1
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	a9 01       	movw	r20, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <oled_invert_pixel+0x48>
    1612:	44 0f       	add	r20, r20
    1614:	55 1f       	adc	r21, r21
    1616:	6a 95       	dec	r22
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <oled_invert_pixel+0x44>
    161a:	84 27       	eor	r24, r20
    161c:	0e 94 c6 08 	call	0x118c	; 0x118c <oled_write_data>
}
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	08 95       	ret

00001626 <oled_invert_rectangle>:
	}
	
	//not finished
}

void oled_invert_rectangle(int x1, int y1, int x2, int y2){
    1626:	8f 92       	push	r8
    1628:	9f 92       	push	r9
    162a:	af 92       	push	r10
    162c:	bf 92       	push	r11
    162e:	cf 92       	push	r12
    1630:	df 92       	push	r13
    1632:	ef 92       	push	r14
    1634:	ff 92       	push	r15
    1636:	0f 93       	push	r16
    1638:	1f 93       	push	r17
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	8c 01       	movw	r16, r24
    1640:	6b 01       	movw	r12, r22
    1642:	5a 01       	movw	r10, r20
    1644:	79 01       	movw	r14, r18
	for (int x = x1; x < x2; x++){
    1646:	84 17       	cp	r24, r20
    1648:	95 07       	cpc	r25, r21
    164a:	b4 f4       	brge	.+44     	; 0x1678 <oled_invert_rectangle+0x52>
		for (int y = y1; y < y2; y++){
    164c:	86 2e       	mov	r8, r22
    164e:	9d 2c       	mov	r9, r13
    1650:	0d c0       	rjmp	.+26     	; 0x166c <oled_invert_rectangle+0x46>
			oled_invert_pixel(x, y);
    1652:	be 01       	movw	r22, r28
    1654:	c8 01       	movw	r24, r16
    1656:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <oled_invert_pixel>
	//not finished
}

void oled_invert_rectangle(int x1, int y1, int x2, int y2){
	for (int x = x1; x < x2; x++){
		for (int y = y1; y < y2; y++){
    165a:	21 96       	adiw	r28, 0x01	; 1
    165c:	ce 15       	cp	r28, r14
    165e:	df 05       	cpc	r29, r15
    1660:	c4 f3       	brlt	.-16     	; 0x1652 <oled_invert_rectangle+0x2c>
	
	//not finished
}

void oled_invert_rectangle(int x1, int y1, int x2, int y2){
	for (int x = x1; x < x2; x++){
    1662:	0f 5f       	subi	r16, 0xFF	; 255
    1664:	1f 4f       	sbci	r17, 0xFF	; 255
    1666:	0a 15       	cp	r16, r10
    1668:	1b 05       	cpc	r17, r11
    166a:	34 f4       	brge	.+12     	; 0x1678 <oled_invert_rectangle+0x52>
		for (int y = y1; y < y2; y++){
    166c:	ce 14       	cp	r12, r14
    166e:	df 04       	cpc	r13, r15
    1670:	c4 f7       	brge	.-16     	; 0x1662 <oled_invert_rectangle+0x3c>
    1672:	c8 2d       	mov	r28, r8
    1674:	d9 2d       	mov	r29, r9
    1676:	ed cf       	rjmp	.-38     	; 0x1652 <oled_invert_rectangle+0x2c>
			oled_invert_pixel(x, y);
		}
	}
}
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	df 90       	pop	r13
    1686:	cf 90       	pop	r12
    1688:	bf 90       	pop	r11
    168a:	af 90       	pop	r10
    168c:	9f 90       	pop	r9
    168e:	8f 90       	pop	r8
    1690:	08 95       	ret

00001692 <spi_master_init>:

#include "spi.h"

void spi_master_init(int node)
{
	if (node == NODE_1){
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	91 05       	cpc	r25, r1
    1696:	41 f4       	brne	.+16     	; 0x16a8 <spi_master_init+0x16>
		DDRB |= (1<<DDB4)|(1<<DDB5)|(1<<DDB7); //Set MOSI and SCK output, all others input
    1698:	87 b3       	in	r24, 0x17	; 23
    169a:	80 6b       	ori	r24, 0xB0	; 176
    169c:	87 bb       	out	0x17, r24	; 23
		DDRB &= ~(1 << DDB6);
    169e:	be 98       	cbi	0x17, 6	; 23

		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X); //Enable SPI, Master, set clock rate fck/16
    16a0:	81 e5       	ldi	r24, 0x51	; 81
    16a2:	8d b9       	out	0x0d, r24	; 13
		set_bit(PORTB,PB4); //Disable chip
    16a4:	c4 9a       	sbi	0x18, 4	; 24
    16a6:	08 95       	ret
	}
	else if (node == NODE_2){
    16a8:	02 97       	sbiw	r24, 0x02	; 2
    16aa:	39 f4       	brne	.+14     	; 0x16ba <spi_master_init+0x28>
		//Without setting PB0 as an output printf doesn|t work!?!?!?!?
		DDRB |= (1<<PB0)|(1 << PB1)|(1 << PB2)|(1 << PB7); //Set MOSI, SS and SCK output, all others input
    16ac:	87 b3       	in	r24, 0x17	; 23
    16ae:	87 68       	ori	r24, 0x87	; 135
    16b0:	87 bb       	out	0x17, r24	; 23
		DDRB &= ~(1 << PB3); //DO NOT TINK IS NECCSCAS RYTSR:
    16b2:	bb 98       	cbi	0x17, 3	; 23

		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); //Enable SPI, Master, set clock rate fck/16
    16b4:	81 e5       	ldi	r24, 0x51	; 81
    16b6:	8d b9       	out	0x0d, r24	; 13
		set_bit(PORTB,PB7); //Disable chip
    16b8:	c7 9a       	sbi	0x18, 7	; 24
    16ba:	08 95       	ret

000016bc <spi_master_transmit>:
	}
}

char spi_master_transmit(char cData)
{
	SPDR = cData; //Start transmission
    16bc:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))); //Wait for transmission complete	
    16be:	77 9b       	sbis	0x0e, 7	; 14
    16c0:	fe cf       	rjmp	.-4      	; 0x16be <spi_master_transmit+0x2>
	return SPDR;
    16c2:	8f b1       	in	r24, 0x0f	; 15
}
    16c4:	08 95       	ret

000016c6 <touch_init>:
    16c6:	b8 98       	cbi	0x17, 0	; 23
    16c8:	b9 98       	cbi	0x17, 1	; 23
    16ca:	08 95       	ret

000016cc <uart_putchar>:
	UCSR0C = (((node == NODE_1)<<URSEL0)|(1<<USBS0)|(3<<UCSZ00)); //Set frame format: 2 stop bits, 8 data bits //Asynchronous - No parity (?) //URSEL makes sure we won't access UBRRH during operation, but UCSRC. //URSEL should not be set in node 2
	fdevopen(uart_putchar, uart_getchar);
}

void uart_putchar(char c){
	while (!( UCSR0A & (1<<UDRE0))); //Wait for empty transmit buffer
    16cc:	5d 9b       	sbis	0x0b, 5	; 11
    16ce:	fe cf       	rjmp	.-4      	; 0x16cc <uart_putchar>
	UDR0 = c; //Put data into buffer, sends the data
    16d0:	8c b9       	out	0x0c, r24	; 12
    16d2:	08 95       	ret

000016d4 <uart_getchar>:
}

unsigned char uart_getchar(){
	while (!( UCSR0A & (1<<RXC0)));
    16d4:	5f 9b       	sbis	0x0b, 7	; 11
    16d6:	fe cf       	rjmp	.-4      	; 0x16d4 <uart_getchar>
	return UDR0;
    16d8:	8c b1       	in	r24, 0x0c	; 12
    16da:	08 95       	ret

000016dc <uart_init>:
#include <stdio.h>
#include <avr/io.h>

#include "uart.h"

void uart_init(int baudRate, int node){
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	eb 01       	movw	r28, r22
	int UBRR = ((long)F_CPU/((long)16*baudRate) - 1);
    16e2:	aa 27       	eor	r26, r26
    16e4:	97 fd       	sbrc	r25, 7
    16e6:	a0 95       	com	r26
    16e8:	ba 2f       	mov	r27, r26
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	aa 1f       	adc	r26, r26
    16f0:	bb 1f       	adc	r27, r27
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	aa 1f       	adc	r26, r26
    16f8:	bb 1f       	adc	r27, r27
    16fa:	9c 01       	movw	r18, r24
    16fc:	ad 01       	movw	r20, r26
    16fe:	22 0f       	add	r18, r18
    1700:	33 1f       	adc	r19, r19
    1702:	44 1f       	adc	r20, r20
    1704:	55 1f       	adc	r21, r21
    1706:	22 0f       	add	r18, r18
    1708:	33 1f       	adc	r19, r19
    170a:	44 1f       	adc	r20, r20
    170c:	55 1f       	adc	r21, r21
    170e:	60 e0       	ldi	r22, 0x00	; 0
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	8b e4       	ldi	r24, 0x4B	; 75
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <__divmodsi4>
    171a:	21 50       	subi	r18, 0x01	; 1
    171c:	31 09       	sbc	r19, r1
	UBRR0L = UBRR;
    171e:	29 b9       	out	0x09, r18	; 9
    UBRR0H = (UBRR>>8);
    1720:	30 bd       	out	0x20, r19	; 32
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); //Enable receiver and transmitter 
    1722:	88 e1       	ldi	r24, 0x18	; 24
    1724:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (((node == NODE_1)<<URSEL0)|(1<<USBS0)|(3<<UCSZ00)); //Set frame format: 2 stop bits, 8 data bits //Asynchronous - No parity (?) //URSEL makes sure we won't access UBRRH during operation, but UCSRC. //URSEL should not be set in node 2
    1726:	21 97       	sbiw	r28, 0x01	; 1
    1728:	11 f4       	brne	.+4      	; 0x172e <uart_init+0x52>
    172a:	8e e8       	ldi	r24, 0x8E	; 142
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <uart_init+0x54>
    172e:	8e e0       	ldi	r24, 0x0E	; 14
    1730:	80 bd       	out	0x20, r24	; 32
	fdevopen(uart_putchar, uart_getchar);
    1732:	6a e6       	ldi	r22, 0x6A	; 106
    1734:	7b e0       	ldi	r23, 0x0B	; 11
    1736:	86 e6       	ldi	r24, 0x66	; 102
    1738:	9b e0       	ldi	r25, 0x0B	; 11
    173a:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <fdevopen>
}
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <__subsf3>:
    1744:	50 58       	subi	r21, 0x80	; 128

00001746 <__addsf3>:
    1746:	bb 27       	eor	r27, r27
    1748:	aa 27       	eor	r26, r26
    174a:	0e d0       	rcall	.+28     	; 0x1768 <__addsf3x>
    174c:	d4 c1       	rjmp	.+936    	; 0x1af6 <__fp_round>
    174e:	c5 d1       	rcall	.+906    	; 0x1ada <__fp_pscA>
    1750:	30 f0       	brcs	.+12     	; 0x175e <__addsf3+0x18>
    1752:	ca d1       	rcall	.+916    	; 0x1ae8 <__fp_pscB>
    1754:	20 f0       	brcs	.+8      	; 0x175e <__addsf3+0x18>
    1756:	31 f4       	brne	.+12     	; 0x1764 <__addsf3+0x1e>
    1758:	9f 3f       	cpi	r25, 0xFF	; 255
    175a:	11 f4       	brne	.+4      	; 0x1760 <__addsf3+0x1a>
    175c:	1e f4       	brtc	.+6      	; 0x1764 <__addsf3+0x1e>
    175e:	95 c1       	rjmp	.+810    	; 0x1a8a <__fp_nan>
    1760:	0e f4       	brtc	.+2      	; 0x1764 <__addsf3+0x1e>
    1762:	e0 95       	com	r30
    1764:	e7 fb       	bst	r30, 7
    1766:	8b c1       	rjmp	.+790    	; 0x1a7e <__fp_inf>

00001768 <__addsf3x>:
    1768:	e9 2f       	mov	r30, r25
    176a:	d6 d1       	rcall	.+940    	; 0x1b18 <__fp_split3>
    176c:	80 f3       	brcs	.-32     	; 0x174e <__addsf3+0x8>
    176e:	ba 17       	cp	r27, r26
    1770:	62 07       	cpc	r22, r18
    1772:	73 07       	cpc	r23, r19
    1774:	84 07       	cpc	r24, r20
    1776:	95 07       	cpc	r25, r21
    1778:	18 f0       	brcs	.+6      	; 0x1780 <__addsf3x+0x18>
    177a:	71 f4       	brne	.+28     	; 0x1798 <__addsf3x+0x30>
    177c:	9e f5       	brtc	.+102    	; 0x17e4 <__addsf3x+0x7c>
    177e:	ee c1       	rjmp	.+988    	; 0x1b5c <__fp_zero>
    1780:	0e f4       	brtc	.+2      	; 0x1784 <__addsf3x+0x1c>
    1782:	e0 95       	com	r30
    1784:	0b 2e       	mov	r0, r27
    1786:	ba 2f       	mov	r27, r26
    1788:	a0 2d       	mov	r26, r0
    178a:	0b 01       	movw	r0, r22
    178c:	b9 01       	movw	r22, r18
    178e:	90 01       	movw	r18, r0
    1790:	0c 01       	movw	r0, r24
    1792:	ca 01       	movw	r24, r20
    1794:	a0 01       	movw	r20, r0
    1796:	11 24       	eor	r1, r1
    1798:	ff 27       	eor	r31, r31
    179a:	59 1b       	sub	r21, r25
    179c:	99 f0       	breq	.+38     	; 0x17c4 <__addsf3x+0x5c>
    179e:	59 3f       	cpi	r21, 0xF9	; 249
    17a0:	50 f4       	brcc	.+20     	; 0x17b6 <__addsf3x+0x4e>
    17a2:	50 3e       	cpi	r21, 0xE0	; 224
    17a4:	68 f1       	brcs	.+90     	; 0x1800 <__addsf3x+0x98>
    17a6:	1a 16       	cp	r1, r26
    17a8:	f0 40       	sbci	r31, 0x00	; 0
    17aa:	a2 2f       	mov	r26, r18
    17ac:	23 2f       	mov	r18, r19
    17ae:	34 2f       	mov	r19, r20
    17b0:	44 27       	eor	r20, r20
    17b2:	58 5f       	subi	r21, 0xF8	; 248
    17b4:	f3 cf       	rjmp	.-26     	; 0x179c <__addsf3x+0x34>
    17b6:	46 95       	lsr	r20
    17b8:	37 95       	ror	r19
    17ba:	27 95       	ror	r18
    17bc:	a7 95       	ror	r26
    17be:	f0 40       	sbci	r31, 0x00	; 0
    17c0:	53 95       	inc	r21
    17c2:	c9 f7       	brne	.-14     	; 0x17b6 <__addsf3x+0x4e>
    17c4:	7e f4       	brtc	.+30     	; 0x17e4 <__addsf3x+0x7c>
    17c6:	1f 16       	cp	r1, r31
    17c8:	ba 0b       	sbc	r27, r26
    17ca:	62 0b       	sbc	r22, r18
    17cc:	73 0b       	sbc	r23, r19
    17ce:	84 0b       	sbc	r24, r20
    17d0:	ba f0       	brmi	.+46     	; 0x1800 <__addsf3x+0x98>
    17d2:	91 50       	subi	r25, 0x01	; 1
    17d4:	a1 f0       	breq	.+40     	; 0x17fe <__addsf3x+0x96>
    17d6:	ff 0f       	add	r31, r31
    17d8:	bb 1f       	adc	r27, r27
    17da:	66 1f       	adc	r22, r22
    17dc:	77 1f       	adc	r23, r23
    17de:	88 1f       	adc	r24, r24
    17e0:	c2 f7       	brpl	.-16     	; 0x17d2 <__addsf3x+0x6a>
    17e2:	0e c0       	rjmp	.+28     	; 0x1800 <__addsf3x+0x98>
    17e4:	ba 0f       	add	r27, r26
    17e6:	62 1f       	adc	r22, r18
    17e8:	73 1f       	adc	r23, r19
    17ea:	84 1f       	adc	r24, r20
    17ec:	48 f4       	brcc	.+18     	; 0x1800 <__addsf3x+0x98>
    17ee:	87 95       	ror	r24
    17f0:	77 95       	ror	r23
    17f2:	67 95       	ror	r22
    17f4:	b7 95       	ror	r27
    17f6:	f7 95       	ror	r31
    17f8:	9e 3f       	cpi	r25, 0xFE	; 254
    17fa:	08 f0       	brcs	.+2      	; 0x17fe <__addsf3x+0x96>
    17fc:	b3 cf       	rjmp	.-154    	; 0x1764 <__addsf3+0x1e>
    17fe:	93 95       	inc	r25
    1800:	88 0f       	add	r24, r24
    1802:	08 f0       	brcs	.+2      	; 0x1806 <__addsf3x+0x9e>
    1804:	99 27       	eor	r25, r25
    1806:	ee 0f       	add	r30, r30
    1808:	97 95       	ror	r25
    180a:	87 95       	ror	r24
    180c:	08 95       	ret
    180e:	65 d1       	rcall	.+714    	; 0x1ada <__fp_pscA>
    1810:	58 f0       	brcs	.+22     	; 0x1828 <__addsf3x+0xc0>
    1812:	80 e8       	ldi	r24, 0x80	; 128
    1814:	91 e0       	ldi	r25, 0x01	; 1
    1816:	09 f4       	brne	.+2      	; 0x181a <__addsf3x+0xb2>
    1818:	9e ef       	ldi	r25, 0xFE	; 254
    181a:	66 d1       	rcall	.+716    	; 0x1ae8 <__fp_pscB>
    181c:	28 f0       	brcs	.+10     	; 0x1828 <__addsf3x+0xc0>
    181e:	40 e8       	ldi	r20, 0x80	; 128
    1820:	51 e0       	ldi	r21, 0x01	; 1
    1822:	59 f4       	brne	.+22     	; 0x183a <atan2+0xe>
    1824:	5e ef       	ldi	r21, 0xFE	; 254
    1826:	09 c0       	rjmp	.+18     	; 0x183a <atan2+0xe>
    1828:	30 c1       	rjmp	.+608    	; 0x1a8a <__fp_nan>
    182a:	98 c1       	rjmp	.+816    	; 0x1b5c <__fp_zero>

0000182c <atan2>:
    182c:	e9 2f       	mov	r30, r25
    182e:	e0 78       	andi	r30, 0x80	; 128
    1830:	73 d1       	rcall	.+742    	; 0x1b18 <__fp_split3>
    1832:	68 f3       	brcs	.-38     	; 0x180e <__addsf3x+0xa6>
    1834:	09 2e       	mov	r0, r25
    1836:	05 2a       	or	r0, r21
    1838:	c1 f3       	breq	.-16     	; 0x182a <__addsf3x+0xc2>
    183a:	26 17       	cp	r18, r22
    183c:	37 07       	cpc	r19, r23
    183e:	48 07       	cpc	r20, r24
    1840:	59 07       	cpc	r21, r25
    1842:	38 f0       	brcs	.+14     	; 0x1852 <atan2+0x26>
    1844:	0e 2e       	mov	r0, r30
    1846:	07 f8       	bld	r0, 7
    1848:	e0 25       	eor	r30, r0
    184a:	69 f0       	breq	.+26     	; 0x1866 <atan2+0x3a>
    184c:	e0 25       	eor	r30, r0
    184e:	e0 64       	ori	r30, 0x40	; 64
    1850:	0a c0       	rjmp	.+20     	; 0x1866 <atan2+0x3a>
    1852:	ef 63       	ori	r30, 0x3F	; 63
    1854:	07 f8       	bld	r0, 7
    1856:	00 94       	com	r0
    1858:	07 fa       	bst	r0, 7
    185a:	db 01       	movw	r26, r22
    185c:	b9 01       	movw	r22, r18
    185e:	9d 01       	movw	r18, r26
    1860:	dc 01       	movw	r26, r24
    1862:	ca 01       	movw	r24, r20
    1864:	ad 01       	movw	r20, r26
    1866:	ef 93       	push	r30
    1868:	43 d0       	rcall	.+134    	; 0x18f0 <__divsf3_pse>
    186a:	45 d1       	rcall	.+650    	; 0x1af6 <__fp_round>
    186c:	0a d0       	rcall	.+20     	; 0x1882 <atan>
    186e:	5f 91       	pop	r21
    1870:	55 23       	and	r21, r21
    1872:	31 f0       	breq	.+12     	; 0x1880 <atan2+0x54>
    1874:	2b ed       	ldi	r18, 0xDB	; 219
    1876:	3f e0       	ldi	r19, 0x0F	; 15
    1878:	49 e4       	ldi	r20, 0x49	; 73
    187a:	50 fd       	sbrc	r21, 0
    187c:	49 ec       	ldi	r20, 0xC9	; 201
    187e:	63 cf       	rjmp	.-314    	; 0x1746 <__addsf3>
    1880:	08 95       	ret

00001882 <atan>:
    1882:	df 93       	push	r29
    1884:	dd 27       	eor	r29, r29
    1886:	b9 2f       	mov	r27, r25
    1888:	bf 77       	andi	r27, 0x7F	; 127
    188a:	40 e8       	ldi	r20, 0x80	; 128
    188c:	5f e3       	ldi	r21, 0x3F	; 63
    188e:	16 16       	cp	r1, r22
    1890:	17 06       	cpc	r1, r23
    1892:	48 07       	cpc	r20, r24
    1894:	5b 07       	cpc	r21, r27
    1896:	10 f4       	brcc	.+4      	; 0x189c <atan+0x1a>
    1898:	d9 2f       	mov	r29, r25
    189a:	67 d1       	rcall	.+718    	; 0x1b6a <inverse>
    189c:	9f 93       	push	r25
    189e:	8f 93       	push	r24
    18a0:	7f 93       	push	r23
    18a2:	6f 93       	push	r22
    18a4:	0e d2       	rcall	.+1052   	; 0x1cc2 <square>
    18a6:	e0 e7       	ldi	r30, 0x70	; 112
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	f2 d0       	rcall	.+484    	; 0x1a90 <__fp_powser>
    18ac:	24 d1       	rcall	.+584    	; 0x1af6 <__fp_round>
    18ae:	2f 91       	pop	r18
    18b0:	3f 91       	pop	r19
    18b2:	4f 91       	pop	r20
    18b4:	5f 91       	pop	r21
    18b6:	6c d1       	rcall	.+728    	; 0x1b90 <__mulsf3x>
    18b8:	dd 23       	and	r29, r29
    18ba:	49 f0       	breq	.+18     	; 0x18ce <atan+0x4c>
    18bc:	90 58       	subi	r25, 0x80	; 128
    18be:	a2 ea       	ldi	r26, 0xA2	; 162
    18c0:	2a ed       	ldi	r18, 0xDA	; 218
    18c2:	3f e0       	ldi	r19, 0x0F	; 15
    18c4:	49 ec       	ldi	r20, 0xC9	; 201
    18c6:	5f e3       	ldi	r21, 0x3F	; 63
    18c8:	d0 78       	andi	r29, 0x80	; 128
    18ca:	5d 27       	eor	r21, r29
    18cc:	4d df       	rcall	.-358    	; 0x1768 <__addsf3x>
    18ce:	df 91       	pop	r29
    18d0:	12 c1       	rjmp	.+548    	; 0x1af6 <__fp_round>

000018d2 <__divsf3>:
    18d2:	0c d0       	rcall	.+24     	; 0x18ec <__divsf3x>
    18d4:	10 c1       	rjmp	.+544    	; 0x1af6 <__fp_round>
    18d6:	08 d1       	rcall	.+528    	; 0x1ae8 <__fp_pscB>
    18d8:	40 f0       	brcs	.+16     	; 0x18ea <__divsf3+0x18>
    18da:	ff d0       	rcall	.+510    	; 0x1ada <__fp_pscA>
    18dc:	30 f0       	brcs	.+12     	; 0x18ea <__divsf3+0x18>
    18de:	21 f4       	brne	.+8      	; 0x18e8 <__divsf3+0x16>
    18e0:	5f 3f       	cpi	r21, 0xFF	; 255
    18e2:	19 f0       	breq	.+6      	; 0x18ea <__divsf3+0x18>
    18e4:	cc c0       	rjmp	.+408    	; 0x1a7e <__fp_inf>
    18e6:	51 11       	cpse	r21, r1
    18e8:	3a c1       	rjmp	.+628    	; 0x1b5e <__fp_szero>
    18ea:	cf c0       	rjmp	.+414    	; 0x1a8a <__fp_nan>

000018ec <__divsf3x>:
    18ec:	15 d1       	rcall	.+554    	; 0x1b18 <__fp_split3>
    18ee:	98 f3       	brcs	.-26     	; 0x18d6 <__divsf3+0x4>

000018f0 <__divsf3_pse>:
    18f0:	99 23       	and	r25, r25
    18f2:	c9 f3       	breq	.-14     	; 0x18e6 <__divsf3+0x14>
    18f4:	55 23       	and	r21, r21
    18f6:	b1 f3       	breq	.-20     	; 0x18e4 <__divsf3+0x12>
    18f8:	95 1b       	sub	r25, r21
    18fa:	55 0b       	sbc	r21, r21
    18fc:	bb 27       	eor	r27, r27
    18fe:	aa 27       	eor	r26, r26
    1900:	62 17       	cp	r22, r18
    1902:	73 07       	cpc	r23, r19
    1904:	84 07       	cpc	r24, r20
    1906:	38 f0       	brcs	.+14     	; 0x1916 <__divsf3_pse+0x26>
    1908:	9f 5f       	subi	r25, 0xFF	; 255
    190a:	5f 4f       	sbci	r21, 0xFF	; 255
    190c:	22 0f       	add	r18, r18
    190e:	33 1f       	adc	r19, r19
    1910:	44 1f       	adc	r20, r20
    1912:	aa 1f       	adc	r26, r26
    1914:	a9 f3       	breq	.-22     	; 0x1900 <__divsf3_pse+0x10>
    1916:	33 d0       	rcall	.+102    	; 0x197e <__divsf3_pse+0x8e>
    1918:	0e 2e       	mov	r0, r30
    191a:	3a f0       	brmi	.+14     	; 0x192a <__divsf3_pse+0x3a>
    191c:	e0 e8       	ldi	r30, 0x80	; 128
    191e:	30 d0       	rcall	.+96     	; 0x1980 <__divsf3_pse+0x90>
    1920:	91 50       	subi	r25, 0x01	; 1
    1922:	50 40       	sbci	r21, 0x00	; 0
    1924:	e6 95       	lsr	r30
    1926:	00 1c       	adc	r0, r0
    1928:	ca f7       	brpl	.-14     	; 0x191c <__divsf3_pse+0x2c>
    192a:	29 d0       	rcall	.+82     	; 0x197e <__divsf3_pse+0x8e>
    192c:	fe 2f       	mov	r31, r30
    192e:	27 d0       	rcall	.+78     	; 0x197e <__divsf3_pse+0x8e>
    1930:	66 0f       	add	r22, r22
    1932:	77 1f       	adc	r23, r23
    1934:	88 1f       	adc	r24, r24
    1936:	bb 1f       	adc	r27, r27
    1938:	26 17       	cp	r18, r22
    193a:	37 07       	cpc	r19, r23
    193c:	48 07       	cpc	r20, r24
    193e:	ab 07       	cpc	r26, r27
    1940:	b0 e8       	ldi	r27, 0x80	; 128
    1942:	09 f0       	breq	.+2      	; 0x1946 <__divsf3_pse+0x56>
    1944:	bb 0b       	sbc	r27, r27
    1946:	80 2d       	mov	r24, r0
    1948:	bf 01       	movw	r22, r30
    194a:	ff 27       	eor	r31, r31
    194c:	93 58       	subi	r25, 0x83	; 131
    194e:	5f 4f       	sbci	r21, 0xFF	; 255
    1950:	2a f0       	brmi	.+10     	; 0x195c <__divsf3_pse+0x6c>
    1952:	9e 3f       	cpi	r25, 0xFE	; 254
    1954:	51 05       	cpc	r21, r1
    1956:	68 f0       	brcs	.+26     	; 0x1972 <__divsf3_pse+0x82>
    1958:	92 c0       	rjmp	.+292    	; 0x1a7e <__fp_inf>
    195a:	01 c1       	rjmp	.+514    	; 0x1b5e <__fp_szero>
    195c:	5f 3f       	cpi	r21, 0xFF	; 255
    195e:	ec f3       	brlt	.-6      	; 0x195a <__divsf3_pse+0x6a>
    1960:	98 3e       	cpi	r25, 0xE8	; 232
    1962:	dc f3       	brlt	.-10     	; 0x195a <__divsf3_pse+0x6a>
    1964:	86 95       	lsr	r24
    1966:	77 95       	ror	r23
    1968:	67 95       	ror	r22
    196a:	b7 95       	ror	r27
    196c:	f7 95       	ror	r31
    196e:	9f 5f       	subi	r25, 0xFF	; 255
    1970:	c9 f7       	brne	.-14     	; 0x1964 <__divsf3_pse+0x74>
    1972:	88 0f       	add	r24, r24
    1974:	91 1d       	adc	r25, r1
    1976:	96 95       	lsr	r25
    1978:	87 95       	ror	r24
    197a:	97 f9       	bld	r25, 7
    197c:	08 95       	ret
    197e:	e1 e0       	ldi	r30, 0x01	; 1
    1980:	66 0f       	add	r22, r22
    1982:	77 1f       	adc	r23, r23
    1984:	88 1f       	adc	r24, r24
    1986:	bb 1f       	adc	r27, r27
    1988:	62 17       	cp	r22, r18
    198a:	73 07       	cpc	r23, r19
    198c:	84 07       	cpc	r24, r20
    198e:	ba 07       	cpc	r27, r26
    1990:	20 f0       	brcs	.+8      	; 0x199a <__divsf3_pse+0xaa>
    1992:	62 1b       	sub	r22, r18
    1994:	73 0b       	sbc	r23, r19
    1996:	84 0b       	sbc	r24, r20
    1998:	ba 0b       	sbc	r27, r26
    199a:	ee 1f       	adc	r30, r30
    199c:	88 f7       	brcc	.-30     	; 0x1980 <__divsf3_pse+0x90>
    199e:	e0 95       	com	r30
    19a0:	08 95       	ret

000019a2 <__fixsfsi>:
    19a2:	04 d0       	rcall	.+8      	; 0x19ac <__fixunssfsi>
    19a4:	68 94       	set
    19a6:	b1 11       	cpse	r27, r1
    19a8:	da c0       	rjmp	.+436    	; 0x1b5e <__fp_szero>
    19aa:	08 95       	ret

000019ac <__fixunssfsi>:
    19ac:	bd d0       	rcall	.+378    	; 0x1b28 <__fp_splitA>
    19ae:	88 f0       	brcs	.+34     	; 0x19d2 <__fixunssfsi+0x26>
    19b0:	9f 57       	subi	r25, 0x7F	; 127
    19b2:	90 f0       	brcs	.+36     	; 0x19d8 <__fixunssfsi+0x2c>
    19b4:	b9 2f       	mov	r27, r25
    19b6:	99 27       	eor	r25, r25
    19b8:	b7 51       	subi	r27, 0x17	; 23
    19ba:	a0 f0       	brcs	.+40     	; 0x19e4 <__fixunssfsi+0x38>
    19bc:	d1 f0       	breq	.+52     	; 0x19f2 <__fixunssfsi+0x46>
    19be:	66 0f       	add	r22, r22
    19c0:	77 1f       	adc	r23, r23
    19c2:	88 1f       	adc	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	1a f0       	brmi	.+6      	; 0x19ce <__fixunssfsi+0x22>
    19c8:	ba 95       	dec	r27
    19ca:	c9 f7       	brne	.-14     	; 0x19be <__fixunssfsi+0x12>
    19cc:	12 c0       	rjmp	.+36     	; 0x19f2 <__fixunssfsi+0x46>
    19ce:	b1 30       	cpi	r27, 0x01	; 1
    19d0:	81 f0       	breq	.+32     	; 0x19f2 <__fixunssfsi+0x46>
    19d2:	c4 d0       	rcall	.+392    	; 0x1b5c <__fp_zero>
    19d4:	b1 e0       	ldi	r27, 0x01	; 1
    19d6:	08 95       	ret
    19d8:	c1 c0       	rjmp	.+386    	; 0x1b5c <__fp_zero>
    19da:	67 2f       	mov	r22, r23
    19dc:	78 2f       	mov	r23, r24
    19de:	88 27       	eor	r24, r24
    19e0:	b8 5f       	subi	r27, 0xF8	; 248
    19e2:	39 f0       	breq	.+14     	; 0x19f2 <__fixunssfsi+0x46>
    19e4:	b9 3f       	cpi	r27, 0xF9	; 249
    19e6:	cc f3       	brlt	.-14     	; 0x19da <__fixunssfsi+0x2e>
    19e8:	86 95       	lsr	r24
    19ea:	77 95       	ror	r23
    19ec:	67 95       	ror	r22
    19ee:	b3 95       	inc	r27
    19f0:	d9 f7       	brne	.-10     	; 0x19e8 <__fixunssfsi+0x3c>
    19f2:	3e f4       	brtc	.+14     	; 0x1a02 <__fixunssfsi+0x56>
    19f4:	90 95       	com	r25
    19f6:	80 95       	com	r24
    19f8:	70 95       	com	r23
    19fa:	61 95       	neg	r22
    19fc:	7f 4f       	sbci	r23, 0xFF	; 255
    19fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1a00:	9f 4f       	sbci	r25, 0xFF	; 255
    1a02:	08 95       	ret

00001a04 <__floatunsisf>:
    1a04:	e8 94       	clt
    1a06:	09 c0       	rjmp	.+18     	; 0x1a1a <__floatsisf+0x12>

00001a08 <__floatsisf>:
    1a08:	97 fb       	bst	r25, 7
    1a0a:	3e f4       	brtc	.+14     	; 0x1a1a <__floatsisf+0x12>
    1a0c:	90 95       	com	r25
    1a0e:	80 95       	com	r24
    1a10:	70 95       	com	r23
    1a12:	61 95       	neg	r22
    1a14:	7f 4f       	sbci	r23, 0xFF	; 255
    1a16:	8f 4f       	sbci	r24, 0xFF	; 255
    1a18:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1a:	99 23       	and	r25, r25
    1a1c:	a9 f0       	breq	.+42     	; 0x1a48 <__floatsisf+0x40>
    1a1e:	f9 2f       	mov	r31, r25
    1a20:	96 e9       	ldi	r25, 0x96	; 150
    1a22:	bb 27       	eor	r27, r27
    1a24:	93 95       	inc	r25
    1a26:	f6 95       	lsr	r31
    1a28:	87 95       	ror	r24
    1a2a:	77 95       	ror	r23
    1a2c:	67 95       	ror	r22
    1a2e:	b7 95       	ror	r27
    1a30:	f1 11       	cpse	r31, r1
    1a32:	f8 cf       	rjmp	.-16     	; 0x1a24 <__floatsisf+0x1c>
    1a34:	fa f4       	brpl	.+62     	; 0x1a74 <__floatsisf+0x6c>
    1a36:	bb 0f       	add	r27, r27
    1a38:	11 f4       	brne	.+4      	; 0x1a3e <__floatsisf+0x36>
    1a3a:	60 ff       	sbrs	r22, 0
    1a3c:	1b c0       	rjmp	.+54     	; 0x1a74 <__floatsisf+0x6c>
    1a3e:	6f 5f       	subi	r22, 0xFF	; 255
    1a40:	7f 4f       	sbci	r23, 0xFF	; 255
    1a42:	8f 4f       	sbci	r24, 0xFF	; 255
    1a44:	9f 4f       	sbci	r25, 0xFF	; 255
    1a46:	16 c0       	rjmp	.+44     	; 0x1a74 <__floatsisf+0x6c>
    1a48:	88 23       	and	r24, r24
    1a4a:	11 f0       	breq	.+4      	; 0x1a50 <__floatsisf+0x48>
    1a4c:	96 e9       	ldi	r25, 0x96	; 150
    1a4e:	11 c0       	rjmp	.+34     	; 0x1a72 <__floatsisf+0x6a>
    1a50:	77 23       	and	r23, r23
    1a52:	21 f0       	breq	.+8      	; 0x1a5c <__floatsisf+0x54>
    1a54:	9e e8       	ldi	r25, 0x8E	; 142
    1a56:	87 2f       	mov	r24, r23
    1a58:	76 2f       	mov	r23, r22
    1a5a:	05 c0       	rjmp	.+10     	; 0x1a66 <__floatsisf+0x5e>
    1a5c:	66 23       	and	r22, r22
    1a5e:	71 f0       	breq	.+28     	; 0x1a7c <__floatsisf+0x74>
    1a60:	96 e8       	ldi	r25, 0x86	; 134
    1a62:	86 2f       	mov	r24, r22
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	2a f0       	brmi	.+10     	; 0x1a74 <__floatsisf+0x6c>
    1a6a:	9a 95       	dec	r25
    1a6c:	66 0f       	add	r22, r22
    1a6e:	77 1f       	adc	r23, r23
    1a70:	88 1f       	adc	r24, r24
    1a72:	da f7       	brpl	.-10     	; 0x1a6a <__floatsisf+0x62>
    1a74:	88 0f       	add	r24, r24
    1a76:	96 95       	lsr	r25
    1a78:	87 95       	ror	r24
    1a7a:	97 f9       	bld	r25, 7
    1a7c:	08 95       	ret

00001a7e <__fp_inf>:
    1a7e:	97 f9       	bld	r25, 7
    1a80:	9f 67       	ori	r25, 0x7F	; 127
    1a82:	80 e8       	ldi	r24, 0x80	; 128
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	08 95       	ret

00001a8a <__fp_nan>:
    1a8a:	9f ef       	ldi	r25, 0xFF	; 255
    1a8c:	80 ec       	ldi	r24, 0xC0	; 192
    1a8e:	08 95       	ret

00001a90 <__fp_powser>:
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	1f 93       	push	r17
    1a96:	0f 93       	push	r16
    1a98:	ff 92       	push	r15
    1a9a:	ef 92       	push	r14
    1a9c:	df 92       	push	r13
    1a9e:	7b 01       	movw	r14, r22
    1aa0:	8c 01       	movw	r16, r24
    1aa2:	68 94       	set
    1aa4:	05 c0       	rjmp	.+10     	; 0x1ab0 <__fp_powser+0x20>
    1aa6:	da 2e       	mov	r13, r26
    1aa8:	ef 01       	movw	r28, r30
    1aaa:	72 d0       	rcall	.+228    	; 0x1b90 <__mulsf3x>
    1aac:	fe 01       	movw	r30, r28
    1aae:	e8 94       	clt
    1ab0:	a5 91       	lpm	r26, Z+
    1ab2:	25 91       	lpm	r18, Z+
    1ab4:	35 91       	lpm	r19, Z+
    1ab6:	45 91       	lpm	r20, Z+
    1ab8:	55 91       	lpm	r21, Z+
    1aba:	ae f3       	brts	.-22     	; 0x1aa6 <__fp_powser+0x16>
    1abc:	ef 01       	movw	r28, r30
    1abe:	54 de       	rcall	.-856    	; 0x1768 <__addsf3x>
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	97 01       	movw	r18, r14
    1ac4:	a8 01       	movw	r20, r16
    1ac6:	da 94       	dec	r13
    1ac8:	79 f7       	brne	.-34     	; 0x1aa8 <__fp_powser+0x18>
    1aca:	df 90       	pop	r13
    1acc:	ef 90       	pop	r14
    1ace:	ff 90       	pop	r15
    1ad0:	0f 91       	pop	r16
    1ad2:	1f 91       	pop	r17
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <__fp_pscA>:
    1ada:	00 24       	eor	r0, r0
    1adc:	0a 94       	dec	r0
    1ade:	16 16       	cp	r1, r22
    1ae0:	17 06       	cpc	r1, r23
    1ae2:	18 06       	cpc	r1, r24
    1ae4:	09 06       	cpc	r0, r25
    1ae6:	08 95       	ret

00001ae8 <__fp_pscB>:
    1ae8:	00 24       	eor	r0, r0
    1aea:	0a 94       	dec	r0
    1aec:	12 16       	cp	r1, r18
    1aee:	13 06       	cpc	r1, r19
    1af0:	14 06       	cpc	r1, r20
    1af2:	05 06       	cpc	r0, r21
    1af4:	08 95       	ret

00001af6 <__fp_round>:
    1af6:	09 2e       	mov	r0, r25
    1af8:	03 94       	inc	r0
    1afa:	00 0c       	add	r0, r0
    1afc:	11 f4       	brne	.+4      	; 0x1b02 <__fp_round+0xc>
    1afe:	88 23       	and	r24, r24
    1b00:	52 f0       	brmi	.+20     	; 0x1b16 <__fp_round+0x20>
    1b02:	bb 0f       	add	r27, r27
    1b04:	40 f4       	brcc	.+16     	; 0x1b16 <__fp_round+0x20>
    1b06:	bf 2b       	or	r27, r31
    1b08:	11 f4       	brne	.+4      	; 0x1b0e <__fp_round+0x18>
    1b0a:	60 ff       	sbrs	r22, 0
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <__fp_round+0x20>
    1b0e:	6f 5f       	subi	r22, 0xFF	; 255
    1b10:	7f 4f       	sbci	r23, 0xFF	; 255
    1b12:	8f 4f       	sbci	r24, 0xFF	; 255
    1b14:	9f 4f       	sbci	r25, 0xFF	; 255
    1b16:	08 95       	ret

00001b18 <__fp_split3>:
    1b18:	57 fd       	sbrc	r21, 7
    1b1a:	90 58       	subi	r25, 0x80	; 128
    1b1c:	44 0f       	add	r20, r20
    1b1e:	55 1f       	adc	r21, r21
    1b20:	59 f0       	breq	.+22     	; 0x1b38 <__fp_splitA+0x10>
    1b22:	5f 3f       	cpi	r21, 0xFF	; 255
    1b24:	71 f0       	breq	.+28     	; 0x1b42 <__fp_splitA+0x1a>
    1b26:	47 95       	ror	r20

00001b28 <__fp_splitA>:
    1b28:	88 0f       	add	r24, r24
    1b2a:	97 fb       	bst	r25, 7
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	61 f0       	breq	.+24     	; 0x1b48 <__fp_splitA+0x20>
    1b30:	9f 3f       	cpi	r25, 0xFF	; 255
    1b32:	79 f0       	breq	.+30     	; 0x1b52 <__fp_splitA+0x2a>
    1b34:	87 95       	ror	r24
    1b36:	08 95       	ret
    1b38:	12 16       	cp	r1, r18
    1b3a:	13 06       	cpc	r1, r19
    1b3c:	14 06       	cpc	r1, r20
    1b3e:	55 1f       	adc	r21, r21
    1b40:	f2 cf       	rjmp	.-28     	; 0x1b26 <__fp_split3+0xe>
    1b42:	46 95       	lsr	r20
    1b44:	f1 df       	rcall	.-30     	; 0x1b28 <__fp_splitA>
    1b46:	08 c0       	rjmp	.+16     	; 0x1b58 <__fp_splitA+0x30>
    1b48:	16 16       	cp	r1, r22
    1b4a:	17 06       	cpc	r1, r23
    1b4c:	18 06       	cpc	r1, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	f1 cf       	rjmp	.-30     	; 0x1b34 <__fp_splitA+0xc>
    1b52:	86 95       	lsr	r24
    1b54:	71 05       	cpc	r23, r1
    1b56:	61 05       	cpc	r22, r1
    1b58:	08 94       	sec
    1b5a:	08 95       	ret

00001b5c <__fp_zero>:
    1b5c:	e8 94       	clt

00001b5e <__fp_szero>:
    1b5e:	bb 27       	eor	r27, r27
    1b60:	66 27       	eor	r22, r22
    1b62:	77 27       	eor	r23, r23
    1b64:	cb 01       	movw	r24, r22
    1b66:	97 f9       	bld	r25, 7
    1b68:	08 95       	ret

00001b6a <inverse>:
    1b6a:	9b 01       	movw	r18, r22
    1b6c:	ac 01       	movw	r20, r24
    1b6e:	60 e0       	ldi	r22, 0x00	; 0
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	80 e8       	ldi	r24, 0x80	; 128
    1b74:	9f e3       	ldi	r25, 0x3F	; 63
    1b76:	ad ce       	rjmp	.-678    	; 0x18d2 <__divsf3>

00001b78 <__mulsf3>:
    1b78:	0b d0       	rcall	.+22     	; 0x1b90 <__mulsf3x>
    1b7a:	bd cf       	rjmp	.-134    	; 0x1af6 <__fp_round>
    1b7c:	ae df       	rcall	.-164    	; 0x1ada <__fp_pscA>
    1b7e:	28 f0       	brcs	.+10     	; 0x1b8a <__mulsf3+0x12>
    1b80:	b3 df       	rcall	.-154    	; 0x1ae8 <__fp_pscB>
    1b82:	18 f0       	brcs	.+6      	; 0x1b8a <__mulsf3+0x12>
    1b84:	95 23       	and	r25, r21
    1b86:	09 f0       	breq	.+2      	; 0x1b8a <__mulsf3+0x12>
    1b88:	7a cf       	rjmp	.-268    	; 0x1a7e <__fp_inf>
    1b8a:	7f cf       	rjmp	.-258    	; 0x1a8a <__fp_nan>
    1b8c:	11 24       	eor	r1, r1
    1b8e:	e7 cf       	rjmp	.-50     	; 0x1b5e <__fp_szero>

00001b90 <__mulsf3x>:
    1b90:	c3 df       	rcall	.-122    	; 0x1b18 <__fp_split3>
    1b92:	a0 f3       	brcs	.-24     	; 0x1b7c <__mulsf3+0x4>

00001b94 <__mulsf3_pse>:
    1b94:	95 9f       	mul	r25, r21
    1b96:	d1 f3       	breq	.-12     	; 0x1b8c <__mulsf3+0x14>
    1b98:	95 0f       	add	r25, r21
    1b9a:	50 e0       	ldi	r21, 0x00	; 0
    1b9c:	55 1f       	adc	r21, r21
    1b9e:	62 9f       	mul	r22, r18
    1ba0:	f0 01       	movw	r30, r0
    1ba2:	72 9f       	mul	r23, r18
    1ba4:	bb 27       	eor	r27, r27
    1ba6:	f0 0d       	add	r31, r0
    1ba8:	b1 1d       	adc	r27, r1
    1baa:	63 9f       	mul	r22, r19
    1bac:	aa 27       	eor	r26, r26
    1bae:	f0 0d       	add	r31, r0
    1bb0:	b1 1d       	adc	r27, r1
    1bb2:	aa 1f       	adc	r26, r26
    1bb4:	64 9f       	mul	r22, r20
    1bb6:	66 27       	eor	r22, r22
    1bb8:	b0 0d       	add	r27, r0
    1bba:	a1 1d       	adc	r26, r1
    1bbc:	66 1f       	adc	r22, r22
    1bbe:	82 9f       	mul	r24, r18
    1bc0:	22 27       	eor	r18, r18
    1bc2:	b0 0d       	add	r27, r0
    1bc4:	a1 1d       	adc	r26, r1
    1bc6:	62 1f       	adc	r22, r18
    1bc8:	73 9f       	mul	r23, r19
    1bca:	b0 0d       	add	r27, r0
    1bcc:	a1 1d       	adc	r26, r1
    1bce:	62 1f       	adc	r22, r18
    1bd0:	83 9f       	mul	r24, r19
    1bd2:	a0 0d       	add	r26, r0
    1bd4:	61 1d       	adc	r22, r1
    1bd6:	22 1f       	adc	r18, r18
    1bd8:	74 9f       	mul	r23, r20
    1bda:	33 27       	eor	r19, r19
    1bdc:	a0 0d       	add	r26, r0
    1bde:	61 1d       	adc	r22, r1
    1be0:	23 1f       	adc	r18, r19
    1be2:	84 9f       	mul	r24, r20
    1be4:	60 0d       	add	r22, r0
    1be6:	21 1d       	adc	r18, r1
    1be8:	82 2f       	mov	r24, r18
    1bea:	76 2f       	mov	r23, r22
    1bec:	6a 2f       	mov	r22, r26
    1bee:	11 24       	eor	r1, r1
    1bf0:	9f 57       	subi	r25, 0x7F	; 127
    1bf2:	50 40       	sbci	r21, 0x00	; 0
    1bf4:	8a f0       	brmi	.+34     	; 0x1c18 <__mulsf3_pse+0x84>
    1bf6:	e1 f0       	breq	.+56     	; 0x1c30 <__mulsf3_pse+0x9c>
    1bf8:	88 23       	and	r24, r24
    1bfa:	4a f0       	brmi	.+18     	; 0x1c0e <__mulsf3_pse+0x7a>
    1bfc:	ee 0f       	add	r30, r30
    1bfe:	ff 1f       	adc	r31, r31
    1c00:	bb 1f       	adc	r27, r27
    1c02:	66 1f       	adc	r22, r22
    1c04:	77 1f       	adc	r23, r23
    1c06:	88 1f       	adc	r24, r24
    1c08:	91 50       	subi	r25, 0x01	; 1
    1c0a:	50 40       	sbci	r21, 0x00	; 0
    1c0c:	a9 f7       	brne	.-22     	; 0x1bf8 <__mulsf3_pse+0x64>
    1c0e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c10:	51 05       	cpc	r21, r1
    1c12:	70 f0       	brcs	.+28     	; 0x1c30 <__mulsf3_pse+0x9c>
    1c14:	34 cf       	rjmp	.-408    	; 0x1a7e <__fp_inf>
    1c16:	a3 cf       	rjmp	.-186    	; 0x1b5e <__fp_szero>
    1c18:	5f 3f       	cpi	r21, 0xFF	; 255
    1c1a:	ec f3       	brlt	.-6      	; 0x1c16 <__mulsf3_pse+0x82>
    1c1c:	98 3e       	cpi	r25, 0xE8	; 232
    1c1e:	dc f3       	brlt	.-10     	; 0x1c16 <__mulsf3_pse+0x82>
    1c20:	86 95       	lsr	r24
    1c22:	77 95       	ror	r23
    1c24:	67 95       	ror	r22
    1c26:	b7 95       	ror	r27
    1c28:	f7 95       	ror	r31
    1c2a:	e7 95       	ror	r30
    1c2c:	9f 5f       	subi	r25, 0xFF	; 255
    1c2e:	c1 f7       	brne	.-16     	; 0x1c20 <__mulsf3_pse+0x8c>
    1c30:	fe 2b       	or	r31, r30
    1c32:	88 0f       	add	r24, r24
    1c34:	91 1d       	adc	r25, r1
    1c36:	96 95       	lsr	r25
    1c38:	87 95       	ror	r24
    1c3a:	97 f9       	bld	r25, 7
    1c3c:	08 95       	ret
    1c3e:	11 f4       	brne	.+4      	; 0x1c44 <__mulsf3_pse+0xb0>
    1c40:	0e f4       	brtc	.+2      	; 0x1c44 <__mulsf3_pse+0xb0>
    1c42:	23 cf       	rjmp	.-442    	; 0x1a8a <__fp_nan>
    1c44:	41 c0       	rjmp	.+130    	; 0x1cc8 <__fp_mpack>

00001c46 <sqrt>:
    1c46:	70 df       	rcall	.-288    	; 0x1b28 <__fp_splitA>
    1c48:	d0 f3       	brcs	.-12     	; 0x1c3e <__mulsf3_pse+0xaa>
    1c4a:	99 23       	and	r25, r25
    1c4c:	d9 f3       	breq	.-10     	; 0x1c44 <__mulsf3_pse+0xb0>
    1c4e:	ce f3       	brts	.-14     	; 0x1c42 <__mulsf3_pse+0xae>
    1c50:	9f 57       	subi	r25, 0x7F	; 127
    1c52:	55 0b       	sbc	r21, r21
    1c54:	87 ff       	sbrs	r24, 7
    1c56:	46 d0       	rcall	.+140    	; 0x1ce4 <__fp_norm2>
    1c58:	00 24       	eor	r0, r0
    1c5a:	a0 e6       	ldi	r26, 0x60	; 96
    1c5c:	40 ea       	ldi	r20, 0xA0	; 160
    1c5e:	90 01       	movw	r18, r0
    1c60:	80 58       	subi	r24, 0x80	; 128
    1c62:	56 95       	lsr	r21
    1c64:	97 95       	ror	r25
    1c66:	28 f4       	brcc	.+10     	; 0x1c72 <sqrt+0x2c>
    1c68:	80 5c       	subi	r24, 0xC0	; 192
    1c6a:	66 0f       	add	r22, r22
    1c6c:	77 1f       	adc	r23, r23
    1c6e:	88 1f       	adc	r24, r24
    1c70:	20 f0       	brcs	.+8      	; 0x1c7a <sqrt+0x34>
    1c72:	26 17       	cp	r18, r22
    1c74:	37 07       	cpc	r19, r23
    1c76:	48 07       	cpc	r20, r24
    1c78:	30 f4       	brcc	.+12     	; 0x1c86 <sqrt+0x40>
    1c7a:	62 1b       	sub	r22, r18
    1c7c:	73 0b       	sbc	r23, r19
    1c7e:	84 0b       	sbc	r24, r20
    1c80:	20 29       	or	r18, r0
    1c82:	31 29       	or	r19, r1
    1c84:	4a 2b       	or	r20, r26
    1c86:	a6 95       	lsr	r26
    1c88:	17 94       	ror	r1
    1c8a:	07 94       	ror	r0
    1c8c:	20 25       	eor	r18, r0
    1c8e:	31 25       	eor	r19, r1
    1c90:	4a 27       	eor	r20, r26
    1c92:	58 f7       	brcc	.-42     	; 0x1c6a <sqrt+0x24>
    1c94:	66 0f       	add	r22, r22
    1c96:	77 1f       	adc	r23, r23
    1c98:	88 1f       	adc	r24, r24
    1c9a:	20 f0       	brcs	.+8      	; 0x1ca4 <sqrt+0x5e>
    1c9c:	26 17       	cp	r18, r22
    1c9e:	37 07       	cpc	r19, r23
    1ca0:	48 07       	cpc	r20, r24
    1ca2:	30 f4       	brcc	.+12     	; 0x1cb0 <sqrt+0x6a>
    1ca4:	62 0b       	sbc	r22, r18
    1ca6:	73 0b       	sbc	r23, r19
    1ca8:	84 0b       	sbc	r24, r20
    1caa:	20 0d       	add	r18, r0
    1cac:	31 1d       	adc	r19, r1
    1cae:	41 1d       	adc	r20, r1
    1cb0:	a0 95       	com	r26
    1cb2:	81 f7       	brne	.-32     	; 0x1c94 <sqrt+0x4e>
    1cb4:	b9 01       	movw	r22, r18
    1cb6:	84 2f       	mov	r24, r20
    1cb8:	91 58       	subi	r25, 0x81	; 129
    1cba:	88 0f       	add	r24, r24
    1cbc:	96 95       	lsr	r25
    1cbe:	87 95       	ror	r24
    1cc0:	08 95       	ret

00001cc2 <square>:
    1cc2:	9b 01       	movw	r18, r22
    1cc4:	ac 01       	movw	r20, r24
    1cc6:	58 cf       	rjmp	.-336    	; 0x1b78 <__mulsf3>

00001cc8 <__fp_mpack>:
    1cc8:	9f 3f       	cpi	r25, 0xFF	; 255
    1cca:	31 f0       	breq	.+12     	; 0x1cd8 <__fp_mpack_finite+0xc>

00001ccc <__fp_mpack_finite>:
    1ccc:	91 50       	subi	r25, 0x01	; 1
    1cce:	20 f4       	brcc	.+8      	; 0x1cd8 <__fp_mpack_finite+0xc>
    1cd0:	87 95       	ror	r24
    1cd2:	77 95       	ror	r23
    1cd4:	67 95       	ror	r22
    1cd6:	b7 95       	ror	r27
    1cd8:	88 0f       	add	r24, r24
    1cda:	91 1d       	adc	r25, r1
    1cdc:	96 95       	lsr	r25
    1cde:	87 95       	ror	r24
    1ce0:	97 f9       	bld	r25, 7
    1ce2:	08 95       	ret

00001ce4 <__fp_norm2>:
    1ce4:	91 50       	subi	r25, 0x01	; 1
    1ce6:	50 40       	sbci	r21, 0x00	; 0
    1ce8:	66 0f       	add	r22, r22
    1cea:	77 1f       	adc	r23, r23
    1cec:	88 1f       	adc	r24, r24
    1cee:	d2 f7       	brpl	.-12     	; 0x1ce4 <__fp_norm2>
    1cf0:	08 95       	ret

00001cf2 <__divmodhi4>:
    1cf2:	97 fb       	bst	r25, 7
    1cf4:	07 2e       	mov	r0, r23
    1cf6:	16 f4       	brtc	.+4      	; 0x1cfc <__divmodhi4+0xa>
    1cf8:	00 94       	com	r0
    1cfa:	07 d0       	rcall	.+14     	; 0x1d0a <__divmodhi4_neg1>
    1cfc:	77 fd       	sbrc	r23, 7
    1cfe:	09 d0       	rcall	.+18     	; 0x1d12 <__divmodhi4_neg2>
    1d00:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__udivmodhi4>
    1d04:	07 fc       	sbrc	r0, 7
    1d06:	05 d0       	rcall	.+10     	; 0x1d12 <__divmodhi4_neg2>
    1d08:	3e f4       	brtc	.+14     	; 0x1d18 <__divmodhi4_exit>

00001d0a <__divmodhi4_neg1>:
    1d0a:	90 95       	com	r25
    1d0c:	81 95       	neg	r24
    1d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d10:	08 95       	ret

00001d12 <__divmodhi4_neg2>:
    1d12:	70 95       	com	r23
    1d14:	61 95       	neg	r22
    1d16:	7f 4f       	sbci	r23, 0xFF	; 255

00001d18 <__divmodhi4_exit>:
    1d18:	08 95       	ret

00001d1a <__divmodsi4>:
    1d1a:	05 2e       	mov	r0, r21
    1d1c:	97 fb       	bst	r25, 7
    1d1e:	1e f4       	brtc	.+6      	; 0x1d26 <__divmodsi4+0xc>
    1d20:	00 94       	com	r0
    1d22:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__negsi2>
    1d26:	57 fd       	sbrc	r21, 7
    1d28:	07 d0       	rcall	.+14     	; 0x1d38 <__divmodsi4_neg2>
    1d2a:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__udivmodsi4>
    1d2e:	07 fc       	sbrc	r0, 7
    1d30:	03 d0       	rcall	.+6      	; 0x1d38 <__divmodsi4_neg2>
    1d32:	4e f4       	brtc	.+18     	; 0x1d46 <__divmodsi4_exit>
    1d34:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__negsi2>

00001d38 <__divmodsi4_neg2>:
    1d38:	50 95       	com	r21
    1d3a:	40 95       	com	r20
    1d3c:	30 95       	com	r19
    1d3e:	21 95       	neg	r18
    1d40:	3f 4f       	sbci	r19, 0xFF	; 255
    1d42:	4f 4f       	sbci	r20, 0xFF	; 255
    1d44:	5f 4f       	sbci	r21, 0xFF	; 255

00001d46 <__divmodsi4_exit>:
    1d46:	08 95       	ret

00001d48 <__negsi2>:
    1d48:	90 95       	com	r25
    1d4a:	80 95       	com	r24
    1d4c:	70 95       	com	r23
    1d4e:	61 95       	neg	r22
    1d50:	7f 4f       	sbci	r23, 0xFF	; 255
    1d52:	8f 4f       	sbci	r24, 0xFF	; 255
    1d54:	9f 4f       	sbci	r25, 0xFF	; 255
    1d56:	08 95       	ret

00001d58 <__udivmodhi4>:
    1d58:	aa 1b       	sub	r26, r26
    1d5a:	bb 1b       	sub	r27, r27
    1d5c:	51 e1       	ldi	r21, 0x11	; 17
    1d5e:	07 c0       	rjmp	.+14     	; 0x1d6e <__udivmodhi4_ep>

00001d60 <__udivmodhi4_loop>:
    1d60:	aa 1f       	adc	r26, r26
    1d62:	bb 1f       	adc	r27, r27
    1d64:	a6 17       	cp	r26, r22
    1d66:	b7 07       	cpc	r27, r23
    1d68:	10 f0       	brcs	.+4      	; 0x1d6e <__udivmodhi4_ep>
    1d6a:	a6 1b       	sub	r26, r22
    1d6c:	b7 0b       	sbc	r27, r23

00001d6e <__udivmodhi4_ep>:
    1d6e:	88 1f       	adc	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	5a 95       	dec	r21
    1d74:	a9 f7       	brne	.-22     	; 0x1d60 <__udivmodhi4_loop>
    1d76:	80 95       	com	r24
    1d78:	90 95       	com	r25
    1d7a:	bc 01       	movw	r22, r24
    1d7c:	cd 01       	movw	r24, r26
    1d7e:	08 95       	ret

00001d80 <__udivmodsi4>:
    1d80:	a1 e2       	ldi	r26, 0x21	; 33
    1d82:	1a 2e       	mov	r1, r26
    1d84:	aa 1b       	sub	r26, r26
    1d86:	bb 1b       	sub	r27, r27
    1d88:	fd 01       	movw	r30, r26
    1d8a:	0d c0       	rjmp	.+26     	; 0x1da6 <__udivmodsi4_ep>

00001d8c <__udivmodsi4_loop>:
    1d8c:	aa 1f       	adc	r26, r26
    1d8e:	bb 1f       	adc	r27, r27
    1d90:	ee 1f       	adc	r30, r30
    1d92:	ff 1f       	adc	r31, r31
    1d94:	a2 17       	cp	r26, r18
    1d96:	b3 07       	cpc	r27, r19
    1d98:	e4 07       	cpc	r30, r20
    1d9a:	f5 07       	cpc	r31, r21
    1d9c:	20 f0       	brcs	.+8      	; 0x1da6 <__udivmodsi4_ep>
    1d9e:	a2 1b       	sub	r26, r18
    1da0:	b3 0b       	sbc	r27, r19
    1da2:	e4 0b       	sbc	r30, r20
    1da4:	f5 0b       	sbc	r31, r21

00001da6 <__udivmodsi4_ep>:
    1da6:	66 1f       	adc	r22, r22
    1da8:	77 1f       	adc	r23, r23
    1daa:	88 1f       	adc	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	1a 94       	dec	r1
    1db0:	69 f7       	brne	.-38     	; 0x1d8c <__udivmodsi4_loop>
    1db2:	60 95       	com	r22
    1db4:	70 95       	com	r23
    1db6:	80 95       	com	r24
    1db8:	90 95       	com	r25
    1dba:	9b 01       	movw	r18, r22
    1dbc:	ac 01       	movw	r20, r24
    1dbe:	bd 01       	movw	r22, r26
    1dc0:	cf 01       	movw	r24, r30
    1dc2:	08 95       	ret

00001dc4 <malloc>:
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	82 30       	cpi	r24, 0x02	; 2
    1dca:	91 05       	cpc	r25, r1
    1dcc:	10 f4       	brcc	.+4      	; 0x1dd2 <malloc+0xe>
    1dce:	82 e0       	ldi	r24, 0x02	; 2
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	e0 91 4c 02 	lds	r30, 0x024C
    1dd6:	f0 91 4d 02 	lds	r31, 0x024D
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	a0 e0       	ldi	r26, 0x00	; 0
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	30 97       	sbiw	r30, 0x00	; 0
    1de4:	39 f1       	breq	.+78     	; 0x1e34 <malloc+0x70>
    1de6:	40 81       	ld	r20, Z
    1de8:	51 81       	ldd	r21, Z+1	; 0x01
    1dea:	48 17       	cp	r20, r24
    1dec:	59 07       	cpc	r21, r25
    1dee:	b8 f0       	brcs	.+46     	; 0x1e1e <malloc+0x5a>
    1df0:	48 17       	cp	r20, r24
    1df2:	59 07       	cpc	r21, r25
    1df4:	71 f4       	brne	.+28     	; 0x1e12 <malloc+0x4e>
    1df6:	82 81       	ldd	r24, Z+2	; 0x02
    1df8:	93 81       	ldd	r25, Z+3	; 0x03
    1dfa:	10 97       	sbiw	r26, 0x00	; 0
    1dfc:	29 f0       	breq	.+10     	; 0x1e08 <malloc+0x44>
    1dfe:	13 96       	adiw	r26, 0x03	; 3
    1e00:	9c 93       	st	X, r25
    1e02:	8e 93       	st	-X, r24
    1e04:	12 97       	sbiw	r26, 0x02	; 2
    1e06:	2c c0       	rjmp	.+88     	; 0x1e60 <malloc+0x9c>
    1e08:	90 93 4d 02 	sts	0x024D, r25
    1e0c:	80 93 4c 02 	sts	0x024C, r24
    1e10:	27 c0       	rjmp	.+78     	; 0x1e60 <malloc+0x9c>
    1e12:	21 15       	cp	r18, r1
    1e14:	31 05       	cpc	r19, r1
    1e16:	31 f0       	breq	.+12     	; 0x1e24 <malloc+0x60>
    1e18:	42 17       	cp	r20, r18
    1e1a:	53 07       	cpc	r21, r19
    1e1c:	18 f0       	brcs	.+6      	; 0x1e24 <malloc+0x60>
    1e1e:	a9 01       	movw	r20, r18
    1e20:	db 01       	movw	r26, r22
    1e22:	01 c0       	rjmp	.+2      	; 0x1e26 <malloc+0x62>
    1e24:	ef 01       	movw	r28, r30
    1e26:	9a 01       	movw	r18, r20
    1e28:	bd 01       	movw	r22, r26
    1e2a:	df 01       	movw	r26, r30
    1e2c:	02 80       	ldd	r0, Z+2	; 0x02
    1e2e:	f3 81       	ldd	r31, Z+3	; 0x03
    1e30:	e0 2d       	mov	r30, r0
    1e32:	d7 cf       	rjmp	.-82     	; 0x1de2 <malloc+0x1e>
    1e34:	21 15       	cp	r18, r1
    1e36:	31 05       	cpc	r19, r1
    1e38:	f9 f0       	breq	.+62     	; 0x1e78 <malloc+0xb4>
    1e3a:	28 1b       	sub	r18, r24
    1e3c:	39 0b       	sbc	r19, r25
    1e3e:	24 30       	cpi	r18, 0x04	; 4
    1e40:	31 05       	cpc	r19, r1
    1e42:	80 f4       	brcc	.+32     	; 0x1e64 <malloc+0xa0>
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	9b 81       	ldd	r25, Y+3	; 0x03
    1e48:	61 15       	cp	r22, r1
    1e4a:	71 05       	cpc	r23, r1
    1e4c:	21 f0       	breq	.+8      	; 0x1e56 <malloc+0x92>
    1e4e:	fb 01       	movw	r30, r22
    1e50:	93 83       	std	Z+3, r25	; 0x03
    1e52:	82 83       	std	Z+2, r24	; 0x02
    1e54:	04 c0       	rjmp	.+8      	; 0x1e5e <malloc+0x9a>
    1e56:	90 93 4d 02 	sts	0x024D, r25
    1e5a:	80 93 4c 02 	sts	0x024C, r24
    1e5e:	fe 01       	movw	r30, r28
    1e60:	32 96       	adiw	r30, 0x02	; 2
    1e62:	44 c0       	rjmp	.+136    	; 0x1eec <malloc+0x128>
    1e64:	fe 01       	movw	r30, r28
    1e66:	e2 0f       	add	r30, r18
    1e68:	f3 1f       	adc	r31, r19
    1e6a:	81 93       	st	Z+, r24
    1e6c:	91 93       	st	Z+, r25
    1e6e:	22 50       	subi	r18, 0x02	; 2
    1e70:	31 09       	sbc	r19, r1
    1e72:	39 83       	std	Y+1, r19	; 0x01
    1e74:	28 83       	st	Y, r18
    1e76:	3a c0       	rjmp	.+116    	; 0x1eec <malloc+0x128>
    1e78:	20 91 4a 02 	lds	r18, 0x024A
    1e7c:	30 91 4b 02 	lds	r19, 0x024B
    1e80:	23 2b       	or	r18, r19
    1e82:	41 f4       	brne	.+16     	; 0x1e94 <malloc+0xd0>
    1e84:	20 91 02 01 	lds	r18, 0x0102
    1e88:	30 91 03 01 	lds	r19, 0x0103
    1e8c:	30 93 4b 02 	sts	0x024B, r19
    1e90:	20 93 4a 02 	sts	0x024A, r18
    1e94:	20 91 00 01 	lds	r18, 0x0100
    1e98:	30 91 01 01 	lds	r19, 0x0101
    1e9c:	21 15       	cp	r18, r1
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	41 f4       	brne	.+16     	; 0x1eb2 <malloc+0xee>
    1ea2:	2d b7       	in	r18, 0x3d	; 61
    1ea4:	3e b7       	in	r19, 0x3e	; 62
    1ea6:	40 91 04 01 	lds	r20, 0x0104
    1eaa:	50 91 05 01 	lds	r21, 0x0105
    1eae:	24 1b       	sub	r18, r20
    1eb0:	35 0b       	sbc	r19, r21
    1eb2:	e0 91 4a 02 	lds	r30, 0x024A
    1eb6:	f0 91 4b 02 	lds	r31, 0x024B
    1eba:	e2 17       	cp	r30, r18
    1ebc:	f3 07       	cpc	r31, r19
    1ebe:	a0 f4       	brcc	.+40     	; 0x1ee8 <malloc+0x124>
    1ec0:	2e 1b       	sub	r18, r30
    1ec2:	3f 0b       	sbc	r19, r31
    1ec4:	28 17       	cp	r18, r24
    1ec6:	39 07       	cpc	r19, r25
    1ec8:	78 f0       	brcs	.+30     	; 0x1ee8 <malloc+0x124>
    1eca:	ac 01       	movw	r20, r24
    1ecc:	4e 5f       	subi	r20, 0xFE	; 254
    1ece:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed0:	24 17       	cp	r18, r20
    1ed2:	35 07       	cpc	r19, r21
    1ed4:	48 f0       	brcs	.+18     	; 0x1ee8 <malloc+0x124>
    1ed6:	4e 0f       	add	r20, r30
    1ed8:	5f 1f       	adc	r21, r31
    1eda:	50 93 4b 02 	sts	0x024B, r21
    1ede:	40 93 4a 02 	sts	0x024A, r20
    1ee2:	81 93       	st	Z+, r24
    1ee4:	91 93       	st	Z+, r25
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <malloc+0x128>
    1ee8:	e0 e0       	ldi	r30, 0x00	; 0
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	cf 01       	movw	r24, r30
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	08 95       	ret

00001ef4 <free>:
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	09 f4       	brne	.+2      	; 0x1efe <free+0xa>
    1efc:	87 c0       	rjmp	.+270    	; 0x200c <free+0x118>
    1efe:	fc 01       	movw	r30, r24
    1f00:	32 97       	sbiw	r30, 0x02	; 2
    1f02:	13 82       	std	Z+3, r1	; 0x03
    1f04:	12 82       	std	Z+2, r1	; 0x02
    1f06:	c0 91 4c 02 	lds	r28, 0x024C
    1f0a:	d0 91 4d 02 	lds	r29, 0x024D
    1f0e:	20 97       	sbiw	r28, 0x00	; 0
    1f10:	81 f4       	brne	.+32     	; 0x1f32 <free+0x3e>
    1f12:	20 81       	ld	r18, Z
    1f14:	31 81       	ldd	r19, Z+1	; 0x01
    1f16:	28 0f       	add	r18, r24
    1f18:	39 1f       	adc	r19, r25
    1f1a:	80 91 4a 02 	lds	r24, 0x024A
    1f1e:	90 91 4b 02 	lds	r25, 0x024B
    1f22:	82 17       	cp	r24, r18
    1f24:	93 07       	cpc	r25, r19
    1f26:	79 f5       	brne	.+94     	; 0x1f86 <free+0x92>
    1f28:	f0 93 4b 02 	sts	0x024B, r31
    1f2c:	e0 93 4a 02 	sts	0x024A, r30
    1f30:	6d c0       	rjmp	.+218    	; 0x200c <free+0x118>
    1f32:	de 01       	movw	r26, r28
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	ae 17       	cp	r26, r30
    1f3a:	bf 07       	cpc	r27, r31
    1f3c:	50 f4       	brcc	.+20     	; 0x1f52 <free+0x5e>
    1f3e:	12 96       	adiw	r26, 0x02	; 2
    1f40:	4d 91       	ld	r20, X+
    1f42:	5c 91       	ld	r21, X
    1f44:	13 97       	sbiw	r26, 0x03	; 3
    1f46:	9d 01       	movw	r18, r26
    1f48:	41 15       	cp	r20, r1
    1f4a:	51 05       	cpc	r21, r1
    1f4c:	09 f1       	breq	.+66     	; 0x1f90 <free+0x9c>
    1f4e:	da 01       	movw	r26, r20
    1f50:	f3 cf       	rjmp	.-26     	; 0x1f38 <free+0x44>
    1f52:	b3 83       	std	Z+3, r27	; 0x03
    1f54:	a2 83       	std	Z+2, r26	; 0x02
    1f56:	40 81       	ld	r20, Z
    1f58:	51 81       	ldd	r21, Z+1	; 0x01
    1f5a:	84 0f       	add	r24, r20
    1f5c:	95 1f       	adc	r25, r21
    1f5e:	8a 17       	cp	r24, r26
    1f60:	9b 07       	cpc	r25, r27
    1f62:	71 f4       	brne	.+28     	; 0x1f80 <free+0x8c>
    1f64:	8d 91       	ld	r24, X+
    1f66:	9c 91       	ld	r25, X
    1f68:	11 97       	sbiw	r26, 0x01	; 1
    1f6a:	84 0f       	add	r24, r20
    1f6c:	95 1f       	adc	r25, r21
    1f6e:	02 96       	adiw	r24, 0x02	; 2
    1f70:	91 83       	std	Z+1, r25	; 0x01
    1f72:	80 83       	st	Z, r24
    1f74:	12 96       	adiw	r26, 0x02	; 2
    1f76:	8d 91       	ld	r24, X+
    1f78:	9c 91       	ld	r25, X
    1f7a:	13 97       	sbiw	r26, 0x03	; 3
    1f7c:	93 83       	std	Z+3, r25	; 0x03
    1f7e:	82 83       	std	Z+2, r24	; 0x02
    1f80:	21 15       	cp	r18, r1
    1f82:	31 05       	cpc	r19, r1
    1f84:	29 f4       	brne	.+10     	; 0x1f90 <free+0x9c>
    1f86:	f0 93 4d 02 	sts	0x024D, r31
    1f8a:	e0 93 4c 02 	sts	0x024C, r30
    1f8e:	3e c0       	rjmp	.+124    	; 0x200c <free+0x118>
    1f90:	d9 01       	movw	r26, r18
    1f92:	13 96       	adiw	r26, 0x03	; 3
    1f94:	fc 93       	st	X, r31
    1f96:	ee 93       	st	-X, r30
    1f98:	12 97       	sbiw	r26, 0x02	; 2
    1f9a:	4d 91       	ld	r20, X+
    1f9c:	5d 91       	ld	r21, X+
    1f9e:	a4 0f       	add	r26, r20
    1fa0:	b5 1f       	adc	r27, r21
    1fa2:	ea 17       	cp	r30, r26
    1fa4:	fb 07       	cpc	r31, r27
    1fa6:	79 f4       	brne	.+30     	; 0x1fc6 <free+0xd2>
    1fa8:	80 81       	ld	r24, Z
    1faa:	91 81       	ldd	r25, Z+1	; 0x01
    1fac:	84 0f       	add	r24, r20
    1fae:	95 1f       	adc	r25, r21
    1fb0:	02 96       	adiw	r24, 0x02	; 2
    1fb2:	d9 01       	movw	r26, r18
    1fb4:	11 96       	adiw	r26, 0x01	; 1
    1fb6:	9c 93       	st	X, r25
    1fb8:	8e 93       	st	-X, r24
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	13 96       	adiw	r26, 0x03	; 3
    1fc0:	9c 93       	st	X, r25
    1fc2:	8e 93       	st	-X, r24
    1fc4:	12 97       	sbiw	r26, 0x02	; 2
    1fc6:	e0 e0       	ldi	r30, 0x00	; 0
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	19 f0       	breq	.+6      	; 0x1fd8 <free+0xe4>
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	ec 01       	movw	r28, r24
    1fd6:	f9 cf       	rjmp	.-14     	; 0x1fca <free+0xd6>
    1fd8:	ce 01       	movw	r24, r28
    1fda:	02 96       	adiw	r24, 0x02	; 2
    1fdc:	28 81       	ld	r18, Y
    1fde:	39 81       	ldd	r19, Y+1	; 0x01
    1fe0:	82 0f       	add	r24, r18
    1fe2:	93 1f       	adc	r25, r19
    1fe4:	20 91 4a 02 	lds	r18, 0x024A
    1fe8:	30 91 4b 02 	lds	r19, 0x024B
    1fec:	28 17       	cp	r18, r24
    1fee:	39 07       	cpc	r19, r25
    1ff0:	69 f4       	brne	.+26     	; 0x200c <free+0x118>
    1ff2:	30 97       	sbiw	r30, 0x00	; 0
    1ff4:	29 f4       	brne	.+10     	; 0x2000 <free+0x10c>
    1ff6:	10 92 4d 02 	sts	0x024D, r1
    1ffa:	10 92 4c 02 	sts	0x024C, r1
    1ffe:	02 c0       	rjmp	.+4      	; 0x2004 <free+0x110>
    2000:	13 82       	std	Z+3, r1	; 0x03
    2002:	12 82       	std	Z+2, r1	; 0x02
    2004:	d0 93 4b 02 	sts	0x024B, r29
    2008:	c0 93 4a 02 	sts	0x024A, r28
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	08 95       	ret

00002012 <realloc>:
    2012:	a0 e0       	ldi	r26, 0x00	; 0
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	ef e0       	ldi	r30, 0x0F	; 15
    2018:	f0 e1       	ldi	r31, 0x10	; 16
    201a:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <__prologue_saves__+0x8>
    201e:	ec 01       	movw	r28, r24
    2020:	cb 01       	movw	r24, r22
    2022:	20 97       	sbiw	r28, 0x00	; 0
    2024:	19 f4       	brne	.+6      	; 0x202c <realloc+0x1a>
    2026:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <malloc>
    202a:	b8 c0       	rjmp	.+368    	; 0x219c <realloc+0x18a>
    202c:	fe 01       	movw	r30, r28
    202e:	e6 0f       	add	r30, r22
    2030:	f7 1f       	adc	r31, r23
    2032:	9e 01       	movw	r18, r28
    2034:	22 50       	subi	r18, 0x02	; 2
    2036:	31 09       	sbc	r19, r1
    2038:	e2 17       	cp	r30, r18
    203a:	f3 07       	cpc	r31, r19
    203c:	08 f4       	brcc	.+2      	; 0x2040 <realloc+0x2e>
    203e:	ac c0       	rjmp	.+344    	; 0x2198 <realloc+0x186>
    2040:	d9 01       	movw	r26, r18
    2042:	0d 91       	ld	r16, X+
    2044:	1c 91       	ld	r17, X
    2046:	11 97       	sbiw	r26, 0x01	; 1
    2048:	06 17       	cp	r16, r22
    204a:	17 07       	cpc	r17, r23
    204c:	b8 f0       	brcs	.+46     	; 0x207c <realloc+0x6a>
    204e:	05 30       	cpi	r16, 0x05	; 5
    2050:	11 05       	cpc	r17, r1
    2052:	08 f4       	brcc	.+2      	; 0x2056 <realloc+0x44>
    2054:	9f c0       	rjmp	.+318    	; 0x2194 <realloc+0x182>
    2056:	a8 01       	movw	r20, r16
    2058:	44 50       	subi	r20, 0x04	; 4
    205a:	51 09       	sbc	r21, r1
    205c:	46 17       	cp	r20, r22
    205e:	57 07       	cpc	r21, r23
    2060:	08 f4       	brcc	.+2      	; 0x2064 <realloc+0x52>
    2062:	98 c0       	rjmp	.+304    	; 0x2194 <realloc+0x182>
    2064:	02 50       	subi	r16, 0x02	; 2
    2066:	11 09       	sbc	r17, r1
    2068:	06 1b       	sub	r16, r22
    206a:	17 0b       	sbc	r17, r23
    206c:	01 93       	st	Z+, r16
    206e:	11 93       	st	Z+, r17
    2070:	6d 93       	st	X+, r22
    2072:	7c 93       	st	X, r23
    2074:	cf 01       	movw	r24, r30
    2076:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <free>
    207a:	8c c0       	rjmp	.+280    	; 0x2194 <realloc+0x182>
    207c:	5b 01       	movw	r10, r22
    207e:	a0 1a       	sub	r10, r16
    2080:	b1 0a       	sbc	r11, r17
    2082:	4e 01       	movw	r8, r28
    2084:	80 0e       	add	r8, r16
    2086:	91 1e       	adc	r9, r17
    2088:	a0 91 4c 02 	lds	r26, 0x024C
    208c:	b0 91 4d 02 	lds	r27, 0x024D
    2090:	61 2c       	mov	r6, r1
    2092:	71 2c       	mov	r7, r1
    2094:	60 e0       	ldi	r22, 0x00	; 0
    2096:	70 e0       	ldi	r23, 0x00	; 0
    2098:	10 97       	sbiw	r26, 0x00	; 0
    209a:	09 f4       	brne	.+2      	; 0x209e <realloc+0x8c>
    209c:	49 c0       	rjmp	.+146    	; 0x2130 <realloc+0x11e>
    209e:	a8 15       	cp	r26, r8
    20a0:	b9 05       	cpc	r27, r9
    20a2:	c9 f5       	brne	.+114    	; 0x2116 <realloc+0x104>
    20a4:	ed 90       	ld	r14, X+
    20a6:	fc 90       	ld	r15, X
    20a8:	11 97       	sbiw	r26, 0x01	; 1
    20aa:	67 01       	movw	r12, r14
    20ac:	42 e0       	ldi	r20, 0x02	; 2
    20ae:	c4 0e       	add	r12, r20
    20b0:	d1 1c       	adc	r13, r1
    20b2:	ca 14       	cp	r12, r10
    20b4:	db 04       	cpc	r13, r11
    20b6:	78 f1       	brcs	.+94     	; 0x2116 <realloc+0x104>
    20b8:	47 01       	movw	r8, r14
    20ba:	8a 18       	sub	r8, r10
    20bc:	9b 08       	sbc	r9, r11
    20be:	64 01       	movw	r12, r8
    20c0:	42 e0       	ldi	r20, 0x02	; 2
    20c2:	c4 0e       	add	r12, r20
    20c4:	d1 1c       	adc	r13, r1
    20c6:	12 96       	adiw	r26, 0x02	; 2
    20c8:	bc 90       	ld	r11, X
    20ca:	12 97       	sbiw	r26, 0x02	; 2
    20cc:	13 96       	adiw	r26, 0x03	; 3
    20ce:	ac 91       	ld	r26, X
    20d0:	b5 e0       	ldi	r27, 0x05	; 5
    20d2:	cb 16       	cp	r12, r27
    20d4:	d1 04       	cpc	r13, r1
    20d6:	40 f0       	brcs	.+16     	; 0x20e8 <realloc+0xd6>
    20d8:	b2 82       	std	Z+2, r11	; 0x02
    20da:	a3 83       	std	Z+3, r26	; 0x03
    20dc:	91 82       	std	Z+1, r9	; 0x01
    20de:	80 82       	st	Z, r8
    20e0:	d9 01       	movw	r26, r18
    20e2:	8d 93       	st	X+, r24
    20e4:	9c 93       	st	X, r25
    20e6:	09 c0       	rjmp	.+18     	; 0x20fa <realloc+0xe8>
    20e8:	0e 5f       	subi	r16, 0xFE	; 254
    20ea:	1f 4f       	sbci	r17, 0xFF	; 255
    20ec:	0e 0d       	add	r16, r14
    20ee:	1f 1d       	adc	r17, r15
    20f0:	f9 01       	movw	r30, r18
    20f2:	11 83       	std	Z+1, r17	; 0x01
    20f4:	00 83       	st	Z, r16
    20f6:	eb 2d       	mov	r30, r11
    20f8:	fa 2f       	mov	r31, r26
    20fa:	61 15       	cp	r22, r1
    20fc:	71 05       	cpc	r23, r1
    20fe:	31 f0       	breq	.+12     	; 0x210c <realloc+0xfa>
    2100:	db 01       	movw	r26, r22
    2102:	13 96       	adiw	r26, 0x03	; 3
    2104:	fc 93       	st	X, r31
    2106:	ee 93       	st	-X, r30
    2108:	12 97       	sbiw	r26, 0x02	; 2
    210a:	44 c0       	rjmp	.+136    	; 0x2194 <realloc+0x182>
    210c:	f0 93 4d 02 	sts	0x024D, r31
    2110:	e0 93 4c 02 	sts	0x024C, r30
    2114:	3f c0       	rjmp	.+126    	; 0x2194 <realloc+0x182>
    2116:	6d 91       	ld	r22, X+
    2118:	7c 91       	ld	r23, X
    211a:	11 97       	sbiw	r26, 0x01	; 1
    211c:	66 16       	cp	r6, r22
    211e:	77 06       	cpc	r7, r23
    2120:	08 f4       	brcc	.+2      	; 0x2124 <realloc+0x112>
    2122:	3b 01       	movw	r6, r22
    2124:	bd 01       	movw	r22, r26
    2126:	12 96       	adiw	r26, 0x02	; 2
    2128:	0d 90       	ld	r0, X+
    212a:	bc 91       	ld	r27, X
    212c:	a0 2d       	mov	r26, r0
    212e:	b4 cf       	rjmp	.-152    	; 0x2098 <realloc+0x86>
    2130:	60 91 4a 02 	lds	r22, 0x024A
    2134:	70 91 4b 02 	lds	r23, 0x024B
    2138:	68 15       	cp	r22, r8
    213a:	79 05       	cpc	r23, r9
    213c:	e9 f4       	brne	.+58     	; 0x2178 <realloc+0x166>
    213e:	68 16       	cp	r6, r24
    2140:	79 06       	cpc	r7, r25
    2142:	d0 f4       	brcc	.+52     	; 0x2178 <realloc+0x166>
    2144:	40 91 00 01 	lds	r20, 0x0100
    2148:	50 91 01 01 	lds	r21, 0x0101
    214c:	41 15       	cp	r20, r1
    214e:	51 05       	cpc	r21, r1
    2150:	41 f4       	brne	.+16     	; 0x2162 <realloc+0x150>
    2152:	4d b7       	in	r20, 0x3d	; 61
    2154:	5e b7       	in	r21, 0x3e	; 62
    2156:	60 91 04 01 	lds	r22, 0x0104
    215a:	70 91 05 01 	lds	r23, 0x0105
    215e:	46 1b       	sub	r20, r22
    2160:	57 0b       	sbc	r21, r23
    2162:	e4 17       	cp	r30, r20
    2164:	f5 07       	cpc	r31, r21
    2166:	c0 f4       	brcc	.+48     	; 0x2198 <realloc+0x186>
    2168:	f0 93 4b 02 	sts	0x024B, r31
    216c:	e0 93 4a 02 	sts	0x024A, r30
    2170:	f9 01       	movw	r30, r18
    2172:	91 83       	std	Z+1, r25	; 0x01
    2174:	80 83       	st	Z, r24
    2176:	0e c0       	rjmp	.+28     	; 0x2194 <realloc+0x182>
    2178:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <malloc>
    217c:	7c 01       	movw	r14, r24
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	59 f0       	breq	.+22     	; 0x2198 <realloc+0x186>
    2182:	a8 01       	movw	r20, r16
    2184:	be 01       	movw	r22, r28
    2186:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <memcpy>
    218a:	ce 01       	movw	r24, r28
    218c:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <free>
    2190:	c7 01       	movw	r24, r14
    2192:	04 c0       	rjmp	.+8      	; 0x219c <realloc+0x18a>
    2194:	ce 01       	movw	r24, r28
    2196:	02 c0       	rjmp	.+4      	; 0x219c <realloc+0x18a>
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	ee e0       	ldi	r30, 0x0E	; 14
    21a2:	0c 94 97 11 	jmp	0x232e	; 0x232e <__epilogue_restores__+0x8>

000021a6 <memcpy>:
    21a6:	fb 01       	movw	r30, r22
    21a8:	dc 01       	movw	r26, r24
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <memcpy+0xa>
    21ac:	01 90       	ld	r0, Z+
    21ae:	0d 92       	st	X+, r0
    21b0:	41 50       	subi	r20, 0x01	; 1
    21b2:	50 40       	sbci	r21, 0x00	; 0
    21b4:	d8 f7       	brcc	.-10     	; 0x21ac <memcpy+0x6>
    21b6:	08 95       	ret

000021b8 <fdevopen>:
    21b8:	0f 93       	push	r16
    21ba:	1f 93       	push	r17
    21bc:	cf 93       	push	r28
    21be:	df 93       	push	r29
    21c0:	ec 01       	movw	r28, r24
    21c2:	8b 01       	movw	r16, r22
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	31 f4       	brne	.+12     	; 0x21d4 <fdevopen+0x1c>
    21c8:	61 15       	cp	r22, r1
    21ca:	71 05       	cpc	r23, r1
    21cc:	19 f4       	brne	.+6      	; 0x21d4 <fdevopen+0x1c>
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	38 c0       	rjmp	.+112    	; 0x2244 <fdevopen+0x8c>
    21d4:	6e e0       	ldi	r22, 0x0E	; 14
    21d6:	70 e0       	ldi	r23, 0x00	; 0
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	0e 94 54 11 	call	0x22a8	; 0x22a8 <calloc>
    21e0:	fc 01       	movw	r30, r24
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	a1 f3       	breq	.-24     	; 0x21ce <fdevopen+0x16>
    21e6:	80 e8       	ldi	r24, 0x80	; 128
    21e8:	83 83       	std	Z+3, r24	; 0x03
    21ea:	01 15       	cp	r16, r1
    21ec:	11 05       	cpc	r17, r1
    21ee:	71 f0       	breq	.+28     	; 0x220c <fdevopen+0x54>
    21f0:	13 87       	std	Z+11, r17	; 0x0b
    21f2:	02 87       	std	Z+10, r16	; 0x0a
    21f4:	81 e8       	ldi	r24, 0x81	; 129
    21f6:	83 83       	std	Z+3, r24	; 0x03
    21f8:	80 91 4e 02 	lds	r24, 0x024E
    21fc:	90 91 4f 02 	lds	r25, 0x024F
    2200:	89 2b       	or	r24, r25
    2202:	21 f4       	brne	.+8      	; 0x220c <fdevopen+0x54>
    2204:	f0 93 4f 02 	sts	0x024F, r31
    2208:	e0 93 4e 02 	sts	0x024E, r30
    220c:	20 97       	sbiw	r28, 0x00	; 0
    220e:	c9 f0       	breq	.+50     	; 0x2242 <fdevopen+0x8a>
    2210:	d1 87       	std	Z+9, r29	; 0x09
    2212:	c0 87       	std	Z+8, r28	; 0x08
    2214:	83 81       	ldd	r24, Z+3	; 0x03
    2216:	82 60       	ori	r24, 0x02	; 2
    2218:	83 83       	std	Z+3, r24	; 0x03
    221a:	80 91 50 02 	lds	r24, 0x0250
    221e:	90 91 51 02 	lds	r25, 0x0251
    2222:	89 2b       	or	r24, r25
    2224:	71 f4       	brne	.+28     	; 0x2242 <fdevopen+0x8a>
    2226:	f0 93 51 02 	sts	0x0251, r31
    222a:	e0 93 50 02 	sts	0x0250, r30
    222e:	80 91 52 02 	lds	r24, 0x0252
    2232:	90 91 53 02 	lds	r25, 0x0253
    2236:	89 2b       	or	r24, r25
    2238:	21 f4       	brne	.+8      	; 0x2242 <fdevopen+0x8a>
    223a:	f0 93 53 02 	sts	0x0253, r31
    223e:	e0 93 52 02 	sts	0x0252, r30
    2242:	cf 01       	movw	r24, r30
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	1f 91       	pop	r17
    224a:	0f 91       	pop	r16
    224c:	08 95       	ret

0000224e <puts>:
    224e:	0f 93       	push	r16
    2250:	1f 93       	push	r17
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
    2256:	e0 91 50 02 	lds	r30, 0x0250
    225a:	f0 91 51 02 	lds	r31, 0x0251
    225e:	23 81       	ldd	r18, Z+3	; 0x03
    2260:	21 ff       	sbrs	r18, 1
    2262:	1b c0       	rjmp	.+54     	; 0x229a <puts+0x4c>
    2264:	ec 01       	movw	r28, r24
    2266:	00 e0       	ldi	r16, 0x00	; 0
    2268:	10 e0       	ldi	r17, 0x00	; 0
    226a:	89 91       	ld	r24, Y+
    226c:	60 91 50 02 	lds	r22, 0x0250
    2270:	70 91 51 02 	lds	r23, 0x0251
    2274:	db 01       	movw	r26, r22
    2276:	18 96       	adiw	r26, 0x08	; 8
    2278:	ed 91       	ld	r30, X+
    227a:	fc 91       	ld	r31, X
    227c:	19 97       	sbiw	r26, 0x09	; 9
    227e:	88 23       	and	r24, r24
    2280:	31 f0       	breq	.+12     	; 0x228e <puts+0x40>
    2282:	09 95       	icall
    2284:	89 2b       	or	r24, r25
    2286:	89 f3       	breq	.-30     	; 0x226a <puts+0x1c>
    2288:	0f ef       	ldi	r16, 0xFF	; 255
    228a:	1f ef       	ldi	r17, 0xFF	; 255
    228c:	ee cf       	rjmp	.-36     	; 0x226a <puts+0x1c>
    228e:	8a e0       	ldi	r24, 0x0A	; 10
    2290:	09 95       	icall
    2292:	89 2b       	or	r24, r25
    2294:	11 f4       	brne	.+4      	; 0x229a <puts+0x4c>
    2296:	c8 01       	movw	r24, r16
    2298:	02 c0       	rjmp	.+4      	; 0x229e <puts+0x50>
    229a:	8f ef       	ldi	r24, 0xFF	; 255
    229c:	9f ef       	ldi	r25, 0xFF	; 255
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	1f 91       	pop	r17
    22a4:	0f 91       	pop	r16
    22a6:	08 95       	ret

000022a8 <calloc>:
    22a8:	0f 93       	push	r16
    22aa:	1f 93       	push	r17
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	86 9f       	mul	r24, r22
    22b2:	80 01       	movw	r16, r0
    22b4:	87 9f       	mul	r24, r23
    22b6:	10 0d       	add	r17, r0
    22b8:	96 9f       	mul	r25, r22
    22ba:	10 0d       	add	r17, r0
    22bc:	11 24       	eor	r1, r1
    22be:	c8 01       	movw	r24, r16
    22c0:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <malloc>
    22c4:	ec 01       	movw	r28, r24
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	29 f0       	breq	.+10     	; 0x22d4 <calloc+0x2c>
    22ca:	a8 01       	movw	r20, r16
    22cc:	60 e0       	ldi	r22, 0x00	; 0
    22ce:	70 e0       	ldi	r23, 0x00	; 0
    22d0:	0e 94 70 11 	call	0x22e0	; 0x22e0 <memset>
    22d4:	ce 01       	movw	r24, r28
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	1f 91       	pop	r17
    22dc:	0f 91       	pop	r16
    22de:	08 95       	ret

000022e0 <memset>:
    22e0:	dc 01       	movw	r26, r24
    22e2:	01 c0       	rjmp	.+2      	; 0x22e6 <memset+0x6>
    22e4:	6d 93       	st	X+, r22
    22e6:	41 50       	subi	r20, 0x01	; 1
    22e8:	50 40       	sbci	r21, 0x00	; 0
    22ea:	e0 f7       	brcc	.-8      	; 0x22e4 <memset+0x4>
    22ec:	08 95       	ret

000022ee <__prologue_saves__>:
    22ee:	2f 92       	push	r2
    22f0:	3f 92       	push	r3
    22f2:	4f 92       	push	r4
    22f4:	5f 92       	push	r5
    22f6:	6f 92       	push	r6
    22f8:	7f 92       	push	r7
    22fa:	8f 92       	push	r8
    22fc:	9f 92       	push	r9
    22fe:	af 92       	push	r10
    2300:	bf 92       	push	r11
    2302:	cf 92       	push	r12
    2304:	df 92       	push	r13
    2306:	ef 92       	push	r14
    2308:	ff 92       	push	r15
    230a:	0f 93       	push	r16
    230c:	1f 93       	push	r17
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	ca 1b       	sub	r28, r26
    2318:	db 0b       	sbc	r29, r27
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	de bf       	out	0x3e, r29	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	cd bf       	out	0x3d, r28	; 61
    2324:	09 94       	ijmp

00002326 <__epilogue_restores__>:
    2326:	2a 88       	ldd	r2, Y+18	; 0x12
    2328:	39 88       	ldd	r3, Y+17	; 0x11
    232a:	48 88       	ldd	r4, Y+16	; 0x10
    232c:	5f 84       	ldd	r5, Y+15	; 0x0f
    232e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2330:	7d 84       	ldd	r7, Y+13	; 0x0d
    2332:	8c 84       	ldd	r8, Y+12	; 0x0c
    2334:	9b 84       	ldd	r9, Y+11	; 0x0b
    2336:	aa 84       	ldd	r10, Y+10	; 0x0a
    2338:	b9 84       	ldd	r11, Y+9	; 0x09
    233a:	c8 84       	ldd	r12, Y+8	; 0x08
    233c:	df 80       	ldd	r13, Y+7	; 0x07
    233e:	ee 80       	ldd	r14, Y+6	; 0x06
    2340:	fd 80       	ldd	r15, Y+5	; 0x05
    2342:	0c 81       	ldd	r16, Y+4	; 0x04
    2344:	1b 81       	ldd	r17, Y+3	; 0x03
    2346:	aa 81       	ldd	r26, Y+2	; 0x02
    2348:	b9 81       	ldd	r27, Y+1	; 0x01
    234a:	ce 0f       	add	r28, r30
    234c:	d1 1d       	adc	r29, r1
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	de bf       	out	0x3e, r29	; 62
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	cd bf       	out	0x3d, r28	; 61
    2358:	ed 01       	movw	r28, r26
    235a:	08 95       	ret

0000235c <_exit>:
    235c:	f8 94       	cli

0000235e <__stop_program>:
    235e:	ff cf       	rjmp	.-2      	; 0x235e <__stop_program>

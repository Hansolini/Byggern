
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014c  00800100  00002950  000029e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002950  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080024c  0080024c  00002b30  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002b30  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000288  00000000  00000000  00002b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002c33  00000000  00000000  00002e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000efc  00000000  00000000  00005a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d14  00000000  00000000  00006943  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007a8  00000000  00000000  00007658  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007fc  00000000  00000000  00007e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002095  00000000  00000000  000085fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000230  00000000  00000000  0000a691  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__ctors_end>
       4:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       8:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      10:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      14:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      18:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      1c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      20:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      24:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      28:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      2c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      30:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      34:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      38:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      3c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      40:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      44:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      48:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      4c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      50:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      54:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      58:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      5c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      60:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      64:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      68:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      6c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	00 5c       	subi	r16, 0xC0	; 192
      a4:	00 00       	nop
      a6:	0c 00       	.word	0x000c	; ????
      a8:	0c 00       	.word	0x000c	; ????
      aa:	7c 28       	or	r7, r12
      ac:	7c 28       	or	r7, r12
      ae:	58 dc       	rcall	.-1872   	; 0xfffff960 <__eeprom_end+0xff7ef960>
      b0:	68 00       	.word	0x0068	; ????
      b2:	24 10       	cpse	r2, r4
      b4:	48 00       	.word	0x0048	; ????
      b6:	28 54       	subi	r18, 0x48	; 72
      b8:	28 40       	sbci	r18, 0x08	; 8
      ba:	00 0c       	add	r0, r0
      bc:	00 00       	nop
      be:	00 78       	andi	r16, 0x80	; 128
      c0:	84 00       	.word	0x0084	; ????
      c2:	84 78       	andi	r24, 0x84	; 132
      c4:	00 00       	nop
      c6:	54 38       	cpi	r21, 0x84	; 132
      c8:	54 00       	.word	0x0054	; ????
      ca:	10 7c       	andi	r17, 0xC0	; 192
      cc:	10 00       	.word	0x0010	; ????
      ce:	80 40       	sbci	r24, 0x00	; 0
      d0:	00 00       	nop
      d2:	10 10       	cpse	r1, r0
      d4:	10 00       	.word	0x0010	; ????
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	00 00       	nop
      da:	60 10       	cpse	r6, r0
      dc:	0c 00       	.word	0x000c	; ????
      de:	38 54       	subi	r19, 0x48	; 72
      e0:	38 00       	.word	0x0038	; ????
      e2:	48 7c       	andi	r20, 0xC8	; 200
      e4:	40 00       	.word	0x0040	; ????
      e6:	48 64       	ori	r20, 0x48	; 72
      e8:	58 00       	.word	0x0058	; ????
      ea:	44 54       	subi	r20, 0x44	; 68
      ec:	2c 00       	.word	0x002c	; ????
      ee:	1c 10       	cpse	r1, r12
      f0:	7c 00       	.word	0x007c	; ????
      f2:	5c 54       	subi	r21, 0x4C	; 76
      f4:	24 00       	.word	0x0024	; ????
      f6:	38 54       	subi	r19, 0x48	; 72
      f8:	24 00       	.word	0x0024	; ????
      fa:	64 14       	cp	r6, r4
      fc:	0c 00       	.word	0x000c	; ????
      fe:	68 54       	subi	r22, 0x48	; 72
     100:	2c 00       	.word	0x002c	; ????
     102:	48 54       	subi	r20, 0x48	; 72
     104:	38 00       	.word	0x0038	; ????
     106:	00 48       	sbci	r16, 0x80	; 128
     108:	00 00       	nop
     10a:	80 48       	sbci	r24, 0x80	; 128
     10c:	00 00       	nop
     10e:	10 28       	or	r1, r0
     110:	44 00       	.word	0x0044	; ????
     112:	28 28       	or	r2, r8
     114:	28 00       	.word	0x0028	; ????
     116:	44 28       	or	r4, r4
     118:	10 00       	.word	0x0010	; ????
     11a:	04 54       	subi	r16, 0x44	; 68
     11c:	08 00       	.word	0x0008	; ????
     11e:	38 44       	sbci	r19, 0x48	; 72
     120:	5c 00       	.word	0x005c	; ????
     122:	78 14       	cp	r7, r8
     124:	78 00       	.word	0x0078	; ????
     126:	7c 54       	subi	r23, 0x4C	; 76
     128:	28 00       	.word	0x0028	; ????
     12a:	38 44       	sbci	r19, 0x48	; 72
     12c:	28 00       	.word	0x0028	; ????
     12e:	7c 44       	sbci	r23, 0x4C	; 76
     130:	38 00       	.word	0x0038	; ????
     132:	7c 54       	subi	r23, 0x4C	; 76
     134:	44 00       	.word	0x0044	; ????
     136:	7c 14       	cp	r7, r12
     138:	04 00       	.word	0x0004	; ????
     13a:	38 44       	sbci	r19, 0x48	; 72
     13c:	74 00       	.word	0x0074	; ????
     13e:	7c 10       	cpse	r7, r12
     140:	7c 00       	.word	0x007c	; ????
     142:	44 7c       	andi	r20, 0xC4	; 196
     144:	44 00       	.word	0x0044	; ????
     146:	20 40       	sbci	r18, 0x00	; 0
     148:	3c 00       	.word	0x003c	; ????
     14a:	7c 10       	cpse	r7, r12
     14c:	6c 00       	.word	0x006c	; ????
     14e:	7c 40       	sbci	r23, 0x0C	; 12
     150:	40 00       	.word	0x0040	; ????
     152:	7c 18       	sub	r7, r12
     154:	7c 00       	.word	0x007c	; ????
     156:	78 10       	cpse	r7, r8
     158:	3c 00       	.word	0x003c	; ????
     15a:	38 44       	sbci	r19, 0x48	; 72
     15c:	38 00       	.word	0x0038	; ????
     15e:	7c 14       	cp	r7, r12
     160:	08 00       	.word	0x0008	; ????
     162:	38 44       	sbci	r19, 0x48	; 72
     164:	b8 00       	.word	0x00b8	; ????
     166:	7c 14       	cp	r7, r12
     168:	68 00       	.word	0x0068	; ????
     16a:	48 54       	subi	r20, 0x48	; 72
     16c:	24 00       	.word	0x0024	; ????
     16e:	04 7c       	andi	r16, 0xC4	; 196
     170:	04 00       	.word	0x0004	; ????
     172:	7c 40       	sbci	r23, 0x0C	; 12
     174:	7c 00       	.word	0x007c	; ????
     176:	3c 60       	ori	r19, 0x0C	; 12
     178:	3c 00       	.word	0x003c	; ????
     17a:	7c 30       	cpi	r23, 0x0C	; 12
     17c:	7c 00       	.word	0x007c	; ????
     17e:	6c 10       	cpse	r6, r12
     180:	6c 00       	.word	0x006c	; ????
     182:	0c 70       	andi	r16, 0x0C	; 12
     184:	0c 00       	.word	0x000c	; ????
     186:	64 54       	subi	r22, 0x44	; 68
     188:	4c 00       	.word	0x004c	; ????
     18a:	00 7c       	andi	r16, 0xC0	; 192
     18c:	44 00       	.word	0x0044	; ????
     18e:	0c 10       	cpse	r0, r12
     190:	60 00       	.word	0x0060	; ????
     192:	44 7c       	andi	r20, 0xC4	; 196
     194:	00 00       	nop
     196:	08 04       	cpc	r0, r8
     198:	08 00       	.word	0x0008	; ????
     19a:	80 80       	ld	r8, Z
     19c:	80 00       	.word	0x0080	; ????
     19e:	00 04       	cpc	r0, r0
     1a0:	08 00       	.word	0x0008	; ????
     1a2:	30 48       	sbci	r19, 0x80	; 128
     1a4:	78 00       	.word	0x0078	; ????
     1a6:	7c 48       	sbci	r23, 0x8C	; 140
     1a8:	30 00       	.word	0x0030	; ????
     1aa:	30 48       	sbci	r19, 0x80	; 128
     1ac:	48 00       	.word	0x0048	; ????
     1ae:	30 48       	sbci	r19, 0x80	; 128
     1b0:	7c 00       	.word	0x007c	; ????
     1b2:	30 68       	ori	r19, 0x80	; 128
     1b4:	50 00       	.word	0x0050	; ????
     1b6:	10 78       	andi	r17, 0x80	; 128
     1b8:	14 00       	.word	0x0014	; ????
     1ba:	90 a8       	ldd	r9, Z+48	; 0x30
     1bc:	78 00       	.word	0x0078	; ????
     1be:	7c 08       	sbc	r7, r12
     1c0:	70 00       	.word	0x0070	; ????
     1c2:	50 74       	andi	r21, 0x40	; 64
     1c4:	40 00       	.word	0x0040	; ????
     1c6:	80 80       	ld	r8, Z
     1c8:	74 00       	.word	0x0074	; ????
     1ca:	7c 10       	cpse	r7, r12
     1cc:	68 00       	.word	0x0068	; ????
     1ce:	44 7c       	andi	r20, 0xC4	; 196
     1d0:	40 00       	.word	0x0040	; ????
     1d2:	78 10       	cpse	r7, r8
     1d4:	78 00       	.word	0x0078	; ????
     1d6:	78 08       	sbc	r7, r8
     1d8:	70 00       	.word	0x0070	; ????
     1da:	30 48       	sbci	r19, 0x80	; 128
     1dc:	30 00       	.word	0x0030	; ????
     1de:	f8 28       	or	r15, r8
     1e0:	10 00       	.word	0x0010	; ????
     1e2:	30 48       	sbci	r19, 0x80	; 128
     1e4:	f8 00       	.word	0x00f8	; ????
     1e6:	78 10       	cpse	r7, r8
     1e8:	08 00       	.word	0x0008	; ????
     1ea:	50 58       	subi	r21, 0x80	; 128
     1ec:	28 00       	.word	0x0028	; ????
     1ee:	08 3c       	cpi	r16, 0xC8	; 200
     1f0:	48 00       	.word	0x0048	; ????
     1f2:	38 40       	sbci	r19, 0x08	; 8
     1f4:	78 00       	.word	0x0078	; ????
     1f6:	38 40       	sbci	r19, 0x08	; 8
     1f8:	38 00       	.word	0x0038	; ????
     1fa:	78 20       	and	r7, r8
     1fc:	78 00       	.word	0x0078	; ????
     1fe:	48 30       	cpi	r20, 0x08	; 8
     200:	48 00       	.word	0x0048	; ????
     202:	98 a0       	ldd	r9, Y+32	; 0x20
     204:	78 00       	.word	0x0078	; ????
     206:	48 68       	ori	r20, 0x88	; 136
     208:	58 00       	.word	0x0058	; ????
     20a:	10 78       	andi	r17, 0x80	; 128
     20c:	84 00       	.word	0x0084	; ????
     20e:	00 7c       	andi	r16, 0xC0	; 192
     210:	00 00       	nop
     212:	84 78       	andi	r24, 0x84	; 132
     214:	10 00       	.word	0x0010	; ????
     216:	08 04       	cpc	r0, r8
     218:	08 04       	cpc	r0, r8

0000021a <font5>:
     21a:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     22a:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     23a:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     24a:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     25a:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     26a:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     27a:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     28a:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     29a:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     2aa:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     2ba:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     2ca:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2da:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2ea:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2fa:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     30a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     31a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     32a:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     33a:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     34a:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     35a:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     36a:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     37a:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     38a:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     39a:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     3aa:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     3ba:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     3ca:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3da:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3ea:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003f5 <font8>:
	...
     3fd:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     40d:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     41d:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     42d:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     43d:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     44d:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     45d:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     46d:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     47d:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     48d:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     49d:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     4ad:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     4bd:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     4cd:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4dd:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4ed:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4fd:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     50d:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     51d:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     52d:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     53d:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     54d:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     55d:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     56d:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     57d:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     58d:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     59d:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     5ad:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     5bd:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     5cd:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5dd:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5ed:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5fd:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     60d:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     61d:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     62d:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     63d:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     64d:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     65d:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     66d:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     67d:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     68d:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     69d:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     6ad:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     6bd:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     6cd:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6dd:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006ee <__ctors_end>:
     6ee:	11 24       	eor	r1, r1
     6f0:	1f be       	out	0x3f, r1	; 63
     6f2:	cf ef       	ldi	r28, 0xFF	; 255
     6f4:	d4 e0       	ldi	r29, 0x04	; 4
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	cd bf       	out	0x3d, r28	; 61

000006fa <__do_copy_data>:
     6fa:	12 e0       	ldi	r17, 0x02	; 2
     6fc:	a0 e0       	ldi	r26, 0x00	; 0
     6fe:	b1 e0       	ldi	r27, 0x01	; 1
     700:	e0 e5       	ldi	r30, 0x50	; 80
     702:	f9 e2       	ldi	r31, 0x29	; 41
     704:	02 c0       	rjmp	.+4      	; 0x70a <__do_copy_data+0x10>
     706:	05 90       	lpm	r0, Z+
     708:	0d 92       	st	X+, r0
     70a:	ac 34       	cpi	r26, 0x4C	; 76
     70c:	b1 07       	cpc	r27, r17
     70e:	d9 f7       	brne	.-10     	; 0x706 <__do_copy_data+0xc>

00000710 <__do_clear_bss>:
     710:	22 e0       	ldi	r18, 0x02	; 2
     712:	ac e4       	ldi	r26, 0x4C	; 76
     714:	b2 e0       	ldi	r27, 0x02	; 2
     716:	01 c0       	rjmp	.+2      	; 0x71a <.do_clear_bss_start>

00000718 <.do_clear_bss_loop>:
     718:	1d 92       	st	X+, r1

0000071a <.do_clear_bss_start>:
     71a:	a4 36       	cpi	r26, 0x64	; 100
     71c:	b2 07       	cpc	r27, r18
     71e:	e1 f7       	brne	.-8      	; 0x718 <.do_clear_bss_loop>
     720:	0e 94 aa 05 	call	0xb54	; 0xb54 <main>
     724:	0c 94 a6 14 	jmp	0x294c	; 0x294c <_exit>

00000728 <__bad_interrupt>:
     728:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000072c <adc_init>:
     72c:	30 98       	cbi	0x06, 0	; 6
     72e:	08 95       	ret

00000730 <adc_read>:
     730:	88 37       	cpi	r24, 0x78	; 120
     732:	21 f4       	brne	.+8      	; 0x73c <adc_read+0xc>
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	80 93 00 14 	sts	0x1400, r24
     73a:	11 c0       	rjmp	.+34     	; 0x75e <adc_read+0x2e>
     73c:	89 37       	cpi	r24, 0x79	; 121
     73e:	21 f4       	brne	.+8      	; 0x748 <adc_read+0x18>
     740:	85 e0       	ldi	r24, 0x05	; 5
     742:	80 93 00 14 	sts	0x1400, r24
     746:	0b c0       	rjmp	.+22     	; 0x75e <adc_read+0x2e>
     748:	8c 36       	cpi	r24, 0x6C	; 108
     74a:	21 f4       	brne	.+8      	; 0x754 <adc_read+0x24>
     74c:	86 e0       	ldi	r24, 0x06	; 6
     74e:	80 93 00 14 	sts	0x1400, r24
     752:	05 c0       	rjmp	.+10     	; 0x75e <adc_read+0x2e>
     754:	82 37       	cpi	r24, 0x72	; 114
     756:	19 f4       	brne	.+6      	; 0x75e <adc_read+0x2e>
     758:	87 e0       	ldi	r24, 0x07	; 7
     75a:	80 93 00 14 	sts	0x1400, r24
     75e:	28 99       	sbic	0x05, 0	; 5
     760:	fe cf       	rjmp	.-4      	; 0x75e <adc_read+0x2e>
     762:	80 91 00 14 	lds	r24, 0x1400
     766:	08 95       	ret

00000768 <can_init>:

#include "mcp.h"
#include "can.h"
#include "MCP2515.h"

void can_init(int mode){
     768:	cf 93       	push	r28
     76a:	c8 2f       	mov	r28, r24
	mcp_bit_modify(0x2B,0b00011100, 0b00000000); //Disables interrupts from empty buffers
     76c:	40 e0       	ldi	r20, 0x00	; 0
     76e:	6c e1       	ldi	r22, 0x1C	; 28
     770:	8b e2       	ldi	r24, 0x2B	; 43
     772:	0e 94 5f 06 	call	0xcbe	; 0xcbe <mcp_bit_modify>
	mcp_bit_modify(MCP_RXB0CTRL, 0b01100000, 0b01100000); //Disable filters
     776:	40 e6       	ldi	r20, 0x60	; 96
     778:	60 e6       	ldi	r22, 0x60	; 96
     77a:	80 e6       	ldi	r24, 0x60	; 96
     77c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <mcp_bit_modify>
	mcp_bit_modify(MCP_CANCTRL, 0xFF, mode); //Sets operation mode 
     780:	4c 2f       	mov	r20, r28
     782:	6f ef       	ldi	r22, 0xFF	; 255
     784:	8f e0       	ldi	r24, 0x0F	; 15
     786:	0e 94 5f 06 	call	0xcbe	; 0xcbe <mcp_bit_modify>
	
	//TODO: Filter initialization
	//NOTES: CANINTE.TXInE
	//priority bits? TXP
}
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <can_transmit>:

void can_transmit(Msg msg){
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	00 d0       	rcall	.+0      	; 0x79c <can_transmit+0xe>
     79c:	00 d0       	rcall	.+0      	; 0x79e <can_transmit+0x10>
     79e:	00 d0       	rcall	.+0      	; 0x7a0 <can_transmit+0x12>
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	49 83       	std	Y+1, r20	; 0x01
     7a6:	5a 83       	std	Y+2, r21	; 0x02
     7a8:	6b 83       	std	Y+3, r22	; 0x03
     7aa:	7c 83       	std	Y+4, r23	; 0x04
     7ac:	8d 83       	std	Y+5, r24	; 0x05
     7ae:	9e 83       	std	Y+6, r25	; 0x06
     7b0:	09 81       	ldd	r16, Y+1	; 0x01
     7b2:	1a 81       	ldd	r17, Y+2	; 0x02
     7b4:	ed 80       	ldd	r14, Y+5	; 0x05
     7b6:	fe 80       	ldd	r15, Y+6	; 0x06
	int buffer = 2;
	
	mcp_write(0x31 + 0x10*buffer, msg.id >> 3);  //TXBnSIDH
     7b8:	b8 01       	movw	r22, r16
     7ba:	75 95       	asr	r23
     7bc:	67 95       	ror	r22
     7be:	75 95       	asr	r23
     7c0:	67 95       	ror	r22
     7c2:	75 95       	asr	r23
     7c4:	67 95       	ror	r22
     7c6:	81 e5       	ldi	r24, 0x51	; 81
     7c8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <mcp_write>
	mcp_write(0x32 + 0x10*buffer, msg.id << 5);  //TXBnSIDL
     7cc:	60 2f       	mov	r22, r16
     7ce:	62 95       	swap	r22
     7d0:	66 0f       	add	r22, r22
     7d2:	60 7e       	andi	r22, 0xE0	; 224
     7d4:	82 e5       	ldi	r24, 0x52	; 82
     7d6:	0e 94 3d 06 	call	0xc7a	; 0xc7a <mcp_write>
	mcp_write(0x35 + 0x10*buffer, msg.length); //TXBnDLC	//RTR will be set to 0 (Data Frame message)
     7da:	6e 2d       	mov	r22, r14
     7dc:	85 e5       	ldi	r24, 0x55	; 85
     7de:	0e 94 3d 06 	call	0xc7a	; 0xc7a <mcp_write>
	
	for(int i = 0; i < msg.length; i++){
     7e2:	1e 14       	cp	r1, r14
     7e4:	1f 04       	cpc	r1, r15
     7e6:	84 f4       	brge	.+32     	; 0x808 <can_transmit+0x7a>
     7e8:	00 e0       	ldi	r16, 0x00	; 0
     7ea:	10 e0       	ldi	r17, 0x00	; 0
		mcp_write(0x36 + 0x10*buffer + i, msg.data[i]); //TXBnDm
     7ec:	eb 81       	ldd	r30, Y+3	; 0x03
     7ee:	fc 81       	ldd	r31, Y+4	; 0x04
     7f0:	e0 0f       	add	r30, r16
     7f2:	f1 1f       	adc	r31, r17
     7f4:	60 81       	ld	r22, Z
     7f6:	86 e5       	ldi	r24, 0x56	; 86
     7f8:	80 0f       	add	r24, r16
     7fa:	0e 94 3d 06 	call	0xc7a	; 0xc7a <mcp_write>
	
	mcp_write(0x31 + 0x10*buffer, msg.id >> 3);  //TXBnSIDH
	mcp_write(0x32 + 0x10*buffer, msg.id << 5);  //TXBnSIDL
	mcp_write(0x35 + 0x10*buffer, msg.length); //TXBnDLC	//RTR will be set to 0 (Data Frame message)
	
	for(int i = 0; i < msg.length; i++){
     7fe:	0f 5f       	subi	r16, 0xFF	; 255
     800:	1f 4f       	sbci	r17, 0xFF	; 255
     802:	0e 15       	cp	r16, r14
     804:	1f 05       	cpc	r17, r15
     806:	91 f7       	brne	.-28     	; 0x7ec <can_transmit+0x5e>
		mcp_write(0x36 + 0x10*buffer + i, msg.data[i]); //TXBnDm
	}
	
	mcp_request_to_send(buffer == 2, buffer == 1, buffer == 0);	//Request to send - sending will start as soon as the bus is clear
     808:	40 e0       	ldi	r20, 0x00	; 0
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 4f 06 	call	0xc9e	; 0xc9e <mcp_request_to_send>
	
	//TODO: (maybe) print error message?
	//TXBnCTRL.TXERR and the CANINTF.MERRF bits will be set and an interrupt will be generated on the INT pin if the CANINTE.MERRE bit is set
}
     818:	26 96       	adiw	r28, 0x06	; 6
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	08 95       	ret

00000832 <can_receive>:

Msg can_receive(){
     832:	af 92       	push	r10
     834:	bf 92       	push	r11
     836:	cf 92       	push	r12
     838:	df 92       	push	r13
     83a:	ef 92       	push	r14
     83c:	ff 92       	push	r15
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	00 d0       	rcall	.+0      	; 0x848 <can_receive+0x16>
     848:	00 d0       	rcall	.+0      	; 0x84a <can_receive+0x18>
     84a:	00 d0       	rcall	.+0      	; 0x84c <can_receive+0x1a>
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
	int buffer = 0; //n = 1 or 2
	
	Msg msg;
	msg.id = ((int)mcp_read(0x61 + 0x10*buffer) << 3) | (mcp_read(0x62 + 0x10*buffer) >> 5); //Put together RXBnSIDH and RXBnSIDL
     850:	81 e6       	ldi	r24, 0x61	; 97
     852:	0e 94 2e 06 	call	0xc5c	; 0xc5c <mcp_read>
     856:	a8 2e       	mov	r10, r24
     858:	82 e6       	ldi	r24, 0x62	; 98
     85a:	0e 94 2e 06 	call	0xc5c	; 0xc5c <mcp_read>
     85e:	82 95       	swap	r24
     860:	86 95       	lsr	r24
     862:	87 70       	andi	r24, 0x07	; 7
     864:	b1 2c       	mov	r11, r1
     866:	aa 0c       	add	r10, r10
     868:	bb 1c       	adc	r11, r11
     86a:	aa 0c       	add	r10, r10
     86c:	bb 1c       	adc	r11, r11
     86e:	aa 0c       	add	r10, r10
     870:	bb 1c       	adc	r11, r11
     872:	a8 2a       	or	r10, r24
	msg.length = mcp_read(0x65 + 0x10*buffer) & 0b00001111; //RXBnDLC
     874:	85 e6       	ldi	r24, 0x65	; 101
     876:	0e 94 2e 06 	call	0xc5c	; 0xc5c <mcp_read>
     87a:	8f 70       	andi	r24, 0x0F	; 15
     87c:	c8 2e       	mov	r12, r24
     87e:	d1 2c       	mov	r13, r1
	msg.data[msg.length];
	
	for(int i = 0; i < msg.length; i++){
     880:	1c 14       	cp	r1, r12
     882:	1d 04       	cpc	r1, r13
     884:	84 f4       	brge	.+32     	; 0x8a6 <can_receive+0x74>
     886:	e1 2c       	mov	r14, r1
     888:	f1 2c       	mov	r15, r1
     88a:	00 e0       	ldi	r16, 0x00	; 0
     88c:	10 e0       	ldi	r17, 0x00	; 0
		msg.data[i] = mcp_read(0x66 + 0x10*buffer + i);
     88e:	86 e6       	ldi	r24, 0x66	; 102
     890:	80 0f       	add	r24, r16
     892:	0e 94 2e 06 	call	0xc5c	; 0xc5c <mcp_read>
     896:	f7 01       	movw	r30, r14
     898:	81 93       	st	Z+, r24
     89a:	7f 01       	movw	r14, r30
	Msg msg;
	msg.id = ((int)mcp_read(0x61 + 0x10*buffer) << 3) | (mcp_read(0x62 + 0x10*buffer) >> 5); //Put together RXBnSIDH and RXBnSIDL
	msg.length = mcp_read(0x65 + 0x10*buffer) & 0b00001111; //RXBnDLC
	msg.data[msg.length];
	
	for(int i = 0; i < msg.length; i++){
     89c:	0f 5f       	subi	r16, 0xFF	; 255
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	0c 15       	cp	r16, r12
     8a2:	1d 05       	cpc	r17, r13
     8a4:	a4 f3       	brlt	.-24     	; 0x88e <can_receive+0x5c>
		msg.data[i] = mcp_read(0x66 + 0x10*buffer + i);
	}
	
	mcp_bit_modify(0x2C, buffer + 1, 0);	//CANINTF - Sets RX0IF to 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	61 e0       	ldi	r22, 0x01	; 1
     8aa:	8c e2       	ldi	r24, 0x2C	; 44
     8ac:	0e 94 5f 06 	call	0xcbe	; 0xcbe <mcp_bit_modify>
	return msg;
     8b0:	ba 82       	std	Y+2, r11	; 0x02
     8b2:	a9 82       	std	Y+1, r10	; 0x01
     8b4:	1c 82       	std	Y+4, r1	; 0x04
     8b6:	1b 82       	std	Y+3, r1	; 0x03
     8b8:	de 82       	std	Y+6, r13	; 0x06
     8ba:	cd 82       	std	Y+5, r12	; 0x05
     8bc:	2a 2d       	mov	r18, r10
     8be:	3a 81       	ldd	r19, Y+2	; 0x02
     8c0:	5c 81       	ldd	r21, Y+4	; 0x04
     8c2:	6c 2d       	mov	r22, r12
     8c4:	7e 81       	ldd	r23, Y+6	; 0x06
	
	//TODO: Add something to read the standard identifier of the message received
	//use Msg type? Return Msg type and access data using "can_receive().data"?
}
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	26 96       	adiw	r28, 0x06	; 6
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	cd bf       	out	0x3d, r28	; 61
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	bf 90       	pop	r11
     8ea:	af 90       	pop	r10
     8ec:	08 95       	ret

000008ee <joy_init>:
int ymin = 0;
int ymean = 127;
int ymax = 255;

void joy_init(){
	clear_bit(DDRB,PB2);	//Set joystick button pin to input
     8ee:	ba 98       	cbi	0x17, 2	; 23
	set_bit(PORTB,PB2);		//Set the internal pull-up resistor needed for the button
     8f0:	c2 9a       	sbi	0x18, 2	; 24
     8f2:	08 95       	ret

000008f4 <joy_get_position>:
	oled_clear_screen();
	oled_print_string("Calibrated!",0,0,8,0);
	oled_refresh();
}

Position joy_get_position(){
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	00 d0       	rcall	.+0      	; 0x8fa <joy_get_position+0x6>
     8fa:	00 d0       	rcall	.+0      	; 0x8fc <joy_get_position+0x8>
     8fc:	00 d0       	rcall	.+0      	; 0x8fe <joy_get_position+0xa>
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
		x = adc_read('x');
     902:	88 e7       	ldi	r24, 0x78	; 120
     904:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	90 93 57 02 	sts	0x0257, r25
     90e:	80 93 56 02 	sts	0x0256, r24
		y = adc_read('y');
     912:	89 e7       	ldi	r24, 0x79	; 121
     914:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     918:	28 2f       	mov	r18, r24
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	30 93 59 02 	sts	0x0259, r19
     920:	20 93 58 02 	sts	0x0258, r18
		z = !test_bit(PINB, PB2);
     924:	e6 b3       	in	r30, 0x16	; 22
     926:	e6 95       	lsr	r30
     928:	e6 95       	lsr	r30
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	e8 27       	eor	r30, r24
     92e:	e1 70       	andi	r30, 0x01	; 1
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	e0 93 50 02 	sts	0x0250, r30
     936:	f0 93 51 02 	sts	0x0251, r31
		
		if (x > xmean){
     93a:	80 91 56 02 	lds	r24, 0x0256
     93e:	90 91 57 02 	lds	r25, 0x0257
     942:	40 91 0c 01 	lds	r20, 0x010C
     946:	50 91 0d 01 	lds	r21, 0x010D
     94a:	48 17       	cp	r20, r24
     94c:	59 07       	cpc	r21, r25
     94e:	b4 f4       	brge	.+44     	; 0x97c <joy_get_position+0x88>
			x = ((x - xmean) * 100) / (xmax - xmean);
     950:	bc 01       	movw	r22, r24
     952:	64 1b       	sub	r22, r20
     954:	75 0b       	sbc	r23, r21
     956:	a4 e6       	ldi	r26, 0x64	; 100
     958:	a6 9f       	mul	r26, r22
     95a:	c0 01       	movw	r24, r0
     95c:	a7 9f       	mul	r26, r23
     95e:	90 0d       	add	r25, r0
     960:	11 24       	eor	r1, r1
     962:	60 91 0a 01 	lds	r22, 0x010A
     966:	70 91 0b 01 	lds	r23, 0x010B
     96a:	64 1b       	sub	r22, r20
     96c:	75 0b       	sbc	r23, r21
     96e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <__divmodhi4>
     972:	70 93 57 02 	sts	0x0257, r23
     976:	60 93 56 02 	sts	0x0256, r22
     97a:	17 c0       	rjmp	.+46     	; 0x9aa <joy_get_position+0xb6>
		}
		else{
			x = ((x - xmean) * 100) / (xmean - xmin);
     97c:	bc 01       	movw	r22, r24
     97e:	64 1b       	sub	r22, r20
     980:	75 0b       	sbc	r23, r21
     982:	a4 e6       	ldi	r26, 0x64	; 100
     984:	a6 9f       	mul	r26, r22
     986:	c0 01       	movw	r24, r0
     988:	a7 9f       	mul	r26, r23
     98a:	90 0d       	add	r25, r0
     98c:	11 24       	eor	r1, r1
     98e:	60 91 4e 02 	lds	r22, 0x024E
     992:	70 91 4f 02 	lds	r23, 0x024F
     996:	da 01       	movw	r26, r20
     998:	a6 1b       	sub	r26, r22
     99a:	b7 0b       	sbc	r27, r23
     99c:	bd 01       	movw	r22, r26
     99e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <__divmodhi4>
     9a2:	70 93 57 02 	sts	0x0257, r23
     9a6:	60 93 56 02 	sts	0x0256, r22
		}
		if (y > ymean){
     9aa:	40 91 08 01 	lds	r20, 0x0108
     9ae:	50 91 09 01 	lds	r21, 0x0109
     9b2:	42 17       	cp	r20, r18
     9b4:	53 07       	cpc	r21, r19
     9b6:	ac f4       	brge	.+42     	; 0x9e2 <joy_get_position+0xee>
			y = ((y - ymean) * 100) / (ymax - ymean);
     9b8:	24 1b       	sub	r18, r20
     9ba:	35 0b       	sbc	r19, r21
     9bc:	64 e6       	ldi	r22, 0x64	; 100
     9be:	62 9f       	mul	r22, r18
     9c0:	c0 01       	movw	r24, r0
     9c2:	63 9f       	mul	r22, r19
     9c4:	90 0d       	add	r25, r0
     9c6:	11 24       	eor	r1, r1
     9c8:	60 91 06 01 	lds	r22, 0x0106
     9cc:	70 91 07 01 	lds	r23, 0x0107
     9d0:	64 1b       	sub	r22, r20
     9d2:	75 0b       	sbc	r23, r21
     9d4:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <__divmodhi4>
     9d8:	70 93 59 02 	sts	0x0259, r23
     9dc:	60 93 58 02 	sts	0x0258, r22
     9e0:	15 c0       	rjmp	.+42     	; 0xa0c <joy_get_position+0x118>
		}
		else{
			y = ((y - ymean)  * 100) / (ymean - ymin);
     9e2:	24 1b       	sub	r18, r20
     9e4:	35 0b       	sbc	r19, r21
     9e6:	64 e6       	ldi	r22, 0x64	; 100
     9e8:	62 9f       	mul	r22, r18
     9ea:	c0 01       	movw	r24, r0
     9ec:	63 9f       	mul	r22, r19
     9ee:	90 0d       	add	r25, r0
     9f0:	11 24       	eor	r1, r1
     9f2:	20 91 4c 02 	lds	r18, 0x024C
     9f6:	30 91 4d 02 	lds	r19, 0x024D
     9fa:	ba 01       	movw	r22, r20
     9fc:	62 1b       	sub	r22, r18
     9fe:	73 0b       	sbc	r23, r19
     a00:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <__divmodhi4>
     a04:	70 93 59 02 	sts	0x0259, r23
     a08:	60 93 58 02 	sts	0x0258, r22
		}
		
		Position pos;
		pos.x = x;
		pos.y = y;
     a0c:	40 91 58 02 	lds	r20, 0x0258
     a10:	80 91 59 02 	lds	r24, 0x0259
		pos.z = z;
		return pos;
     a14:	20 91 56 02 	lds	r18, 0x0256
     a18:	90 91 57 02 	lds	r25, 0x0257
     a1c:	29 83       	std	Y+1, r18	; 0x01
     a1e:	9a 83       	std	Y+2, r25	; 0x02
     a20:	4b 83       	std	Y+3, r20	; 0x03
     a22:	8c 83       	std	Y+4, r24	; 0x04
     a24:	ed 83       	std	Y+5, r30	; 0x05
     a26:	fe 83       	std	Y+6, r31	; 0x06
     a28:	39 2f       	mov	r19, r25
     a2a:	58 2f       	mov	r21, r24
     a2c:	6e 2f       	mov	r22, r30
     a2e:	7f 2f       	mov	r23, r31
}
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	26 96       	adiw	r28, 0x06	; 6
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	cd bf       	out	0x3d, r28	; 61
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	08 95       	ret

00000a46 <joy_get_position_polar>:

Position_polar joy_get_position_polar(){
     a46:	8f 92       	push	r8
     a48:	9f 92       	push	r9
     a4a:	af 92       	push	r10
     a4c:	bf 92       	push	r11
     a4e:	cf 92       	push	r12
     a50:	df 92       	push	r13
     a52:	ef 92       	push	r14
     a54:	ff 92       	push	r15
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	00 d0       	rcall	.+0      	; 0xa5c <joy_get_position_polar+0x16>
     a5c:	00 d0       	rcall	.+0      	; 0xa5e <joy_get_position_polar+0x18>
     a5e:	00 d0       	rcall	.+0      	; 0xa60 <joy_get_position_polar+0x1a>
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
	Position pos_cart = joy_get_position();
     a64:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <joy_get_position>
     a68:	29 83       	std	Y+1, r18	; 0x01
     a6a:	3a 83       	std	Y+2, r19	; 0x02
     a6c:	4b 83       	std	Y+3, r20	; 0x03
     a6e:	5c 83       	std	Y+4, r21	; 0x04
     a70:	89 80       	ldd	r8, Y+1	; 0x01
     a72:	9a 80       	ldd	r9, Y+2	; 0x02
     a74:	ab 80       	ldd	r10, Y+3	; 0x03
     a76:	bc 80       	ldd	r11, Y+4	; 0x04
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     a78:	b4 01       	movw	r22, r8
     a7a:	88 27       	eor	r24, r24
     a7c:	77 fd       	sbrc	r23, 7
     a7e:	80 95       	com	r24
     a80:	98 2f       	mov	r25, r24
     a82:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__floatsisf>
     a86:	6b 01       	movw	r12, r22
     a88:	7c 01       	movw	r14, r24
     a8a:	b5 01       	movw	r22, r10
     a8c:	88 27       	eor	r24, r24
     a8e:	77 fd       	sbrc	r23, 7
     a90:	80 95       	com	r24
     a92:	98 2f       	mov	r25, r24
     a94:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__floatsisf>
     a98:	a7 01       	movw	r20, r14
     a9a:	96 01       	movw	r18, r12
     a9c:	0e 94 af 0c 	call	0x195e	; 0x195e <atan2>
     aa0:	6b 01       	movw	r12, r22
     aa2:	7c 01       	movw	r14, r24
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     aa4:	88 9c       	mul	r8, r8
     aa6:	b0 01       	movw	r22, r0
     aa8:	89 9c       	mul	r8, r9
     aaa:	70 0d       	add	r23, r0
     aac:	70 0d       	add	r23, r0
     aae:	11 24       	eor	r1, r1
     ab0:	aa 9c       	mul	r10, r10
     ab2:	c0 01       	movw	r24, r0
     ab4:	ab 9c       	mul	r10, r11
     ab6:	90 0d       	add	r25, r0
     ab8:	90 0d       	add	r25, r0
     aba:	11 24       	eor	r1, r1
     abc:	68 0f       	add	r22, r24
     abe:	79 1f       	adc	r23, r25
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__floatunsisf>
     ac8:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <sqrt>
     acc:	4b 01       	movw	r8, r22
     ace:	5c 01       	movw	r10, r24
}

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     ad0:	20 ee       	ldi	r18, 0xE0	; 224
     ad2:	3e e2       	ldi	r19, 0x2E	; 46
     ad4:	45 e6       	ldi	r20, 0x65	; 101
     ad6:	52 e4       	ldi	r21, 0x42	; 66
     ad8:	c7 01       	movw	r24, r14
     ada:	b6 01       	movw	r22, r12
     adc:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__mulsf3>
     ae0:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__fixsfsi>
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
	return pos_pol;
     ae4:	6b 01       	movw	r12, r22

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     ae6:	c5 01       	movw	r24, r10
     ae8:	b4 01       	movw	r22, r8
     aea:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__fixsfsi>
	return pos_pol;
     aee:	7b 01       	movw	r14, r22
}
     af0:	c7 01       	movw	r24, r14
     af2:	b6 01       	movw	r22, r12
     af4:	26 96       	adiw	r28, 0x06	; 6
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	cd bf       	out	0x3d, r28	; 61
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	ff 90       	pop	r15
     b06:	ef 90       	pop	r14
     b08:	df 90       	pop	r13
     b0a:	cf 90       	pop	r12
     b0c:	bf 90       	pop	r11
     b0e:	af 90       	pop	r10
     b10:	9f 90       	pop	r9
     b12:	8f 90       	pop	r8
     b14:	08 95       	ret

00000b16 <joy_get_direction>:

Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
     b16:	0e 94 23 05 	call	0xa46	; 0xa46 <joy_get_position_polar>
     b1a:	9b 01       	movw	r18, r22
	
	if(pos_pol.amplitude > 80){
     b1c:	81 35       	cpi	r24, 0x51	; 81
     b1e:	91 05       	cpc	r25, r1
     b20:	7c f0       	brlt	.+30     	; 0xb40 <joy_get_direction+0x2a>
		if (pos_pol.angle > 135){
     b22:	68 38       	cpi	r22, 0x88	; 136
     b24:	71 05       	cpc	r23, r1
     b26:	74 f4       	brge	.+28     	; 0xb44 <joy_get_direction+0x2e>
			return LEFT;
		}
		else if(pos_pol.angle > 45){
     b28:	6e 32       	cpi	r22, 0x2E	; 46
     b2a:	71 05       	cpc	r23, r1
     b2c:	6c f4       	brge	.+26     	; 0xb48 <joy_get_direction+0x32>
			return UP;
		}
		else if(pos_pol.angle > -45){
     b2e:	24 3d       	cpi	r18, 0xD4	; 212
     b30:	8f ef       	ldi	r24, 0xFF	; 255
     b32:	38 07       	cpc	r19, r24
     b34:	5c f4       	brge	.+22     	; 0xb4c <joy_get_direction+0x36>
			return RIGHT;
		}
		else if(pos_pol.angle > -135){
     b36:	2a 37       	cpi	r18, 0x7A	; 122
     b38:	3f 4f       	sbci	r19, 0xFF	; 255
     b3a:	54 f0       	brlt	.+20     	; 0xb50 <joy_get_direction+0x3a>
			return DOWN;
     b3c:	83 e0       	ldi	r24, 0x03	; 3
     b3e:	08 95       	ret
		}
		else{
			return LEFT;
		}
	}
	return NEUTRAL;
     b40:	8f ef       	ldi	r24, 0xFF	; 255
     b42:	08 95       	ret
Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
	
	if(pos_pol.amplitude > 80){
		if (pos_pol.angle > 135){
			return LEFT;
     b44:	82 e0       	ldi	r24, 0x02	; 2
     b46:	08 95       	ret
		}
		else if(pos_pol.angle > 45){
			return UP;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	08 95       	ret
		}
		else if(pos_pol.angle > -45){
			return RIGHT;
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	08 95       	ret
		}
		else if(pos_pol.angle > -135){
			return DOWN;
		}
		else{
			return LEFT;
     b50:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	return NEUTRAL;
} 
     b52:	08 95       	ret

00000b54 <main>:
#include "menu.h"
#include "touch.h"
#include "MCP2515.h"

int main(void)
{
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	62 97       	sbiw	r28, 0x12	; 18
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	de bf       	out	0x3e, r29	; 62
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	cd bf       	out	0x3d, r28	; 61
	MCUCR |= (1<<SRE);	//Enable external memory
     b68:	85 b7       	in	r24, 0x35	; 53
     b6a:	80 68       	ori	r24, 0x80	; 128
     b6c:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     b6e:	80 b7       	in	r24, 0x30	; 48
     b70:	80 62       	ori	r24, 0x20	; 32
     b72:	80 bf       	out	0x30, r24	; 48
	
	uart_init(9600, NODE_1);
     b74:	61 e0       	ldi	r22, 0x01	; 1
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	80 e8       	ldi	r24, 0x80	; 128
     b7a:	95 e2       	ldi	r25, 0x25	; 37
     b7c:	0e 94 07 0c 	call	0x180e	; 0x180e <uart_init>
	adc_init();
     b80:	0e 94 96 03 	call	0x72c	; 0x72c <adc_init>
	oled_init();
     b84:	0e 94 c2 0a 	call	0x1584	; 0x1584 <oled_init>
	joy_init();
     b88:	0e 94 77 04 	call	0x8ee	; 0x8ee <joy_init>
	touch_init();
     b8c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <touch_init>
	menu_init();
     b90:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <menu_init>
	spi_master_init(NODE_1);
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <spi_master_init>
	mcp_init();
     b9c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <mcp_init>
	can_init(MODE_LOOPBACK); 
     ba0:	80 e4       	ldi	r24, 0x40	; 64
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 b4 03 	call	0x768	; 0x768 <can_init>
	
	//mcp_test();
	//sram_test();
	//can_test(); //Not working
	
	printf("\r\n%s\r\n", "New run");
     ba8:	88 e8       	ldi	r24, 0x88	; 136
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	9f 93       	push	r25
     bae:	8f 93       	push	r24
     bb0:	80 e9       	ldi	r24, 0x90	; 144
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	9f 93       	push	r25
     bb6:	8f 93       	push	r24
     bb8:	0e 94 c0 11 	call	0x2380	; 0x2380 <printf>
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
	while (1)
	{	
		Position position = joy_get_position();
		
		Msg msg;
		msg.id = 42;
     bc4:	0f 2e       	mov	r0, r31
     bc6:	fa e2       	ldi	r31, 0x2A	; 42
     bc8:	cf 2e       	mov	r12, r31
     bca:	f0 2d       	mov	r31, r0
     bcc:	a1 2c       	mov	r10, r1
		msg.length = sizeof(position);
     bce:	0f 2e       	mov	r0, r31
     bd0:	f6 e0       	ldi	r31, 0x06	; 6
     bd2:	df 2e       	mov	r13, r31
     bd4:	f0 2d       	mov	r31, r0
     bd6:	b1 2c       	mov	r11, r1
		msg.data = (char*) &position;
     bd8:	7e 01       	movw	r14, r28
     bda:	8d e0       	ldi	r24, 0x0D	; 13
     bdc:	e8 0e       	add	r14, r24
     bde:	f1 1c       	adc	r15, r1
		can_transmit(msg);
		
		//for loopback mode only:
		Position position_received = *(Position*)can_receive().data;
		printf("x:%4d y:%4d z:%4d\r", position_received.x,position_received.y,position_received.z);
     be0:	07 e9       	ldi	r16, 0x97	; 151
     be2:	11 e0       	ldi	r17, 0x01	; 1
	
	printf("\r\n%s\r\n", "New run");

	while (1)
	{	
		Position position = joy_get_position();
     be4:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <joy_get_position>
     be8:	2d 87       	std	Y+13, r18	; 0x0d
     bea:	3e 87       	std	Y+14, r19	; 0x0e
     bec:	4f 87       	std	Y+15, r20	; 0x0f
     bee:	58 8b       	std	Y+16, r21	; 0x10
     bf0:	69 8b       	std	Y+17, r22	; 0x11
     bf2:	7a 8b       	std	Y+18, r23	; 0x12
		
		Msg msg;
		msg.id = 42;
     bf4:	4c 2d       	mov	r20, r12
     bf6:	cf 82       	std	Y+7, r12	; 0x07
     bf8:	a8 86       	std	Y+8, r10	; 0x08
		msg.length = sizeof(position);
     bfa:	db 86       	std	Y+11, r13	; 0x0b
     bfc:	bc 86       	std	Y+12, r11	; 0x0c
		msg.data = (char*) &position;
     bfe:	6e 2d       	mov	r22, r14
     c00:	fa 86       	std	Y+10, r15	; 0x0a
     c02:	e9 86       	std	Y+9, r14	; 0x09
		can_transmit(msg);
     c04:	5a 2d       	mov	r21, r10
     c06:	7a 85       	ldd	r23, Y+10	; 0x0a
     c08:	8d 2d       	mov	r24, r13
     c0a:	9b 2d       	mov	r25, r11
     c0c:	0e 94 c7 03 	call	0x78e	; 0x78e <can_transmit>
		
		//for loopback mode only:
		Position position_received = *(Position*)can_receive().data;
     c10:	0e 94 19 04 	call	0x832	; 0x832 <can_receive>
     c14:	29 83       	std	Y+1, r18	; 0x01
     c16:	3a 83       	std	Y+2, r19	; 0x02
     c18:	4b 83       	std	Y+3, r20	; 0x03
     c1a:	5c 83       	std	Y+4, r21	; 0x04
     c1c:	6d 83       	std	Y+5, r22	; 0x05
     c1e:	7e 83       	std	Y+6, r23	; 0x06
     c20:	eb 81       	ldd	r30, Y+3	; 0x03
     c22:	fc 81       	ldd	r31, Y+4	; 0x04
		printf("x:%4d y:%4d z:%4d\r", position_received.x,position_received.y,position_received.z);
     c24:	85 81       	ldd	r24, Z+5	; 0x05
     c26:	8f 93       	push	r24
     c28:	84 81       	ldd	r24, Z+4	; 0x04
     c2a:	8f 93       	push	r24
     c2c:	83 81       	ldd	r24, Z+3	; 0x03
     c2e:	8f 93       	push	r24
     c30:	82 81       	ldd	r24, Z+2	; 0x02
     c32:	8f 93       	push	r24
     c34:	81 81       	ldd	r24, Z+1	; 0x01
     c36:	8f 93       	push	r24
     c38:	80 81       	ld	r24, Z
     c3a:	8f 93       	push	r24
     c3c:	1f 93       	push	r17
     c3e:	0f 93       	push	r16
     c40:	0e 94 c0 11 	call	0x2380	; 0x2380 <printf>
		*/
		
		
		//sending a string over CAN still doesn't seem to work

		menu_run_display();
     c44:	0e 94 4c 09 	call	0x1298	; 0x1298 <menu_run_display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 ef       	ldi	r25, 0xF0	; 240
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <main+0xf8>
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	c4 cf       	rjmp	.-120    	; 0xbe4 <main+0x90>

00000c5c <mcp_read>:
#include <avr/io.h>

#include "spi.h"
#include "MCP2515.h"

char mcp_read(char address){
     c5c:	cf 93       	push	r28
     c5e:	c8 2f       	mov	r28, r24
	clear_bit(PORTB, PB4);
     c60:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_READ);
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <spi_master_transmit>
	spi_master_transmit(address);
     c68:	8c 2f       	mov	r24, r28
     c6a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <spi_master_transmit>
	char data = spi_master_transmit(0x0); //0x0 = dummy value
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <spi_master_transmit>
	set_bit(PORTB,PB4);
     c74:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
     c76:	cf 91       	pop	r28
     c78:	08 95       	ret

00000c7a <mcp_write>:

void mcp_write(char address, char data){
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	d8 2f       	mov	r29, r24
     c80:	c6 2f       	mov	r28, r22
	clear_bit(PORTB, PB4);
     c82:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_WRITE);
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <spi_master_transmit>
	spi_master_transmit(address);
     c8a:	8d 2f       	mov	r24, r29
     c8c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <spi_master_transmit>
	spi_master_transmit(data);
     c90:	8c 2f       	mov	r24, r28
     c92:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <spi_master_transmit>
	set_bit(PORTB,PB4);
     c96:	c4 9a       	sbi	0x18, 4	; 24
}
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	08 95       	ret

00000c9e <mcp_request_to_send>:

void mcp_request_to_send(int TXB2, int TXB1, int TXB0){
	int command = 0b10000000 | TXB0 | (TXB1 << 1) | (TXB2 << 2);
	clear_bit(PORTB, PB4);
     c9e:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(data);
	set_bit(PORTB,PB4);
}

void mcp_request_to_send(int TXB2, int TXB1, int TXB0){
	int command = 0b10000000 | TXB0 | (TXB1 << 1) | (TXB2 << 2);
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	80 68       	ori	r24, 0x80	; 128
     caa:	48 2b       	or	r20, r24
     cac:	59 2b       	or	r21, r25
     cae:	cb 01       	movw	r24, r22
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
	clear_bit(PORTB, PB4);
	spi_master_transmit(command);
     cb4:	84 2b       	or	r24, r20
     cb6:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <spi_master_transmit>
	set_bit(PORTB, PB4);
     cba:	c4 9a       	sbi	0x18, 4	; 24
     cbc:	08 95       	ret

00000cbe <mcp_bit_modify>:
	char status = spi_master_transmit(0x00);
	set_bit(PORTB ,PB4);
	return status;
}

void mcp_bit_modify(char address, char mask, char data){
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	18 2f       	mov	r17, r24
     cc6:	d6 2f       	mov	r29, r22
     cc8:	c4 2f       	mov	r28, r20
	clear_bit(PORTB, PB4);
     cca:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_BITMOD);	
     ccc:	85 e0       	ldi	r24, 0x05	; 5
     cce:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <spi_master_transmit>
	spi_master_transmit(address);
     cd2:	81 2f       	mov	r24, r17
     cd4:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <spi_master_transmit>
	spi_master_transmit(mask);
     cd8:	8d 2f       	mov	r24, r29
     cda:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <spi_master_transmit>
	spi_master_transmit(data);
     cde:	8c 2f       	mov	r24, r28
     ce0:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <spi_master_transmit>
	set_bit(PORTB, PB4);
     ce4:	c4 9a       	sbi	0x18, 4	; 24
}
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	1f 91       	pop	r17
     cec:	08 95       	ret

00000cee <mcp_reset>:
		
void mcp_reset(){
	clear_bit(PORTB, PB4);
     cee:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_RESET);	
     cf0:	80 ec       	ldi	r24, 0xC0	; 192
     cf2:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <spi_master_transmit>
	set_bit(PORTB, PB4);
     cf6:	c4 9a       	sbi	0x18, 4	; 24
     cf8:	08 95       	ret

00000cfa <mcp_init>:
}
	
void mcp_init(){
	mcp_reset();
     cfa:	0e 94 77 06 	call	0xcee	; 0xcee <mcp_reset>
     cfe:	08 95       	ret

00000d00 <draw_list>:
	}
	

	return self;
}
Menu* draw_list(Menu* self){
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	7c 01       	movw	r14, r24

	for(int i = 0; i < self->num_of_entries; i++){
     d0e:	dc 01       	movw	r26, r24
     d10:	14 96       	adiw	r26, 0x04	; 4
     d12:	8d 91       	ld	r24, X+
     d14:	9c 91       	ld	r25, X
     d16:	15 97       	sbiw	r26, 0x05	; 5
     d18:	18 16       	cp	r1, r24
     d1a:	19 06       	cpc	r1, r25
     d1c:	e4 f4       	brge	.+56     	; 0xd56 <draw_list+0x56>
     d1e:	c0 e0       	ldi	r28, 0x00	; 0
     d20:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_string(self->entries[i],0,i,5,0);
     d22:	ce 01       	movw	r24, r28
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	d7 01       	movw	r26, r14
     d2a:	12 96       	adiw	r26, 0x02	; 2
     d2c:	ed 91       	ld	r30, X+
     d2e:	fc 91       	ld	r31, X
     d30:	13 97       	sbiw	r26, 0x03	; 3
     d32:	e8 0f       	add	r30, r24
     d34:	f9 1f       	adc	r31, r25
     d36:	00 e0       	ldi	r16, 0x00	; 0
     d38:	10 e0       	ldi	r17, 0x00	; 0
     d3a:	25 e0       	ldi	r18, 0x05	; 5
     d3c:	4c 2f       	mov	r20, r28
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	91 81       	ldd	r25, Z+1	; 0x01
     d44:	0e 94 4c 0a 	call	0x1498	; 0x1498 <oled_print_string>

	return self;
}
Menu* draw_list(Menu* self){

	for(int i = 0; i < self->num_of_entries; i++){
     d48:	21 96       	adiw	r28, 0x01	; 1
     d4a:	f7 01       	movw	r30, r14
     d4c:	84 81       	ldd	r24, Z+4	; 0x04
     d4e:	95 81       	ldd	r25, Z+5	; 0x05
     d50:	c8 17       	cp	r28, r24
     d52:	d9 07       	cpc	r29, r25
     d54:	34 f3       	brlt	.-52     	; 0xd22 <draw_list+0x22>
		oled_print_string(self->entries[i],0,i,5,0);
	}

	//Where to go next
	Direction dir = joy_get_direction();
     d56:	0e 94 8b 05 	call	0xb16	; 0xb16 <joy_get_direction>
	if(!joy_moved){//THIS IS NEW
     d5a:	20 91 52 02 	lds	r18, 0x0252
     d5e:	30 91 53 02 	lds	r19, 0x0253
     d62:	23 2b       	or	r18, r19
     d64:	d9 f4       	brne	.+54     	; 0xd9c <draw_list+0x9c>
		if((dir == LEFT) & (self->super_menu != NULL)){
     d66:	d7 01       	movw	r26, r14
     d68:	18 96       	adiw	r26, 0x08	; 8
     d6a:	2d 91       	ld	r18, X+
     d6c:	3c 91       	ld	r19, X
     d6e:	19 97       	sbiw	r26, 0x09	; 9
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	82 30       	cpi	r24, 0x02	; 2
     d74:	09 f0       	breq	.+2      	; 0xd78 <draw_list+0x78>
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	99 23       	and	r25, r25
     d7a:	39 f0       	breq	.+14     	; 0xd8a <draw_list+0x8a>
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	21 15       	cp	r18, r1
     d80:	31 05       	cpc	r19, r1
     d82:	09 f4       	brne	.+2      	; 0xd86 <draw_list+0x86>
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	81 11       	cpse	r24, r1
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <draw_list+0x8c>
     d8a:	97 01       	movw	r18, r14
			self = self->super_menu;
		}
		joy_moved = 1;		
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	90 93 53 02 	sts	0x0253, r25
     d94:	80 93 52 02 	sts	0x0252, r24
     d98:	79 01       	movw	r14, r18
     d9a:	06 c0       	rjmp	.+12     	; 0xda8 <draw_list+0xa8>
	}
	else if (dir == NEUTRAL){ //THIS IS NEW
     d9c:	8f 3f       	cpi	r24, 0xFF	; 255
     d9e:	21 f4       	brne	.+8      	; 0xda8 <draw_list+0xa8>
		joy_moved = 0;
     da0:	10 92 53 02 	sts	0x0253, r1
     da4:	10 92 52 02 	sts	0x0252, r1
	}
	
	return self;
}
     da8:	c7 01       	movw	r24, r14
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	08 95       	ret

00000db8 <draw_menu>:
	super->entries[super->num_of_entries - 1] = malloc(strlen(sub->name) * sizeof(char));
	super->entries[super->num_of_entries - 1] = sub->name;
}

//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
     db8:	ef 92       	push	r14
     dba:	ff 92       	push	r15
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	7c 01       	movw	r14, r24
	
	for(int i = 0; i < self->num_of_entries; i++){
     dc6:	dc 01       	movw	r26, r24
     dc8:	14 96       	adiw	r26, 0x04	; 4
     dca:	8d 91       	ld	r24, X+
     dcc:	9c 91       	ld	r25, X
     dce:	15 97       	sbiw	r26, 0x05	; 5
     dd0:	18 16       	cp	r1, r24
     dd2:	19 06       	cpc	r1, r25
     dd4:	e4 f4       	brge	.+56     	; 0xe0e <draw_menu+0x56>
     dd6:	c0 e0       	ldi	r28, 0x00	; 0
     dd8:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_string(self->entries[i],0,i,5,0);
     dda:	ce 01       	movw	r24, r28
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	d7 01       	movw	r26, r14
     de2:	12 96       	adiw	r26, 0x02	; 2
     de4:	ed 91       	ld	r30, X+
     de6:	fc 91       	ld	r31, X
     de8:	13 97       	sbiw	r26, 0x03	; 3
     dea:	e8 0f       	add	r30, r24
     dec:	f9 1f       	adc	r31, r25
     dee:	00 e0       	ldi	r16, 0x00	; 0
     df0:	10 e0       	ldi	r17, 0x00	; 0
     df2:	25 e0       	ldi	r18, 0x05	; 5
     df4:	4c 2f       	mov	r20, r28
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	91 81       	ldd	r25, Z+1	; 0x01
     dfc:	0e 94 4c 0a 	call	0x1498	; 0x1498 <oled_print_string>
}

//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
	
	for(int i = 0; i < self->num_of_entries; i++){
     e00:	21 96       	adiw	r28, 0x01	; 1
     e02:	f7 01       	movw	r30, r14
     e04:	84 81       	ldd	r24, Z+4	; 0x04
     e06:	95 81       	ldd	r25, Z+5	; 0x05
     e08:	c8 17       	cp	r28, r24
     e0a:	d9 07       	cpc	r29, r25
     e0c:	34 f3       	brlt	.-52     	; 0xdda <draw_menu+0x22>
		oled_print_string(self->entries[i],0,i,5,0);
	}
	oled_invert_rectangle(0,8*(self->cursor),64,8*((self->cursor) + 1));
     e0e:	d7 01       	movw	r26, r14
     e10:	16 96       	adiw	r26, 0x06	; 6
     e12:	2d 91       	ld	r18, X+
     e14:	3c 91       	ld	r19, X
     e16:	17 97       	sbiw	r26, 0x07	; 7
     e18:	2f 5f       	subi	r18, 0xFF	; 255
     e1a:	3f 4f       	sbci	r19, 0xFF	; 255
     e1c:	22 0f       	add	r18, r18
     e1e:	33 1f       	adc	r19, r19
     e20:	22 0f       	add	r18, r18
     e22:	33 1f       	adc	r19, r19
     e24:	22 0f       	add	r18, r18
     e26:	33 1f       	adc	r19, r19
     e28:	b9 01       	movw	r22, r18
     e2a:	68 50       	subi	r22, 0x08	; 8
     e2c:	71 09       	sbc	r23, r1
     e2e:	40 e4       	ldi	r20, 0x40	; 64
     e30:	50 e0       	ldi	r21, 0x00	; 0
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 ac 0b 	call	0x1758	; 0x1758 <oled_invert_rectangle>
	
	//Where to go next
	Direction dir = joy_get_direction();
     e3a:	0e 94 8b 05 	call	0xb16	; 0xb16 <joy_get_direction>
	if(1){	//THIS IS NEW
		if((dir == UP) & (self->cursor != 0)){
     e3e:	f7 01       	movw	r30, r14
     e40:	26 81       	ldd	r18, Z+6	; 0x06
     e42:	37 81       	ldd	r19, Z+7	; 0x07
     e44:	91 e0       	ldi	r25, 0x01	; 1
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	09 f0       	breq	.+2      	; 0xe4c <draw_menu+0x94>
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	99 23       	and	r25, r25
     e4e:	09 f4       	brne	.+2      	; 0xe52 <draw_menu+0x9a>
     e50:	4f c0       	rjmp	.+158    	; 0xef0 <draw_menu+0x138>
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	21 15       	cp	r18, r1
     e56:	31 05       	cpc	r19, r1
     e58:	09 f4       	brne	.+2      	; 0xe5c <draw_menu+0xa4>
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	99 23       	and	r25, r25
     e5e:	09 f4       	brne	.+2      	; 0xe62 <draw_menu+0xaa>
     e60:	47 c0       	rjmp	.+142    	; 0xef0 <draw_menu+0x138>
     e62:	c0 e0       	ldi	r28, 0x00	; 0
     e64:	d0 e0       	ldi	r29, 0x00	; 0
			for (int i = 0; i < 8; i++,i++){
				oled_invert_rectangle(0,8*(self->cursor) - i - 2,64,8*((self->cursor) + 1) - i - 2);
     e66:	d7 01       	movw	r26, r14
     e68:	16 96       	adiw	r26, 0x06	; 6
     e6a:	6d 91       	ld	r22, X+
     e6c:	7c 91       	ld	r23, X
     e6e:	17 97       	sbiw	r26, 0x07	; 7
     e70:	6f 5f       	subi	r22, 0xFF	; 255
     e72:	7f 4f       	sbci	r23, 0xFF	; 255
     e74:	66 0f       	add	r22, r22
     e76:	77 1f       	adc	r23, r23
     e78:	66 0f       	add	r22, r22
     e7a:	77 1f       	adc	r23, r23
     e7c:	66 0f       	add	r22, r22
     e7e:	77 1f       	adc	r23, r23
     e80:	9b 01       	movw	r18, r22
     e82:	2c 1b       	sub	r18, r28
     e84:	3d 0b       	sbc	r19, r29
     e86:	22 50       	subi	r18, 0x02	; 2
     e88:	31 09       	sbc	r19, r1
     e8a:	6c 1b       	sub	r22, r28
     e8c:	7d 0b       	sbc	r23, r29
     e8e:	6a 50       	subi	r22, 0x0A	; 10
     e90:	71 09       	sbc	r23, r1
     e92:	40 e4       	ldi	r20, 0x40	; 64
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <oled_invert_rectangle>
				oled_invert_rectangle(0,8*(self->cursor) - i,64,8*((self->cursor) + 1) - i);
     e9e:	f7 01       	movw	r30, r14
     ea0:	66 81       	ldd	r22, Z+6	; 0x06
     ea2:	77 81       	ldd	r23, Z+7	; 0x07
     ea4:	6f 5f       	subi	r22, 0xFF	; 255
     ea6:	7f 4f       	sbci	r23, 0xFF	; 255
     ea8:	66 0f       	add	r22, r22
     eaa:	77 1f       	adc	r23, r23
     eac:	66 0f       	add	r22, r22
     eae:	77 1f       	adc	r23, r23
     eb0:	66 0f       	add	r22, r22
     eb2:	77 1f       	adc	r23, r23
     eb4:	9b 01       	movw	r18, r22
     eb6:	2c 1b       	sub	r18, r28
     eb8:	3d 0b       	sbc	r19, r29
     eba:	68 50       	subi	r22, 0x08	; 8
     ebc:	71 09       	sbc	r23, r1
     ebe:	6c 1b       	sub	r22, r28
     ec0:	7d 0b       	sbc	r23, r29
     ec2:	40 e4       	ldi	r20, 0x40	; 64
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 ac 0b 	call	0x1758	; 0x1758 <oled_invert_rectangle>
				oled_refresh();
     ece:	0e 94 48 0b 	call	0x1690	; 0x1690 <oled_refresh>
	
	//Where to go next
	Direction dir = joy_get_direction();
	if(1){	//THIS IS NEW
		if((dir == UP) & (self->cursor != 0)){
			for (int i = 0; i < 8; i++,i++){
     ed2:	22 96       	adiw	r28, 0x02	; 2
     ed4:	c8 30       	cpi	r28, 0x08	; 8
     ed6:	d1 05       	cpc	r29, r1
     ed8:	31 f6       	brne	.-116    	; 0xe66 <draw_menu+0xae>
				oled_invert_rectangle(0,8*(self->cursor) - i - 2,64,8*((self->cursor) + 1) - i - 2);
				oled_invert_rectangle(0,8*(self->cursor) - i,64,8*((self->cursor) + 1) - i);
				oled_refresh();
			}
			self->cursor--;
     eda:	d7 01       	movw	r26, r14
     edc:	16 96       	adiw	r26, 0x06	; 6
     ede:	8d 91       	ld	r24, X+
     ee0:	9c 91       	ld	r25, X
     ee2:	17 97       	sbiw	r26, 0x07	; 7
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	17 96       	adiw	r26, 0x07	; 7
     ee8:	9c 93       	st	X, r25
     eea:	8e 93       	st	-X, r24
     eec:	16 97       	sbiw	r26, 0x06	; 6
     eee:	88 c0       	rjmp	.+272    	; 0x1000 <draw_menu+0x248>
		}
		else if((dir == DOWN) & (self->cursor != (self->num_of_entries - 1))){
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	83 30       	cpi	r24, 0x03	; 3
     ef4:	09 f0       	breq	.+2      	; 0xef8 <draw_menu+0x140>
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	99 23       	and	r25, r25
     efa:	09 f4       	brne	.+2      	; 0xefe <draw_menu+0x146>
     efc:	54 c0       	rjmp	.+168    	; 0xfa6 <draw_menu+0x1ee>
     efe:	f7 01       	movw	r30, r14
     f00:	44 81       	ldd	r20, Z+4	; 0x04
     f02:	55 81       	ldd	r21, Z+5	; 0x05
     f04:	41 50       	subi	r20, 0x01	; 1
     f06:	51 09       	sbc	r21, r1
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	24 17       	cp	r18, r20
     f0c:	35 07       	cpc	r19, r21
     f0e:	09 f4       	brne	.+2      	; 0xf12 <draw_menu+0x15a>
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	99 23       	and	r25, r25
     f14:	09 f4       	brne	.+2      	; 0xf18 <draw_menu+0x160>
     f16:	47 c0       	rjmp	.+142    	; 0xfa6 <draw_menu+0x1ee>
     f18:	c0 e0       	ldi	r28, 0x00	; 0
     f1a:	d0 e0       	ldi	r29, 0x00	; 0
			
			//---NEW--- ANIMATION FOR DOWNWARDS MOVEMENT
			for (int i = 0; i < 8; i++,i++){
				oled_invert_rectangle(0,8*(self->cursor) + i,64,8*((self->cursor) + 1) + i);
     f1c:	d7 01       	movw	r26, r14
     f1e:	16 96       	adiw	r26, 0x06	; 6
     f20:	6d 91       	ld	r22, X+
     f22:	7c 91       	ld	r23, X
     f24:	17 97       	sbiw	r26, 0x07	; 7
     f26:	6f 5f       	subi	r22, 0xFF	; 255
     f28:	7f 4f       	sbci	r23, 0xFF	; 255
     f2a:	66 0f       	add	r22, r22
     f2c:	77 1f       	adc	r23, r23
     f2e:	66 0f       	add	r22, r22
     f30:	77 1f       	adc	r23, r23
     f32:	66 0f       	add	r22, r22
     f34:	77 1f       	adc	r23, r23
     f36:	9b 01       	movw	r18, r22
     f38:	2c 0f       	add	r18, r28
     f3a:	3d 1f       	adc	r19, r29
     f3c:	68 50       	subi	r22, 0x08	; 8
     f3e:	71 09       	sbc	r23, r1
     f40:	6c 0f       	add	r22, r28
     f42:	7d 1f       	adc	r23, r29
     f44:	40 e4       	ldi	r20, 0x40	; 64
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 ac 0b 	call	0x1758	; 0x1758 <oled_invert_rectangle>
				oled_invert_rectangle(0,8*(self->cursor) + i + 2,64,8*((self->cursor) + 1) + i + 2);
     f50:	f7 01       	movw	r30, r14
     f52:	66 81       	ldd	r22, Z+6	; 0x06
     f54:	77 81       	ldd	r23, Z+7	; 0x07
     f56:	6f 5f       	subi	r22, 0xFF	; 255
     f58:	7f 4f       	sbci	r23, 0xFF	; 255
     f5a:	66 0f       	add	r22, r22
     f5c:	77 1f       	adc	r23, r23
     f5e:	66 0f       	add	r22, r22
     f60:	77 1f       	adc	r23, r23
     f62:	66 0f       	add	r22, r22
     f64:	77 1f       	adc	r23, r23
     f66:	9b 01       	movw	r18, r22
     f68:	2c 0f       	add	r18, r28
     f6a:	3d 1f       	adc	r19, r29
     f6c:	2e 5f       	subi	r18, 0xFE	; 254
     f6e:	3f 4f       	sbci	r19, 0xFF	; 255
     f70:	6c 0f       	add	r22, r28
     f72:	7d 1f       	adc	r23, r29
     f74:	66 50       	subi	r22, 0x06	; 6
     f76:	71 09       	sbc	r23, r1
     f78:	40 e4       	ldi	r20, 0x40	; 64
     f7a:	50 e0       	ldi	r21, 0x00	; 0
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	0e 94 ac 0b 	call	0x1758	; 0x1758 <oled_invert_rectangle>
				oled_refresh();
     f84:	0e 94 48 0b 	call	0x1690	; 0x1690 <oled_refresh>
			self->cursor--;
		}
		else if((dir == DOWN) & (self->cursor != (self->num_of_entries - 1))){
			
			//---NEW--- ANIMATION FOR DOWNWARDS MOVEMENT
			for (int i = 0; i < 8; i++,i++){
     f88:	22 96       	adiw	r28, 0x02	; 2
     f8a:	c8 30       	cpi	r28, 0x08	; 8
     f8c:	d1 05       	cpc	r29, r1
     f8e:	31 f6       	brne	.-116    	; 0xf1c <draw_menu+0x164>
				oled_invert_rectangle(0,8*(self->cursor) + i + 2,64,8*((self->cursor) + 1) + i + 2);
				oled_refresh();
			}
			//-------------
			
			self->cursor++;
     f90:	d7 01       	movw	r26, r14
     f92:	16 96       	adiw	r26, 0x06	; 6
     f94:	8d 91       	ld	r24, X+
     f96:	9c 91       	ld	r25, X
     f98:	17 97       	sbiw	r26, 0x07	; 7
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	17 96       	adiw	r26, 0x07	; 7
     f9e:	9c 93       	st	X, r25
     fa0:	8e 93       	st	-X, r24
     fa2:	16 97       	sbiw	r26, 0x06	; 6
     fa4:	2d c0       	rjmp	.+90     	; 0x1000 <draw_menu+0x248>
		}
		else if((dir == RIGHT) & (self->sub_menus[self->cursor]->num_of_entries != 0)){ //THIS IS CHANGED
     fa6:	22 0f       	add	r18, r18
     fa8:	33 1f       	adc	r19, r19
     faa:	d7 01       	movw	r26, r14
     fac:	1a 96       	adiw	r26, 0x0a	; 10
     fae:	ed 91       	ld	r30, X+
     fb0:	fc 91       	ld	r31, X
     fb2:	1b 97       	sbiw	r26, 0x0b	; 11
     fb4:	e2 0f       	add	r30, r18
     fb6:	f3 1f       	adc	r31, r19
     fb8:	01 90       	ld	r0, Z+
     fba:	f0 81       	ld	r31, Z
     fbc:	e0 2d       	mov	r30, r0
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	81 11       	cpse	r24, r1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	99 23       	and	r25, r25
     fc6:	41 f0       	breq	.+16     	; 0xfd8 <draw_menu+0x220>
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	24 81       	ldd	r18, Z+4	; 0x04
     fcc:	35 81       	ldd	r19, Z+5	; 0x05
     fce:	23 2b       	or	r18, r19
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <draw_menu+0x21c>
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	91 11       	cpse	r25, r1
     fd6:	11 c0       	rjmp	.+34     	; 0xffa <draw_menu+0x242>
			self = self->sub_menus[self->cursor];
		}
		else if((dir == LEFT) & (self->super_menu != NULL)){
     fd8:	f7 01       	movw	r30, r14
     fda:	20 85       	ldd	r18, Z+8	; 0x08
     fdc:	31 85       	ldd	r19, Z+9	; 0x09
     fde:	91 e0       	ldi	r25, 0x01	; 1
     fe0:	82 30       	cpi	r24, 0x02	; 2
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <draw_menu+0x22e>
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	99 23       	and	r25, r25
     fe8:	59 f0       	breq	.+22     	; 0x1000 <draw_menu+0x248>
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	21 15       	cp	r18, r1
     fee:	31 05       	cpc	r19, r1
     ff0:	09 f4       	brne	.+2      	; 0xff4 <draw_menu+0x23c>
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	81 11       	cpse	r24, r1
     ff6:	03 c0       	rjmp	.+6      	; 0xffe <draw_menu+0x246>
     ff8:	03 c0       	rjmp	.+6      	; 0x1000 <draw_menu+0x248>
			//-------------
			
			self->cursor++;
		}
		else if((dir == RIGHT) & (self->sub_menus[self->cursor]->num_of_entries != 0)){ //THIS IS CHANGED
			self = self->sub_menus[self->cursor];
     ffa:	7f 01       	movw	r14, r30
     ffc:	01 c0       	rjmp	.+2      	; 0x1000 <draw_menu+0x248>
		}
		else if((dir == LEFT) & (self->super_menu != NULL)){
			self = self->super_menu;
     ffe:	79 01       	movw	r14, r18
		}
		joy_moved = 1;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	90 93 53 02 	sts	0x0253, r25
    1008:	80 93 52 02 	sts	0x0252, r24
		joy_moved = 0;
	}
	

	return self;
}
    100c:	c7 01       	movw	r24, r14
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	ff 90       	pop	r15
    1018:	ef 90       	pop	r14
    101a:	08 95       	ret

0000101c <add_entries>:
	
}
//----------NO NEED TO CHANGE THINGS BEYOND THIS----------

//Functions for adding entries and nodes
void add_entries(Menu* menu, char* entries[], int num_of_new_entries){
    101c:	af 92       	push	r10
    101e:	bf 92       	push	r11
    1020:	cf 92       	push	r12
    1022:	df 92       	push	r13
    1024:	ef 92       	push	r14
    1026:	ff 92       	push	r15
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	8c 01       	movw	r16, r24
    1032:	e6 2e       	mov	r14, r22
    1034:	f7 2e       	mov	r15, r23
    1036:	ea 01       	movw	r28, r20
	
	menu->entries = malloc(num_of_new_entries * sizeof(char*));	//Correct size of double pointer
    1038:	6a 01       	movw	r12, r20
    103a:	cc 0c       	add	r12, r12
    103c:	dd 1c       	adc	r13, r13
    103e:	c6 01       	movw	r24, r12
    1040:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <malloc>
    1044:	d8 01       	movw	r26, r16
    1046:	13 96       	adiw	r26, 0x03	; 3
    1048:	9c 93       	st	X, r25
    104a:	8e 93       	st	-X, r24
    104c:	12 97       	sbiw	r26, 0x02	; 2
	
	for(int i = 0; i < num_of_new_entries; i++){
    104e:	1c 16       	cp	r1, r28
    1050:	1d 06       	cpc	r1, r29
    1052:	54 f5       	brge	.+84     	; 0x10a8 <add_entries+0x8c>
    1054:	ae 2c       	mov	r10, r14
    1056:	bf 2c       	mov	r11, r15
    1058:	c0 e0       	ldi	r28, 0x00	; 0
    105a:	d0 e0       	ldi	r29, 0x00	; 0
		menu->entries[i] = malloc(strlen(entries[i]) * sizeof(char)); //Allocate space for each string
    105c:	f8 01       	movw	r30, r16
    105e:	e2 80       	ldd	r14, Z+2	; 0x02
    1060:	f3 80       	ldd	r15, Z+3	; 0x03
    1062:	ec 0e       	add	r14, r28
    1064:	fd 1e       	adc	r15, r29
    1066:	f5 01       	movw	r30, r10
    1068:	a0 81       	ld	r26, Z
    106a:	b1 81       	ldd	r27, Z+1	; 0x01
    106c:	fd 01       	movw	r30, r26
    106e:	01 90       	ld	r0, Z+
    1070:	00 20       	and	r0, r0
    1072:	e9 f7       	brne	.-6      	; 0x106e <add_entries+0x52>
    1074:	31 97       	sbiw	r30, 0x01	; 1
    1076:	cf 01       	movw	r24, r30
    1078:	8a 1b       	sub	r24, r26
    107a:	9b 0b       	sbc	r25, r27
    107c:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <malloc>
    1080:	d7 01       	movw	r26, r14
    1082:	8d 93       	st	X+, r24
    1084:	9c 93       	st	X, r25
		menu->entries[i] =  entries[i];								  //Adds each string
    1086:	f5 01       	movw	r30, r10
    1088:	81 91       	ld	r24, Z+
    108a:	91 91       	ld	r25, Z+
    108c:	5f 01       	movw	r10, r30
    108e:	d8 01       	movw	r26, r16
    1090:	12 96       	adiw	r26, 0x02	; 2
    1092:	ed 91       	ld	r30, X+
    1094:	fc 91       	ld	r31, X
    1096:	13 97       	sbiw	r26, 0x03	; 3
    1098:	ec 0f       	add	r30, r28
    109a:	fd 1f       	adc	r31, r29
    109c:	91 83       	std	Z+1, r25	; 0x01
    109e:	80 83       	st	Z, r24
    10a0:	22 96       	adiw	r28, 0x02	; 2
//Functions for adding entries and nodes
void add_entries(Menu* menu, char* entries[], int num_of_new_entries){
	
	menu->entries = malloc(num_of_new_entries * sizeof(char*));	//Correct size of double pointer
	
	for(int i = 0; i < num_of_new_entries; i++){
    10a2:	cc 16       	cp	r12, r28
    10a4:	dd 06       	cpc	r13, r29
    10a6:	d1 f6       	brne	.-76     	; 0x105c <add_entries+0x40>
		//empty->name = entries[i];
		//add_sub_menu(menu, empty);
		//menu->num_of_entries+=1;
	}
	//menu->num_of_entries = num_of_new_entries;
	menu->cursor = 0; //To make sure the cursor is not something else
    10a8:	f8 01       	movw	r30, r16
    10aa:	17 82       	std	Z+7, r1	; 0x07
    10ac:	16 82       	std	Z+6, r1	; 0x06
}
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	df 90       	pop	r13
    10bc:	cf 90       	pop	r12
    10be:	bf 90       	pop	r11
    10c0:	af 90       	pop	r10
    10c2:	08 95       	ret

000010c4 <add_sub_menu>:

void add_sub_menu(Menu* super, Menu* sub){
    10c4:	ef 92       	push	r14
    10c6:	ff 92       	push	r15
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	ec 01       	movw	r28, r24
    10d2:	8b 01       	movw	r16, r22
	super->num_of_entries += 1;		//Num of entries in super are updated
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	9d 81       	ldd	r25, Y+5	; 0x05
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	9d 83       	std	Y+5, r25	; 0x05
    10dc:	8c 83       	std	Y+4, r24	; 0x04
	
	//Pointers to and from the menus are set correctly
	sub->super_menu = super;
    10de:	fb 01       	movw	r30, r22
    10e0:	d1 87       	std	Z+9, r29	; 0x09
    10e2:	c0 87       	std	Z+8, r28	; 0x08
	super->sub_menus = realloc(super->sub_menus, super->num_of_entries * sizeof(Menu*));
    10e4:	6c 81       	ldd	r22, Y+4	; 0x04
    10e6:	7d 81       	ldd	r23, Y+5	; 0x05
    10e8:	66 0f       	add	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    10ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    10f0:	0e 94 a2 10 	call	0x2144	; 0x2144 <realloc>
    10f4:	9b 87       	std	Y+11, r25	; 0x0b
    10f6:	8a 87       	std	Y+10, r24	; 0x0a
	super->sub_menus[super->num_of_entries - 1] = malloc(sizeof(Menu));
    10f8:	ec 80       	ldd	r14, Y+4	; 0x04
    10fa:	fd 80       	ldd	r15, Y+5	; 0x05
    10fc:	f1 e0       	ldi	r31, 0x01	; 1
    10fe:	ef 1a       	sub	r14, r31
    1100:	f0 e8       	ldi	r31, 0x80	; 128
    1102:	ff 0a       	sbc	r15, r31
    1104:	ee 0c       	add	r14, r14
    1106:	ff 1c       	adc	r15, r15
    1108:	e8 0e       	add	r14, r24
    110a:	f9 1e       	adc	r15, r25
    110c:	8e e0       	ldi	r24, 0x0E	; 14
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <malloc>
    1114:	f7 01       	movw	r30, r14
    1116:	91 83       	std	Z+1, r25	; 0x01
    1118:	80 83       	st	Z, r24
	super->sub_menus[super->num_of_entries - 1] = sub;
    111a:	ec 81       	ldd	r30, Y+4	; 0x04
    111c:	fd 81       	ldd	r31, Y+5	; 0x05
    111e:	e1 50       	subi	r30, 0x01	; 1
    1120:	f0 48       	sbci	r31, 0x80	; 128
    1122:	ee 0f       	add	r30, r30
    1124:	ff 1f       	adc	r31, r31
    1126:	8a 85       	ldd	r24, Y+10	; 0x0a
    1128:	9b 85       	ldd	r25, Y+11	; 0x0b
    112a:	e8 0f       	add	r30, r24
    112c:	f9 1f       	adc	r31, r25
    112e:	11 83       	std	Z+1, r17	; 0x01
    1130:	00 83       	st	Z, r16
	
	//Name of entries in the super menu are updated
	super->entries = realloc(super->entries, super->num_of_entries * sizeof(char*));
    1132:	6c 81       	ldd	r22, Y+4	; 0x04
    1134:	7d 81       	ldd	r23, Y+5	; 0x05
    1136:	66 0f       	add	r22, r22
    1138:	77 1f       	adc	r23, r23
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	9b 81       	ldd	r25, Y+3	; 0x03
    113e:	0e 94 a2 10 	call	0x2144	; 0x2144 <realloc>
    1142:	9b 83       	std	Y+3, r25	; 0x03
    1144:	8a 83       	std	Y+2, r24	; 0x02
	super->entries[super->num_of_entries - 1] = malloc(strlen(sub->name) * sizeof(char));
    1146:	ec 80       	ldd	r14, Y+4	; 0x04
    1148:	fd 80       	ldd	r15, Y+5	; 0x05
    114a:	f1 e0       	ldi	r31, 0x01	; 1
    114c:	ef 1a       	sub	r14, r31
    114e:	f0 e8       	ldi	r31, 0x80	; 128
    1150:	ff 0a       	sbc	r15, r31
    1152:	ee 0c       	add	r14, r14
    1154:	ff 1c       	adc	r15, r15
    1156:	e8 0e       	add	r14, r24
    1158:	f9 1e       	adc	r15, r25
    115a:	f8 01       	movw	r30, r16
    115c:	a0 81       	ld	r26, Z
    115e:	b1 81       	ldd	r27, Z+1	; 0x01
    1160:	fd 01       	movw	r30, r26
    1162:	01 90       	ld	r0, Z+
    1164:	00 20       	and	r0, r0
    1166:	e9 f7       	brne	.-6      	; 0x1162 <add_sub_menu+0x9e>
    1168:	31 97       	sbiw	r30, 0x01	; 1
    116a:	cf 01       	movw	r24, r30
    116c:	8a 1b       	sub	r24, r26
    116e:	9b 0b       	sbc	r25, r27
    1170:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <malloc>
    1174:	f7 01       	movw	r30, r14
    1176:	91 83       	std	Z+1, r25	; 0x01
    1178:	80 83       	st	Z, r24
	super->entries[super->num_of_entries - 1] = sub->name;
    117a:	f8 01       	movw	r30, r16
    117c:	80 81       	ld	r24, Z
    117e:	91 81       	ldd	r25, Z+1	; 0x01
    1180:	ec 81       	ldd	r30, Y+4	; 0x04
    1182:	fd 81       	ldd	r31, Y+5	; 0x05
    1184:	e1 50       	subi	r30, 0x01	; 1
    1186:	f0 48       	sbci	r31, 0x80	; 128
    1188:	ee 0f       	add	r30, r30
    118a:	ff 1f       	adc	r31, r31
    118c:	2a 81       	ldd	r18, Y+2	; 0x02
    118e:	3b 81       	ldd	r19, Y+3	; 0x03
    1190:	e2 0f       	add	r30, r18
    1192:	f3 1f       	adc	r31, r19
    1194:	91 83       	std	Z+1, r25	; 0x01
    1196:	80 83       	st	Z, r24
}
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	1f 91       	pop	r17
    119e:	0f 91       	pop	r16
    11a0:	ff 90       	pop	r15
    11a2:	ef 90       	pop	r14
    11a4:	08 95       	ret

000011a6 <menu_init>:
	//.type = MENU,
	.draw = draw_menu
};

//The initializer - How the menus are related
void menu_init(){
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	6c 97       	sbiw	r28, 0x1c	; 28
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
	
	char* control_entr[3] = {"Player1", "Player2", "Player3"};
    11ba:	86 e0       	ldi	r24, 0x06	; 6
    11bc:	ec e6       	ldi	r30, 0x6C	; 108
    11be:	f1 e0       	ldi	r31, 0x01	; 1
    11c0:	de 01       	movw	r26, r28
    11c2:	11 96       	adiw	r26, 0x01	; 1
    11c4:	01 90       	ld	r0, Z+
    11c6:	0d 92       	st	X+, r0
    11c8:	8a 95       	dec	r24
    11ca:	e1 f7       	brne	.-8      	; 0x11c4 <menu_init+0x1e>
	add_entries(&control, control_entr, 3);
    11cc:	43 e0       	ldi	r20, 0x03	; 3
    11ce:	50 e0       	ldi	r21, 0x00	; 0
    11d0:	be 01       	movw	r22, r28
    11d2:	6f 5f       	subi	r22, 0xFF	; 255
    11d4:	7f 4f       	sbci	r23, 0xFF	; 255
    11d6:	8e e1       	ldi	r24, 0x1E	; 30
    11d8:	91 e0       	ldi	r25, 0x01	; 1
    11da:	0e 94 0e 08 	call	0x101c	; 0x101c <add_entries>
	add_sub_menu(&options, &control);
    11de:	6e e1       	ldi	r22, 0x1E	; 30
    11e0:	71 e0       	ldi	r23, 0x01	; 1
    11e2:	8a e3       	ldi	r24, 0x3A	; 58
    11e4:	91 e0       	ldi	r25, 0x01	; 1
    11e6:	0e 94 62 08 	call	0x10c4	; 0x10c4 <add_sub_menu>
	
	char* contro_entr[4] = {"Low", "Medium", "High","Ultra"};
    11ea:	88 e0       	ldi	r24, 0x08	; 8
    11ec:	e2 e7       	ldi	r30, 0x72	; 114
    11ee:	f1 e0       	ldi	r31, 0x01	; 1
    11f0:	de 01       	movw	r26, r28
    11f2:	17 96       	adiw	r26, 0x07	; 7
    11f4:	01 90       	ld	r0, Z+
    11f6:	0d 92       	st	X+, r0
    11f8:	8a 95       	dec	r24
    11fa:	e1 f7       	brne	.-8      	; 0x11f4 <menu_init+0x4e>
	add_entries(&contro, contro_entr, 4);
    11fc:	44 e0       	ldi	r20, 0x04	; 4
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	be 01       	movw	r22, r28
    1202:	69 5f       	subi	r22, 0xF9	; 249
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	80 e1       	ldi	r24, 0x10	; 16
    1208:	91 e0       	ldi	r25, 0x01	; 1
    120a:	0e 94 0e 08 	call	0x101c	; 0x101c <add_entries>
	add_sub_menu(&options, &contro);
    120e:	60 e1       	ldi	r22, 0x10	; 16
    1210:	71 e0       	ldi	r23, 0x01	; 1
    1212:	8a e3       	ldi	r24, 0x3A	; 58
    1214:	91 e0       	ldi	r25, 0x01	; 1
    1216:	0e 94 62 08 	call	0x10c4	; 0x10c4 <add_sub_menu>
	
	add_sub_menu(&main_menu, &options);
    121a:	6a e3       	ldi	r22, 0x3A	; 58
    121c:	71 e0       	ldi	r23, 0x01	; 1
    121e:	86 e5       	ldi	r24, 0x56	; 86
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	0e 94 62 08 	call	0x10c4	; 0x10c4 <add_sub_menu>
	
	char* diff_entr[3] = {"Easy", "Medium", "Hard"};
    1226:	86 e0       	ldi	r24, 0x06	; 6
    1228:	ea e7       	ldi	r30, 0x7A	; 122
    122a:	f1 e0       	ldi	r31, 0x01	; 1
    122c:	de 01       	movw	r26, r28
    122e:	1f 96       	adiw	r26, 0x0f	; 15
    1230:	01 90       	ld	r0, Z+
    1232:	0d 92       	st	X+, r0
    1234:	8a 95       	dec	r24
    1236:	e1 f7       	brne	.-8      	; 0x1230 <menu_init+0x8a>
	add_entries(&difficulty, diff_entr, 3);
    1238:	43 e0       	ldi	r20, 0x03	; 3
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	be 01       	movw	r22, r28
    123e:	61 5f       	subi	r22, 0xF1	; 241
    1240:	7f 4f       	sbci	r23, 0xFF	; 255
    1242:	88 e4       	ldi	r24, 0x48	; 72
    1244:	91 e0       	ldi	r25, 0x01	; 1
    1246:	0e 94 0e 08 	call	0x101c	; 0x101c <add_entries>
	add_sub_menu(&main_menu, &difficulty);
    124a:	68 e4       	ldi	r22, 0x48	; 72
    124c:	71 e0       	ldi	r23, 0x01	; 1
    124e:	86 e5       	ldi	r24, 0x56	; 86
    1250:	91 e0       	ldi	r25, 0x01	; 1
    1252:	0e 94 62 08 	call	0x10c4	; 0x10c4 <add_sub_menu>
	
	char* high_entr[4] = {"1. Herman","2. Raoul","3. Alle andre","-inf^inf. Hans"};
    1256:	88 e0       	ldi	r24, 0x08	; 8
    1258:	e0 e8       	ldi	r30, 0x80	; 128
    125a:	f1 e0       	ldi	r31, 0x01	; 1
    125c:	de 01       	movw	r26, r28
    125e:	55 96       	adiw	r26, 0x15	; 21
    1260:	01 90       	ld	r0, Z+
    1262:	0d 92       	st	X+, r0
    1264:	8a 95       	dec	r24
    1266:	e1 f7       	brne	.-8      	; 0x1260 <menu_init+0xba>
	add_entries(&highscore, high_entr,4);
    1268:	44 e0       	ldi	r20, 0x04	; 4
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	be 01       	movw	r22, r28
    126e:	6b 5e       	subi	r22, 0xEB	; 235
    1270:	7f 4f       	sbci	r23, 0xFF	; 255
    1272:	8c e2       	ldi	r24, 0x2C	; 44
    1274:	91 e0       	ldi	r25, 0x01	; 1
    1276:	0e 94 0e 08 	call	0x101c	; 0x101c <add_entries>
	add_sub_menu(&main_menu, &highscore);
    127a:	6c e2       	ldi	r22, 0x2C	; 44
    127c:	71 e0       	ldi	r23, 0x01	; 1
    127e:	86 e5       	ldi	r24, 0x56	; 86
    1280:	91 e0       	ldi	r25, 0x01	; 1
    1282:	0e 94 62 08 	call	0x10c4	; 0x10c4 <add_sub_menu>
	
}
    1286:	6c 96       	adiw	r28, 0x1c	; 28
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	08 95       	ret

00001298 <menu_run_display>:
	//
	
Menu* current_menu = &main_menu;

void menu_run_display(){
	oled_clear_screen();
    1298:	0e 94 b4 0a 	call	0x1568	; 0x1568 <oled_clear_screen>
	current_menu = current_menu->draw(current_menu);
    129c:	80 91 0e 01 	lds	r24, 0x010E
    12a0:	90 91 0f 01 	lds	r25, 0x010F
    12a4:	dc 01       	movw	r26, r24
    12a6:	1c 96       	adiw	r26, 0x0c	; 12
    12a8:	ed 91       	ld	r30, X+
    12aa:	fc 91       	ld	r31, X
    12ac:	1d 97       	sbiw	r26, 0x0d	; 13
    12ae:	09 95       	icall
    12b0:	90 93 0f 01 	sts	0x010F, r25
    12b4:	80 93 0e 01 	sts	0x010E, r24
	oled_refresh();
    12b8:	0e 94 48 0b 	call	0x1690	; 0x1690 <oled_refresh>
    12bc:	08 95       	ret

000012be <oled_write_data>:
void oled_write_command(char command){
	*oled_command = command;
}

void oled_write_data(char data){
	if(doublebuffering){
    12be:	20 91 6a 01 	lds	r18, 0x016A
    12c2:	30 91 6b 01 	lds	r19, 0x016B
    12c6:	23 2b       	or	r18, r19
    12c8:	d1 f0       	breq	.+52     	; 0x12fe <oled_write_data+0x40>
		if (oled_back_buffer_index > 1023){
    12ca:	20 91 54 02 	lds	r18, 0x0254
    12ce:	30 91 55 02 	lds	r19, 0x0255
    12d2:	21 15       	cp	r18, r1
    12d4:	94 e0       	ldi	r25, 0x04	; 4
    12d6:	39 07       	cpc	r19, r25
    12d8:	bc f4       	brge	.+46     	; 0x1308 <oled_write_data+0x4a>
			//printf("Outside of screen!\n");
			return -1;
		}
		oled_back_buffer[oled_back_buffer_index] = data;
    12da:	40 91 66 01 	lds	r20, 0x0166
    12de:	50 91 67 01 	lds	r21, 0x0167
    12e2:	fa 01       	movw	r30, r20
    12e4:	e2 0f       	add	r30, r18
    12e6:	f3 1f       	adc	r31, r19
    12e8:	80 83       	st	Z, r24
		oled_back_buffer_index++;	
    12ea:	80 91 54 02 	lds	r24, 0x0254
    12ee:	90 91 55 02 	lds	r25, 0x0255
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	90 93 55 02 	sts	0x0255, r25
    12f8:	80 93 54 02 	sts	0x0254, r24
    12fc:	08 95       	ret
	}
	else{
		*oled_front_buffer = data;
    12fe:	e0 91 64 01 	lds	r30, 0x0164
    1302:	f0 91 65 01 	lds	r31, 0x0165
    1306:	80 83       	st	Z, r24
    1308:	08 95       	ret

0000130a <oled_print_char>:
			oled_goto_line(line);
		}
	}
}

void oled_print_char(char character, uint8_t font_size, int invert){
    130a:	ef 92       	push	r14
    130c:	ff 92       	push	r15
    130e:	0f 93       	push	r16
    1310:	1f 93       	push	r17
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
	int font_address;
	if (font_size == 8){
    1316:	68 30       	cpi	r22, 0x08	; 8
    1318:	59 f4       	brne	.+22     	; 0x1330 <oled_print_char+0x26>
		font_address = &font8[character-' '];
    131a:	08 2f       	mov	r16, r24
    131c:	10 e0       	ldi	r17, 0x00	; 0
    131e:	00 0f       	add	r16, r16
    1320:	11 1f       	adc	r17, r17
    1322:	00 0f       	add	r16, r16
    1324:	11 1f       	adc	r17, r17
    1326:	00 0f       	add	r16, r16
    1328:	11 1f       	adc	r17, r17
    132a:	0b 50       	subi	r16, 0x0B	; 11
    132c:	1d 4f       	sbci	r17, 0xFD	; 253
    132e:	1a c0       	rjmp	.+52     	; 0x1364 <oled_print_char+0x5a>
	}
	else if (font_size == 5){
    1330:	65 30       	cpi	r22, 0x05	; 5
    1332:	71 f4       	brne	.+28     	; 0x1350 <oled_print_char+0x46>
		font_address = &font5[character-' '];
    1334:	08 2f       	mov	r16, r24
    1336:	10 e0       	ldi	r17, 0x00	; 0
    1338:	00 52       	subi	r16, 0x20	; 32
    133a:	11 09       	sbc	r17, r1
    133c:	c8 01       	movw	r24, r16
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	08 0f       	add	r16, r24
    1348:	19 1f       	adc	r17, r25
    134a:	06 5e       	subi	r16, 0xE6	; 230
    134c:	1d 4f       	sbci	r17, 0xFD	; 253
    134e:	0a c0       	rjmp	.+20     	; 0x1364 <oled_print_char+0x5a>
	}
	else if (font_size == 4){
    1350:	64 30       	cpi	r22, 0x04	; 4
    1352:	41 f4       	brne	.+16     	; 0x1364 <oled_print_char+0x5a>
		font_address = &font4[character-' '];
    1354:	08 2f       	mov	r16, r24
    1356:	10 e0       	ldi	r17, 0x00	; 0
    1358:	00 0f       	add	r16, r16
    135a:	11 1f       	adc	r17, r17
    135c:	00 0f       	add	r16, r16
    135e:	11 1f       	adc	r17, r17
    1360:	02 5e       	subi	r16, 0xE2	; 226
    1362:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	if(!invert){
    1364:	45 2b       	or	r20, r21
    1366:	31 f0       	breq	.+12     	; 0x1374 <oled_print_char+0x6a>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    1368:	e6 2e       	mov	r14, r22
    136a:	f1 2c       	mov	r15, r1
    136c:	1e 14       	cp	r1, r14
    136e:	1f 04       	cpc	r1, r15
    1370:	9c f0       	brlt	.+38     	; 0x1398 <oled_print_char+0x8e>
    1372:	1f c0       	rjmp	.+62     	; 0x13b2 <oled_print_char+0xa8>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
    1374:	e6 2e       	mov	r14, r22
    1376:	f1 2c       	mov	r15, r1
    1378:	1e 14       	cp	r1, r14
    137a:	1f 04       	cpc	r1, r15
    137c:	d4 f4       	brge	.+52     	; 0x13b2 <oled_print_char+0xa8>
    137e:	c0 e0       	ldi	r28, 0x00	; 0
    1380:	d0 e0       	ldi	r29, 0x00	; 0
    1382:	fe 01       	movw	r30, r28
    1384:	e0 0f       	add	r30, r16
    1386:	f1 1f       	adc	r31, r17
			oled_write_data(pgm_read_byte(font_address + i));
    1388:	84 91       	lpm	r24, Z
    138a:	0e 94 5f 09 	call	0x12be	; 0x12be <oled_write_data>
	}
	else if (font_size == 4){
		font_address = &font4[character-' '];
	}
	if(!invert){
		for (int i = 0; i < font_size; i++){
    138e:	21 96       	adiw	r28, 0x01	; 1
    1390:	ce 15       	cp	r28, r14
    1392:	df 05       	cpc	r29, r15
    1394:	b4 f3       	brlt	.-20     	; 0x1382 <oled_print_char+0x78>
    1396:	0d c0       	rjmp	.+26     	; 0x13b2 <oled_print_char+0xa8>
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    1398:	c0 e0       	ldi	r28, 0x00	; 0
    139a:	d0 e0       	ldi	r29, 0x00	; 0
    139c:	fe 01       	movw	r30, r28
    139e:	e0 0f       	add	r30, r16
    13a0:	f1 1f       	adc	r31, r17
			oled_write_data(~pgm_read_byte(font_address + i));
    13a2:	84 91       	lpm	r24, Z
    13a4:	80 95       	com	r24
    13a6:	0e 94 5f 09 	call	0x12be	; 0x12be <oled_write_data>
		for (int i = 0; i < font_size; i++){
			oled_write_data(pgm_read_byte(font_address + i));
		}	
	}
	else{
		for (int i = 0; i < font_size; i++){
    13aa:	21 96       	adiw	r28, 0x01	; 1
    13ac:	ce 15       	cp	r28, r14
    13ae:	df 05       	cpc	r29, r15
    13b0:	ac f3       	brlt	.-22     	; 0x139c <oled_print_char+0x92>
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	ff 90       	pop	r15
    13bc:	ef 90       	pop	r14
    13be:	08 95       	ret

000013c0 <oled_read_data>:
		*oled_front_buffer = data;
	}	
}

char oled_read_data(){
	if(doublebuffering){
    13c0:	80 91 6a 01 	lds	r24, 0x016A
    13c4:	90 91 6b 01 	lds	r25, 0x016B
    13c8:	89 2b       	or	r24, r25
    13ca:	89 f0       	breq	.+34     	; 0x13ee <oled_read_data+0x2e>
		if (oled_back_buffer_index > 1023){
    13cc:	80 91 54 02 	lds	r24, 0x0254
    13d0:	90 91 55 02 	lds	r25, 0x0255
    13d4:	81 15       	cp	r24, r1
    13d6:	24 e0       	ldi	r18, 0x04	; 4
    13d8:	92 07       	cpc	r25, r18
    13da:	5c f4       	brge	.+22     	; 0x13f2 <oled_read_data+0x32>
			//printf("Outside of screen!\n");
			//return -1;
			return 0x00;
		}
		return oled_back_buffer[oled_back_buffer_index];
    13dc:	20 91 66 01 	lds	r18, 0x0166
    13e0:	30 91 67 01 	lds	r19, 0x0167
    13e4:	f9 01       	movw	r30, r18
    13e6:	e8 0f       	add	r30, r24
    13e8:	f9 1f       	adc	r31, r25
    13ea:	80 81       	ld	r24, Z
    13ec:	08 95       	ret
	}
	else{
		return 0x00; //Alternatively NULL
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	08 95       	ret
char oled_read_data(){
	if(doublebuffering){
		if (oled_back_buffer_index > 1023){
			//printf("Outside of screen!\n");
			//return -1;
			return 0x00;
    13f2:	80 e0       	ldi	r24, 0x00	; 0
		return oled_back_buffer[oled_back_buffer_index];
	}
	else{
		return 0x00; //Alternatively NULL
	}
}
    13f4:	08 95       	ret

000013f6 <oled_goto_line>:

void oled_goto_line(int line){
	if(doublebuffering){
    13f6:	40 91 6a 01 	lds	r20, 0x016A
    13fa:	50 91 6b 01 	lds	r21, 0x016B
    13fe:	45 2b       	or	r20, r21
    1400:	d1 f0       	breq	.+52     	; 0x1436 <oled_goto_line+0x40>
		oled_back_buffer_index = oled_back_buffer_index % 128 + line*128;	
    1402:	20 91 54 02 	lds	r18, 0x0254
    1406:	30 91 55 02 	lds	r19, 0x0255
    140a:	2f 77       	andi	r18, 0x7F	; 127
    140c:	30 78       	andi	r19, 0x80	; 128
    140e:	33 23       	and	r19, r19
    1410:	34 f4       	brge	.+12     	; 0x141e <oled_goto_line+0x28>
    1412:	21 50       	subi	r18, 0x01	; 1
    1414:	31 09       	sbc	r19, r1
    1416:	20 68       	ori	r18, 0x80	; 128
    1418:	3f 6f       	ori	r19, 0xFF	; 255
    141a:	2f 5f       	subi	r18, 0xFF	; 255
    141c:	3f 4f       	sbci	r19, 0xFF	; 255
    141e:	96 95       	lsr	r25
    1420:	98 2f       	mov	r25, r24
    1422:	88 27       	eor	r24, r24
    1424:	97 95       	ror	r25
    1426:	87 95       	ror	r24
    1428:	28 0f       	add	r18, r24
    142a:	39 1f       	adc	r19, r25
    142c:	30 93 55 02 	sts	0x0255, r19
    1430:	20 93 54 02 	sts	0x0254, r18
    1434:	08 95       	ret
	}
	else{
		oled_write_command(0xB0 + line);
    1436:	80 55       	subi	r24, 0x50	; 80
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1438:	e0 91 68 01 	lds	r30, 0x0168
    143c:	f0 91 69 01 	lds	r31, 0x0169
    1440:	80 83       	st	Z, r24
    1442:	08 95       	ret

00001444 <oled_goto_column>:
		oled_write_command(0xB0 + line);
	}
}

void oled_goto_column(int column){ 
	if(doublebuffering){
    1444:	20 91 6a 01 	lds	r18, 0x016A
    1448:	30 91 6b 01 	lds	r19, 0x016B
    144c:	23 2b       	or	r18, r19
    144e:	c1 f0       	breq	.+48     	; 0x1480 <oled_goto_column+0x3c>
		oled_back_buffer_index = oled_back_buffer_index - oled_back_buffer_index % 128 + column;
    1450:	40 91 54 02 	lds	r20, 0x0254
    1454:	50 91 55 02 	lds	r21, 0x0255
    1458:	9a 01       	movw	r18, r20
    145a:	2f 77       	andi	r18, 0x7F	; 127
    145c:	30 78       	andi	r19, 0x80	; 128
    145e:	33 23       	and	r19, r19
    1460:	34 f4       	brge	.+12     	; 0x146e <oled_goto_column+0x2a>
    1462:	21 50       	subi	r18, 0x01	; 1
    1464:	31 09       	sbc	r19, r1
    1466:	20 68       	ori	r18, 0x80	; 128
    1468:	3f 6f       	ori	r19, 0xFF	; 255
    146a:	2f 5f       	subi	r18, 0xFF	; 255
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	42 1b       	sub	r20, r18
    1470:	53 0b       	sbc	r21, r19
    1472:	84 0f       	add	r24, r20
    1474:	95 1f       	adc	r25, r21
    1476:	90 93 55 02 	sts	0x0255, r25
    147a:	80 93 54 02 	sts	0x0254, r24
    147e:	08 95       	ret
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1480:	e0 91 68 01 	lds	r30, 0x0168
    1484:	f0 91 69 01 	lds	r31, 0x0169
    1488:	10 82       	st	Z, r1
    148a:	e0 91 68 01 	lds	r30, 0x0168
    148e:	f0 91 69 01 	lds	r31, 0x0169
    1492:	80 e1       	ldi	r24, 0x10	; 16
    1494:	80 83       	st	Z, r24
    1496:	08 95       	ret

00001498 <oled_print_string>:
	oled_write_command(0xa6); //set normal display
	oled_write_command(0xaf); // display on
	oled_clear_screen(); //Sets all buffer data to 0
}

void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
    1498:	6f 92       	push	r6
    149a:	7f 92       	push	r7
    149c:	8f 92       	push	r8
    149e:	9f 92       	push	r9
    14a0:	af 92       	push	r10
    14a2:	bf 92       	push	r11
    14a4:	cf 92       	push	r12
    14a6:	df 92       	push	r13
    14a8:	ef 92       	push	r14
    14aa:	ff 92       	push	r15
    14ac:	0f 93       	push	r16
    14ae:	1f 93       	push	r17
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	ec 01       	movw	r28, r24
    14b6:	96 2e       	mov	r9, r22
    14b8:	74 2e       	mov	r7, r20
    14ba:	82 2e       	mov	r8, r18
	oled_goto_column(column);
    14bc:	86 2f       	mov	r24, r22
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 22 0a 	call	0x1444	; 0x1444 <oled_goto_column>
	oled_goto_line(line);
    14c4:	87 2d       	mov	r24, r7
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <oled_goto_line>
	
	int length = strlen(string);
    14cc:	fe 01       	movw	r30, r28
    14ce:	01 90       	ld	r0, Z+
    14d0:	00 20       	and	r0, r0
    14d2:	e9 f7       	brne	.-6      	; 0x14ce <oled_print_string+0x36>
    14d4:	31 97       	sbiw	r30, 0x01	; 1
    14d6:	6f 01       	movw	r12, r30
    14d8:	cc 1a       	sub	r12, r28
    14da:	dd 0a       	sbc	r13, r29
	for (int i = 0; i < length; i++){
    14dc:	1c 14       	cp	r1, r12
    14de:	1d 04       	cpc	r1, r13
    14e0:	24 f5       	brge	.+72     	; 0x152a <oled_print_string+0x92>
    14e2:	7e 01       	movw	r14, r28
    14e4:	c0 e0       	ldi	r28, 0x00	; 0
    14e6:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
    14e8:	8f e7       	ldi	r24, 0x7F	; 127
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	5c 01       	movw	r10, r24
    14ee:	a8 18       	sub	r10, r8
    14f0:	b1 08       	sbc	r11, r1
			column = 0;
    14f2:	61 2c       	mov	r6, r1
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
    14f4:	a8 01       	movw	r20, r16
    14f6:	68 2d       	mov	r22, r8
    14f8:	f7 01       	movw	r30, r14
    14fa:	81 91       	ld	r24, Z+
    14fc:	7f 01       	movw	r14, r30
    14fe:	0e 94 85 09 	call	0x130a	; 0x130a <oled_print_char>
		column = column + font_size;
    1502:	98 0c       	add	r9, r8
		if (column > (127 - font_size)){ //if no space for another char
    1504:	89 2d       	mov	r24, r9
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	a8 16       	cp	r10, r24
    150a:	b9 06       	cpc	r11, r25
    150c:	54 f4       	brge	.+20     	; 0x1522 <oled_print_string+0x8a>
			column = 0;
			line++;
    150e:	73 94       	inc	r7
			oled_goto_column(column);
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 22 0a 	call	0x1444	; 0x1444 <oled_goto_column>
			oled_goto_line(line);
    1518:	87 2d       	mov	r24, r7
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <oled_goto_line>
	int length = strlen(string);
	for (int i = 0; i < length; i++){
		oled_print_char(string[i], font_size, invert);
		column = column + font_size;
		if (column > (127 - font_size)){ //if no space for another char
			column = 0;
    1520:	96 2c       	mov	r9, r6
void oled_print_string(char * string, uint8_t column, uint8_t line, uint8_t font_size, int invert){
	oled_goto_column(column);
	oled_goto_line(line);
	
	int length = strlen(string);
	for (int i = 0; i < length; i++){
    1522:	21 96       	adiw	r28, 0x01	; 1
    1524:	cc 16       	cp	r12, r28
    1526:	dd 06       	cpc	r13, r29
    1528:	29 f7       	brne	.-54     	; 0x14f4 <oled_print_string+0x5c>
			line++;
			oled_goto_column(column);
			oled_goto_line(line);
		}
	}
}
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	ff 90       	pop	r15
    1534:	ef 90       	pop	r14
    1536:	df 90       	pop	r13
    1538:	cf 90       	pop	r12
    153a:	bf 90       	pop	r11
    153c:	af 90       	pop	r10
    153e:	9f 90       	pop	r9
    1540:	8f 90       	pop	r8
    1542:	7f 90       	pop	r7
    1544:	6f 90       	pop	r6
    1546:	08 95       	ret

00001548 <oled_clear_line>:
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
	}
}

void oled_clear_line(int line){
    1548:	cf 93       	push	r28
	oled_goto_line(line);
    154a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <oled_goto_line>
	oled_goto_column(0);
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	0e 94 22 0a 	call	0x1444	; 0x1444 <oled_goto_column>
	for (uint8_t i = 0; i < 128; i++){
    1556:	c0 e0       	ldi	r28, 0x00	; 0
		oled_write_data(0x00);
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	0e 94 5f 09 	call	0x12be	; 0x12be <oled_write_data>
}

void oled_clear_line(int line){
	oled_goto_line(line);
	oled_goto_column(0);
	for (uint8_t i = 0; i < 128; i++){
    155e:	cf 5f       	subi	r28, 0xFF	; 255
    1560:	c0 38       	cpi	r28, 0x80	; 128
    1562:	d1 f7       	brne	.-12     	; 0x1558 <oled_clear_line+0x10>
		oled_write_data(0x00);
	}
}
    1564:	cf 91       	pop	r28
    1566:	08 95       	ret

00001568 <oled_clear_screen>:
			oled_write_data(~pgm_read_byte(font_address + i));
		}
	}
}

void oled_clear_screen(){
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	c0 e0       	ldi	r28, 0x00	; 0
    156e:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t line = 0; line < 8; line++){
		oled_clear_line(line);
    1570:	ce 01       	movw	r24, r28
    1572:	0e 94 a4 0a 	call	0x1548	; 0x1548 <oled_clear_line>
    1576:	21 96       	adiw	r28, 0x01	; 1
		}
	}
}

void oled_clear_screen(){
	for (uint8_t line = 0; line < 8; line++){
    1578:	c8 30       	cpi	r28, 0x08	; 8
    157a:	d1 05       	cpc	r29, r1
    157c:	c9 f7       	brne	.-14     	; 0x1570 <oled_clear_screen+0x8>
		oled_clear_line(line);
	}
}
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	08 95       	ret

00001584 <oled_init>:
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1584:	e0 91 68 01 	lds	r30, 0x0168
    1588:	f0 91 69 01 	lds	r31, 0x0169
    158c:	8e ea       	ldi	r24, 0xAE	; 174
    158e:	80 83       	st	Z, r24
    1590:	e0 91 68 01 	lds	r30, 0x0168
    1594:	f0 91 69 01 	lds	r31, 0x0169
    1598:	81 ea       	ldi	r24, 0xA1	; 161
    159a:	80 83       	st	Z, r24
    159c:	e0 91 68 01 	lds	r30, 0x0168
    15a0:	f0 91 69 01 	lds	r31, 0x0169
    15a4:	8a ed       	ldi	r24, 0xDA	; 218
    15a6:	80 83       	st	Z, r24
    15a8:	e0 91 68 01 	lds	r30, 0x0168
    15ac:	f0 91 69 01 	lds	r31, 0x0169
    15b0:	82 e1       	ldi	r24, 0x12	; 18
    15b2:	80 83       	st	Z, r24
    15b4:	e0 91 68 01 	lds	r30, 0x0168
    15b8:	f0 91 69 01 	lds	r31, 0x0169
    15bc:	88 ec       	ldi	r24, 0xC8	; 200
    15be:	80 83       	st	Z, r24
    15c0:	e0 91 68 01 	lds	r30, 0x0168
    15c4:	f0 91 69 01 	lds	r31, 0x0169
    15c8:	88 ea       	ldi	r24, 0xA8	; 168
    15ca:	80 83       	st	Z, r24
    15cc:	e0 91 68 01 	lds	r30, 0x0168
    15d0:	f0 91 69 01 	lds	r31, 0x0169
    15d4:	8f e3       	ldi	r24, 0x3F	; 63
    15d6:	80 83       	st	Z, r24
    15d8:	e0 91 68 01 	lds	r30, 0x0168
    15dc:	f0 91 69 01 	lds	r31, 0x0169
    15e0:	85 ed       	ldi	r24, 0xD5	; 213
    15e2:	80 83       	st	Z, r24
    15e4:	e0 91 68 01 	lds	r30, 0x0168
    15e8:	f0 91 69 01 	lds	r31, 0x0169
    15ec:	80 e8       	ldi	r24, 0x80	; 128
    15ee:	80 83       	st	Z, r24
    15f0:	e0 91 68 01 	lds	r30, 0x0168
    15f4:	f0 91 69 01 	lds	r31, 0x0169
    15f8:	81 e8       	ldi	r24, 0x81	; 129
    15fa:	80 83       	st	Z, r24
    15fc:	e0 91 68 01 	lds	r30, 0x0168
    1600:	f0 91 69 01 	lds	r31, 0x0169
    1604:	80 e5       	ldi	r24, 0x50	; 80
    1606:	80 83       	st	Z, r24
    1608:	e0 91 68 01 	lds	r30, 0x0168
    160c:	f0 91 69 01 	lds	r31, 0x0169
    1610:	89 ed       	ldi	r24, 0xD9	; 217
    1612:	80 83       	st	Z, r24
    1614:	e0 91 68 01 	lds	r30, 0x0168
    1618:	f0 91 69 01 	lds	r31, 0x0169
    161c:	81 e2       	ldi	r24, 0x21	; 33
    161e:	80 83       	st	Z, r24
    1620:	e0 91 68 01 	lds	r30, 0x0168
    1624:	f0 91 69 01 	lds	r31, 0x0169
    1628:	80 e2       	ldi	r24, 0x20	; 32
    162a:	80 83       	st	Z, r24
    162c:	e0 91 68 01 	lds	r30, 0x0168
    1630:	f0 91 69 01 	lds	r31, 0x0169
    1634:	82 e0       	ldi	r24, 0x02	; 2
    1636:	80 83       	st	Z, r24
    1638:	e0 91 68 01 	lds	r30, 0x0168
    163c:	f0 91 69 01 	lds	r31, 0x0169
    1640:	8b ed       	ldi	r24, 0xDB	; 219
    1642:	80 83       	st	Z, r24
    1644:	e0 91 68 01 	lds	r30, 0x0168
    1648:	f0 91 69 01 	lds	r31, 0x0169
    164c:	80 e3       	ldi	r24, 0x30	; 48
    164e:	80 83       	st	Z, r24
    1650:	e0 91 68 01 	lds	r30, 0x0168
    1654:	f0 91 69 01 	lds	r31, 0x0169
    1658:	8d ea       	ldi	r24, 0xAD	; 173
    165a:	80 83       	st	Z, r24
    165c:	e0 91 68 01 	lds	r30, 0x0168
    1660:	f0 91 69 01 	lds	r31, 0x0169
    1664:	10 82       	st	Z, r1
    1666:	e0 91 68 01 	lds	r30, 0x0168
    166a:	f0 91 69 01 	lds	r31, 0x0169
    166e:	84 ea       	ldi	r24, 0xA4	; 164
    1670:	80 83       	st	Z, r24
    1672:	e0 91 68 01 	lds	r30, 0x0168
    1676:	f0 91 69 01 	lds	r31, 0x0169
    167a:	86 ea       	ldi	r24, 0xA6	; 166
    167c:	80 83       	st	Z, r24
    167e:	e0 91 68 01 	lds	r30, 0x0168
    1682:	f0 91 69 01 	lds	r31, 0x0169
    1686:	8f ea       	ldi	r24, 0xAF	; 175
    1688:	80 83       	st	Z, r24
	oled_write_command(0xad); //master configuration
	oled_write_command(0x00);
	oled_write_command(0xa4); //out follows RAM content
	oled_write_command(0xa6); //set normal display
	oled_write_command(0xaf); // display on
	oled_clear_screen(); //Sets all buffer data to 0
    168a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <oled_clear_screen>
    168e:	08 95       	ret

00001690 <oled_refresh>:
		oled_write_command(lower);
		oled_write_command(0b00010000 | upper);
	}
}

void oled_refresh(){
    1690:	cf 93       	push	r28
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    1692:	e0 91 68 01 	lds	r30, 0x0168
    1696:	f0 91 69 01 	lds	r31, 0x0169
    169a:	10 82       	st	Z, r1
    169c:	e0 91 68 01 	lds	r30, 0x0168
    16a0:	f0 91 69 01 	lds	r31, 0x0169
    16a4:	80 e1       	ldi	r24, 0x10	; 16
    16a6:	80 83       	st	Z, r24
	uint8_t lower = 0 & 0b00001111; // set column to 0
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
    16a8:	80 91 6a 01 	lds	r24, 0x016A
    16ac:	90 91 6b 01 	lds	r25, 0x016B
    16b0:	89 2b       	or	r24, r25
    16b2:	21 f1       	breq	.+72     	; 0x16fc <oled_refresh+0x6c>
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	60 eb       	ldi	r22, 0xB0	; 176
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    16ba:	c0 e0       	ldi	r28, 0x00	; 0
    16bc:	70 e0       	ldi	r23, 0x00	; 0
		oled_write_data(0x00);
	}
}

void oled_write_command(char command){
	*oled_command = command;
    16be:	e0 91 68 01 	lds	r30, 0x0168
    16c2:	f0 91 69 01 	lds	r31, 0x0169
    16c6:	60 83       	st	Z, r22
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    16c8:	8c 2f       	mov	r24, r28
    16ca:	97 2f       	mov	r25, r23
				*oled_front_buffer = oled_back_buffer[column + page*128];
    16cc:	e0 91 64 01 	lds	r30, 0x0164
    16d0:	f0 91 65 01 	lds	r31, 0x0165
    16d4:	9c 01       	movw	r18, r24
    16d6:	24 0f       	add	r18, r20
    16d8:	35 1f       	adc	r19, r21
    16da:	a0 91 66 01 	lds	r26, 0x0166
    16de:	b0 91 67 01 	lds	r27, 0x0167
    16e2:	a2 0f       	add	r26, r18
    16e4:	b3 1f       	adc	r27, r19
    16e6:	2c 91       	ld	r18, X
    16e8:	20 83       	st	Z, r18
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
			oled_write_command(0xB0 + page);
			for(int column = 0; column < 128; column++){
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	80 38       	cpi	r24, 0x80	; 128
    16ee:	91 05       	cpc	r25, r1
    16f0:	69 f7       	brne	.-38     	; 0x16cc <oled_refresh+0x3c>
    16f2:	6f 5f       	subi	r22, 0xFF	; 255
    16f4:	40 58       	subi	r20, 0x80	; 128
    16f6:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t upper = 0 >> 4;
	oled_write_command(lower);
	oled_write_command(0b00010000 | upper);
	
	if(doublebuffering){
		for(int page = 0; page < 8; page++){
    16f8:	68 3b       	cpi	r22, 0xB8	; 184
    16fa:	09 f7       	brne	.-62     	; 0x16be <oled_refresh+0x2e>
			for(int column = 0; column < 128; column++){
				*oled_front_buffer = oled_back_buffer[column + page*128];
			}
		}	
	}
}
    16fc:	cf 91       	pop	r28
    16fe:	08 95       	ret

00001700 <oled_invert_pixel>:
	oled_goto_column(x);
	oled_goto_line(y/8);
	oled_write_data(~(1 << (y % 8)) & oled_read_data());
}

void oled_invert_pixel(int x, int y){
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	eb 01       	movw	r28, r22
	oled_goto_column(x);
    1706:	0e 94 22 0a 	call	0x1444	; 0x1444 <oled_goto_column>
	oled_goto_line(y/8);
    170a:	ce 01       	movw	r24, r28
    170c:	dd 23       	and	r29, r29
    170e:	0c f4       	brge	.+2      	; 0x1712 <oled_invert_pixel+0x12>
    1710:	07 96       	adiw	r24, 0x07	; 7
    1712:	95 95       	asr	r25
    1714:	87 95       	ror	r24
    1716:	95 95       	asr	r25
    1718:	87 95       	ror	r24
    171a:	95 95       	asr	r25
    171c:	87 95       	ror	r24
    171e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <oled_goto_line>
	oled_write_data((1 << (y % 8)) ^ oled_read_data()); //exclusive or
    1722:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <oled_read_data>
    1726:	be 01       	movw	r22, r28
    1728:	67 70       	andi	r22, 0x07	; 7
    172a:	70 78       	andi	r23, 0x80	; 128
    172c:	77 23       	and	r23, r23
    172e:	34 f4       	brge	.+12     	; 0x173c <oled_invert_pixel+0x3c>
    1730:	61 50       	subi	r22, 0x01	; 1
    1732:	71 09       	sbc	r23, r1
    1734:	68 6f       	ori	r22, 0xF8	; 248
    1736:	7f 6f       	ori	r23, 0xFF	; 255
    1738:	6f 5f       	subi	r22, 0xFF	; 255
    173a:	7f 4f       	sbci	r23, 0xFF	; 255
    173c:	21 e0       	ldi	r18, 0x01	; 1
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	a9 01       	movw	r20, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <oled_invert_pixel+0x48>
    1744:	44 0f       	add	r20, r20
    1746:	55 1f       	adc	r21, r21
    1748:	6a 95       	dec	r22
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <oled_invert_pixel+0x44>
    174c:	84 27       	eor	r24, r20
    174e:	0e 94 5f 09 	call	0x12be	; 0x12be <oled_write_data>
}
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	08 95       	ret

00001758 <oled_invert_rectangle>:
	}
	
	//not finished
}

void oled_invert_rectangle(int x1, int y1, int x2, int y2){
    1758:	8f 92       	push	r8
    175a:	9f 92       	push	r9
    175c:	af 92       	push	r10
    175e:	bf 92       	push	r11
    1760:	cf 92       	push	r12
    1762:	df 92       	push	r13
    1764:	ef 92       	push	r14
    1766:	ff 92       	push	r15
    1768:	0f 93       	push	r16
    176a:	1f 93       	push	r17
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	8c 01       	movw	r16, r24
    1772:	6b 01       	movw	r12, r22
    1774:	5a 01       	movw	r10, r20
    1776:	79 01       	movw	r14, r18
	for (int x = x1; x < x2; x++){
    1778:	84 17       	cp	r24, r20
    177a:	95 07       	cpc	r25, r21
    177c:	b4 f4       	brge	.+44     	; 0x17aa <oled_invert_rectangle+0x52>
		for (int y = y1; y < y2; y++){
    177e:	86 2e       	mov	r8, r22
    1780:	9d 2c       	mov	r9, r13
    1782:	0d c0       	rjmp	.+26     	; 0x179e <oled_invert_rectangle+0x46>
			oled_invert_pixel(x, y);
    1784:	be 01       	movw	r22, r28
    1786:	c8 01       	movw	r24, r16
    1788:	0e 94 80 0b 	call	0x1700	; 0x1700 <oled_invert_pixel>
	//not finished
}

void oled_invert_rectangle(int x1, int y1, int x2, int y2){
	for (int x = x1; x < x2; x++){
		for (int y = y1; y < y2; y++){
    178c:	21 96       	adiw	r28, 0x01	; 1
    178e:	ce 15       	cp	r28, r14
    1790:	df 05       	cpc	r29, r15
    1792:	c4 f3       	brlt	.-16     	; 0x1784 <oled_invert_rectangle+0x2c>
	
	//not finished
}

void oled_invert_rectangle(int x1, int y1, int x2, int y2){
	for (int x = x1; x < x2; x++){
    1794:	0f 5f       	subi	r16, 0xFF	; 255
    1796:	1f 4f       	sbci	r17, 0xFF	; 255
    1798:	0a 15       	cp	r16, r10
    179a:	1b 05       	cpc	r17, r11
    179c:	34 f4       	brge	.+12     	; 0x17aa <oled_invert_rectangle+0x52>
		for (int y = y1; y < y2; y++){
    179e:	ce 14       	cp	r12, r14
    17a0:	df 04       	cpc	r13, r15
    17a2:	c4 f7       	brge	.-16     	; 0x1794 <oled_invert_rectangle+0x3c>
    17a4:	c8 2d       	mov	r28, r8
    17a6:	d9 2d       	mov	r29, r9
    17a8:	ed cf       	rjmp	.-38     	; 0x1784 <oled_invert_rectangle+0x2c>
			oled_invert_pixel(x, y);
		}
	}
}
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	ff 90       	pop	r15
    17b4:	ef 90       	pop	r14
    17b6:	df 90       	pop	r13
    17b8:	cf 90       	pop	r12
    17ba:	bf 90       	pop	r11
    17bc:	af 90       	pop	r10
    17be:	9f 90       	pop	r9
    17c0:	8f 90       	pop	r8
    17c2:	08 95       	ret

000017c4 <spi_master_init>:

#include "spi.h"

void spi_master_init(int node)
{
	if (node == NODE_1){
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	91 05       	cpc	r25, r1
    17c8:	41 f4       	brne	.+16     	; 0x17da <spi_master_init+0x16>
		DDRB |= (1<<DDB4)|(1<<DDB5)|(1<<DDB7); //Set MOSI and SCK output, all others input
    17ca:	87 b3       	in	r24, 0x17	; 23
    17cc:	80 6b       	ori	r24, 0xB0	; 176
    17ce:	87 bb       	out	0x17, r24	; 23
		DDRB &= ~(1 << DDB6);
    17d0:	be 98       	cbi	0x17, 6	; 23

		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X); //Enable SPI, Master, set clock rate fck/16
    17d2:	81 e5       	ldi	r24, 0x51	; 81
    17d4:	8d b9       	out	0x0d, r24	; 13
		set_bit(PORTB,PB4); //Disable chip
    17d6:	c4 9a       	sbi	0x18, 4	; 24
    17d8:	08 95       	ret
	}
	else if (node == NODE_2){
    17da:	02 97       	sbiw	r24, 0x02	; 2
    17dc:	39 f4       	brne	.+14     	; 0x17ec <spi_master_init+0x28>
		//Without setting PB0 as an output printf doesn|t work!?!?!?!?
		DDRB |= (1<<PB0)|(1 << PB1)|(1 << PB2)|(1 << PB7); //Set MOSI, SS and SCK output, all others input
    17de:	87 b3       	in	r24, 0x17	; 23
    17e0:	87 68       	ori	r24, 0x87	; 135
    17e2:	87 bb       	out	0x17, r24	; 23
		DDRB &= ~(1 << PB3); //DO NOT TINK IS NECCSCAS RYTSR:
    17e4:	bb 98       	cbi	0x17, 3	; 23

		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); //Enable SPI, Master, set clock rate fck/16
    17e6:	81 e5       	ldi	r24, 0x51	; 81
    17e8:	8d b9       	out	0x0d, r24	; 13
		set_bit(PORTB,PB7); //Disable chip
    17ea:	c7 9a       	sbi	0x18, 7	; 24
    17ec:	08 95       	ret

000017ee <spi_master_transmit>:
	}
}

char spi_master_transmit(char cData)
{
	SPDR = cData; //Start transmission
    17ee:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))); //Wait for transmission complete	
    17f0:	77 9b       	sbis	0x0e, 7	; 14
    17f2:	fe cf       	rjmp	.-4      	; 0x17f0 <spi_master_transmit+0x2>
	return SPDR;
    17f4:	8f b1       	in	r24, 0x0f	; 15
}
    17f6:	08 95       	ret

000017f8 <touch_init>:
    17f8:	b8 98       	cbi	0x17, 0	; 23
    17fa:	b9 98       	cbi	0x17, 1	; 23
    17fc:	08 95       	ret

000017fe <uart_putchar>:
	UCSR0C = (((node == NODE_1)<<URSEL0)|(1<<USBS0)|(3<<UCSZ00)); //Set frame format: 2 stop bits, 8 data bits //Asynchronous - No parity (?) //URSEL makes sure we won't access UBRRH during operation, but UCSRC. //URSEL should not be set in node 2
	fdevopen(uart_putchar, uart_getchar);
}

void uart_putchar(char c){
	while (!( UCSR0A & (1<<UDRE0))); //Wait for empty transmit buffer
    17fe:	5d 9b       	sbis	0x0b, 5	; 11
    1800:	fe cf       	rjmp	.-4      	; 0x17fe <uart_putchar>
	UDR0 = c; //Put data into buffer, sends the data
    1802:	8c b9       	out	0x0c, r24	; 12
    1804:	08 95       	ret

00001806 <uart_getchar>:
}

unsigned char uart_getchar(){
	while (!( UCSR0A & (1<<RXC0)));
    1806:	5f 9b       	sbis	0x0b, 7	; 11
    1808:	fe cf       	rjmp	.-4      	; 0x1806 <uart_getchar>
	return UDR0;
    180a:	8c b1       	in	r24, 0x0c	; 12
    180c:	08 95       	ret

0000180e <uart_init>:
#include <stdio.h>
#include <avr/io.h>

#include "uart.h"

void uart_init(int baudRate, int node){
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	eb 01       	movw	r28, r22
	int UBRR = ((long)F_CPU/((long)16*baudRate) - 1);
    1814:	aa 27       	eor	r26, r26
    1816:	97 fd       	sbrc	r25, 7
    1818:	a0 95       	com	r26
    181a:	ba 2f       	mov	r27, r26
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	aa 1f       	adc	r26, r26
    1822:	bb 1f       	adc	r27, r27
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	aa 1f       	adc	r26, r26
    182a:	bb 1f       	adc	r27, r27
    182c:	9c 01       	movw	r18, r24
    182e:	ad 01       	movw	r20, r26
    1830:	22 0f       	add	r18, r18
    1832:	33 1f       	adc	r19, r19
    1834:	44 1f       	adc	r20, r20
    1836:	55 1f       	adc	r21, r21
    1838:	22 0f       	add	r18, r18
    183a:	33 1f       	adc	r19, r19
    183c:	44 1f       	adc	r20, r20
    183e:	55 1f       	adc	r21, r21
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	8b e4       	ldi	r24, 0x4B	; 75
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <__divmodsi4>
    184c:	21 50       	subi	r18, 0x01	; 1
    184e:	31 09       	sbc	r19, r1
	UBRR0L = UBRR;
    1850:	29 b9       	out	0x09, r18	; 9
    UBRR0H = (UBRR>>8);
    1852:	30 bd       	out	0x20, r19	; 32
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); //Enable receiver and transmitter 
    1854:	88 e1       	ldi	r24, 0x18	; 24
    1856:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (((node == NODE_1)<<URSEL0)|(1<<USBS0)|(3<<UCSZ00)); //Set frame format: 2 stop bits, 8 data bits //Asynchronous - No parity (?) //URSEL makes sure we won't access UBRRH during operation, but UCSRC. //URSEL should not be set in node 2
    1858:	21 97       	sbiw	r28, 0x01	; 1
    185a:	11 f4       	brne	.+4      	; 0x1860 <uart_init+0x52>
    185c:	8e e8       	ldi	r24, 0x8E	; 142
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <uart_init+0x54>
    1860:	8e e0       	ldi	r24, 0x0E	; 14
    1862:	80 bd       	out	0x20, r24	; 32
	fdevopen(uart_putchar, uart_getchar);
    1864:	63 e0       	ldi	r22, 0x03	; 3
    1866:	7c e0       	ldi	r23, 0x0C	; 12
    1868:	8f ef       	ldi	r24, 0xFF	; 255
    186a:	9b e0       	ldi	r25, 0x0B	; 11
    186c:	0e 94 75 11 	call	0x22ea	; 0x22ea <fdevopen>
}
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	08 95       	ret

00001876 <__subsf3>:
    1876:	50 58       	subi	r21, 0x80	; 128

00001878 <__addsf3>:
    1878:	bb 27       	eor	r27, r27
    187a:	aa 27       	eor	r26, r26
    187c:	0e d0       	rcall	.+28     	; 0x189a <__addsf3x>
    187e:	d4 c1       	rjmp	.+936    	; 0x1c28 <__fp_round>
    1880:	c5 d1       	rcall	.+906    	; 0x1c0c <__fp_pscA>
    1882:	30 f0       	brcs	.+12     	; 0x1890 <__addsf3+0x18>
    1884:	ca d1       	rcall	.+916    	; 0x1c1a <__fp_pscB>
    1886:	20 f0       	brcs	.+8      	; 0x1890 <__addsf3+0x18>
    1888:	31 f4       	brne	.+12     	; 0x1896 <__addsf3+0x1e>
    188a:	9f 3f       	cpi	r25, 0xFF	; 255
    188c:	11 f4       	brne	.+4      	; 0x1892 <__addsf3+0x1a>
    188e:	1e f4       	brtc	.+6      	; 0x1896 <__addsf3+0x1e>
    1890:	95 c1       	rjmp	.+810    	; 0x1bbc <__fp_nan>
    1892:	0e f4       	brtc	.+2      	; 0x1896 <__addsf3+0x1e>
    1894:	e0 95       	com	r30
    1896:	e7 fb       	bst	r30, 7
    1898:	8b c1       	rjmp	.+790    	; 0x1bb0 <__fp_inf>

0000189a <__addsf3x>:
    189a:	e9 2f       	mov	r30, r25
    189c:	d6 d1       	rcall	.+940    	; 0x1c4a <__fp_split3>
    189e:	80 f3       	brcs	.-32     	; 0x1880 <__addsf3+0x8>
    18a0:	ba 17       	cp	r27, r26
    18a2:	62 07       	cpc	r22, r18
    18a4:	73 07       	cpc	r23, r19
    18a6:	84 07       	cpc	r24, r20
    18a8:	95 07       	cpc	r25, r21
    18aa:	18 f0       	brcs	.+6      	; 0x18b2 <__addsf3x+0x18>
    18ac:	71 f4       	brne	.+28     	; 0x18ca <__addsf3x+0x30>
    18ae:	9e f5       	brtc	.+102    	; 0x1916 <__addsf3x+0x7c>
    18b0:	ee c1       	rjmp	.+988    	; 0x1c8e <__fp_zero>
    18b2:	0e f4       	brtc	.+2      	; 0x18b6 <__addsf3x+0x1c>
    18b4:	e0 95       	com	r30
    18b6:	0b 2e       	mov	r0, r27
    18b8:	ba 2f       	mov	r27, r26
    18ba:	a0 2d       	mov	r26, r0
    18bc:	0b 01       	movw	r0, r22
    18be:	b9 01       	movw	r22, r18
    18c0:	90 01       	movw	r18, r0
    18c2:	0c 01       	movw	r0, r24
    18c4:	ca 01       	movw	r24, r20
    18c6:	a0 01       	movw	r20, r0
    18c8:	11 24       	eor	r1, r1
    18ca:	ff 27       	eor	r31, r31
    18cc:	59 1b       	sub	r21, r25
    18ce:	99 f0       	breq	.+38     	; 0x18f6 <__addsf3x+0x5c>
    18d0:	59 3f       	cpi	r21, 0xF9	; 249
    18d2:	50 f4       	brcc	.+20     	; 0x18e8 <__addsf3x+0x4e>
    18d4:	50 3e       	cpi	r21, 0xE0	; 224
    18d6:	68 f1       	brcs	.+90     	; 0x1932 <__addsf3x+0x98>
    18d8:	1a 16       	cp	r1, r26
    18da:	f0 40       	sbci	r31, 0x00	; 0
    18dc:	a2 2f       	mov	r26, r18
    18de:	23 2f       	mov	r18, r19
    18e0:	34 2f       	mov	r19, r20
    18e2:	44 27       	eor	r20, r20
    18e4:	58 5f       	subi	r21, 0xF8	; 248
    18e6:	f3 cf       	rjmp	.-26     	; 0x18ce <__addsf3x+0x34>
    18e8:	46 95       	lsr	r20
    18ea:	37 95       	ror	r19
    18ec:	27 95       	ror	r18
    18ee:	a7 95       	ror	r26
    18f0:	f0 40       	sbci	r31, 0x00	; 0
    18f2:	53 95       	inc	r21
    18f4:	c9 f7       	brne	.-14     	; 0x18e8 <__addsf3x+0x4e>
    18f6:	7e f4       	brtc	.+30     	; 0x1916 <__addsf3x+0x7c>
    18f8:	1f 16       	cp	r1, r31
    18fa:	ba 0b       	sbc	r27, r26
    18fc:	62 0b       	sbc	r22, r18
    18fe:	73 0b       	sbc	r23, r19
    1900:	84 0b       	sbc	r24, r20
    1902:	ba f0       	brmi	.+46     	; 0x1932 <__addsf3x+0x98>
    1904:	91 50       	subi	r25, 0x01	; 1
    1906:	a1 f0       	breq	.+40     	; 0x1930 <__addsf3x+0x96>
    1908:	ff 0f       	add	r31, r31
    190a:	bb 1f       	adc	r27, r27
    190c:	66 1f       	adc	r22, r22
    190e:	77 1f       	adc	r23, r23
    1910:	88 1f       	adc	r24, r24
    1912:	c2 f7       	brpl	.-16     	; 0x1904 <__addsf3x+0x6a>
    1914:	0e c0       	rjmp	.+28     	; 0x1932 <__addsf3x+0x98>
    1916:	ba 0f       	add	r27, r26
    1918:	62 1f       	adc	r22, r18
    191a:	73 1f       	adc	r23, r19
    191c:	84 1f       	adc	r24, r20
    191e:	48 f4       	brcc	.+18     	; 0x1932 <__addsf3x+0x98>
    1920:	87 95       	ror	r24
    1922:	77 95       	ror	r23
    1924:	67 95       	ror	r22
    1926:	b7 95       	ror	r27
    1928:	f7 95       	ror	r31
    192a:	9e 3f       	cpi	r25, 0xFE	; 254
    192c:	08 f0       	brcs	.+2      	; 0x1930 <__addsf3x+0x96>
    192e:	b3 cf       	rjmp	.-154    	; 0x1896 <__addsf3+0x1e>
    1930:	93 95       	inc	r25
    1932:	88 0f       	add	r24, r24
    1934:	08 f0       	brcs	.+2      	; 0x1938 <__addsf3x+0x9e>
    1936:	99 27       	eor	r25, r25
    1938:	ee 0f       	add	r30, r30
    193a:	97 95       	ror	r25
    193c:	87 95       	ror	r24
    193e:	08 95       	ret
    1940:	65 d1       	rcall	.+714    	; 0x1c0c <__fp_pscA>
    1942:	58 f0       	brcs	.+22     	; 0x195a <__addsf3x+0xc0>
    1944:	80 e8       	ldi	r24, 0x80	; 128
    1946:	91 e0       	ldi	r25, 0x01	; 1
    1948:	09 f4       	brne	.+2      	; 0x194c <__addsf3x+0xb2>
    194a:	9e ef       	ldi	r25, 0xFE	; 254
    194c:	66 d1       	rcall	.+716    	; 0x1c1a <__fp_pscB>
    194e:	28 f0       	brcs	.+10     	; 0x195a <__addsf3x+0xc0>
    1950:	40 e8       	ldi	r20, 0x80	; 128
    1952:	51 e0       	ldi	r21, 0x01	; 1
    1954:	59 f4       	brne	.+22     	; 0x196c <atan2+0xe>
    1956:	5e ef       	ldi	r21, 0xFE	; 254
    1958:	09 c0       	rjmp	.+18     	; 0x196c <atan2+0xe>
    195a:	30 c1       	rjmp	.+608    	; 0x1bbc <__fp_nan>
    195c:	98 c1       	rjmp	.+816    	; 0x1c8e <__fp_zero>

0000195e <atan2>:
    195e:	e9 2f       	mov	r30, r25
    1960:	e0 78       	andi	r30, 0x80	; 128
    1962:	73 d1       	rcall	.+742    	; 0x1c4a <__fp_split3>
    1964:	68 f3       	brcs	.-38     	; 0x1940 <__addsf3x+0xa6>
    1966:	09 2e       	mov	r0, r25
    1968:	05 2a       	or	r0, r21
    196a:	c1 f3       	breq	.-16     	; 0x195c <__addsf3x+0xc2>
    196c:	26 17       	cp	r18, r22
    196e:	37 07       	cpc	r19, r23
    1970:	48 07       	cpc	r20, r24
    1972:	59 07       	cpc	r21, r25
    1974:	38 f0       	brcs	.+14     	; 0x1984 <atan2+0x26>
    1976:	0e 2e       	mov	r0, r30
    1978:	07 f8       	bld	r0, 7
    197a:	e0 25       	eor	r30, r0
    197c:	69 f0       	breq	.+26     	; 0x1998 <atan2+0x3a>
    197e:	e0 25       	eor	r30, r0
    1980:	e0 64       	ori	r30, 0x40	; 64
    1982:	0a c0       	rjmp	.+20     	; 0x1998 <atan2+0x3a>
    1984:	ef 63       	ori	r30, 0x3F	; 63
    1986:	07 f8       	bld	r0, 7
    1988:	00 94       	com	r0
    198a:	07 fa       	bst	r0, 7
    198c:	db 01       	movw	r26, r22
    198e:	b9 01       	movw	r22, r18
    1990:	9d 01       	movw	r18, r26
    1992:	dc 01       	movw	r26, r24
    1994:	ca 01       	movw	r24, r20
    1996:	ad 01       	movw	r20, r26
    1998:	ef 93       	push	r30
    199a:	43 d0       	rcall	.+134    	; 0x1a22 <__divsf3_pse>
    199c:	45 d1       	rcall	.+650    	; 0x1c28 <__fp_round>
    199e:	0a d0       	rcall	.+20     	; 0x19b4 <atan>
    19a0:	5f 91       	pop	r21
    19a2:	55 23       	and	r21, r21
    19a4:	31 f0       	breq	.+12     	; 0x19b2 <atan2+0x54>
    19a6:	2b ed       	ldi	r18, 0xDB	; 219
    19a8:	3f e0       	ldi	r19, 0x0F	; 15
    19aa:	49 e4       	ldi	r20, 0x49	; 73
    19ac:	50 fd       	sbrc	r21, 0
    19ae:	49 ec       	ldi	r20, 0xC9	; 201
    19b0:	63 cf       	rjmp	.-314    	; 0x1878 <__addsf3>
    19b2:	08 95       	ret

000019b4 <atan>:
    19b4:	df 93       	push	r29
    19b6:	dd 27       	eor	r29, r29
    19b8:	b9 2f       	mov	r27, r25
    19ba:	bf 77       	andi	r27, 0x7F	; 127
    19bc:	40 e8       	ldi	r20, 0x80	; 128
    19be:	5f e3       	ldi	r21, 0x3F	; 63
    19c0:	16 16       	cp	r1, r22
    19c2:	17 06       	cpc	r1, r23
    19c4:	48 07       	cpc	r20, r24
    19c6:	5b 07       	cpc	r21, r27
    19c8:	10 f4       	brcc	.+4      	; 0x19ce <atan+0x1a>
    19ca:	d9 2f       	mov	r29, r25
    19cc:	67 d1       	rcall	.+718    	; 0x1c9c <inverse>
    19ce:	9f 93       	push	r25
    19d0:	8f 93       	push	r24
    19d2:	7f 93       	push	r23
    19d4:	6f 93       	push	r22
    19d6:	0e d2       	rcall	.+1052   	; 0x1df4 <square>
    19d8:	e0 e7       	ldi	r30, 0x70	; 112
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	f2 d0       	rcall	.+484    	; 0x1bc2 <__fp_powser>
    19de:	24 d1       	rcall	.+584    	; 0x1c28 <__fp_round>
    19e0:	2f 91       	pop	r18
    19e2:	3f 91       	pop	r19
    19e4:	4f 91       	pop	r20
    19e6:	5f 91       	pop	r21
    19e8:	6c d1       	rcall	.+728    	; 0x1cc2 <__mulsf3x>
    19ea:	dd 23       	and	r29, r29
    19ec:	49 f0       	breq	.+18     	; 0x1a00 <atan+0x4c>
    19ee:	90 58       	subi	r25, 0x80	; 128
    19f0:	a2 ea       	ldi	r26, 0xA2	; 162
    19f2:	2a ed       	ldi	r18, 0xDA	; 218
    19f4:	3f e0       	ldi	r19, 0x0F	; 15
    19f6:	49 ec       	ldi	r20, 0xC9	; 201
    19f8:	5f e3       	ldi	r21, 0x3F	; 63
    19fa:	d0 78       	andi	r29, 0x80	; 128
    19fc:	5d 27       	eor	r21, r29
    19fe:	4d df       	rcall	.-358    	; 0x189a <__addsf3x>
    1a00:	df 91       	pop	r29
    1a02:	12 c1       	rjmp	.+548    	; 0x1c28 <__fp_round>

00001a04 <__divsf3>:
    1a04:	0c d0       	rcall	.+24     	; 0x1a1e <__divsf3x>
    1a06:	10 c1       	rjmp	.+544    	; 0x1c28 <__fp_round>
    1a08:	08 d1       	rcall	.+528    	; 0x1c1a <__fp_pscB>
    1a0a:	40 f0       	brcs	.+16     	; 0x1a1c <__divsf3+0x18>
    1a0c:	ff d0       	rcall	.+510    	; 0x1c0c <__fp_pscA>
    1a0e:	30 f0       	brcs	.+12     	; 0x1a1c <__divsf3+0x18>
    1a10:	21 f4       	brne	.+8      	; 0x1a1a <__divsf3+0x16>
    1a12:	5f 3f       	cpi	r21, 0xFF	; 255
    1a14:	19 f0       	breq	.+6      	; 0x1a1c <__divsf3+0x18>
    1a16:	cc c0       	rjmp	.+408    	; 0x1bb0 <__fp_inf>
    1a18:	51 11       	cpse	r21, r1
    1a1a:	3a c1       	rjmp	.+628    	; 0x1c90 <__fp_szero>
    1a1c:	cf c0       	rjmp	.+414    	; 0x1bbc <__fp_nan>

00001a1e <__divsf3x>:
    1a1e:	15 d1       	rcall	.+554    	; 0x1c4a <__fp_split3>
    1a20:	98 f3       	brcs	.-26     	; 0x1a08 <__divsf3+0x4>

00001a22 <__divsf3_pse>:
    1a22:	99 23       	and	r25, r25
    1a24:	c9 f3       	breq	.-14     	; 0x1a18 <__divsf3+0x14>
    1a26:	55 23       	and	r21, r21
    1a28:	b1 f3       	breq	.-20     	; 0x1a16 <__divsf3+0x12>
    1a2a:	95 1b       	sub	r25, r21
    1a2c:	55 0b       	sbc	r21, r21
    1a2e:	bb 27       	eor	r27, r27
    1a30:	aa 27       	eor	r26, r26
    1a32:	62 17       	cp	r22, r18
    1a34:	73 07       	cpc	r23, r19
    1a36:	84 07       	cpc	r24, r20
    1a38:	38 f0       	brcs	.+14     	; 0x1a48 <__divsf3_pse+0x26>
    1a3a:	9f 5f       	subi	r25, 0xFF	; 255
    1a3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a3e:	22 0f       	add	r18, r18
    1a40:	33 1f       	adc	r19, r19
    1a42:	44 1f       	adc	r20, r20
    1a44:	aa 1f       	adc	r26, r26
    1a46:	a9 f3       	breq	.-22     	; 0x1a32 <__divsf3_pse+0x10>
    1a48:	33 d0       	rcall	.+102    	; 0x1ab0 <__divsf3_pse+0x8e>
    1a4a:	0e 2e       	mov	r0, r30
    1a4c:	3a f0       	brmi	.+14     	; 0x1a5c <__divsf3_pse+0x3a>
    1a4e:	e0 e8       	ldi	r30, 0x80	; 128
    1a50:	30 d0       	rcall	.+96     	; 0x1ab2 <__divsf3_pse+0x90>
    1a52:	91 50       	subi	r25, 0x01	; 1
    1a54:	50 40       	sbci	r21, 0x00	; 0
    1a56:	e6 95       	lsr	r30
    1a58:	00 1c       	adc	r0, r0
    1a5a:	ca f7       	brpl	.-14     	; 0x1a4e <__divsf3_pse+0x2c>
    1a5c:	29 d0       	rcall	.+82     	; 0x1ab0 <__divsf3_pse+0x8e>
    1a5e:	fe 2f       	mov	r31, r30
    1a60:	27 d0       	rcall	.+78     	; 0x1ab0 <__divsf3_pse+0x8e>
    1a62:	66 0f       	add	r22, r22
    1a64:	77 1f       	adc	r23, r23
    1a66:	88 1f       	adc	r24, r24
    1a68:	bb 1f       	adc	r27, r27
    1a6a:	26 17       	cp	r18, r22
    1a6c:	37 07       	cpc	r19, r23
    1a6e:	48 07       	cpc	r20, r24
    1a70:	ab 07       	cpc	r26, r27
    1a72:	b0 e8       	ldi	r27, 0x80	; 128
    1a74:	09 f0       	breq	.+2      	; 0x1a78 <__divsf3_pse+0x56>
    1a76:	bb 0b       	sbc	r27, r27
    1a78:	80 2d       	mov	r24, r0
    1a7a:	bf 01       	movw	r22, r30
    1a7c:	ff 27       	eor	r31, r31
    1a7e:	93 58       	subi	r25, 0x83	; 131
    1a80:	5f 4f       	sbci	r21, 0xFF	; 255
    1a82:	2a f0       	brmi	.+10     	; 0x1a8e <__divsf3_pse+0x6c>
    1a84:	9e 3f       	cpi	r25, 0xFE	; 254
    1a86:	51 05       	cpc	r21, r1
    1a88:	68 f0       	brcs	.+26     	; 0x1aa4 <__divsf3_pse+0x82>
    1a8a:	92 c0       	rjmp	.+292    	; 0x1bb0 <__fp_inf>
    1a8c:	01 c1       	rjmp	.+514    	; 0x1c90 <__fp_szero>
    1a8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a90:	ec f3       	brlt	.-6      	; 0x1a8c <__divsf3_pse+0x6a>
    1a92:	98 3e       	cpi	r25, 0xE8	; 232
    1a94:	dc f3       	brlt	.-10     	; 0x1a8c <__divsf3_pse+0x6a>
    1a96:	86 95       	lsr	r24
    1a98:	77 95       	ror	r23
    1a9a:	67 95       	ror	r22
    1a9c:	b7 95       	ror	r27
    1a9e:	f7 95       	ror	r31
    1aa0:	9f 5f       	subi	r25, 0xFF	; 255
    1aa2:	c9 f7       	brne	.-14     	; 0x1a96 <__divsf3_pse+0x74>
    1aa4:	88 0f       	add	r24, r24
    1aa6:	91 1d       	adc	r25, r1
    1aa8:	96 95       	lsr	r25
    1aaa:	87 95       	ror	r24
    1aac:	97 f9       	bld	r25, 7
    1aae:	08 95       	ret
    1ab0:	e1 e0       	ldi	r30, 0x01	; 1
    1ab2:	66 0f       	add	r22, r22
    1ab4:	77 1f       	adc	r23, r23
    1ab6:	88 1f       	adc	r24, r24
    1ab8:	bb 1f       	adc	r27, r27
    1aba:	62 17       	cp	r22, r18
    1abc:	73 07       	cpc	r23, r19
    1abe:	84 07       	cpc	r24, r20
    1ac0:	ba 07       	cpc	r27, r26
    1ac2:	20 f0       	brcs	.+8      	; 0x1acc <__divsf3_pse+0xaa>
    1ac4:	62 1b       	sub	r22, r18
    1ac6:	73 0b       	sbc	r23, r19
    1ac8:	84 0b       	sbc	r24, r20
    1aca:	ba 0b       	sbc	r27, r26
    1acc:	ee 1f       	adc	r30, r30
    1ace:	88 f7       	brcc	.-30     	; 0x1ab2 <__divsf3_pse+0x90>
    1ad0:	e0 95       	com	r30
    1ad2:	08 95       	ret

00001ad4 <__fixsfsi>:
    1ad4:	04 d0       	rcall	.+8      	; 0x1ade <__fixunssfsi>
    1ad6:	68 94       	set
    1ad8:	b1 11       	cpse	r27, r1
    1ada:	da c0       	rjmp	.+436    	; 0x1c90 <__fp_szero>
    1adc:	08 95       	ret

00001ade <__fixunssfsi>:
    1ade:	bd d0       	rcall	.+378    	; 0x1c5a <__fp_splitA>
    1ae0:	88 f0       	brcs	.+34     	; 0x1b04 <__fixunssfsi+0x26>
    1ae2:	9f 57       	subi	r25, 0x7F	; 127
    1ae4:	90 f0       	brcs	.+36     	; 0x1b0a <__fixunssfsi+0x2c>
    1ae6:	b9 2f       	mov	r27, r25
    1ae8:	99 27       	eor	r25, r25
    1aea:	b7 51       	subi	r27, 0x17	; 23
    1aec:	a0 f0       	brcs	.+40     	; 0x1b16 <__fixunssfsi+0x38>
    1aee:	d1 f0       	breq	.+52     	; 0x1b24 <__fixunssfsi+0x46>
    1af0:	66 0f       	add	r22, r22
    1af2:	77 1f       	adc	r23, r23
    1af4:	88 1f       	adc	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	1a f0       	brmi	.+6      	; 0x1b00 <__fixunssfsi+0x22>
    1afa:	ba 95       	dec	r27
    1afc:	c9 f7       	brne	.-14     	; 0x1af0 <__fixunssfsi+0x12>
    1afe:	12 c0       	rjmp	.+36     	; 0x1b24 <__fixunssfsi+0x46>
    1b00:	b1 30       	cpi	r27, 0x01	; 1
    1b02:	81 f0       	breq	.+32     	; 0x1b24 <__fixunssfsi+0x46>
    1b04:	c4 d0       	rcall	.+392    	; 0x1c8e <__fp_zero>
    1b06:	b1 e0       	ldi	r27, 0x01	; 1
    1b08:	08 95       	ret
    1b0a:	c1 c0       	rjmp	.+386    	; 0x1c8e <__fp_zero>
    1b0c:	67 2f       	mov	r22, r23
    1b0e:	78 2f       	mov	r23, r24
    1b10:	88 27       	eor	r24, r24
    1b12:	b8 5f       	subi	r27, 0xF8	; 248
    1b14:	39 f0       	breq	.+14     	; 0x1b24 <__fixunssfsi+0x46>
    1b16:	b9 3f       	cpi	r27, 0xF9	; 249
    1b18:	cc f3       	brlt	.-14     	; 0x1b0c <__fixunssfsi+0x2e>
    1b1a:	86 95       	lsr	r24
    1b1c:	77 95       	ror	r23
    1b1e:	67 95       	ror	r22
    1b20:	b3 95       	inc	r27
    1b22:	d9 f7       	brne	.-10     	; 0x1b1a <__fixunssfsi+0x3c>
    1b24:	3e f4       	brtc	.+14     	; 0x1b34 <__fixunssfsi+0x56>
    1b26:	90 95       	com	r25
    1b28:	80 95       	com	r24
    1b2a:	70 95       	com	r23
    1b2c:	61 95       	neg	r22
    1b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b30:	8f 4f       	sbci	r24, 0xFF	; 255
    1b32:	9f 4f       	sbci	r25, 0xFF	; 255
    1b34:	08 95       	ret

00001b36 <__floatunsisf>:
    1b36:	e8 94       	clt
    1b38:	09 c0       	rjmp	.+18     	; 0x1b4c <__floatsisf+0x12>

00001b3a <__floatsisf>:
    1b3a:	97 fb       	bst	r25, 7
    1b3c:	3e f4       	brtc	.+14     	; 0x1b4c <__floatsisf+0x12>
    1b3e:	90 95       	com	r25
    1b40:	80 95       	com	r24
    1b42:	70 95       	com	r23
    1b44:	61 95       	neg	r22
    1b46:	7f 4f       	sbci	r23, 0xFF	; 255
    1b48:	8f 4f       	sbci	r24, 0xFF	; 255
    1b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4c:	99 23       	and	r25, r25
    1b4e:	a9 f0       	breq	.+42     	; 0x1b7a <__floatsisf+0x40>
    1b50:	f9 2f       	mov	r31, r25
    1b52:	96 e9       	ldi	r25, 0x96	; 150
    1b54:	bb 27       	eor	r27, r27
    1b56:	93 95       	inc	r25
    1b58:	f6 95       	lsr	r31
    1b5a:	87 95       	ror	r24
    1b5c:	77 95       	ror	r23
    1b5e:	67 95       	ror	r22
    1b60:	b7 95       	ror	r27
    1b62:	f1 11       	cpse	r31, r1
    1b64:	f8 cf       	rjmp	.-16     	; 0x1b56 <__floatsisf+0x1c>
    1b66:	fa f4       	brpl	.+62     	; 0x1ba6 <__floatsisf+0x6c>
    1b68:	bb 0f       	add	r27, r27
    1b6a:	11 f4       	brne	.+4      	; 0x1b70 <__floatsisf+0x36>
    1b6c:	60 ff       	sbrs	r22, 0
    1b6e:	1b c0       	rjmp	.+54     	; 0x1ba6 <__floatsisf+0x6c>
    1b70:	6f 5f       	subi	r22, 0xFF	; 255
    1b72:	7f 4f       	sbci	r23, 0xFF	; 255
    1b74:	8f 4f       	sbci	r24, 0xFF	; 255
    1b76:	9f 4f       	sbci	r25, 0xFF	; 255
    1b78:	16 c0       	rjmp	.+44     	; 0x1ba6 <__floatsisf+0x6c>
    1b7a:	88 23       	and	r24, r24
    1b7c:	11 f0       	breq	.+4      	; 0x1b82 <__floatsisf+0x48>
    1b7e:	96 e9       	ldi	r25, 0x96	; 150
    1b80:	11 c0       	rjmp	.+34     	; 0x1ba4 <__floatsisf+0x6a>
    1b82:	77 23       	and	r23, r23
    1b84:	21 f0       	breq	.+8      	; 0x1b8e <__floatsisf+0x54>
    1b86:	9e e8       	ldi	r25, 0x8E	; 142
    1b88:	87 2f       	mov	r24, r23
    1b8a:	76 2f       	mov	r23, r22
    1b8c:	05 c0       	rjmp	.+10     	; 0x1b98 <__floatsisf+0x5e>
    1b8e:	66 23       	and	r22, r22
    1b90:	71 f0       	breq	.+28     	; 0x1bae <__floatsisf+0x74>
    1b92:	96 e8       	ldi	r25, 0x86	; 134
    1b94:	86 2f       	mov	r24, r22
    1b96:	70 e0       	ldi	r23, 0x00	; 0
    1b98:	60 e0       	ldi	r22, 0x00	; 0
    1b9a:	2a f0       	brmi	.+10     	; 0x1ba6 <__floatsisf+0x6c>
    1b9c:	9a 95       	dec	r25
    1b9e:	66 0f       	add	r22, r22
    1ba0:	77 1f       	adc	r23, r23
    1ba2:	88 1f       	adc	r24, r24
    1ba4:	da f7       	brpl	.-10     	; 0x1b9c <__floatsisf+0x62>
    1ba6:	88 0f       	add	r24, r24
    1ba8:	96 95       	lsr	r25
    1baa:	87 95       	ror	r24
    1bac:	97 f9       	bld	r25, 7
    1bae:	08 95       	ret

00001bb0 <__fp_inf>:
    1bb0:	97 f9       	bld	r25, 7
    1bb2:	9f 67       	ori	r25, 0x7F	; 127
    1bb4:	80 e8       	ldi	r24, 0x80	; 128
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	60 e0       	ldi	r22, 0x00	; 0
    1bba:	08 95       	ret

00001bbc <__fp_nan>:
    1bbc:	9f ef       	ldi	r25, 0xFF	; 255
    1bbe:	80 ec       	ldi	r24, 0xC0	; 192
    1bc0:	08 95       	ret

00001bc2 <__fp_powser>:
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	1f 93       	push	r17
    1bc8:	0f 93       	push	r16
    1bca:	ff 92       	push	r15
    1bcc:	ef 92       	push	r14
    1bce:	df 92       	push	r13
    1bd0:	7b 01       	movw	r14, r22
    1bd2:	8c 01       	movw	r16, r24
    1bd4:	68 94       	set
    1bd6:	05 c0       	rjmp	.+10     	; 0x1be2 <__fp_powser+0x20>
    1bd8:	da 2e       	mov	r13, r26
    1bda:	ef 01       	movw	r28, r30
    1bdc:	72 d0       	rcall	.+228    	; 0x1cc2 <__mulsf3x>
    1bde:	fe 01       	movw	r30, r28
    1be0:	e8 94       	clt
    1be2:	a5 91       	lpm	r26, Z+
    1be4:	25 91       	lpm	r18, Z+
    1be6:	35 91       	lpm	r19, Z+
    1be8:	45 91       	lpm	r20, Z+
    1bea:	55 91       	lpm	r21, Z+
    1bec:	ae f3       	brts	.-22     	; 0x1bd8 <__fp_powser+0x16>
    1bee:	ef 01       	movw	r28, r30
    1bf0:	54 de       	rcall	.-856    	; 0x189a <__addsf3x>
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	97 01       	movw	r18, r14
    1bf6:	a8 01       	movw	r20, r16
    1bf8:	da 94       	dec	r13
    1bfa:	79 f7       	brne	.-34     	; 0x1bda <__fp_powser+0x18>
    1bfc:	df 90       	pop	r13
    1bfe:	ef 90       	pop	r14
    1c00:	ff 90       	pop	r15
    1c02:	0f 91       	pop	r16
    1c04:	1f 91       	pop	r17
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <__fp_pscA>:
    1c0c:	00 24       	eor	r0, r0
    1c0e:	0a 94       	dec	r0
    1c10:	16 16       	cp	r1, r22
    1c12:	17 06       	cpc	r1, r23
    1c14:	18 06       	cpc	r1, r24
    1c16:	09 06       	cpc	r0, r25
    1c18:	08 95       	ret

00001c1a <__fp_pscB>:
    1c1a:	00 24       	eor	r0, r0
    1c1c:	0a 94       	dec	r0
    1c1e:	12 16       	cp	r1, r18
    1c20:	13 06       	cpc	r1, r19
    1c22:	14 06       	cpc	r1, r20
    1c24:	05 06       	cpc	r0, r21
    1c26:	08 95       	ret

00001c28 <__fp_round>:
    1c28:	09 2e       	mov	r0, r25
    1c2a:	03 94       	inc	r0
    1c2c:	00 0c       	add	r0, r0
    1c2e:	11 f4       	brne	.+4      	; 0x1c34 <__fp_round+0xc>
    1c30:	88 23       	and	r24, r24
    1c32:	52 f0       	brmi	.+20     	; 0x1c48 <__fp_round+0x20>
    1c34:	bb 0f       	add	r27, r27
    1c36:	40 f4       	brcc	.+16     	; 0x1c48 <__fp_round+0x20>
    1c38:	bf 2b       	or	r27, r31
    1c3a:	11 f4       	brne	.+4      	; 0x1c40 <__fp_round+0x18>
    1c3c:	60 ff       	sbrs	r22, 0
    1c3e:	04 c0       	rjmp	.+8      	; 0x1c48 <__fp_round+0x20>
    1c40:	6f 5f       	subi	r22, 0xFF	; 255
    1c42:	7f 4f       	sbci	r23, 0xFF	; 255
    1c44:	8f 4f       	sbci	r24, 0xFF	; 255
    1c46:	9f 4f       	sbci	r25, 0xFF	; 255
    1c48:	08 95       	ret

00001c4a <__fp_split3>:
    1c4a:	57 fd       	sbrc	r21, 7
    1c4c:	90 58       	subi	r25, 0x80	; 128
    1c4e:	44 0f       	add	r20, r20
    1c50:	55 1f       	adc	r21, r21
    1c52:	59 f0       	breq	.+22     	; 0x1c6a <__fp_splitA+0x10>
    1c54:	5f 3f       	cpi	r21, 0xFF	; 255
    1c56:	71 f0       	breq	.+28     	; 0x1c74 <__fp_splitA+0x1a>
    1c58:	47 95       	ror	r20

00001c5a <__fp_splitA>:
    1c5a:	88 0f       	add	r24, r24
    1c5c:	97 fb       	bst	r25, 7
    1c5e:	99 1f       	adc	r25, r25
    1c60:	61 f0       	breq	.+24     	; 0x1c7a <__fp_splitA+0x20>
    1c62:	9f 3f       	cpi	r25, 0xFF	; 255
    1c64:	79 f0       	breq	.+30     	; 0x1c84 <__fp_splitA+0x2a>
    1c66:	87 95       	ror	r24
    1c68:	08 95       	ret
    1c6a:	12 16       	cp	r1, r18
    1c6c:	13 06       	cpc	r1, r19
    1c6e:	14 06       	cpc	r1, r20
    1c70:	55 1f       	adc	r21, r21
    1c72:	f2 cf       	rjmp	.-28     	; 0x1c58 <__fp_split3+0xe>
    1c74:	46 95       	lsr	r20
    1c76:	f1 df       	rcall	.-30     	; 0x1c5a <__fp_splitA>
    1c78:	08 c0       	rjmp	.+16     	; 0x1c8a <__fp_splitA+0x30>
    1c7a:	16 16       	cp	r1, r22
    1c7c:	17 06       	cpc	r1, r23
    1c7e:	18 06       	cpc	r1, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	f1 cf       	rjmp	.-30     	; 0x1c66 <__fp_splitA+0xc>
    1c84:	86 95       	lsr	r24
    1c86:	71 05       	cpc	r23, r1
    1c88:	61 05       	cpc	r22, r1
    1c8a:	08 94       	sec
    1c8c:	08 95       	ret

00001c8e <__fp_zero>:
    1c8e:	e8 94       	clt

00001c90 <__fp_szero>:
    1c90:	bb 27       	eor	r27, r27
    1c92:	66 27       	eor	r22, r22
    1c94:	77 27       	eor	r23, r23
    1c96:	cb 01       	movw	r24, r22
    1c98:	97 f9       	bld	r25, 7
    1c9a:	08 95       	ret

00001c9c <inverse>:
    1c9c:	9b 01       	movw	r18, r22
    1c9e:	ac 01       	movw	r20, r24
    1ca0:	60 e0       	ldi	r22, 0x00	; 0
    1ca2:	70 e0       	ldi	r23, 0x00	; 0
    1ca4:	80 e8       	ldi	r24, 0x80	; 128
    1ca6:	9f e3       	ldi	r25, 0x3F	; 63
    1ca8:	ad ce       	rjmp	.-678    	; 0x1a04 <__divsf3>

00001caa <__mulsf3>:
    1caa:	0b d0       	rcall	.+22     	; 0x1cc2 <__mulsf3x>
    1cac:	bd cf       	rjmp	.-134    	; 0x1c28 <__fp_round>
    1cae:	ae df       	rcall	.-164    	; 0x1c0c <__fp_pscA>
    1cb0:	28 f0       	brcs	.+10     	; 0x1cbc <__mulsf3+0x12>
    1cb2:	b3 df       	rcall	.-154    	; 0x1c1a <__fp_pscB>
    1cb4:	18 f0       	brcs	.+6      	; 0x1cbc <__mulsf3+0x12>
    1cb6:	95 23       	and	r25, r21
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <__mulsf3+0x12>
    1cba:	7a cf       	rjmp	.-268    	; 0x1bb0 <__fp_inf>
    1cbc:	7f cf       	rjmp	.-258    	; 0x1bbc <__fp_nan>
    1cbe:	11 24       	eor	r1, r1
    1cc0:	e7 cf       	rjmp	.-50     	; 0x1c90 <__fp_szero>

00001cc2 <__mulsf3x>:
    1cc2:	c3 df       	rcall	.-122    	; 0x1c4a <__fp_split3>
    1cc4:	a0 f3       	brcs	.-24     	; 0x1cae <__mulsf3+0x4>

00001cc6 <__mulsf3_pse>:
    1cc6:	95 9f       	mul	r25, r21
    1cc8:	d1 f3       	breq	.-12     	; 0x1cbe <__mulsf3+0x14>
    1cca:	95 0f       	add	r25, r21
    1ccc:	50 e0       	ldi	r21, 0x00	; 0
    1cce:	55 1f       	adc	r21, r21
    1cd0:	62 9f       	mul	r22, r18
    1cd2:	f0 01       	movw	r30, r0
    1cd4:	72 9f       	mul	r23, r18
    1cd6:	bb 27       	eor	r27, r27
    1cd8:	f0 0d       	add	r31, r0
    1cda:	b1 1d       	adc	r27, r1
    1cdc:	63 9f       	mul	r22, r19
    1cde:	aa 27       	eor	r26, r26
    1ce0:	f0 0d       	add	r31, r0
    1ce2:	b1 1d       	adc	r27, r1
    1ce4:	aa 1f       	adc	r26, r26
    1ce6:	64 9f       	mul	r22, r20
    1ce8:	66 27       	eor	r22, r22
    1cea:	b0 0d       	add	r27, r0
    1cec:	a1 1d       	adc	r26, r1
    1cee:	66 1f       	adc	r22, r22
    1cf0:	82 9f       	mul	r24, r18
    1cf2:	22 27       	eor	r18, r18
    1cf4:	b0 0d       	add	r27, r0
    1cf6:	a1 1d       	adc	r26, r1
    1cf8:	62 1f       	adc	r22, r18
    1cfa:	73 9f       	mul	r23, r19
    1cfc:	b0 0d       	add	r27, r0
    1cfe:	a1 1d       	adc	r26, r1
    1d00:	62 1f       	adc	r22, r18
    1d02:	83 9f       	mul	r24, r19
    1d04:	a0 0d       	add	r26, r0
    1d06:	61 1d       	adc	r22, r1
    1d08:	22 1f       	adc	r18, r18
    1d0a:	74 9f       	mul	r23, r20
    1d0c:	33 27       	eor	r19, r19
    1d0e:	a0 0d       	add	r26, r0
    1d10:	61 1d       	adc	r22, r1
    1d12:	23 1f       	adc	r18, r19
    1d14:	84 9f       	mul	r24, r20
    1d16:	60 0d       	add	r22, r0
    1d18:	21 1d       	adc	r18, r1
    1d1a:	82 2f       	mov	r24, r18
    1d1c:	76 2f       	mov	r23, r22
    1d1e:	6a 2f       	mov	r22, r26
    1d20:	11 24       	eor	r1, r1
    1d22:	9f 57       	subi	r25, 0x7F	; 127
    1d24:	50 40       	sbci	r21, 0x00	; 0
    1d26:	8a f0       	brmi	.+34     	; 0x1d4a <__mulsf3_pse+0x84>
    1d28:	e1 f0       	breq	.+56     	; 0x1d62 <__mulsf3_pse+0x9c>
    1d2a:	88 23       	and	r24, r24
    1d2c:	4a f0       	brmi	.+18     	; 0x1d40 <__mulsf3_pse+0x7a>
    1d2e:	ee 0f       	add	r30, r30
    1d30:	ff 1f       	adc	r31, r31
    1d32:	bb 1f       	adc	r27, r27
    1d34:	66 1f       	adc	r22, r22
    1d36:	77 1f       	adc	r23, r23
    1d38:	88 1f       	adc	r24, r24
    1d3a:	91 50       	subi	r25, 0x01	; 1
    1d3c:	50 40       	sbci	r21, 0x00	; 0
    1d3e:	a9 f7       	brne	.-22     	; 0x1d2a <__mulsf3_pse+0x64>
    1d40:	9e 3f       	cpi	r25, 0xFE	; 254
    1d42:	51 05       	cpc	r21, r1
    1d44:	70 f0       	brcs	.+28     	; 0x1d62 <__mulsf3_pse+0x9c>
    1d46:	34 cf       	rjmp	.-408    	; 0x1bb0 <__fp_inf>
    1d48:	a3 cf       	rjmp	.-186    	; 0x1c90 <__fp_szero>
    1d4a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d4c:	ec f3       	brlt	.-6      	; 0x1d48 <__mulsf3_pse+0x82>
    1d4e:	98 3e       	cpi	r25, 0xE8	; 232
    1d50:	dc f3       	brlt	.-10     	; 0x1d48 <__mulsf3_pse+0x82>
    1d52:	86 95       	lsr	r24
    1d54:	77 95       	ror	r23
    1d56:	67 95       	ror	r22
    1d58:	b7 95       	ror	r27
    1d5a:	f7 95       	ror	r31
    1d5c:	e7 95       	ror	r30
    1d5e:	9f 5f       	subi	r25, 0xFF	; 255
    1d60:	c1 f7       	brne	.-16     	; 0x1d52 <__mulsf3_pse+0x8c>
    1d62:	fe 2b       	or	r31, r30
    1d64:	88 0f       	add	r24, r24
    1d66:	91 1d       	adc	r25, r1
    1d68:	96 95       	lsr	r25
    1d6a:	87 95       	ror	r24
    1d6c:	97 f9       	bld	r25, 7
    1d6e:	08 95       	ret
    1d70:	11 f4       	brne	.+4      	; 0x1d76 <__mulsf3_pse+0xb0>
    1d72:	0e f4       	brtc	.+2      	; 0x1d76 <__mulsf3_pse+0xb0>
    1d74:	23 cf       	rjmp	.-442    	; 0x1bbc <__fp_nan>
    1d76:	41 c0       	rjmp	.+130    	; 0x1dfa <__fp_mpack>

00001d78 <sqrt>:
    1d78:	70 df       	rcall	.-288    	; 0x1c5a <__fp_splitA>
    1d7a:	d0 f3       	brcs	.-12     	; 0x1d70 <__mulsf3_pse+0xaa>
    1d7c:	99 23       	and	r25, r25
    1d7e:	d9 f3       	breq	.-10     	; 0x1d76 <__mulsf3_pse+0xb0>
    1d80:	ce f3       	brts	.-14     	; 0x1d74 <__mulsf3_pse+0xae>
    1d82:	9f 57       	subi	r25, 0x7F	; 127
    1d84:	55 0b       	sbc	r21, r21
    1d86:	87 ff       	sbrs	r24, 7
    1d88:	46 d0       	rcall	.+140    	; 0x1e16 <__fp_norm2>
    1d8a:	00 24       	eor	r0, r0
    1d8c:	a0 e6       	ldi	r26, 0x60	; 96
    1d8e:	40 ea       	ldi	r20, 0xA0	; 160
    1d90:	90 01       	movw	r18, r0
    1d92:	80 58       	subi	r24, 0x80	; 128
    1d94:	56 95       	lsr	r21
    1d96:	97 95       	ror	r25
    1d98:	28 f4       	brcc	.+10     	; 0x1da4 <sqrt+0x2c>
    1d9a:	80 5c       	subi	r24, 0xC0	; 192
    1d9c:	66 0f       	add	r22, r22
    1d9e:	77 1f       	adc	r23, r23
    1da0:	88 1f       	adc	r24, r24
    1da2:	20 f0       	brcs	.+8      	; 0x1dac <sqrt+0x34>
    1da4:	26 17       	cp	r18, r22
    1da6:	37 07       	cpc	r19, r23
    1da8:	48 07       	cpc	r20, r24
    1daa:	30 f4       	brcc	.+12     	; 0x1db8 <sqrt+0x40>
    1dac:	62 1b       	sub	r22, r18
    1dae:	73 0b       	sbc	r23, r19
    1db0:	84 0b       	sbc	r24, r20
    1db2:	20 29       	or	r18, r0
    1db4:	31 29       	or	r19, r1
    1db6:	4a 2b       	or	r20, r26
    1db8:	a6 95       	lsr	r26
    1dba:	17 94       	ror	r1
    1dbc:	07 94       	ror	r0
    1dbe:	20 25       	eor	r18, r0
    1dc0:	31 25       	eor	r19, r1
    1dc2:	4a 27       	eor	r20, r26
    1dc4:	58 f7       	brcc	.-42     	; 0x1d9c <sqrt+0x24>
    1dc6:	66 0f       	add	r22, r22
    1dc8:	77 1f       	adc	r23, r23
    1dca:	88 1f       	adc	r24, r24
    1dcc:	20 f0       	brcs	.+8      	; 0x1dd6 <sqrt+0x5e>
    1dce:	26 17       	cp	r18, r22
    1dd0:	37 07       	cpc	r19, r23
    1dd2:	48 07       	cpc	r20, r24
    1dd4:	30 f4       	brcc	.+12     	; 0x1de2 <sqrt+0x6a>
    1dd6:	62 0b       	sbc	r22, r18
    1dd8:	73 0b       	sbc	r23, r19
    1dda:	84 0b       	sbc	r24, r20
    1ddc:	20 0d       	add	r18, r0
    1dde:	31 1d       	adc	r19, r1
    1de0:	41 1d       	adc	r20, r1
    1de2:	a0 95       	com	r26
    1de4:	81 f7       	brne	.-32     	; 0x1dc6 <sqrt+0x4e>
    1de6:	b9 01       	movw	r22, r18
    1de8:	84 2f       	mov	r24, r20
    1dea:	91 58       	subi	r25, 0x81	; 129
    1dec:	88 0f       	add	r24, r24
    1dee:	96 95       	lsr	r25
    1df0:	87 95       	ror	r24
    1df2:	08 95       	ret

00001df4 <square>:
    1df4:	9b 01       	movw	r18, r22
    1df6:	ac 01       	movw	r20, r24
    1df8:	58 cf       	rjmp	.-336    	; 0x1caa <__mulsf3>

00001dfa <__fp_mpack>:
    1dfa:	9f 3f       	cpi	r25, 0xFF	; 255
    1dfc:	31 f0       	breq	.+12     	; 0x1e0a <__fp_mpack_finite+0xc>

00001dfe <__fp_mpack_finite>:
    1dfe:	91 50       	subi	r25, 0x01	; 1
    1e00:	20 f4       	brcc	.+8      	; 0x1e0a <__fp_mpack_finite+0xc>
    1e02:	87 95       	ror	r24
    1e04:	77 95       	ror	r23
    1e06:	67 95       	ror	r22
    1e08:	b7 95       	ror	r27
    1e0a:	88 0f       	add	r24, r24
    1e0c:	91 1d       	adc	r25, r1
    1e0e:	96 95       	lsr	r25
    1e10:	87 95       	ror	r24
    1e12:	97 f9       	bld	r25, 7
    1e14:	08 95       	ret

00001e16 <__fp_norm2>:
    1e16:	91 50       	subi	r25, 0x01	; 1
    1e18:	50 40       	sbci	r21, 0x00	; 0
    1e1a:	66 0f       	add	r22, r22
    1e1c:	77 1f       	adc	r23, r23
    1e1e:	88 1f       	adc	r24, r24
    1e20:	d2 f7       	brpl	.-12     	; 0x1e16 <__fp_norm2>
    1e22:	08 95       	ret

00001e24 <__divmodhi4>:
    1e24:	97 fb       	bst	r25, 7
    1e26:	07 2e       	mov	r0, r23
    1e28:	16 f4       	brtc	.+4      	; 0x1e2e <__divmodhi4+0xa>
    1e2a:	00 94       	com	r0
    1e2c:	07 d0       	rcall	.+14     	; 0x1e3c <__divmodhi4_neg1>
    1e2e:	77 fd       	sbrc	r23, 7
    1e30:	09 d0       	rcall	.+18     	; 0x1e44 <__divmodhi4_neg2>
    1e32:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <__udivmodhi4>
    1e36:	07 fc       	sbrc	r0, 7
    1e38:	05 d0       	rcall	.+10     	; 0x1e44 <__divmodhi4_neg2>
    1e3a:	3e f4       	brtc	.+14     	; 0x1e4a <__divmodhi4_exit>

00001e3c <__divmodhi4_neg1>:
    1e3c:	90 95       	com	r25
    1e3e:	81 95       	neg	r24
    1e40:	9f 4f       	sbci	r25, 0xFF	; 255
    1e42:	08 95       	ret

00001e44 <__divmodhi4_neg2>:
    1e44:	70 95       	com	r23
    1e46:	61 95       	neg	r22
    1e48:	7f 4f       	sbci	r23, 0xFF	; 255

00001e4a <__divmodhi4_exit>:
    1e4a:	08 95       	ret

00001e4c <__divmodsi4>:
    1e4c:	05 2e       	mov	r0, r21
    1e4e:	97 fb       	bst	r25, 7
    1e50:	1e f4       	brtc	.+6      	; 0x1e58 <__divmodsi4+0xc>
    1e52:	00 94       	com	r0
    1e54:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <__negsi2>
    1e58:	57 fd       	sbrc	r21, 7
    1e5a:	07 d0       	rcall	.+14     	; 0x1e6a <__divmodsi4_neg2>
    1e5c:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <__udivmodsi4>
    1e60:	07 fc       	sbrc	r0, 7
    1e62:	03 d0       	rcall	.+6      	; 0x1e6a <__divmodsi4_neg2>
    1e64:	4e f4       	brtc	.+18     	; 0x1e78 <__divmodsi4_exit>
    1e66:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <__negsi2>

00001e6a <__divmodsi4_neg2>:
    1e6a:	50 95       	com	r21
    1e6c:	40 95       	com	r20
    1e6e:	30 95       	com	r19
    1e70:	21 95       	neg	r18
    1e72:	3f 4f       	sbci	r19, 0xFF	; 255
    1e74:	4f 4f       	sbci	r20, 0xFF	; 255
    1e76:	5f 4f       	sbci	r21, 0xFF	; 255

00001e78 <__divmodsi4_exit>:
    1e78:	08 95       	ret

00001e7a <__negsi2>:
    1e7a:	90 95       	com	r25
    1e7c:	80 95       	com	r24
    1e7e:	70 95       	com	r23
    1e80:	61 95       	neg	r22
    1e82:	7f 4f       	sbci	r23, 0xFF	; 255
    1e84:	8f 4f       	sbci	r24, 0xFF	; 255
    1e86:	9f 4f       	sbci	r25, 0xFF	; 255
    1e88:	08 95       	ret

00001e8a <__udivmodhi4>:
    1e8a:	aa 1b       	sub	r26, r26
    1e8c:	bb 1b       	sub	r27, r27
    1e8e:	51 e1       	ldi	r21, 0x11	; 17
    1e90:	07 c0       	rjmp	.+14     	; 0x1ea0 <__udivmodhi4_ep>

00001e92 <__udivmodhi4_loop>:
    1e92:	aa 1f       	adc	r26, r26
    1e94:	bb 1f       	adc	r27, r27
    1e96:	a6 17       	cp	r26, r22
    1e98:	b7 07       	cpc	r27, r23
    1e9a:	10 f0       	brcs	.+4      	; 0x1ea0 <__udivmodhi4_ep>
    1e9c:	a6 1b       	sub	r26, r22
    1e9e:	b7 0b       	sbc	r27, r23

00001ea0 <__udivmodhi4_ep>:
    1ea0:	88 1f       	adc	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	5a 95       	dec	r21
    1ea6:	a9 f7       	brne	.-22     	; 0x1e92 <__udivmodhi4_loop>
    1ea8:	80 95       	com	r24
    1eaa:	90 95       	com	r25
    1eac:	bc 01       	movw	r22, r24
    1eae:	cd 01       	movw	r24, r26
    1eb0:	08 95       	ret

00001eb2 <__udivmodsi4>:
    1eb2:	a1 e2       	ldi	r26, 0x21	; 33
    1eb4:	1a 2e       	mov	r1, r26
    1eb6:	aa 1b       	sub	r26, r26
    1eb8:	bb 1b       	sub	r27, r27
    1eba:	fd 01       	movw	r30, r26
    1ebc:	0d c0       	rjmp	.+26     	; 0x1ed8 <__udivmodsi4_ep>

00001ebe <__udivmodsi4_loop>:
    1ebe:	aa 1f       	adc	r26, r26
    1ec0:	bb 1f       	adc	r27, r27
    1ec2:	ee 1f       	adc	r30, r30
    1ec4:	ff 1f       	adc	r31, r31
    1ec6:	a2 17       	cp	r26, r18
    1ec8:	b3 07       	cpc	r27, r19
    1eca:	e4 07       	cpc	r30, r20
    1ecc:	f5 07       	cpc	r31, r21
    1ece:	20 f0       	brcs	.+8      	; 0x1ed8 <__udivmodsi4_ep>
    1ed0:	a2 1b       	sub	r26, r18
    1ed2:	b3 0b       	sbc	r27, r19
    1ed4:	e4 0b       	sbc	r30, r20
    1ed6:	f5 0b       	sbc	r31, r21

00001ed8 <__udivmodsi4_ep>:
    1ed8:	66 1f       	adc	r22, r22
    1eda:	77 1f       	adc	r23, r23
    1edc:	88 1f       	adc	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	1a 94       	dec	r1
    1ee2:	69 f7       	brne	.-38     	; 0x1ebe <__udivmodsi4_loop>
    1ee4:	60 95       	com	r22
    1ee6:	70 95       	com	r23
    1ee8:	80 95       	com	r24
    1eea:	90 95       	com	r25
    1eec:	9b 01       	movw	r18, r22
    1eee:	ac 01       	movw	r20, r24
    1ef0:	bd 01       	movw	r22, r26
    1ef2:	cf 01       	movw	r24, r30
    1ef4:	08 95       	ret

00001ef6 <malloc>:
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
    1efa:	82 30       	cpi	r24, 0x02	; 2
    1efc:	91 05       	cpc	r25, r1
    1efe:	10 f4       	brcc	.+4      	; 0x1f04 <malloc+0xe>
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	e0 91 5c 02 	lds	r30, 0x025C
    1f08:	f0 91 5d 02 	lds	r31, 0x025D
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	a0 e0       	ldi	r26, 0x00	; 0
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	30 97       	sbiw	r30, 0x00	; 0
    1f16:	39 f1       	breq	.+78     	; 0x1f66 <malloc+0x70>
    1f18:	40 81       	ld	r20, Z
    1f1a:	51 81       	ldd	r21, Z+1	; 0x01
    1f1c:	48 17       	cp	r20, r24
    1f1e:	59 07       	cpc	r21, r25
    1f20:	b8 f0       	brcs	.+46     	; 0x1f50 <malloc+0x5a>
    1f22:	48 17       	cp	r20, r24
    1f24:	59 07       	cpc	r21, r25
    1f26:	71 f4       	brne	.+28     	; 0x1f44 <malloc+0x4e>
    1f28:	82 81       	ldd	r24, Z+2	; 0x02
    1f2a:	93 81       	ldd	r25, Z+3	; 0x03
    1f2c:	10 97       	sbiw	r26, 0x00	; 0
    1f2e:	29 f0       	breq	.+10     	; 0x1f3a <malloc+0x44>
    1f30:	13 96       	adiw	r26, 0x03	; 3
    1f32:	9c 93       	st	X, r25
    1f34:	8e 93       	st	-X, r24
    1f36:	12 97       	sbiw	r26, 0x02	; 2
    1f38:	2c c0       	rjmp	.+88     	; 0x1f92 <malloc+0x9c>
    1f3a:	90 93 5d 02 	sts	0x025D, r25
    1f3e:	80 93 5c 02 	sts	0x025C, r24
    1f42:	27 c0       	rjmp	.+78     	; 0x1f92 <malloc+0x9c>
    1f44:	21 15       	cp	r18, r1
    1f46:	31 05       	cpc	r19, r1
    1f48:	31 f0       	breq	.+12     	; 0x1f56 <malloc+0x60>
    1f4a:	42 17       	cp	r20, r18
    1f4c:	53 07       	cpc	r21, r19
    1f4e:	18 f0       	brcs	.+6      	; 0x1f56 <malloc+0x60>
    1f50:	a9 01       	movw	r20, r18
    1f52:	db 01       	movw	r26, r22
    1f54:	01 c0       	rjmp	.+2      	; 0x1f58 <malloc+0x62>
    1f56:	ef 01       	movw	r28, r30
    1f58:	9a 01       	movw	r18, r20
    1f5a:	bd 01       	movw	r22, r26
    1f5c:	df 01       	movw	r26, r30
    1f5e:	02 80       	ldd	r0, Z+2	; 0x02
    1f60:	f3 81       	ldd	r31, Z+3	; 0x03
    1f62:	e0 2d       	mov	r30, r0
    1f64:	d7 cf       	rjmp	.-82     	; 0x1f14 <malloc+0x1e>
    1f66:	21 15       	cp	r18, r1
    1f68:	31 05       	cpc	r19, r1
    1f6a:	f9 f0       	breq	.+62     	; 0x1faa <malloc+0xb4>
    1f6c:	28 1b       	sub	r18, r24
    1f6e:	39 0b       	sbc	r19, r25
    1f70:	24 30       	cpi	r18, 0x04	; 4
    1f72:	31 05       	cpc	r19, r1
    1f74:	80 f4       	brcc	.+32     	; 0x1f96 <malloc+0xa0>
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7a:	61 15       	cp	r22, r1
    1f7c:	71 05       	cpc	r23, r1
    1f7e:	21 f0       	breq	.+8      	; 0x1f88 <malloc+0x92>
    1f80:	fb 01       	movw	r30, r22
    1f82:	93 83       	std	Z+3, r25	; 0x03
    1f84:	82 83       	std	Z+2, r24	; 0x02
    1f86:	04 c0       	rjmp	.+8      	; 0x1f90 <malloc+0x9a>
    1f88:	90 93 5d 02 	sts	0x025D, r25
    1f8c:	80 93 5c 02 	sts	0x025C, r24
    1f90:	fe 01       	movw	r30, r28
    1f92:	32 96       	adiw	r30, 0x02	; 2
    1f94:	44 c0       	rjmp	.+136    	; 0x201e <malloc+0x128>
    1f96:	fe 01       	movw	r30, r28
    1f98:	e2 0f       	add	r30, r18
    1f9a:	f3 1f       	adc	r31, r19
    1f9c:	81 93       	st	Z+, r24
    1f9e:	91 93       	st	Z+, r25
    1fa0:	22 50       	subi	r18, 0x02	; 2
    1fa2:	31 09       	sbc	r19, r1
    1fa4:	39 83       	std	Y+1, r19	; 0x01
    1fa6:	28 83       	st	Y, r18
    1fa8:	3a c0       	rjmp	.+116    	; 0x201e <malloc+0x128>
    1faa:	20 91 5a 02 	lds	r18, 0x025A
    1fae:	30 91 5b 02 	lds	r19, 0x025B
    1fb2:	23 2b       	or	r18, r19
    1fb4:	41 f4       	brne	.+16     	; 0x1fc6 <malloc+0xd0>
    1fb6:	20 91 02 01 	lds	r18, 0x0102
    1fba:	30 91 03 01 	lds	r19, 0x0103
    1fbe:	30 93 5b 02 	sts	0x025B, r19
    1fc2:	20 93 5a 02 	sts	0x025A, r18
    1fc6:	20 91 00 01 	lds	r18, 0x0100
    1fca:	30 91 01 01 	lds	r19, 0x0101
    1fce:	21 15       	cp	r18, r1
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	41 f4       	brne	.+16     	; 0x1fe4 <malloc+0xee>
    1fd4:	2d b7       	in	r18, 0x3d	; 61
    1fd6:	3e b7       	in	r19, 0x3e	; 62
    1fd8:	40 91 04 01 	lds	r20, 0x0104
    1fdc:	50 91 05 01 	lds	r21, 0x0105
    1fe0:	24 1b       	sub	r18, r20
    1fe2:	35 0b       	sbc	r19, r21
    1fe4:	e0 91 5a 02 	lds	r30, 0x025A
    1fe8:	f0 91 5b 02 	lds	r31, 0x025B
    1fec:	e2 17       	cp	r30, r18
    1fee:	f3 07       	cpc	r31, r19
    1ff0:	a0 f4       	brcc	.+40     	; 0x201a <malloc+0x124>
    1ff2:	2e 1b       	sub	r18, r30
    1ff4:	3f 0b       	sbc	r19, r31
    1ff6:	28 17       	cp	r18, r24
    1ff8:	39 07       	cpc	r19, r25
    1ffa:	78 f0       	brcs	.+30     	; 0x201a <malloc+0x124>
    1ffc:	ac 01       	movw	r20, r24
    1ffe:	4e 5f       	subi	r20, 0xFE	; 254
    2000:	5f 4f       	sbci	r21, 0xFF	; 255
    2002:	24 17       	cp	r18, r20
    2004:	35 07       	cpc	r19, r21
    2006:	48 f0       	brcs	.+18     	; 0x201a <malloc+0x124>
    2008:	4e 0f       	add	r20, r30
    200a:	5f 1f       	adc	r21, r31
    200c:	50 93 5b 02 	sts	0x025B, r21
    2010:	40 93 5a 02 	sts	0x025A, r20
    2014:	81 93       	st	Z+, r24
    2016:	91 93       	st	Z+, r25
    2018:	02 c0       	rjmp	.+4      	; 0x201e <malloc+0x128>
    201a:	e0 e0       	ldi	r30, 0x00	; 0
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	cf 01       	movw	r24, r30
    2020:	df 91       	pop	r29
    2022:	cf 91       	pop	r28
    2024:	08 95       	ret

00002026 <free>:
    2026:	cf 93       	push	r28
    2028:	df 93       	push	r29
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	09 f4       	brne	.+2      	; 0x2030 <free+0xa>
    202e:	87 c0       	rjmp	.+270    	; 0x213e <free+0x118>
    2030:	fc 01       	movw	r30, r24
    2032:	32 97       	sbiw	r30, 0x02	; 2
    2034:	13 82       	std	Z+3, r1	; 0x03
    2036:	12 82       	std	Z+2, r1	; 0x02
    2038:	c0 91 5c 02 	lds	r28, 0x025C
    203c:	d0 91 5d 02 	lds	r29, 0x025D
    2040:	20 97       	sbiw	r28, 0x00	; 0
    2042:	81 f4       	brne	.+32     	; 0x2064 <free+0x3e>
    2044:	20 81       	ld	r18, Z
    2046:	31 81       	ldd	r19, Z+1	; 0x01
    2048:	28 0f       	add	r18, r24
    204a:	39 1f       	adc	r19, r25
    204c:	80 91 5a 02 	lds	r24, 0x025A
    2050:	90 91 5b 02 	lds	r25, 0x025B
    2054:	82 17       	cp	r24, r18
    2056:	93 07       	cpc	r25, r19
    2058:	79 f5       	brne	.+94     	; 0x20b8 <free+0x92>
    205a:	f0 93 5b 02 	sts	0x025B, r31
    205e:	e0 93 5a 02 	sts	0x025A, r30
    2062:	6d c0       	rjmp	.+218    	; 0x213e <free+0x118>
    2064:	de 01       	movw	r26, r28
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	ae 17       	cp	r26, r30
    206c:	bf 07       	cpc	r27, r31
    206e:	50 f4       	brcc	.+20     	; 0x2084 <free+0x5e>
    2070:	12 96       	adiw	r26, 0x02	; 2
    2072:	4d 91       	ld	r20, X+
    2074:	5c 91       	ld	r21, X
    2076:	13 97       	sbiw	r26, 0x03	; 3
    2078:	9d 01       	movw	r18, r26
    207a:	41 15       	cp	r20, r1
    207c:	51 05       	cpc	r21, r1
    207e:	09 f1       	breq	.+66     	; 0x20c2 <free+0x9c>
    2080:	da 01       	movw	r26, r20
    2082:	f3 cf       	rjmp	.-26     	; 0x206a <free+0x44>
    2084:	b3 83       	std	Z+3, r27	; 0x03
    2086:	a2 83       	std	Z+2, r26	; 0x02
    2088:	40 81       	ld	r20, Z
    208a:	51 81       	ldd	r21, Z+1	; 0x01
    208c:	84 0f       	add	r24, r20
    208e:	95 1f       	adc	r25, r21
    2090:	8a 17       	cp	r24, r26
    2092:	9b 07       	cpc	r25, r27
    2094:	71 f4       	brne	.+28     	; 0x20b2 <free+0x8c>
    2096:	8d 91       	ld	r24, X+
    2098:	9c 91       	ld	r25, X
    209a:	11 97       	sbiw	r26, 0x01	; 1
    209c:	84 0f       	add	r24, r20
    209e:	95 1f       	adc	r25, r21
    20a0:	02 96       	adiw	r24, 0x02	; 2
    20a2:	91 83       	std	Z+1, r25	; 0x01
    20a4:	80 83       	st	Z, r24
    20a6:	12 96       	adiw	r26, 0x02	; 2
    20a8:	8d 91       	ld	r24, X+
    20aa:	9c 91       	ld	r25, X
    20ac:	13 97       	sbiw	r26, 0x03	; 3
    20ae:	93 83       	std	Z+3, r25	; 0x03
    20b0:	82 83       	std	Z+2, r24	; 0x02
    20b2:	21 15       	cp	r18, r1
    20b4:	31 05       	cpc	r19, r1
    20b6:	29 f4       	brne	.+10     	; 0x20c2 <free+0x9c>
    20b8:	f0 93 5d 02 	sts	0x025D, r31
    20bc:	e0 93 5c 02 	sts	0x025C, r30
    20c0:	3e c0       	rjmp	.+124    	; 0x213e <free+0x118>
    20c2:	d9 01       	movw	r26, r18
    20c4:	13 96       	adiw	r26, 0x03	; 3
    20c6:	fc 93       	st	X, r31
    20c8:	ee 93       	st	-X, r30
    20ca:	12 97       	sbiw	r26, 0x02	; 2
    20cc:	4d 91       	ld	r20, X+
    20ce:	5d 91       	ld	r21, X+
    20d0:	a4 0f       	add	r26, r20
    20d2:	b5 1f       	adc	r27, r21
    20d4:	ea 17       	cp	r30, r26
    20d6:	fb 07       	cpc	r31, r27
    20d8:	79 f4       	brne	.+30     	; 0x20f8 <free+0xd2>
    20da:	80 81       	ld	r24, Z
    20dc:	91 81       	ldd	r25, Z+1	; 0x01
    20de:	84 0f       	add	r24, r20
    20e0:	95 1f       	adc	r25, r21
    20e2:	02 96       	adiw	r24, 0x02	; 2
    20e4:	d9 01       	movw	r26, r18
    20e6:	11 96       	adiw	r26, 0x01	; 1
    20e8:	9c 93       	st	X, r25
    20ea:	8e 93       	st	-X, r24
    20ec:	82 81       	ldd	r24, Z+2	; 0x02
    20ee:	93 81       	ldd	r25, Z+3	; 0x03
    20f0:	13 96       	adiw	r26, 0x03	; 3
    20f2:	9c 93       	st	X, r25
    20f4:	8e 93       	st	-X, r24
    20f6:	12 97       	sbiw	r26, 0x02	; 2
    20f8:	e0 e0       	ldi	r30, 0x00	; 0
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	19 f0       	breq	.+6      	; 0x210a <free+0xe4>
    2104:	fe 01       	movw	r30, r28
    2106:	ec 01       	movw	r28, r24
    2108:	f9 cf       	rjmp	.-14     	; 0x20fc <free+0xd6>
    210a:	ce 01       	movw	r24, r28
    210c:	02 96       	adiw	r24, 0x02	; 2
    210e:	28 81       	ld	r18, Y
    2110:	39 81       	ldd	r19, Y+1	; 0x01
    2112:	82 0f       	add	r24, r18
    2114:	93 1f       	adc	r25, r19
    2116:	20 91 5a 02 	lds	r18, 0x025A
    211a:	30 91 5b 02 	lds	r19, 0x025B
    211e:	28 17       	cp	r18, r24
    2120:	39 07       	cpc	r19, r25
    2122:	69 f4       	brne	.+26     	; 0x213e <free+0x118>
    2124:	30 97       	sbiw	r30, 0x00	; 0
    2126:	29 f4       	brne	.+10     	; 0x2132 <free+0x10c>
    2128:	10 92 5d 02 	sts	0x025D, r1
    212c:	10 92 5c 02 	sts	0x025C, r1
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <free+0x110>
    2132:	13 82       	std	Z+3, r1	; 0x03
    2134:	12 82       	std	Z+2, r1	; 0x02
    2136:	d0 93 5b 02 	sts	0x025B, r29
    213a:	c0 93 5a 02 	sts	0x025A, r28
    213e:	df 91       	pop	r29
    2140:	cf 91       	pop	r28
    2142:	08 95       	ret

00002144 <realloc>:
    2144:	a0 e0       	ldi	r26, 0x00	; 0
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e8 ea       	ldi	r30, 0xA8	; 168
    214a:	f0 e1       	ldi	r31, 0x10	; 16
    214c:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__prologue_saves__+0x8>
    2150:	ec 01       	movw	r28, r24
    2152:	cb 01       	movw	r24, r22
    2154:	20 97       	sbiw	r28, 0x00	; 0
    2156:	19 f4       	brne	.+6      	; 0x215e <realloc+0x1a>
    2158:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <malloc>
    215c:	b8 c0       	rjmp	.+368    	; 0x22ce <realloc+0x18a>
    215e:	fe 01       	movw	r30, r28
    2160:	e6 0f       	add	r30, r22
    2162:	f7 1f       	adc	r31, r23
    2164:	9e 01       	movw	r18, r28
    2166:	22 50       	subi	r18, 0x02	; 2
    2168:	31 09       	sbc	r19, r1
    216a:	e2 17       	cp	r30, r18
    216c:	f3 07       	cpc	r31, r19
    216e:	08 f4       	brcc	.+2      	; 0x2172 <realloc+0x2e>
    2170:	ac c0       	rjmp	.+344    	; 0x22ca <realloc+0x186>
    2172:	d9 01       	movw	r26, r18
    2174:	0d 91       	ld	r16, X+
    2176:	1c 91       	ld	r17, X
    2178:	11 97       	sbiw	r26, 0x01	; 1
    217a:	06 17       	cp	r16, r22
    217c:	17 07       	cpc	r17, r23
    217e:	b8 f0       	brcs	.+46     	; 0x21ae <realloc+0x6a>
    2180:	05 30       	cpi	r16, 0x05	; 5
    2182:	11 05       	cpc	r17, r1
    2184:	08 f4       	brcc	.+2      	; 0x2188 <realloc+0x44>
    2186:	9f c0       	rjmp	.+318    	; 0x22c6 <realloc+0x182>
    2188:	a8 01       	movw	r20, r16
    218a:	44 50       	subi	r20, 0x04	; 4
    218c:	51 09       	sbc	r21, r1
    218e:	46 17       	cp	r20, r22
    2190:	57 07       	cpc	r21, r23
    2192:	08 f4       	brcc	.+2      	; 0x2196 <realloc+0x52>
    2194:	98 c0       	rjmp	.+304    	; 0x22c6 <realloc+0x182>
    2196:	02 50       	subi	r16, 0x02	; 2
    2198:	11 09       	sbc	r17, r1
    219a:	06 1b       	sub	r16, r22
    219c:	17 0b       	sbc	r17, r23
    219e:	01 93       	st	Z+, r16
    21a0:	11 93       	st	Z+, r17
    21a2:	6d 93       	st	X+, r22
    21a4:	7c 93       	st	X, r23
    21a6:	cf 01       	movw	r24, r30
    21a8:	0e 94 13 10 	call	0x2026	; 0x2026 <free>
    21ac:	8c c0       	rjmp	.+280    	; 0x22c6 <realloc+0x182>
    21ae:	5b 01       	movw	r10, r22
    21b0:	a0 1a       	sub	r10, r16
    21b2:	b1 0a       	sbc	r11, r17
    21b4:	4e 01       	movw	r8, r28
    21b6:	80 0e       	add	r8, r16
    21b8:	91 1e       	adc	r9, r17
    21ba:	a0 91 5c 02 	lds	r26, 0x025C
    21be:	b0 91 5d 02 	lds	r27, 0x025D
    21c2:	61 2c       	mov	r6, r1
    21c4:	71 2c       	mov	r7, r1
    21c6:	60 e0       	ldi	r22, 0x00	; 0
    21c8:	70 e0       	ldi	r23, 0x00	; 0
    21ca:	10 97       	sbiw	r26, 0x00	; 0
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <realloc+0x8c>
    21ce:	49 c0       	rjmp	.+146    	; 0x2262 <realloc+0x11e>
    21d0:	a8 15       	cp	r26, r8
    21d2:	b9 05       	cpc	r27, r9
    21d4:	c9 f5       	brne	.+114    	; 0x2248 <realloc+0x104>
    21d6:	ed 90       	ld	r14, X+
    21d8:	fc 90       	ld	r15, X
    21da:	11 97       	sbiw	r26, 0x01	; 1
    21dc:	67 01       	movw	r12, r14
    21de:	42 e0       	ldi	r20, 0x02	; 2
    21e0:	c4 0e       	add	r12, r20
    21e2:	d1 1c       	adc	r13, r1
    21e4:	ca 14       	cp	r12, r10
    21e6:	db 04       	cpc	r13, r11
    21e8:	78 f1       	brcs	.+94     	; 0x2248 <realloc+0x104>
    21ea:	47 01       	movw	r8, r14
    21ec:	8a 18       	sub	r8, r10
    21ee:	9b 08       	sbc	r9, r11
    21f0:	64 01       	movw	r12, r8
    21f2:	42 e0       	ldi	r20, 0x02	; 2
    21f4:	c4 0e       	add	r12, r20
    21f6:	d1 1c       	adc	r13, r1
    21f8:	12 96       	adiw	r26, 0x02	; 2
    21fa:	bc 90       	ld	r11, X
    21fc:	12 97       	sbiw	r26, 0x02	; 2
    21fe:	13 96       	adiw	r26, 0x03	; 3
    2200:	ac 91       	ld	r26, X
    2202:	b5 e0       	ldi	r27, 0x05	; 5
    2204:	cb 16       	cp	r12, r27
    2206:	d1 04       	cpc	r13, r1
    2208:	40 f0       	brcs	.+16     	; 0x221a <realloc+0xd6>
    220a:	b2 82       	std	Z+2, r11	; 0x02
    220c:	a3 83       	std	Z+3, r26	; 0x03
    220e:	91 82       	std	Z+1, r9	; 0x01
    2210:	80 82       	st	Z, r8
    2212:	d9 01       	movw	r26, r18
    2214:	8d 93       	st	X+, r24
    2216:	9c 93       	st	X, r25
    2218:	09 c0       	rjmp	.+18     	; 0x222c <realloc+0xe8>
    221a:	0e 5f       	subi	r16, 0xFE	; 254
    221c:	1f 4f       	sbci	r17, 0xFF	; 255
    221e:	0e 0d       	add	r16, r14
    2220:	1f 1d       	adc	r17, r15
    2222:	f9 01       	movw	r30, r18
    2224:	11 83       	std	Z+1, r17	; 0x01
    2226:	00 83       	st	Z, r16
    2228:	eb 2d       	mov	r30, r11
    222a:	fa 2f       	mov	r31, r26
    222c:	61 15       	cp	r22, r1
    222e:	71 05       	cpc	r23, r1
    2230:	31 f0       	breq	.+12     	; 0x223e <realloc+0xfa>
    2232:	db 01       	movw	r26, r22
    2234:	13 96       	adiw	r26, 0x03	; 3
    2236:	fc 93       	st	X, r31
    2238:	ee 93       	st	-X, r30
    223a:	12 97       	sbiw	r26, 0x02	; 2
    223c:	44 c0       	rjmp	.+136    	; 0x22c6 <realloc+0x182>
    223e:	f0 93 5d 02 	sts	0x025D, r31
    2242:	e0 93 5c 02 	sts	0x025C, r30
    2246:	3f c0       	rjmp	.+126    	; 0x22c6 <realloc+0x182>
    2248:	6d 91       	ld	r22, X+
    224a:	7c 91       	ld	r23, X
    224c:	11 97       	sbiw	r26, 0x01	; 1
    224e:	66 16       	cp	r6, r22
    2250:	77 06       	cpc	r7, r23
    2252:	08 f4       	brcc	.+2      	; 0x2256 <realloc+0x112>
    2254:	3b 01       	movw	r6, r22
    2256:	bd 01       	movw	r22, r26
    2258:	12 96       	adiw	r26, 0x02	; 2
    225a:	0d 90       	ld	r0, X+
    225c:	bc 91       	ld	r27, X
    225e:	a0 2d       	mov	r26, r0
    2260:	b4 cf       	rjmp	.-152    	; 0x21ca <realloc+0x86>
    2262:	60 91 5a 02 	lds	r22, 0x025A
    2266:	70 91 5b 02 	lds	r23, 0x025B
    226a:	68 15       	cp	r22, r8
    226c:	79 05       	cpc	r23, r9
    226e:	e9 f4       	brne	.+58     	; 0x22aa <realloc+0x166>
    2270:	68 16       	cp	r6, r24
    2272:	79 06       	cpc	r7, r25
    2274:	d0 f4       	brcc	.+52     	; 0x22aa <realloc+0x166>
    2276:	40 91 00 01 	lds	r20, 0x0100
    227a:	50 91 01 01 	lds	r21, 0x0101
    227e:	41 15       	cp	r20, r1
    2280:	51 05       	cpc	r21, r1
    2282:	41 f4       	brne	.+16     	; 0x2294 <realloc+0x150>
    2284:	4d b7       	in	r20, 0x3d	; 61
    2286:	5e b7       	in	r21, 0x3e	; 62
    2288:	60 91 04 01 	lds	r22, 0x0104
    228c:	70 91 05 01 	lds	r23, 0x0105
    2290:	46 1b       	sub	r20, r22
    2292:	57 0b       	sbc	r21, r23
    2294:	e4 17       	cp	r30, r20
    2296:	f5 07       	cpc	r31, r21
    2298:	c0 f4       	brcc	.+48     	; 0x22ca <realloc+0x186>
    229a:	f0 93 5b 02 	sts	0x025B, r31
    229e:	e0 93 5a 02 	sts	0x025A, r30
    22a2:	f9 01       	movw	r30, r18
    22a4:	91 83       	std	Z+1, r25	; 0x01
    22a6:	80 83       	st	Z, r24
    22a8:	0e c0       	rjmp	.+28     	; 0x22c6 <realloc+0x182>
    22aa:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <malloc>
    22ae:	7c 01       	movw	r14, r24
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	59 f0       	breq	.+22     	; 0x22ca <realloc+0x186>
    22b4:	a8 01       	movw	r20, r16
    22b6:	be 01       	movw	r22, r28
    22b8:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <memcpy>
    22bc:	ce 01       	movw	r24, r28
    22be:	0e 94 13 10 	call	0x2026	; 0x2026 <free>
    22c2:	c7 01       	movw	r24, r14
    22c4:	04 c0       	rjmp	.+8      	; 0x22ce <realloc+0x18a>
    22c6:	ce 01       	movw	r24, r28
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <realloc+0x18a>
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    22d2:	ee e0       	ldi	r30, 0x0E	; 14
    22d4:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__epilogue_restores__+0x8>

000022d8 <memcpy>:
    22d8:	fb 01       	movw	r30, r22
    22da:	dc 01       	movw	r26, r24
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <memcpy+0xa>
    22de:	01 90       	ld	r0, Z+
    22e0:	0d 92       	st	X+, r0
    22e2:	41 50       	subi	r20, 0x01	; 1
    22e4:	50 40       	sbci	r21, 0x00	; 0
    22e6:	d8 f7       	brcc	.-10     	; 0x22de <memcpy+0x6>
    22e8:	08 95       	ret

000022ea <fdevopen>:
    22ea:	0f 93       	push	r16
    22ec:	1f 93       	push	r17
    22ee:	cf 93       	push	r28
    22f0:	df 93       	push	r29
    22f2:	ec 01       	movw	r28, r24
    22f4:	8b 01       	movw	r16, r22
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	31 f4       	brne	.+12     	; 0x2306 <fdevopen+0x1c>
    22fa:	61 15       	cp	r22, r1
    22fc:	71 05       	cpc	r23, r1
    22fe:	19 f4       	brne	.+6      	; 0x2306 <fdevopen+0x1c>
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	38 c0       	rjmp	.+112    	; 0x2376 <fdevopen+0x8c>
    2306:	6e e0       	ldi	r22, 0x0E	; 14
    2308:	70 e0       	ldi	r23, 0x00	; 0
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0e 94 a6 13 	call	0x274c	; 0x274c <calloc>
    2312:	fc 01       	movw	r30, r24
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	a1 f3       	breq	.-24     	; 0x2300 <fdevopen+0x16>
    2318:	80 e8       	ldi	r24, 0x80	; 128
    231a:	83 83       	std	Z+3, r24	; 0x03
    231c:	01 15       	cp	r16, r1
    231e:	11 05       	cpc	r17, r1
    2320:	71 f0       	breq	.+28     	; 0x233e <fdevopen+0x54>
    2322:	13 87       	std	Z+11, r17	; 0x0b
    2324:	02 87       	std	Z+10, r16	; 0x0a
    2326:	81 e8       	ldi	r24, 0x81	; 129
    2328:	83 83       	std	Z+3, r24	; 0x03
    232a:	80 91 5e 02 	lds	r24, 0x025E
    232e:	90 91 5f 02 	lds	r25, 0x025F
    2332:	89 2b       	or	r24, r25
    2334:	21 f4       	brne	.+8      	; 0x233e <fdevopen+0x54>
    2336:	f0 93 5f 02 	sts	0x025F, r31
    233a:	e0 93 5e 02 	sts	0x025E, r30
    233e:	20 97       	sbiw	r28, 0x00	; 0
    2340:	c9 f0       	breq	.+50     	; 0x2374 <fdevopen+0x8a>
    2342:	d1 87       	std	Z+9, r29	; 0x09
    2344:	c0 87       	std	Z+8, r28	; 0x08
    2346:	83 81       	ldd	r24, Z+3	; 0x03
    2348:	82 60       	ori	r24, 0x02	; 2
    234a:	83 83       	std	Z+3, r24	; 0x03
    234c:	80 91 60 02 	lds	r24, 0x0260
    2350:	90 91 61 02 	lds	r25, 0x0261
    2354:	89 2b       	or	r24, r25
    2356:	71 f4       	brne	.+28     	; 0x2374 <fdevopen+0x8a>
    2358:	f0 93 61 02 	sts	0x0261, r31
    235c:	e0 93 60 02 	sts	0x0260, r30
    2360:	80 91 62 02 	lds	r24, 0x0262
    2364:	90 91 63 02 	lds	r25, 0x0263
    2368:	89 2b       	or	r24, r25
    236a:	21 f4       	brne	.+8      	; 0x2374 <fdevopen+0x8a>
    236c:	f0 93 63 02 	sts	0x0263, r31
    2370:	e0 93 62 02 	sts	0x0262, r30
    2374:	cf 01       	movw	r24, r30
    2376:	df 91       	pop	r29
    2378:	cf 91       	pop	r28
    237a:	1f 91       	pop	r17
    237c:	0f 91       	pop	r16
    237e:	08 95       	ret

00002380 <printf>:
    2380:	a0 e0       	ldi	r26, 0x00	; 0
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e6 ec       	ldi	r30, 0xC6	; 198
    2386:	f1 e1       	ldi	r31, 0x11	; 17
    2388:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__prologue_saves__+0x20>
    238c:	fe 01       	movw	r30, r28
    238e:	35 96       	adiw	r30, 0x05	; 5
    2390:	61 91       	ld	r22, Z+
    2392:	71 91       	ld	r23, Z+
    2394:	af 01       	movw	r20, r30
    2396:	80 91 60 02 	lds	r24, 0x0260
    239a:	90 91 61 02 	lds	r25, 0x0261
    239e:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <vfprintf>
    23a2:	e2 e0       	ldi	r30, 0x02	; 2
    23a4:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__epilogue_restores__+0x20>

000023a8 <vfprintf>:
    23a8:	ac e0       	ldi	r26, 0x0C	; 12
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	ea ed       	ldi	r30, 0xDA	; 218
    23ae:	f1 e1       	ldi	r31, 0x11	; 17
    23b0:	0c 94 6f 14 	jmp	0x28de	; 0x28de <__prologue_saves__>
    23b4:	7c 01       	movw	r14, r24
    23b6:	6b 01       	movw	r12, r22
    23b8:	8a 01       	movw	r16, r20
    23ba:	fc 01       	movw	r30, r24
    23bc:	17 82       	std	Z+7, r1	; 0x07
    23be:	16 82       	std	Z+6, r1	; 0x06
    23c0:	83 81       	ldd	r24, Z+3	; 0x03
    23c2:	81 ff       	sbrs	r24, 1
    23c4:	bd c1       	rjmp	.+890    	; 0x2740 <vfprintf+0x398>
    23c6:	ce 01       	movw	r24, r28
    23c8:	01 96       	adiw	r24, 0x01	; 1
    23ca:	4c 01       	movw	r8, r24
    23cc:	f7 01       	movw	r30, r14
    23ce:	93 81       	ldd	r25, Z+3	; 0x03
    23d0:	f6 01       	movw	r30, r12
    23d2:	93 fd       	sbrc	r25, 3
    23d4:	85 91       	lpm	r24, Z+
    23d6:	93 ff       	sbrs	r25, 3
    23d8:	81 91       	ld	r24, Z+
    23da:	6f 01       	movw	r12, r30
    23dc:	88 23       	and	r24, r24
    23de:	09 f4       	brne	.+2      	; 0x23e2 <vfprintf+0x3a>
    23e0:	ab c1       	rjmp	.+854    	; 0x2738 <vfprintf+0x390>
    23e2:	85 32       	cpi	r24, 0x25	; 37
    23e4:	39 f4       	brne	.+14     	; 0x23f4 <vfprintf+0x4c>
    23e6:	93 fd       	sbrc	r25, 3
    23e8:	85 91       	lpm	r24, Z+
    23ea:	93 ff       	sbrs	r25, 3
    23ec:	81 91       	ld	r24, Z+
    23ee:	6f 01       	movw	r12, r30
    23f0:	85 32       	cpi	r24, 0x25	; 37
    23f2:	29 f4       	brne	.+10     	; 0x23fe <vfprintf+0x56>
    23f4:	b7 01       	movw	r22, r14
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	0e 94 df 13 	call	0x27be	; 0x27be <fputc>
    23fc:	e7 cf       	rjmp	.-50     	; 0x23cc <vfprintf+0x24>
    23fe:	51 2c       	mov	r5, r1
    2400:	31 2c       	mov	r3, r1
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	20 32       	cpi	r18, 0x20	; 32
    2406:	a0 f4       	brcc	.+40     	; 0x2430 <vfprintf+0x88>
    2408:	8b 32       	cpi	r24, 0x2B	; 43
    240a:	69 f0       	breq	.+26     	; 0x2426 <vfprintf+0x7e>
    240c:	30 f4       	brcc	.+12     	; 0x241a <vfprintf+0x72>
    240e:	80 32       	cpi	r24, 0x20	; 32
    2410:	59 f0       	breq	.+22     	; 0x2428 <vfprintf+0x80>
    2412:	83 32       	cpi	r24, 0x23	; 35
    2414:	69 f4       	brne	.+26     	; 0x2430 <vfprintf+0x88>
    2416:	20 61       	ori	r18, 0x10	; 16
    2418:	2c c0       	rjmp	.+88     	; 0x2472 <vfprintf+0xca>
    241a:	8d 32       	cpi	r24, 0x2D	; 45
    241c:	39 f0       	breq	.+14     	; 0x242c <vfprintf+0x84>
    241e:	80 33       	cpi	r24, 0x30	; 48
    2420:	39 f4       	brne	.+14     	; 0x2430 <vfprintf+0x88>
    2422:	21 60       	ori	r18, 0x01	; 1
    2424:	26 c0       	rjmp	.+76     	; 0x2472 <vfprintf+0xca>
    2426:	22 60       	ori	r18, 0x02	; 2
    2428:	24 60       	ori	r18, 0x04	; 4
    242a:	23 c0       	rjmp	.+70     	; 0x2472 <vfprintf+0xca>
    242c:	28 60       	ori	r18, 0x08	; 8
    242e:	21 c0       	rjmp	.+66     	; 0x2472 <vfprintf+0xca>
    2430:	27 fd       	sbrc	r18, 7
    2432:	27 c0       	rjmp	.+78     	; 0x2482 <vfprintf+0xda>
    2434:	30 ed       	ldi	r19, 0xD0	; 208
    2436:	38 0f       	add	r19, r24
    2438:	3a 30       	cpi	r19, 0x0A	; 10
    243a:	78 f4       	brcc	.+30     	; 0x245a <vfprintf+0xb2>
    243c:	26 ff       	sbrs	r18, 6
    243e:	06 c0       	rjmp	.+12     	; 0x244c <vfprintf+0xa4>
    2440:	fa e0       	ldi	r31, 0x0A	; 10
    2442:	5f 9e       	mul	r5, r31
    2444:	30 0d       	add	r19, r0
    2446:	11 24       	eor	r1, r1
    2448:	53 2e       	mov	r5, r19
    244a:	13 c0       	rjmp	.+38     	; 0x2472 <vfprintf+0xca>
    244c:	8a e0       	ldi	r24, 0x0A	; 10
    244e:	38 9e       	mul	r3, r24
    2450:	30 0d       	add	r19, r0
    2452:	11 24       	eor	r1, r1
    2454:	33 2e       	mov	r3, r19
    2456:	20 62       	ori	r18, 0x20	; 32
    2458:	0c c0       	rjmp	.+24     	; 0x2472 <vfprintf+0xca>
    245a:	8e 32       	cpi	r24, 0x2E	; 46
    245c:	21 f4       	brne	.+8      	; 0x2466 <vfprintf+0xbe>
    245e:	26 fd       	sbrc	r18, 6
    2460:	6b c1       	rjmp	.+726    	; 0x2738 <vfprintf+0x390>
    2462:	20 64       	ori	r18, 0x40	; 64
    2464:	06 c0       	rjmp	.+12     	; 0x2472 <vfprintf+0xca>
    2466:	8c 36       	cpi	r24, 0x6C	; 108
    2468:	11 f4       	brne	.+4      	; 0x246e <vfprintf+0xc6>
    246a:	20 68       	ori	r18, 0x80	; 128
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <vfprintf+0xca>
    246e:	88 36       	cpi	r24, 0x68	; 104
    2470:	41 f4       	brne	.+16     	; 0x2482 <vfprintf+0xda>
    2472:	f6 01       	movw	r30, r12
    2474:	93 fd       	sbrc	r25, 3
    2476:	85 91       	lpm	r24, Z+
    2478:	93 ff       	sbrs	r25, 3
    247a:	81 91       	ld	r24, Z+
    247c:	6f 01       	movw	r12, r30
    247e:	81 11       	cpse	r24, r1
    2480:	c1 cf       	rjmp	.-126    	; 0x2404 <vfprintf+0x5c>
    2482:	98 2f       	mov	r25, r24
    2484:	9f 7d       	andi	r25, 0xDF	; 223
    2486:	95 54       	subi	r25, 0x45	; 69
    2488:	93 30       	cpi	r25, 0x03	; 3
    248a:	28 f4       	brcc	.+10     	; 0x2496 <vfprintf+0xee>
    248c:	0c 5f       	subi	r16, 0xFC	; 252
    248e:	1f 4f       	sbci	r17, 0xFF	; 255
    2490:	ff e3       	ldi	r31, 0x3F	; 63
    2492:	f9 83       	std	Y+1, r31	; 0x01
    2494:	0d c0       	rjmp	.+26     	; 0x24b0 <vfprintf+0x108>
    2496:	83 36       	cpi	r24, 0x63	; 99
    2498:	31 f0       	breq	.+12     	; 0x24a6 <vfprintf+0xfe>
    249a:	83 37       	cpi	r24, 0x73	; 115
    249c:	71 f0       	breq	.+28     	; 0x24ba <vfprintf+0x112>
    249e:	83 35       	cpi	r24, 0x53	; 83
    24a0:	09 f0       	breq	.+2      	; 0x24a4 <vfprintf+0xfc>
    24a2:	5b c0       	rjmp	.+182    	; 0x255a <vfprintf+0x1b2>
    24a4:	22 c0       	rjmp	.+68     	; 0x24ea <vfprintf+0x142>
    24a6:	f8 01       	movw	r30, r16
    24a8:	80 81       	ld	r24, Z
    24aa:	89 83       	std	Y+1, r24	; 0x01
    24ac:	0e 5f       	subi	r16, 0xFE	; 254
    24ae:	1f 4f       	sbci	r17, 0xFF	; 255
    24b0:	44 24       	eor	r4, r4
    24b2:	43 94       	inc	r4
    24b4:	51 2c       	mov	r5, r1
    24b6:	54 01       	movw	r10, r8
    24b8:	15 c0       	rjmp	.+42     	; 0x24e4 <vfprintf+0x13c>
    24ba:	38 01       	movw	r6, r16
    24bc:	f2 e0       	ldi	r31, 0x02	; 2
    24be:	6f 0e       	add	r6, r31
    24c0:	71 1c       	adc	r7, r1
    24c2:	f8 01       	movw	r30, r16
    24c4:	a0 80       	ld	r10, Z
    24c6:	b1 80       	ldd	r11, Z+1	; 0x01
    24c8:	26 ff       	sbrs	r18, 6
    24ca:	03 c0       	rjmp	.+6      	; 0x24d2 <vfprintf+0x12a>
    24cc:	65 2d       	mov	r22, r5
    24ce:	70 e0       	ldi	r23, 0x00	; 0
    24d0:	02 c0       	rjmp	.+4      	; 0x24d6 <vfprintf+0x12e>
    24d2:	6f ef       	ldi	r22, 0xFF	; 255
    24d4:	7f ef       	ldi	r23, 0xFF	; 255
    24d6:	c5 01       	movw	r24, r10
    24d8:	2c 87       	std	Y+12, r18	; 0x0c
    24da:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <strnlen>
    24de:	2c 01       	movw	r4, r24
    24e0:	83 01       	movw	r16, r6
    24e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    24e4:	2f 77       	andi	r18, 0x7F	; 127
    24e6:	22 2e       	mov	r2, r18
    24e8:	17 c0       	rjmp	.+46     	; 0x2518 <vfprintf+0x170>
    24ea:	38 01       	movw	r6, r16
    24ec:	f2 e0       	ldi	r31, 0x02	; 2
    24ee:	6f 0e       	add	r6, r31
    24f0:	71 1c       	adc	r7, r1
    24f2:	f8 01       	movw	r30, r16
    24f4:	a0 80       	ld	r10, Z
    24f6:	b1 80       	ldd	r11, Z+1	; 0x01
    24f8:	26 ff       	sbrs	r18, 6
    24fa:	03 c0       	rjmp	.+6      	; 0x2502 <vfprintf+0x15a>
    24fc:	65 2d       	mov	r22, r5
    24fe:	70 e0       	ldi	r23, 0x00	; 0
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <vfprintf+0x15e>
    2502:	6f ef       	ldi	r22, 0xFF	; 255
    2504:	7f ef       	ldi	r23, 0xFF	; 255
    2506:	c5 01       	movw	r24, r10
    2508:	2c 87       	std	Y+12, r18	; 0x0c
    250a:	0e 94 c2 13 	call	0x2784	; 0x2784 <strnlen_P>
    250e:	2c 01       	movw	r4, r24
    2510:	2c 85       	ldd	r18, Y+12	; 0x0c
    2512:	20 68       	ori	r18, 0x80	; 128
    2514:	22 2e       	mov	r2, r18
    2516:	83 01       	movw	r16, r6
    2518:	23 fc       	sbrc	r2, 3
    251a:	1b c0       	rjmp	.+54     	; 0x2552 <vfprintf+0x1aa>
    251c:	83 2d       	mov	r24, r3
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	48 16       	cp	r4, r24
    2522:	59 06       	cpc	r5, r25
    2524:	b0 f4       	brcc	.+44     	; 0x2552 <vfprintf+0x1aa>
    2526:	b7 01       	movw	r22, r14
    2528:	80 e2       	ldi	r24, 0x20	; 32
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	0e 94 df 13 	call	0x27be	; 0x27be <fputc>
    2530:	3a 94       	dec	r3
    2532:	f4 cf       	rjmp	.-24     	; 0x251c <vfprintf+0x174>
    2534:	f5 01       	movw	r30, r10
    2536:	27 fc       	sbrc	r2, 7
    2538:	85 91       	lpm	r24, Z+
    253a:	27 fe       	sbrs	r2, 7
    253c:	81 91       	ld	r24, Z+
    253e:	5f 01       	movw	r10, r30
    2540:	b7 01       	movw	r22, r14
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	0e 94 df 13 	call	0x27be	; 0x27be <fputc>
    2548:	31 10       	cpse	r3, r1
    254a:	3a 94       	dec	r3
    254c:	f1 e0       	ldi	r31, 0x01	; 1
    254e:	4f 1a       	sub	r4, r31
    2550:	51 08       	sbc	r5, r1
    2552:	41 14       	cp	r4, r1
    2554:	51 04       	cpc	r5, r1
    2556:	71 f7       	brne	.-36     	; 0x2534 <vfprintf+0x18c>
    2558:	e5 c0       	rjmp	.+458    	; 0x2724 <vfprintf+0x37c>
    255a:	84 36       	cpi	r24, 0x64	; 100
    255c:	11 f0       	breq	.+4      	; 0x2562 <vfprintf+0x1ba>
    255e:	89 36       	cpi	r24, 0x69	; 105
    2560:	39 f5       	brne	.+78     	; 0x25b0 <vfprintf+0x208>
    2562:	f8 01       	movw	r30, r16
    2564:	27 ff       	sbrs	r18, 7
    2566:	07 c0       	rjmp	.+14     	; 0x2576 <vfprintf+0x1ce>
    2568:	60 81       	ld	r22, Z
    256a:	71 81       	ldd	r23, Z+1	; 0x01
    256c:	82 81       	ldd	r24, Z+2	; 0x02
    256e:	93 81       	ldd	r25, Z+3	; 0x03
    2570:	0c 5f       	subi	r16, 0xFC	; 252
    2572:	1f 4f       	sbci	r17, 0xFF	; 255
    2574:	08 c0       	rjmp	.+16     	; 0x2586 <vfprintf+0x1de>
    2576:	60 81       	ld	r22, Z
    2578:	71 81       	ldd	r23, Z+1	; 0x01
    257a:	88 27       	eor	r24, r24
    257c:	77 fd       	sbrc	r23, 7
    257e:	80 95       	com	r24
    2580:	98 2f       	mov	r25, r24
    2582:	0e 5f       	subi	r16, 0xFE	; 254
    2584:	1f 4f       	sbci	r17, 0xFF	; 255
    2586:	2f 76       	andi	r18, 0x6F	; 111
    2588:	b2 2e       	mov	r11, r18
    258a:	97 ff       	sbrs	r25, 7
    258c:	09 c0       	rjmp	.+18     	; 0x25a0 <vfprintf+0x1f8>
    258e:	90 95       	com	r25
    2590:	80 95       	com	r24
    2592:	70 95       	com	r23
    2594:	61 95       	neg	r22
    2596:	7f 4f       	sbci	r23, 0xFF	; 255
    2598:	8f 4f       	sbci	r24, 0xFF	; 255
    259a:	9f 4f       	sbci	r25, 0xFF	; 255
    259c:	20 68       	ori	r18, 0x80	; 128
    259e:	b2 2e       	mov	r11, r18
    25a0:	2a e0       	ldi	r18, 0x0A	; 10
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	a4 01       	movw	r20, r8
    25a6:	0e 94 11 14 	call	0x2822	; 0x2822 <__ultoa_invert>
    25aa:	a8 2e       	mov	r10, r24
    25ac:	a8 18       	sub	r10, r8
    25ae:	44 c0       	rjmp	.+136    	; 0x2638 <vfprintf+0x290>
    25b0:	85 37       	cpi	r24, 0x75	; 117
    25b2:	29 f4       	brne	.+10     	; 0x25be <vfprintf+0x216>
    25b4:	2f 7e       	andi	r18, 0xEF	; 239
    25b6:	b2 2e       	mov	r11, r18
    25b8:	2a e0       	ldi	r18, 0x0A	; 10
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	25 c0       	rjmp	.+74     	; 0x2608 <vfprintf+0x260>
    25be:	f2 2f       	mov	r31, r18
    25c0:	f9 7f       	andi	r31, 0xF9	; 249
    25c2:	bf 2e       	mov	r11, r31
    25c4:	8f 36       	cpi	r24, 0x6F	; 111
    25c6:	c1 f0       	breq	.+48     	; 0x25f8 <vfprintf+0x250>
    25c8:	18 f4       	brcc	.+6      	; 0x25d0 <vfprintf+0x228>
    25ca:	88 35       	cpi	r24, 0x58	; 88
    25cc:	79 f0       	breq	.+30     	; 0x25ec <vfprintf+0x244>
    25ce:	b4 c0       	rjmp	.+360    	; 0x2738 <vfprintf+0x390>
    25d0:	80 37       	cpi	r24, 0x70	; 112
    25d2:	19 f0       	breq	.+6      	; 0x25da <vfprintf+0x232>
    25d4:	88 37       	cpi	r24, 0x78	; 120
    25d6:	21 f0       	breq	.+8      	; 0x25e0 <vfprintf+0x238>
    25d8:	af c0       	rjmp	.+350    	; 0x2738 <vfprintf+0x390>
    25da:	2f 2f       	mov	r18, r31
    25dc:	20 61       	ori	r18, 0x10	; 16
    25de:	b2 2e       	mov	r11, r18
    25e0:	b4 fe       	sbrs	r11, 4
    25e2:	0d c0       	rjmp	.+26     	; 0x25fe <vfprintf+0x256>
    25e4:	8b 2d       	mov	r24, r11
    25e6:	84 60       	ori	r24, 0x04	; 4
    25e8:	b8 2e       	mov	r11, r24
    25ea:	09 c0       	rjmp	.+18     	; 0x25fe <vfprintf+0x256>
    25ec:	24 ff       	sbrs	r18, 4
    25ee:	0a c0       	rjmp	.+20     	; 0x2604 <vfprintf+0x25c>
    25f0:	9f 2f       	mov	r25, r31
    25f2:	96 60       	ori	r25, 0x06	; 6
    25f4:	b9 2e       	mov	r11, r25
    25f6:	06 c0       	rjmp	.+12     	; 0x2604 <vfprintf+0x25c>
    25f8:	28 e0       	ldi	r18, 0x08	; 8
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	05 c0       	rjmp	.+10     	; 0x2608 <vfprintf+0x260>
    25fe:	20 e1       	ldi	r18, 0x10	; 16
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	02 c0       	rjmp	.+4      	; 0x2608 <vfprintf+0x260>
    2604:	20 e1       	ldi	r18, 0x10	; 16
    2606:	32 e0       	ldi	r19, 0x02	; 2
    2608:	f8 01       	movw	r30, r16
    260a:	b7 fe       	sbrs	r11, 7
    260c:	07 c0       	rjmp	.+14     	; 0x261c <vfprintf+0x274>
    260e:	60 81       	ld	r22, Z
    2610:	71 81       	ldd	r23, Z+1	; 0x01
    2612:	82 81       	ldd	r24, Z+2	; 0x02
    2614:	93 81       	ldd	r25, Z+3	; 0x03
    2616:	0c 5f       	subi	r16, 0xFC	; 252
    2618:	1f 4f       	sbci	r17, 0xFF	; 255
    261a:	06 c0       	rjmp	.+12     	; 0x2628 <vfprintf+0x280>
    261c:	60 81       	ld	r22, Z
    261e:	71 81       	ldd	r23, Z+1	; 0x01
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	0e 5f       	subi	r16, 0xFE	; 254
    2626:	1f 4f       	sbci	r17, 0xFF	; 255
    2628:	a4 01       	movw	r20, r8
    262a:	0e 94 11 14 	call	0x2822	; 0x2822 <__ultoa_invert>
    262e:	a8 2e       	mov	r10, r24
    2630:	a8 18       	sub	r10, r8
    2632:	fb 2d       	mov	r31, r11
    2634:	ff 77       	andi	r31, 0x7F	; 127
    2636:	bf 2e       	mov	r11, r31
    2638:	b6 fe       	sbrs	r11, 6
    263a:	0b c0       	rjmp	.+22     	; 0x2652 <vfprintf+0x2aa>
    263c:	2b 2d       	mov	r18, r11
    263e:	2e 7f       	andi	r18, 0xFE	; 254
    2640:	a5 14       	cp	r10, r5
    2642:	50 f4       	brcc	.+20     	; 0x2658 <vfprintf+0x2b0>
    2644:	b4 fe       	sbrs	r11, 4
    2646:	0a c0       	rjmp	.+20     	; 0x265c <vfprintf+0x2b4>
    2648:	b2 fc       	sbrc	r11, 2
    264a:	08 c0       	rjmp	.+16     	; 0x265c <vfprintf+0x2b4>
    264c:	2b 2d       	mov	r18, r11
    264e:	2e 7e       	andi	r18, 0xEE	; 238
    2650:	05 c0       	rjmp	.+10     	; 0x265c <vfprintf+0x2b4>
    2652:	7a 2c       	mov	r7, r10
    2654:	2b 2d       	mov	r18, r11
    2656:	03 c0       	rjmp	.+6      	; 0x265e <vfprintf+0x2b6>
    2658:	7a 2c       	mov	r7, r10
    265a:	01 c0       	rjmp	.+2      	; 0x265e <vfprintf+0x2b6>
    265c:	75 2c       	mov	r7, r5
    265e:	24 ff       	sbrs	r18, 4
    2660:	0d c0       	rjmp	.+26     	; 0x267c <vfprintf+0x2d4>
    2662:	fe 01       	movw	r30, r28
    2664:	ea 0d       	add	r30, r10
    2666:	f1 1d       	adc	r31, r1
    2668:	80 81       	ld	r24, Z
    266a:	80 33       	cpi	r24, 0x30	; 48
    266c:	11 f4       	brne	.+4      	; 0x2672 <vfprintf+0x2ca>
    266e:	29 7e       	andi	r18, 0xE9	; 233
    2670:	09 c0       	rjmp	.+18     	; 0x2684 <vfprintf+0x2dc>
    2672:	22 ff       	sbrs	r18, 2
    2674:	06 c0       	rjmp	.+12     	; 0x2682 <vfprintf+0x2da>
    2676:	73 94       	inc	r7
    2678:	73 94       	inc	r7
    267a:	04 c0       	rjmp	.+8      	; 0x2684 <vfprintf+0x2dc>
    267c:	82 2f       	mov	r24, r18
    267e:	86 78       	andi	r24, 0x86	; 134
    2680:	09 f0       	breq	.+2      	; 0x2684 <vfprintf+0x2dc>
    2682:	73 94       	inc	r7
    2684:	23 fd       	sbrc	r18, 3
    2686:	13 c0       	rjmp	.+38     	; 0x26ae <vfprintf+0x306>
    2688:	20 ff       	sbrs	r18, 0
    268a:	06 c0       	rjmp	.+12     	; 0x2698 <vfprintf+0x2f0>
    268c:	5a 2c       	mov	r5, r10
    268e:	73 14       	cp	r7, r3
    2690:	18 f4       	brcc	.+6      	; 0x2698 <vfprintf+0x2f0>
    2692:	53 0c       	add	r5, r3
    2694:	57 18       	sub	r5, r7
    2696:	73 2c       	mov	r7, r3
    2698:	73 14       	cp	r7, r3
    269a:	68 f4       	brcc	.+26     	; 0x26b6 <vfprintf+0x30e>
    269c:	b7 01       	movw	r22, r14
    269e:	80 e2       	ldi	r24, 0x20	; 32
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	2c 87       	std	Y+12, r18	; 0x0c
    26a4:	0e 94 df 13 	call	0x27be	; 0x27be <fputc>
    26a8:	73 94       	inc	r7
    26aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    26ac:	f5 cf       	rjmp	.-22     	; 0x2698 <vfprintf+0x2f0>
    26ae:	73 14       	cp	r7, r3
    26b0:	10 f4       	brcc	.+4      	; 0x26b6 <vfprintf+0x30e>
    26b2:	37 18       	sub	r3, r7
    26b4:	01 c0       	rjmp	.+2      	; 0x26b8 <vfprintf+0x310>
    26b6:	31 2c       	mov	r3, r1
    26b8:	24 ff       	sbrs	r18, 4
    26ba:	12 c0       	rjmp	.+36     	; 0x26e0 <vfprintf+0x338>
    26bc:	b7 01       	movw	r22, r14
    26be:	80 e3       	ldi	r24, 0x30	; 48
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	2c 87       	std	Y+12, r18	; 0x0c
    26c4:	0e 94 df 13 	call	0x27be	; 0x27be <fputc>
    26c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    26ca:	22 ff       	sbrs	r18, 2
    26cc:	17 c0       	rjmp	.+46     	; 0x26fc <vfprintf+0x354>
    26ce:	21 ff       	sbrs	r18, 1
    26d0:	03 c0       	rjmp	.+6      	; 0x26d8 <vfprintf+0x330>
    26d2:	88 e5       	ldi	r24, 0x58	; 88
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <vfprintf+0x334>
    26d8:	88 e7       	ldi	r24, 0x78	; 120
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	b7 01       	movw	r22, r14
    26de:	0c c0       	rjmp	.+24     	; 0x26f8 <vfprintf+0x350>
    26e0:	82 2f       	mov	r24, r18
    26e2:	86 78       	andi	r24, 0x86	; 134
    26e4:	59 f0       	breq	.+22     	; 0x26fc <vfprintf+0x354>
    26e6:	21 fd       	sbrc	r18, 1
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <vfprintf+0x346>
    26ea:	80 e2       	ldi	r24, 0x20	; 32
    26ec:	01 c0       	rjmp	.+2      	; 0x26f0 <vfprintf+0x348>
    26ee:	8b e2       	ldi	r24, 0x2B	; 43
    26f0:	27 fd       	sbrc	r18, 7
    26f2:	8d e2       	ldi	r24, 0x2D	; 45
    26f4:	b7 01       	movw	r22, r14
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	0e 94 df 13 	call	0x27be	; 0x27be <fputc>
    26fc:	a5 14       	cp	r10, r5
    26fe:	38 f4       	brcc	.+14     	; 0x270e <vfprintf+0x366>
    2700:	b7 01       	movw	r22, r14
    2702:	80 e3       	ldi	r24, 0x30	; 48
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	0e 94 df 13 	call	0x27be	; 0x27be <fputc>
    270a:	5a 94       	dec	r5
    270c:	f7 cf       	rjmp	.-18     	; 0x26fc <vfprintf+0x354>
    270e:	aa 94       	dec	r10
    2710:	f4 01       	movw	r30, r8
    2712:	ea 0d       	add	r30, r10
    2714:	f1 1d       	adc	r31, r1
    2716:	80 81       	ld	r24, Z
    2718:	b7 01       	movw	r22, r14
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	0e 94 df 13 	call	0x27be	; 0x27be <fputc>
    2720:	a1 10       	cpse	r10, r1
    2722:	f5 cf       	rjmp	.-22     	; 0x270e <vfprintf+0x366>
    2724:	33 20       	and	r3, r3
    2726:	09 f4       	brne	.+2      	; 0x272a <vfprintf+0x382>
    2728:	51 ce       	rjmp	.-862    	; 0x23cc <vfprintf+0x24>
    272a:	b7 01       	movw	r22, r14
    272c:	80 e2       	ldi	r24, 0x20	; 32
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	0e 94 df 13 	call	0x27be	; 0x27be <fputc>
    2734:	3a 94       	dec	r3
    2736:	f6 cf       	rjmp	.-20     	; 0x2724 <vfprintf+0x37c>
    2738:	f7 01       	movw	r30, r14
    273a:	86 81       	ldd	r24, Z+6	; 0x06
    273c:	97 81       	ldd	r25, Z+7	; 0x07
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <vfprintf+0x39c>
    2740:	8f ef       	ldi	r24, 0xFF	; 255
    2742:	9f ef       	ldi	r25, 0xFF	; 255
    2744:	2c 96       	adiw	r28, 0x0c	; 12
    2746:	e2 e1       	ldi	r30, 0x12	; 18
    2748:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <__epilogue_restores__>

0000274c <calloc>:
    274c:	0f 93       	push	r16
    274e:	1f 93       	push	r17
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	86 9f       	mul	r24, r22
    2756:	80 01       	movw	r16, r0
    2758:	87 9f       	mul	r24, r23
    275a:	10 0d       	add	r17, r0
    275c:	96 9f       	mul	r25, r22
    275e:	10 0d       	add	r17, r0
    2760:	11 24       	eor	r1, r1
    2762:	c8 01       	movw	r24, r16
    2764:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <malloc>
    2768:	ec 01       	movw	r28, r24
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	29 f0       	breq	.+10     	; 0x2778 <calloc+0x2c>
    276e:	a8 01       	movw	r20, r16
    2770:	60 e0       	ldi	r22, 0x00	; 0
    2772:	70 e0       	ldi	r23, 0x00	; 0
    2774:	0e 94 cd 13 	call	0x279a	; 0x279a <memset>
    2778:	ce 01       	movw	r24, r28
    277a:	df 91       	pop	r29
    277c:	cf 91       	pop	r28
    277e:	1f 91       	pop	r17
    2780:	0f 91       	pop	r16
    2782:	08 95       	ret

00002784 <strnlen_P>:
    2784:	fc 01       	movw	r30, r24
    2786:	05 90       	lpm	r0, Z+
    2788:	61 50       	subi	r22, 0x01	; 1
    278a:	70 40       	sbci	r23, 0x00	; 0
    278c:	01 10       	cpse	r0, r1
    278e:	d8 f7       	brcc	.-10     	; 0x2786 <strnlen_P+0x2>
    2790:	80 95       	com	r24
    2792:	90 95       	com	r25
    2794:	8e 0f       	add	r24, r30
    2796:	9f 1f       	adc	r25, r31
    2798:	08 95       	ret

0000279a <memset>:
    279a:	dc 01       	movw	r26, r24
    279c:	01 c0       	rjmp	.+2      	; 0x27a0 <memset+0x6>
    279e:	6d 93       	st	X+, r22
    27a0:	41 50       	subi	r20, 0x01	; 1
    27a2:	50 40       	sbci	r21, 0x00	; 0
    27a4:	e0 f7       	brcc	.-8      	; 0x279e <memset+0x4>
    27a6:	08 95       	ret

000027a8 <strnlen>:
    27a8:	fc 01       	movw	r30, r24
    27aa:	61 50       	subi	r22, 0x01	; 1
    27ac:	70 40       	sbci	r23, 0x00	; 0
    27ae:	01 90       	ld	r0, Z+
    27b0:	01 10       	cpse	r0, r1
    27b2:	d8 f7       	brcc	.-10     	; 0x27aa <strnlen+0x2>
    27b4:	80 95       	com	r24
    27b6:	90 95       	com	r25
    27b8:	8e 0f       	add	r24, r30
    27ba:	9f 1f       	adc	r25, r31
    27bc:	08 95       	ret

000027be <fputc>:
    27be:	0f 93       	push	r16
    27c0:	1f 93       	push	r17
    27c2:	cf 93       	push	r28
    27c4:	df 93       	push	r29
    27c6:	18 2f       	mov	r17, r24
    27c8:	09 2f       	mov	r16, r25
    27ca:	eb 01       	movw	r28, r22
    27cc:	8b 81       	ldd	r24, Y+3	; 0x03
    27ce:	81 fd       	sbrc	r24, 1
    27d0:	03 c0       	rjmp	.+6      	; 0x27d8 <fputc+0x1a>
    27d2:	8f ef       	ldi	r24, 0xFF	; 255
    27d4:	9f ef       	ldi	r25, 0xFF	; 255
    27d6:	20 c0       	rjmp	.+64     	; 0x2818 <fputc+0x5a>
    27d8:	82 ff       	sbrs	r24, 2
    27da:	10 c0       	rjmp	.+32     	; 0x27fc <fputc+0x3e>
    27dc:	4e 81       	ldd	r20, Y+6	; 0x06
    27de:	5f 81       	ldd	r21, Y+7	; 0x07
    27e0:	2c 81       	ldd	r18, Y+4	; 0x04
    27e2:	3d 81       	ldd	r19, Y+5	; 0x05
    27e4:	42 17       	cp	r20, r18
    27e6:	53 07       	cpc	r21, r19
    27e8:	7c f4       	brge	.+30     	; 0x2808 <fputc+0x4a>
    27ea:	e8 81       	ld	r30, Y
    27ec:	f9 81       	ldd	r31, Y+1	; 0x01
    27ee:	9f 01       	movw	r18, r30
    27f0:	2f 5f       	subi	r18, 0xFF	; 255
    27f2:	3f 4f       	sbci	r19, 0xFF	; 255
    27f4:	39 83       	std	Y+1, r19	; 0x01
    27f6:	28 83       	st	Y, r18
    27f8:	10 83       	st	Z, r17
    27fa:	06 c0       	rjmp	.+12     	; 0x2808 <fputc+0x4a>
    27fc:	e8 85       	ldd	r30, Y+8	; 0x08
    27fe:	f9 85       	ldd	r31, Y+9	; 0x09
    2800:	81 2f       	mov	r24, r17
    2802:	09 95       	icall
    2804:	89 2b       	or	r24, r25
    2806:	29 f7       	brne	.-54     	; 0x27d2 <fputc+0x14>
    2808:	2e 81       	ldd	r18, Y+6	; 0x06
    280a:	3f 81       	ldd	r19, Y+7	; 0x07
    280c:	2f 5f       	subi	r18, 0xFF	; 255
    280e:	3f 4f       	sbci	r19, 0xFF	; 255
    2810:	3f 83       	std	Y+7, r19	; 0x07
    2812:	2e 83       	std	Y+6, r18	; 0x06
    2814:	81 2f       	mov	r24, r17
    2816:	90 2f       	mov	r25, r16
    2818:	df 91       	pop	r29
    281a:	cf 91       	pop	r28
    281c:	1f 91       	pop	r17
    281e:	0f 91       	pop	r16
    2820:	08 95       	ret

00002822 <__ultoa_invert>:
    2822:	fa 01       	movw	r30, r20
    2824:	aa 27       	eor	r26, r26
    2826:	28 30       	cpi	r18, 0x08	; 8
    2828:	51 f1       	breq	.+84     	; 0x287e <__ultoa_invert+0x5c>
    282a:	20 31       	cpi	r18, 0x10	; 16
    282c:	81 f1       	breq	.+96     	; 0x288e <__ultoa_invert+0x6c>
    282e:	e8 94       	clt
    2830:	6f 93       	push	r22
    2832:	6e 7f       	andi	r22, 0xFE	; 254
    2834:	6e 5f       	subi	r22, 0xFE	; 254
    2836:	7f 4f       	sbci	r23, 0xFF	; 255
    2838:	8f 4f       	sbci	r24, 0xFF	; 255
    283a:	9f 4f       	sbci	r25, 0xFF	; 255
    283c:	af 4f       	sbci	r26, 0xFF	; 255
    283e:	b1 e0       	ldi	r27, 0x01	; 1
    2840:	3e d0       	rcall	.+124    	; 0x28be <__ultoa_invert+0x9c>
    2842:	b4 e0       	ldi	r27, 0x04	; 4
    2844:	3c d0       	rcall	.+120    	; 0x28be <__ultoa_invert+0x9c>
    2846:	67 0f       	add	r22, r23
    2848:	78 1f       	adc	r23, r24
    284a:	89 1f       	adc	r24, r25
    284c:	9a 1f       	adc	r25, r26
    284e:	a1 1d       	adc	r26, r1
    2850:	68 0f       	add	r22, r24
    2852:	79 1f       	adc	r23, r25
    2854:	8a 1f       	adc	r24, r26
    2856:	91 1d       	adc	r25, r1
    2858:	a1 1d       	adc	r26, r1
    285a:	6a 0f       	add	r22, r26
    285c:	71 1d       	adc	r23, r1
    285e:	81 1d       	adc	r24, r1
    2860:	91 1d       	adc	r25, r1
    2862:	a1 1d       	adc	r26, r1
    2864:	20 d0       	rcall	.+64     	; 0x28a6 <__ultoa_invert+0x84>
    2866:	09 f4       	brne	.+2      	; 0x286a <__ultoa_invert+0x48>
    2868:	68 94       	set
    286a:	3f 91       	pop	r19
    286c:	2a e0       	ldi	r18, 0x0A	; 10
    286e:	26 9f       	mul	r18, r22
    2870:	11 24       	eor	r1, r1
    2872:	30 19       	sub	r19, r0
    2874:	30 5d       	subi	r19, 0xD0	; 208
    2876:	31 93       	st	Z+, r19
    2878:	de f6       	brtc	.-74     	; 0x2830 <__ultoa_invert+0xe>
    287a:	cf 01       	movw	r24, r30
    287c:	08 95       	ret
    287e:	46 2f       	mov	r20, r22
    2880:	47 70       	andi	r20, 0x07	; 7
    2882:	40 5d       	subi	r20, 0xD0	; 208
    2884:	41 93       	st	Z+, r20
    2886:	b3 e0       	ldi	r27, 0x03	; 3
    2888:	0f d0       	rcall	.+30     	; 0x28a8 <__ultoa_invert+0x86>
    288a:	c9 f7       	brne	.-14     	; 0x287e <__ultoa_invert+0x5c>
    288c:	f6 cf       	rjmp	.-20     	; 0x287a <__ultoa_invert+0x58>
    288e:	46 2f       	mov	r20, r22
    2890:	4f 70       	andi	r20, 0x0F	; 15
    2892:	40 5d       	subi	r20, 0xD0	; 208
    2894:	4a 33       	cpi	r20, 0x3A	; 58
    2896:	18 f0       	brcs	.+6      	; 0x289e <__ultoa_invert+0x7c>
    2898:	49 5d       	subi	r20, 0xD9	; 217
    289a:	31 fd       	sbrc	r19, 1
    289c:	40 52       	subi	r20, 0x20	; 32
    289e:	41 93       	st	Z+, r20
    28a0:	02 d0       	rcall	.+4      	; 0x28a6 <__ultoa_invert+0x84>
    28a2:	a9 f7       	brne	.-22     	; 0x288e <__ultoa_invert+0x6c>
    28a4:	ea cf       	rjmp	.-44     	; 0x287a <__ultoa_invert+0x58>
    28a6:	b4 e0       	ldi	r27, 0x04	; 4
    28a8:	a6 95       	lsr	r26
    28aa:	97 95       	ror	r25
    28ac:	87 95       	ror	r24
    28ae:	77 95       	ror	r23
    28b0:	67 95       	ror	r22
    28b2:	ba 95       	dec	r27
    28b4:	c9 f7       	brne	.-14     	; 0x28a8 <__ultoa_invert+0x86>
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	61 05       	cpc	r22, r1
    28ba:	71 05       	cpc	r23, r1
    28bc:	08 95       	ret
    28be:	9b 01       	movw	r18, r22
    28c0:	ac 01       	movw	r20, r24
    28c2:	0a 2e       	mov	r0, r26
    28c4:	06 94       	lsr	r0
    28c6:	57 95       	ror	r21
    28c8:	47 95       	ror	r20
    28ca:	37 95       	ror	r19
    28cc:	27 95       	ror	r18
    28ce:	ba 95       	dec	r27
    28d0:	c9 f7       	brne	.-14     	; 0x28c4 <__ultoa_invert+0xa2>
    28d2:	62 0f       	add	r22, r18
    28d4:	73 1f       	adc	r23, r19
    28d6:	84 1f       	adc	r24, r20
    28d8:	95 1f       	adc	r25, r21
    28da:	a0 1d       	adc	r26, r0
    28dc:	08 95       	ret

000028de <__prologue_saves__>:
    28de:	2f 92       	push	r2
    28e0:	3f 92       	push	r3
    28e2:	4f 92       	push	r4
    28e4:	5f 92       	push	r5
    28e6:	6f 92       	push	r6
    28e8:	7f 92       	push	r7
    28ea:	8f 92       	push	r8
    28ec:	9f 92       	push	r9
    28ee:	af 92       	push	r10
    28f0:	bf 92       	push	r11
    28f2:	cf 92       	push	r12
    28f4:	df 92       	push	r13
    28f6:	ef 92       	push	r14
    28f8:	ff 92       	push	r15
    28fa:	0f 93       	push	r16
    28fc:	1f 93       	push	r17
    28fe:	cf 93       	push	r28
    2900:	df 93       	push	r29
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
    2906:	ca 1b       	sub	r28, r26
    2908:	db 0b       	sbc	r29, r27
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	de bf       	out	0x3e, r29	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	cd bf       	out	0x3d, r28	; 61
    2914:	09 94       	ijmp

00002916 <__epilogue_restores__>:
    2916:	2a 88       	ldd	r2, Y+18	; 0x12
    2918:	39 88       	ldd	r3, Y+17	; 0x11
    291a:	48 88       	ldd	r4, Y+16	; 0x10
    291c:	5f 84       	ldd	r5, Y+15	; 0x0f
    291e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2920:	7d 84       	ldd	r7, Y+13	; 0x0d
    2922:	8c 84       	ldd	r8, Y+12	; 0x0c
    2924:	9b 84       	ldd	r9, Y+11	; 0x0b
    2926:	aa 84       	ldd	r10, Y+10	; 0x0a
    2928:	b9 84       	ldd	r11, Y+9	; 0x09
    292a:	c8 84       	ldd	r12, Y+8	; 0x08
    292c:	df 80       	ldd	r13, Y+7	; 0x07
    292e:	ee 80       	ldd	r14, Y+6	; 0x06
    2930:	fd 80       	ldd	r15, Y+5	; 0x05
    2932:	0c 81       	ldd	r16, Y+4	; 0x04
    2934:	1b 81       	ldd	r17, Y+3	; 0x03
    2936:	aa 81       	ldd	r26, Y+2	; 0x02
    2938:	b9 81       	ldd	r27, Y+1	; 0x01
    293a:	ce 0f       	add	r28, r30
    293c:	d1 1d       	adc	r29, r1
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	ed 01       	movw	r28, r26
    294a:	08 95       	ret

0000294c <_exit>:
    294c:	f8 94       	cli

0000294e <__stop_program>:
    294e:	ff cf       	rjmp	.-2      	; 0x294e <__stop_program>

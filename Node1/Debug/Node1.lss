
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000150  00800100  00002970  00002a04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002970  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800250  00800250  00002b54  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002b54  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000290  00000000  00000000  00002bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002d48  00000000  00000000  00002e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ffe  00000000  00000000  00005b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e08  00000000  00000000  00006b86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000794  00000000  00000000  00007990  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000816  00000000  00000000  00008124  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e6a  00000000  00000000  0000893a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  0000a7a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__ctors_end>
       4:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       8:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
       c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      10:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      14:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      18:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      1c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      20:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      24:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      28:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      2c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      30:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      34:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      38:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      3c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      40:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      44:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      48:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      4c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      50:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      54:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      58:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      5c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      60:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      64:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      68:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      6c:	0c 94 94 03 	jmp	0x728	; 0x728 <__bad_interrupt>
      70:	08 4a       	sbci	r16, 0xA8	; 168
      72:	d7 3b       	cpi	r29, 0xB7	; 183
      74:	3b ce       	rjmp	.-906    	; 0xfffffcec <__eeprom_end+0xff7efcec>
      76:	01 6e       	ori	r16, 0xE1	; 225
      78:	84 bc       	out	0x24, r8	; 36
      7a:	bf fd       	.word	0xfdbf	; ????
      7c:	c1 2f       	mov	r28, r17
      7e:	3d 6c       	ori	r19, 0xCD	; 205
      80:	74 31       	cpi	r23, 0x14	; 20
      82:	9a bd       	out	0x2a, r25	; 42
      84:	56 83       	std	Z+6, r21	; 0x06
      86:	3d da       	rcall	.-2950   	; 0xfffff502 <__eeprom_end+0xff7ef502>
      88:	3d 00       	.word	0x003d	; ????
      8a:	c7 7f       	andi	r28, 0xF7	; 247
      8c:	11 be       	out	0x31, r1	; 49
      8e:	d9 e4       	ldi	r29, 0x49	; 73
      90:	bb 4c       	sbci	r27, 0xCB	; 203
      92:	3e 91       	ld	r19, -X
      94:	6b aa       	std	Y+51, r6	; 0x33
      96:	aa be       	out	0x3a, r10	; 58
      98:	00 00       	nop
      9a:	00 80       	ld	r0, Z
      9c:	3f 00       	.word	0x003f	; ????

0000009e <__trampolines_end>:
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	00 5c       	subi	r16, 0xC0	; 192
      a4:	00 00       	nop
      a6:	0c 00       	.word	0x000c	; ????
      a8:	0c 00       	.word	0x000c	; ????
      aa:	7c 28       	or	r7, r12
      ac:	7c 28       	or	r7, r12
      ae:	58 dc       	rcall	.-1872   	; 0xfffff960 <__eeprom_end+0xff7ef960>
      b0:	68 00       	.word	0x0068	; ????
      b2:	24 10       	cpse	r2, r4
      b4:	48 00       	.word	0x0048	; ????
      b6:	28 54       	subi	r18, 0x48	; 72
      b8:	28 40       	sbci	r18, 0x08	; 8
      ba:	00 0c       	add	r0, r0
      bc:	00 00       	nop
      be:	00 78       	andi	r16, 0x80	; 128
      c0:	84 00       	.word	0x0084	; ????
      c2:	84 78       	andi	r24, 0x84	; 132
      c4:	00 00       	nop
      c6:	54 38       	cpi	r21, 0x84	; 132
      c8:	54 00       	.word	0x0054	; ????
      ca:	10 7c       	andi	r17, 0xC0	; 192
      cc:	10 00       	.word	0x0010	; ????
      ce:	80 40       	sbci	r24, 0x00	; 0
      d0:	00 00       	nop
      d2:	10 10       	cpse	r1, r0
      d4:	10 00       	.word	0x0010	; ????
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	00 00       	nop
      da:	60 10       	cpse	r6, r0
      dc:	0c 00       	.word	0x000c	; ????
      de:	38 54       	subi	r19, 0x48	; 72
      e0:	38 00       	.word	0x0038	; ????
      e2:	48 7c       	andi	r20, 0xC8	; 200
      e4:	40 00       	.word	0x0040	; ????
      e6:	48 64       	ori	r20, 0x48	; 72
      e8:	58 00       	.word	0x0058	; ????
      ea:	44 54       	subi	r20, 0x44	; 68
      ec:	2c 00       	.word	0x002c	; ????
      ee:	1c 10       	cpse	r1, r12
      f0:	7c 00       	.word	0x007c	; ????
      f2:	5c 54       	subi	r21, 0x4C	; 76
      f4:	24 00       	.word	0x0024	; ????
      f6:	38 54       	subi	r19, 0x48	; 72
      f8:	24 00       	.word	0x0024	; ????
      fa:	64 14       	cp	r6, r4
      fc:	0c 00       	.word	0x000c	; ????
      fe:	68 54       	subi	r22, 0x48	; 72
     100:	2c 00       	.word	0x002c	; ????
     102:	48 54       	subi	r20, 0x48	; 72
     104:	38 00       	.word	0x0038	; ????
     106:	00 48       	sbci	r16, 0x80	; 128
     108:	00 00       	nop
     10a:	80 48       	sbci	r24, 0x80	; 128
     10c:	00 00       	nop
     10e:	10 28       	or	r1, r0
     110:	44 00       	.word	0x0044	; ????
     112:	28 28       	or	r2, r8
     114:	28 00       	.word	0x0028	; ????
     116:	44 28       	or	r4, r4
     118:	10 00       	.word	0x0010	; ????
     11a:	04 54       	subi	r16, 0x44	; 68
     11c:	08 00       	.word	0x0008	; ????
     11e:	38 44       	sbci	r19, 0x48	; 72
     120:	5c 00       	.word	0x005c	; ????
     122:	78 14       	cp	r7, r8
     124:	78 00       	.word	0x0078	; ????
     126:	7c 54       	subi	r23, 0x4C	; 76
     128:	28 00       	.word	0x0028	; ????
     12a:	38 44       	sbci	r19, 0x48	; 72
     12c:	28 00       	.word	0x0028	; ????
     12e:	7c 44       	sbci	r23, 0x4C	; 76
     130:	38 00       	.word	0x0038	; ????
     132:	7c 54       	subi	r23, 0x4C	; 76
     134:	44 00       	.word	0x0044	; ????
     136:	7c 14       	cp	r7, r12
     138:	04 00       	.word	0x0004	; ????
     13a:	38 44       	sbci	r19, 0x48	; 72
     13c:	74 00       	.word	0x0074	; ????
     13e:	7c 10       	cpse	r7, r12
     140:	7c 00       	.word	0x007c	; ????
     142:	44 7c       	andi	r20, 0xC4	; 196
     144:	44 00       	.word	0x0044	; ????
     146:	20 40       	sbci	r18, 0x00	; 0
     148:	3c 00       	.word	0x003c	; ????
     14a:	7c 10       	cpse	r7, r12
     14c:	6c 00       	.word	0x006c	; ????
     14e:	7c 40       	sbci	r23, 0x0C	; 12
     150:	40 00       	.word	0x0040	; ????
     152:	7c 18       	sub	r7, r12
     154:	7c 00       	.word	0x007c	; ????
     156:	78 10       	cpse	r7, r8
     158:	3c 00       	.word	0x003c	; ????
     15a:	38 44       	sbci	r19, 0x48	; 72
     15c:	38 00       	.word	0x0038	; ????
     15e:	7c 14       	cp	r7, r12
     160:	08 00       	.word	0x0008	; ????
     162:	38 44       	sbci	r19, 0x48	; 72
     164:	b8 00       	.word	0x00b8	; ????
     166:	7c 14       	cp	r7, r12
     168:	68 00       	.word	0x0068	; ????
     16a:	48 54       	subi	r20, 0x48	; 72
     16c:	24 00       	.word	0x0024	; ????
     16e:	04 7c       	andi	r16, 0xC4	; 196
     170:	04 00       	.word	0x0004	; ????
     172:	7c 40       	sbci	r23, 0x0C	; 12
     174:	7c 00       	.word	0x007c	; ????
     176:	3c 60       	ori	r19, 0x0C	; 12
     178:	3c 00       	.word	0x003c	; ????
     17a:	7c 30       	cpi	r23, 0x0C	; 12
     17c:	7c 00       	.word	0x007c	; ????
     17e:	6c 10       	cpse	r6, r12
     180:	6c 00       	.word	0x006c	; ????
     182:	0c 70       	andi	r16, 0x0C	; 12
     184:	0c 00       	.word	0x000c	; ????
     186:	64 54       	subi	r22, 0x44	; 68
     188:	4c 00       	.word	0x004c	; ????
     18a:	00 7c       	andi	r16, 0xC0	; 192
     18c:	44 00       	.word	0x0044	; ????
     18e:	0c 10       	cpse	r0, r12
     190:	60 00       	.word	0x0060	; ????
     192:	44 7c       	andi	r20, 0xC4	; 196
     194:	00 00       	nop
     196:	08 04       	cpc	r0, r8
     198:	08 00       	.word	0x0008	; ????
     19a:	80 80       	ld	r8, Z
     19c:	80 00       	.word	0x0080	; ????
     19e:	00 04       	cpc	r0, r0
     1a0:	08 00       	.word	0x0008	; ????
     1a2:	30 48       	sbci	r19, 0x80	; 128
     1a4:	78 00       	.word	0x0078	; ????
     1a6:	7c 48       	sbci	r23, 0x8C	; 140
     1a8:	30 00       	.word	0x0030	; ????
     1aa:	30 48       	sbci	r19, 0x80	; 128
     1ac:	48 00       	.word	0x0048	; ????
     1ae:	30 48       	sbci	r19, 0x80	; 128
     1b0:	7c 00       	.word	0x007c	; ????
     1b2:	30 68       	ori	r19, 0x80	; 128
     1b4:	50 00       	.word	0x0050	; ????
     1b6:	10 78       	andi	r17, 0x80	; 128
     1b8:	14 00       	.word	0x0014	; ????
     1ba:	90 a8       	ldd	r9, Z+48	; 0x30
     1bc:	78 00       	.word	0x0078	; ????
     1be:	7c 08       	sbc	r7, r12
     1c0:	70 00       	.word	0x0070	; ????
     1c2:	50 74       	andi	r21, 0x40	; 64
     1c4:	40 00       	.word	0x0040	; ????
     1c6:	80 80       	ld	r8, Z
     1c8:	74 00       	.word	0x0074	; ????
     1ca:	7c 10       	cpse	r7, r12
     1cc:	68 00       	.word	0x0068	; ????
     1ce:	44 7c       	andi	r20, 0xC4	; 196
     1d0:	40 00       	.word	0x0040	; ????
     1d2:	78 10       	cpse	r7, r8
     1d4:	78 00       	.word	0x0078	; ????
     1d6:	78 08       	sbc	r7, r8
     1d8:	70 00       	.word	0x0070	; ????
     1da:	30 48       	sbci	r19, 0x80	; 128
     1dc:	30 00       	.word	0x0030	; ????
     1de:	f8 28       	or	r15, r8
     1e0:	10 00       	.word	0x0010	; ????
     1e2:	30 48       	sbci	r19, 0x80	; 128
     1e4:	f8 00       	.word	0x00f8	; ????
     1e6:	78 10       	cpse	r7, r8
     1e8:	08 00       	.word	0x0008	; ????
     1ea:	50 58       	subi	r21, 0x80	; 128
     1ec:	28 00       	.word	0x0028	; ????
     1ee:	08 3c       	cpi	r16, 0xC8	; 200
     1f0:	48 00       	.word	0x0048	; ????
     1f2:	38 40       	sbci	r19, 0x08	; 8
     1f4:	78 00       	.word	0x0078	; ????
     1f6:	38 40       	sbci	r19, 0x08	; 8
     1f8:	38 00       	.word	0x0038	; ????
     1fa:	78 20       	and	r7, r8
     1fc:	78 00       	.word	0x0078	; ????
     1fe:	48 30       	cpi	r20, 0x08	; 8
     200:	48 00       	.word	0x0048	; ????
     202:	98 a0       	ldd	r9, Y+32	; 0x20
     204:	78 00       	.word	0x0078	; ????
     206:	48 68       	ori	r20, 0x88	; 136
     208:	58 00       	.word	0x0058	; ????
     20a:	10 78       	andi	r17, 0x80	; 128
     20c:	84 00       	.word	0x0084	; ????
     20e:	00 7c       	andi	r16, 0xC0	; 192
     210:	00 00       	nop
     212:	84 78       	andi	r24, 0x84	; 132
     214:	10 00       	.word	0x0010	; ????
     216:	08 04       	cpc	r0, r8
     218:	08 04       	cpc	r0, r8

0000021a <font5>:
     21a:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     22a:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     23a:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     24a:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     25a:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     26a:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     27a:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     28a:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     29a:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     2aa:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     2ba:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     2ca:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2da:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2ea:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2fa:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     30a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     31a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     32a:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     33a:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     34a:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     35a:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     36a:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     37a:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     38a:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     39a:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     3aa:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     3ba:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     3ca:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3da:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3ea:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003f5 <font8>:
	...
     3fd:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     40d:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     41d:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     42d:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     43d:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     44d:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     45d:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     46d:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     47d:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     48d:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     49d:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     4ad:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     4bd:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     4cd:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4dd:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4ed:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4fd:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     50d:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     51d:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     52d:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     53d:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     54d:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     55d:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     56d:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     57d:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     58d:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     59d:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     5ad:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     5bd:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     5cd:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5dd:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5ed:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5fd:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     60d:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     61d:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     62d:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     63d:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     64d:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     65d:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     66d:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     67d:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     68d:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     69d:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     6ad:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     6bd:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     6cd:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6dd:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006ee <__ctors_end>:
     6ee:	11 24       	eor	r1, r1
     6f0:	1f be       	out	0x3f, r1	; 63
     6f2:	cf ef       	ldi	r28, 0xFF	; 255
     6f4:	d4 e0       	ldi	r29, 0x04	; 4
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	cd bf       	out	0x3d, r28	; 61

000006fa <__do_copy_data>:
     6fa:	12 e0       	ldi	r17, 0x02	; 2
     6fc:	a0 e0       	ldi	r26, 0x00	; 0
     6fe:	b1 e0       	ldi	r27, 0x01	; 1
     700:	e0 e7       	ldi	r30, 0x70	; 112
     702:	f9 e2       	ldi	r31, 0x29	; 41
     704:	02 c0       	rjmp	.+4      	; 0x70a <__do_copy_data+0x10>
     706:	05 90       	lpm	r0, Z+
     708:	0d 92       	st	X+, r0
     70a:	a0 35       	cpi	r26, 0x50	; 80
     70c:	b1 07       	cpc	r27, r17
     70e:	d9 f7       	brne	.-10     	; 0x706 <__do_copy_data+0xc>

00000710 <__do_clear_bss>:
     710:	22 e0       	ldi	r18, 0x02	; 2
     712:	a0 e5       	ldi	r26, 0x50	; 80
     714:	b2 e0       	ldi	r27, 0x02	; 2
     716:	01 c0       	rjmp	.+2      	; 0x71a <.do_clear_bss_start>

00000718 <.do_clear_bss_loop>:
     718:	1d 92       	st	X+, r1

0000071a <.do_clear_bss_start>:
     71a:	a8 36       	cpi	r26, 0x68	; 104
     71c:	b2 07       	cpc	r27, r18
     71e:	e1 f7       	brne	.-8      	; 0x718 <.do_clear_bss_loop>
     720:	0e 94 99 05 	call	0xb32	; 0xb32 <main>
     724:	0c 94 b6 14 	jmp	0x296c	; 0x296c <_exit>

00000728 <__bad_interrupt>:
     728:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000072c <adc_init>:
     72c:	30 98       	cbi	0x06, 0	; 6
     72e:	08 95       	ret

00000730 <adc_read>:
     730:	88 37       	cpi	r24, 0x78	; 120
     732:	21 f4       	brne	.+8      	; 0x73c <adc_read+0xc>
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	80 93 00 14 	sts	0x1400, r24
     73a:	11 c0       	rjmp	.+34     	; 0x75e <adc_read+0x2e>
     73c:	89 37       	cpi	r24, 0x79	; 121
     73e:	21 f4       	brne	.+8      	; 0x748 <adc_read+0x18>
     740:	85 e0       	ldi	r24, 0x05	; 5
     742:	80 93 00 14 	sts	0x1400, r24
     746:	0b c0       	rjmp	.+22     	; 0x75e <adc_read+0x2e>
     748:	8c 36       	cpi	r24, 0x6C	; 108
     74a:	21 f4       	brne	.+8      	; 0x754 <adc_read+0x24>
     74c:	86 e0       	ldi	r24, 0x06	; 6
     74e:	80 93 00 14 	sts	0x1400, r24
     752:	05 c0       	rjmp	.+10     	; 0x75e <adc_read+0x2e>
     754:	82 37       	cpi	r24, 0x72	; 114
     756:	19 f4       	brne	.+6      	; 0x75e <adc_read+0x2e>
     758:	87 e0       	ldi	r24, 0x07	; 7
     75a:	80 93 00 14 	sts	0x1400, r24
     75e:	28 99       	sbic	0x05, 0	; 5
     760:	fe cf       	rjmp	.-4      	; 0x75e <adc_read+0x2e>
     762:	80 91 00 14 	lds	r24, 0x1400
     766:	08 95       	ret

00000768 <can_init>:

#include "mcp.h"
#include "can.h"
#include "MCP2515.h"

void can_init(int mode){
     768:	cf 93       	push	r28
     76a:	c8 2f       	mov	r28, r24
	//priority bits? TXP
	//CANINTE.TXInE
	mcp_bit_modify(0x2B,0b00011100, 0b00000000); //Disables interrupts from empty buffers
     76c:	40 e0       	ldi	r20, 0x00	; 0
     76e:	6c e1       	ldi	r22, 0x1C	; 28
     770:	8b e2       	ldi	r24, 0x2B	; 43
     772:	0e 94 39 06 	call	0xc72	; 0xc72 <mcp_bit_modify>
	mcp_bit_modify(MCP_RXB0CTRL, 0b01100000, 0b01100000); //Disable filters
     776:	40 e6       	ldi	r20, 0x60	; 96
     778:	60 e6       	ldi	r22, 0x60	; 96
     77a:	80 e6       	ldi	r24, 0x60	; 96
     77c:	0e 94 39 06 	call	0xc72	; 0xc72 <mcp_bit_modify>
	mcp_bit_modify(MCP_CANCTRL, 0xFF, mode); //Sets operation mode 
     780:	4c 2f       	mov	r20, r28
     782:	6f ef       	ldi	r22, 0xFF	; 255
     784:	8f e0       	ldi	r24, 0x0F	; 15
     786:	0e 94 39 06 	call	0xc72	; 0xc72 <mcp_bit_modify>
	
	//TODO: Filter initialization
}
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <can_transmit>:

void can_transmit(Msg msg){
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	00 d0       	rcall	.+0      	; 0x79c <can_transmit+0xe>
     79c:	00 d0       	rcall	.+0      	; 0x79e <can_transmit+0x10>
     79e:	00 d0       	rcall	.+0      	; 0x7a0 <can_transmit+0x12>
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	49 83       	std	Y+1, r20	; 0x01
     7a6:	5a 83       	std	Y+2, r21	; 0x02
     7a8:	6b 83       	std	Y+3, r22	; 0x03
     7aa:	7c 83       	std	Y+4, r23	; 0x04
     7ac:	8d 83       	std	Y+5, r24	; 0x05
     7ae:	9e 83       	std	Y+6, r25	; 0x06
     7b0:	09 81       	ldd	r16, Y+1	; 0x01
     7b2:	1a 81       	ldd	r17, Y+2	; 0x02
     7b4:	ed 80       	ldd	r14, Y+5	; 0x05
     7b6:	fe 80       	ldd	r15, Y+6	; 0x06
	//TXB0Dm - Data transmit buffer - The bytes with all the data
	mcp_write(0x41, msg.id >> 3);  //TXB0SIDH - Higher identifier byte
     7b8:	b8 01       	movw	r22, r16
     7ba:	75 95       	asr	r23
     7bc:	67 95       	ror	r22
     7be:	75 95       	asr	r23
     7c0:	67 95       	ror	r22
     7c2:	75 95       	asr	r23
     7c4:	67 95       	ror	r22
     7c6:	81 e4       	ldi	r24, 0x41	; 65
     7c8:	0e 94 17 06 	call	0xc2e	; 0xc2e <mcp_write>
	mcp_write(0x42, msg.id << 5);  //TXB0SIDL - Lower identifier byte
     7cc:	60 2f       	mov	r22, r16
     7ce:	62 95       	swap	r22
     7d0:	66 0f       	add	r22, r22
     7d2:	60 7e       	andi	r22, 0xE0	; 224
     7d4:	82 e4       	ldi	r24, 0x42	; 66
     7d6:	0e 94 17 06 	call	0xc2e	; 0xc2e <mcp_write>
	mcp_write(0x45, msg.length); //TXB0DLC	- Data length - RTR will be set to 0 (Data Frame message)
     7da:	6e 2d       	mov	r22, r14
     7dc:	85 e4       	ldi	r24, 0x45	; 69
     7de:	0e 94 17 06 	call	0xc2e	; 0xc2e <mcp_write>
	for(int i = 0; i < msg.length; i++){
     7e2:	1e 14       	cp	r1, r14
     7e4:	1f 04       	cpc	r1, r15
     7e6:	84 f4       	brge	.+32     	; 0x808 <can_transmit+0x7a>
     7e8:	00 e0       	ldi	r16, 0x00	; 0
     7ea:	10 e0       	ldi	r17, 0x00	; 0
		mcp_write(0x46 + i, msg.data[i]);
     7ec:	eb 81       	ldd	r30, Y+3	; 0x03
     7ee:	fc 81       	ldd	r31, Y+4	; 0x04
     7f0:	e0 0f       	add	r30, r16
     7f2:	f1 1f       	adc	r31, r17
     7f4:	60 81       	ld	r22, Z
     7f6:	86 e4       	ldi	r24, 0x46	; 70
     7f8:	80 0f       	add	r24, r16
     7fa:	0e 94 17 06 	call	0xc2e	; 0xc2e <mcp_write>
void can_transmit(Msg msg){
	//TXB0Dm - Data transmit buffer - The bytes with all the data
	mcp_write(0x41, msg.id >> 3);  //TXB0SIDH - Higher identifier byte
	mcp_write(0x42, msg.id << 5);  //TXB0SIDL - Lower identifier byte
	mcp_write(0x45, msg.length); //TXB0DLC	- Data length - RTR will be set to 0 (Data Frame message)
	for(int i = 0; i < msg.length; i++){
     7fe:	0f 5f       	subi	r16, 0xFF	; 255
     800:	1f 4f       	sbci	r17, 0xFF	; 255
     802:	0e 15       	cp	r16, r14
     804:	1f 05       	cpc	r17, r15
     806:	91 f7       	brne	.-28     	; 0x7ec <can_transmit+0x5e>
		mcp_write(0x46 + i, msg.data[i]);
	}
	mcp_request_to_send(0,1,0);	//Request to send - sending will start as soon as the bus is clear
     808:	40 e0       	ldi	r20, 0x00	; 0
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	61 e0       	ldi	r22, 0x01	; 1
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 29 06 	call	0xc52	; 0xc52 <mcp_request_to_send>
	
	//TODO: (maybe) print error message? TXBnCTRL.TXERR and the CANINTF.MERRF bits will be set and an interrupt will be generated on the INT pin if the CANINTE.MERRE bit is set
}
     818:	26 96       	adiw	r28, 0x06	; 6
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	08 95       	ret

00000832 <can_receive>:

//MCP_TXB0CTRL?
char * can_receive(){
     832:	8f 92       	push	r8
     834:	9f 92       	push	r9
     836:	af 92       	push	r10
     838:	bf 92       	push	r11
     83a:	cf 92       	push	r12
     83c:	df 92       	push	r13
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
	mcp_bit_modify(0x2C, 1, 0);	//CANINTF - Sets RX0IF to 0
	return data;
	
	//TODO: Add something to read the standard identifier of the message received
	//use Msg type? Return Msg type and access data using "can_receive().data"?
}
     84e:	8d b6       	in	r8, 0x3d	; 61
     850:	9e b6       	in	r9, 0x3e	; 62
	//TODO: (maybe) print error message? TXBnCTRL.TXERR and the CANINTF.MERRF bits will be set and an interrupt will be generated on the INT pin if the CANINTE.MERRE bit is set
}

//MCP_TXB0CTRL?
char * can_receive(){
	uint8_t data_length = mcp_read(0x65) & 0b00001111;
     852:	85 e6       	ldi	r24, 0x65	; 101
     854:	0e 94 08 06 	call	0xc10	; 0xc10 <mcp_read>
     858:	8f 70       	andi	r24, 0x0F	; 15
	char data[data_length];
     85a:	c8 2e       	mov	r12, r24
     85c:	d1 2c       	mov	r13, r1
     85e:	8d b7       	in	r24, 0x3d	; 61
     860:	9e b7       	in	r25, 0x3e	; 62
     862:	8c 19       	sub	r24, r12
     864:	9d 09       	sbc	r25, r13
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	9e bf       	out	0x3e, r25	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	8d bf       	out	0x3d, r24	; 61
     870:	ed b7       	in	r30, 0x3d	; 61
     872:	fe b7       	in	r31, 0x3e	; 62
     874:	31 96       	adiw	r30, 0x01	; 1
     876:	5f 01       	movw	r10, r30
	for(int i = 0; i < data_length; i++){
     878:	1c 14       	cp	r1, r12
     87a:	1d 04       	cpc	r1, r13
     87c:	7c f4       	brge	.+30     	; 0x89c <can_receive+0x6a>
     87e:	7f 01       	movw	r14, r30
     880:	00 e0       	ldi	r16, 0x00	; 0
     882:	10 e0       	ldi	r17, 0x00	; 0
		data[i] = mcp_read(0x66 + i);  //Read data
     884:	86 e6       	ldi	r24, 0x66	; 102
     886:	80 0f       	add	r24, r16
     888:	0e 94 08 06 	call	0xc10	; 0xc10 <mcp_read>
     88c:	f7 01       	movw	r30, r14
     88e:	81 93       	st	Z+, r24
     890:	7f 01       	movw	r14, r30

//MCP_TXB0CTRL?
char * can_receive(){
	uint8_t data_length = mcp_read(0x65) & 0b00001111;
	char data[data_length];
	for(int i = 0; i < data_length; i++){
     892:	0f 5f       	subi	r16, 0xFF	; 255
     894:	1f 4f       	sbci	r17, 0xFF	; 255
     896:	0c 15       	cp	r16, r12
     898:	1d 05       	cpc	r17, r13
     89a:	a4 f3       	brlt	.-24     	; 0x884 <can_receive+0x52>
		data[i] = mcp_read(0x66 + i);  //Read data
	}
	mcp_bit_modify(0x2C, 1, 0);	//CANINTF - Sets RX0IF to 0
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	8c e2       	ldi	r24, 0x2C	; 44
     8a2:	0e 94 39 06 	call	0xc72	; 0xc72 <mcp_bit_modify>
	return data;
	
	//TODO: Add something to read the standard identifier of the message received
	//use Msg type? Return Msg type and access data using "can_receive().data"?
}
     8a6:	c5 01       	movw	r24, r10
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	9e be       	out	0x3e, r9	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	8d be       	out	0x3d, r8	; 61
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	ff 90       	pop	r15
     8bc:	ef 90       	pop	r14
     8be:	df 90       	pop	r13
     8c0:	cf 90       	pop	r12
     8c2:	bf 90       	pop	r11
     8c4:	af 90       	pop	r10
     8c6:	9f 90       	pop	r9
     8c8:	8f 90       	pop	r8
     8ca:	08 95       	ret

000008cc <joy_init>:
int ymin = 0;
int ymean = 127;
int ymax = 255;

void joy_init(){
	clear_bit(DDRB,PB2);	//Set joystick button pin to input
     8cc:	ba 98       	cbi	0x17, 2	; 23
	set_bit(PORTB,PB2);		//Set the internal pull-up resistor needed for the button
     8ce:	c2 9a       	sbi	0x18, 2	; 24
     8d0:	08 95       	ret

000008d2 <joy_get_position>:
	oled_clear_screen();
	oled_print_string("Calibrated!",0,0,8,0);
	oled_refresh();
}

Position joy_get_position(){
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	00 d0       	rcall	.+0      	; 0x8d8 <joy_get_position+0x6>
     8d8:	00 d0       	rcall	.+0      	; 0x8da <joy_get_position+0x8>
     8da:	00 d0       	rcall	.+0      	; 0x8dc <joy_get_position+0xa>
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
		x = adc_read('x');
     8e0:	88 e7       	ldi	r24, 0x78	; 120
     8e2:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	90 93 5b 02 	sts	0x025B, r25
     8ec:	80 93 5a 02 	sts	0x025A, r24
		y = adc_read('y');
     8f0:	89 e7       	ldi	r24, 0x79	; 121
     8f2:	0e 94 98 03 	call	0x730	; 0x730 <adc_read>
     8f6:	28 2f       	mov	r18, r24
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	30 93 5d 02 	sts	0x025D, r19
     8fe:	20 93 5c 02 	sts	0x025C, r18
		z = !test_bit(PINB, PB2);
     902:	e6 b3       	in	r30, 0x16	; 22
     904:	e6 95       	lsr	r30
     906:	e6 95       	lsr	r30
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	e8 27       	eor	r30, r24
     90c:	e1 70       	andi	r30, 0x01	; 1
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	e0 93 54 02 	sts	0x0254, r30
     914:	f0 93 55 02 	sts	0x0255, r31
		
		if (x > xmean){
     918:	80 91 5a 02 	lds	r24, 0x025A
     91c:	90 91 5b 02 	lds	r25, 0x025B
     920:	40 91 0c 01 	lds	r20, 0x010C
     924:	50 91 0d 01 	lds	r21, 0x010D
     928:	48 17       	cp	r20, r24
     92a:	59 07       	cpc	r21, r25
     92c:	b4 f4       	brge	.+44     	; 0x95a <joy_get_position+0x88>
			x = ((x - xmean) * 100) / (xmax - xmean);
     92e:	bc 01       	movw	r22, r24
     930:	64 1b       	sub	r22, r20
     932:	75 0b       	sbc	r23, r21
     934:	a4 e6       	ldi	r26, 0x64	; 100
     936:	a6 9f       	mul	r26, r22
     938:	c0 01       	movw	r24, r0
     93a:	a7 9f       	mul	r26, r23
     93c:	90 0d       	add	r25, r0
     93e:	11 24       	eor	r1, r1
     940:	60 91 0a 01 	lds	r22, 0x010A
     944:	70 91 0b 01 	lds	r23, 0x010B
     948:	64 1b       	sub	r22, r20
     94a:	75 0b       	sbc	r23, r21
     94c:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__divmodhi4>
     950:	70 93 5b 02 	sts	0x025B, r23
     954:	60 93 5a 02 	sts	0x025A, r22
     958:	17 c0       	rjmp	.+46     	; 0x988 <joy_get_position+0xb6>
		}
		else{
			x = ((x - xmean) * 100) / (xmean - xmin);
     95a:	bc 01       	movw	r22, r24
     95c:	64 1b       	sub	r22, r20
     95e:	75 0b       	sbc	r23, r21
     960:	a4 e6       	ldi	r26, 0x64	; 100
     962:	a6 9f       	mul	r26, r22
     964:	c0 01       	movw	r24, r0
     966:	a7 9f       	mul	r26, r23
     968:	90 0d       	add	r25, r0
     96a:	11 24       	eor	r1, r1
     96c:	60 91 52 02 	lds	r22, 0x0252
     970:	70 91 53 02 	lds	r23, 0x0253
     974:	da 01       	movw	r26, r20
     976:	a6 1b       	sub	r26, r22
     978:	b7 0b       	sbc	r27, r23
     97a:	bd 01       	movw	r22, r26
     97c:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__divmodhi4>
     980:	70 93 5b 02 	sts	0x025B, r23
     984:	60 93 5a 02 	sts	0x025A, r22
		}
		if (y > ymean){
     988:	40 91 08 01 	lds	r20, 0x0108
     98c:	50 91 09 01 	lds	r21, 0x0109
     990:	42 17       	cp	r20, r18
     992:	53 07       	cpc	r21, r19
     994:	ac f4       	brge	.+42     	; 0x9c0 <joy_get_position+0xee>
			y = ((y - ymean) * 100) / (ymax - ymean);
     996:	24 1b       	sub	r18, r20
     998:	35 0b       	sbc	r19, r21
     99a:	64 e6       	ldi	r22, 0x64	; 100
     99c:	62 9f       	mul	r22, r18
     99e:	c0 01       	movw	r24, r0
     9a0:	63 9f       	mul	r22, r19
     9a2:	90 0d       	add	r25, r0
     9a4:	11 24       	eor	r1, r1
     9a6:	60 91 06 01 	lds	r22, 0x0106
     9aa:	70 91 07 01 	lds	r23, 0x0107
     9ae:	64 1b       	sub	r22, r20
     9b0:	75 0b       	sbc	r23, r21
     9b2:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__divmodhi4>
     9b6:	70 93 5d 02 	sts	0x025D, r23
     9ba:	60 93 5c 02 	sts	0x025C, r22
     9be:	15 c0       	rjmp	.+42     	; 0x9ea <joy_get_position+0x118>
		}
		else{
			y = ((y - ymean)  * 100) / (ymean - ymin);
     9c0:	24 1b       	sub	r18, r20
     9c2:	35 0b       	sbc	r19, r21
     9c4:	64 e6       	ldi	r22, 0x64	; 100
     9c6:	62 9f       	mul	r22, r18
     9c8:	c0 01       	movw	r24, r0
     9ca:	63 9f       	mul	r22, r19
     9cc:	90 0d       	add	r25, r0
     9ce:	11 24       	eor	r1, r1
     9d0:	20 91 50 02 	lds	r18, 0x0250
     9d4:	30 91 51 02 	lds	r19, 0x0251
     9d8:	ba 01       	movw	r22, r20
     9da:	62 1b       	sub	r22, r18
     9dc:	73 0b       	sbc	r23, r19
     9de:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__divmodhi4>
     9e2:	70 93 5d 02 	sts	0x025D, r23
     9e6:	60 93 5c 02 	sts	0x025C, r22
		}
		
		Position pos;
		pos.x = x;
		pos.y = y;
     9ea:	40 91 5c 02 	lds	r20, 0x025C
     9ee:	80 91 5d 02 	lds	r24, 0x025D
		pos.z = z;
		return pos;
     9f2:	20 91 5a 02 	lds	r18, 0x025A
     9f6:	90 91 5b 02 	lds	r25, 0x025B
     9fa:	29 83       	std	Y+1, r18	; 0x01
     9fc:	9a 83       	std	Y+2, r25	; 0x02
     9fe:	4b 83       	std	Y+3, r20	; 0x03
     a00:	8c 83       	std	Y+4, r24	; 0x04
     a02:	ed 83       	std	Y+5, r30	; 0x05
     a04:	fe 83       	std	Y+6, r31	; 0x06
     a06:	39 2f       	mov	r19, r25
     a08:	58 2f       	mov	r21, r24
     a0a:	6e 2f       	mov	r22, r30
     a0c:	7f 2f       	mov	r23, r31
}
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	26 96       	adiw	r28, 0x06	; 6
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	f8 94       	cli
     a18:	de bf       	out	0x3e, r29	; 62
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	cd bf       	out	0x3d, r28	; 61
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	08 95       	ret

00000a24 <joy_get_position_polar>:

Position_polar joy_get_position_polar(){
     a24:	8f 92       	push	r8
     a26:	9f 92       	push	r9
     a28:	af 92       	push	r10
     a2a:	bf 92       	push	r11
     a2c:	cf 92       	push	r12
     a2e:	df 92       	push	r13
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	00 d0       	rcall	.+0      	; 0xa3a <joy_get_position_polar+0x16>
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <joy_get_position_polar+0x18>
     a3c:	00 d0       	rcall	.+0      	; 0xa3e <joy_get_position_polar+0x1a>
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
	Position pos_cart = joy_get_position();
     a42:	0e 94 69 04 	call	0x8d2	; 0x8d2 <joy_get_position>
     a46:	29 83       	std	Y+1, r18	; 0x01
     a48:	3a 83       	std	Y+2, r19	; 0x02
     a4a:	4b 83       	std	Y+3, r20	; 0x03
     a4c:	5c 83       	std	Y+4, r21	; 0x04
     a4e:	89 80       	ldd	r8, Y+1	; 0x01
     a50:	9a 80       	ldd	r9, Y+2	; 0x02
     a52:	ab 80       	ldd	r10, Y+3	; 0x03
     a54:	bc 80       	ldd	r11, Y+4	; 0x04
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     a56:	b4 01       	movw	r22, r8
     a58:	88 27       	eor	r24, r24
     a5a:	77 fd       	sbrc	r23, 7
     a5c:	80 95       	com	r24
     a5e:	98 2f       	mov	r25, r24
     a60:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__floatsisf>
     a64:	6b 01       	movw	r12, r22
     a66:	7c 01       	movw	r14, r24
     a68:	b5 01       	movw	r22, r10
     a6a:	88 27       	eor	r24, r24
     a6c:	77 fd       	sbrc	r23, 7
     a6e:	80 95       	com	r24
     a70:	98 2f       	mov	r25, r24
     a72:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__floatsisf>
     a76:	a7 01       	movw	r20, r14
     a78:	96 01       	movw	r18, r12
     a7a:	0e 94 2d 0c 	call	0x185a	; 0x185a <atan2>
     a7e:	6b 01       	movw	r12, r22
     a80:	7c 01       	movw	r14, r24
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     a82:	88 9c       	mul	r8, r8
     a84:	b0 01       	movw	r22, r0
     a86:	89 9c       	mul	r8, r9
     a88:	70 0d       	add	r23, r0
     a8a:	70 0d       	add	r23, r0
     a8c:	11 24       	eor	r1, r1
     a8e:	aa 9c       	mul	r10, r10
     a90:	c0 01       	movw	r24, r0
     a92:	ab 9c       	mul	r10, r11
     a94:	90 0d       	add	r25, r0
     a96:	90 0d       	add	r25, r0
     a98:	11 24       	eor	r1, r1
     a9a:	68 0f       	add	r22, r24
     a9c:	79 1f       	adc	r23, r25
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__floatunsisf>
     aa6:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <sqrt>
     aaa:	4b 01       	movw	r8, r22
     aac:	5c 01       	movw	r10, r24
}

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
     aae:	20 ee       	ldi	r18, 0xE0	; 224
     ab0:	3e e2       	ldi	r19, 0x2E	; 46
     ab2:	45 e6       	ldi	r20, 0x65	; 101
     ab4:	52 e4       	ldi	r21, 0x42	; 66
     ab6:	c7 01       	movw	r24, r14
     ab8:	b6 01       	movw	r22, r12
     aba:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__mulsf3>
     abe:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__fixsfsi>
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
	return pos_pol;
     ac2:	6b 01       	movw	r12, r22

Position_polar joy_get_position_polar(){
	Position pos_cart = joy_get_position();
	Position_polar pos_pol;
	pos_pol.angle = atan2(pos_cart.y,pos_cart.x) * (180.0/ M_PI);
	pos_pol.amplitude = sqrt((uint16_t)(pos_cart.y*pos_cart.y) + (uint16_t)(pos_cart.x*pos_cart.x));
     ac4:	c5 01       	movw	r24, r10
     ac6:	b4 01       	movw	r22, r8
     ac8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__fixsfsi>
	return pos_pol;
     acc:	7b 01       	movw	r14, r22
}
     ace:	c7 01       	movw	r24, r14
     ad0:	b6 01       	movw	r22, r12
     ad2:	26 96       	adiw	r28, 0x06	; 6
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	9f 90       	pop	r9
     af0:	8f 90       	pop	r8
     af2:	08 95       	ret

00000af4 <joy_get_direction>:

Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
     af4:	0e 94 12 05 	call	0xa24	; 0xa24 <joy_get_position_polar>
     af8:	9b 01       	movw	r18, r22
	
	if(pos_pol.amplitude > 80){
     afa:	81 35       	cpi	r24, 0x51	; 81
     afc:	91 05       	cpc	r25, r1
     afe:	7c f0       	brlt	.+30     	; 0xb1e <joy_get_direction+0x2a>
		if (pos_pol.angle > 135){
     b00:	68 38       	cpi	r22, 0x88	; 136
     b02:	71 05       	cpc	r23, r1
     b04:	74 f4       	brge	.+28     	; 0xb22 <joy_get_direction+0x2e>
			return LEFT;
		}
		else if(pos_pol.angle > 45){
     b06:	6e 32       	cpi	r22, 0x2E	; 46
     b08:	71 05       	cpc	r23, r1
     b0a:	6c f4       	brge	.+26     	; 0xb26 <joy_get_direction+0x32>
			return UP;
		}
		else if(pos_pol.angle > -45){
     b0c:	24 3d       	cpi	r18, 0xD4	; 212
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	38 07       	cpc	r19, r24
     b12:	5c f4       	brge	.+22     	; 0xb2a <joy_get_direction+0x36>
			return RIGHT;
		}
		else if(pos_pol.angle > -135){
     b14:	2a 37       	cpi	r18, 0x7A	; 122
     b16:	3f 4f       	sbci	r19, 0xFF	; 255
     b18:	54 f0       	brlt	.+20     	; 0xb2e <joy_get_direction+0x3a>
			return DOWN;
     b1a:	83 e0       	ldi	r24, 0x03	; 3
     b1c:	08 95       	ret
		}
		else{
			return LEFT;
		}
	}
	return NEUTRAL;
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	08 95       	ret
Direction joy_get_direction(){ 
	Position_polar pos_pol  = joy_get_position_polar();
	
	if(pos_pol.amplitude > 80){
		if (pos_pol.angle > 135){
			return LEFT;
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	08 95       	ret
		}
		else if(pos_pol.angle > 45){
			return UP;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	08 95       	ret
		}
		else if(pos_pol.angle > -45){
			return RIGHT;
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	08 95       	ret
		}
		else if(pos_pol.angle > -135){
			return DOWN;
		}
		else{
			return LEFT;
     b2e:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	return NEUTRAL;
} 
     b30:	08 95       	ret

00000b32 <main>:
#include "menu.h"
#include "touch.h"
#include "MCP2515.h"

int main(void)
{
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
     b3a:	2c 97       	sbiw	r28, 0x0c	; 12
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
	MCUCR |= (1<<SRE);	//Enable external memory
     b46:	85 b7       	in	r24, 0x35	; 53
     b48:	80 68       	ori	r24, 0x80	; 128
     b4a:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     b4c:	80 b7       	in	r24, 0x30	; 48
     b4e:	80 62       	ori	r24, 0x20	; 32
     b50:	80 bf       	out	0x30, r24	; 48
	
	uart_init(9600, NODE_1);
     b52:	61 e0       	ldi	r22, 0x01	; 1
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	80 e8       	ldi	r24, 0x80	; 128
     b58:	95 e2       	ldi	r25, 0x25	; 37
     b5a:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <uart_init>
	adc_init();
     b5e:	0e 94 96 03 	call	0x72c	; 0x72c <adc_init>
	oled_init();
     b62:	0e 94 a5 0a 	call	0x154a	; 0x154a <oled_init>
	joy_init();
     b66:	0e 94 66 04 	call	0x8cc	; 0x8cc <joy_init>
	touch_init();
     b6a:	0e 94 df 0b 	call	0x17be	; 0x17be <touch_init>
	menu_init();
     b6e:	0e 94 ad 08 	call	0x115a	; 0x115a <menu_init>
	spi_master_init(NODE_1);
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 c5 0b 	call	0x178a	; 0x178a <spi_master_init>
	mcp_init();
     b7a:	0e 94 57 06 	call	0xcae	; 0xcae <mcp_init>
	can_init(MODE_LOOPBACK); 
     b7e:	80 e4       	ldi	r24, 0x40	; 64
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 b4 03 	call	0x768	; 0x768 <can_init>
	while (1)
	{
		Position position = joy_get_position();
		
		Msg msg;
		msg.id = 42;
     b86:	0f 2e       	mov	r0, r31
     b88:	fa e2       	ldi	r31, 0x2A	; 42
     b8a:	cf 2e       	mov	r12, r31
     b8c:	f0 2d       	mov	r31, r0
     b8e:	a1 2c       	mov	r10, r1
		msg.length = sizeof(position);
     b90:	0f 2e       	mov	r0, r31
     b92:	f6 e0       	ldi	r31, 0x06	; 6
     b94:	df 2e       	mov	r13, r31
     b96:	f0 2d       	mov	r31, r0
     b98:	b1 2c       	mov	r11, r1
		msg.data = (char*) &position;
     b9a:	7e 01       	movw	r14, r28
     b9c:	87 e0       	ldi	r24, 0x07	; 7
     b9e:	e8 0e       	add	r14, r24
     ba0:	f1 1c       	adc	r15, r1
		can_transmit(msg);
		
		//for loopback mode:
		Position position_received = *(Position*)can_receive();
		printf("x:%4d y:%4d z:%4d\r", position_received.x,position_received.y,position_received.z);
     ba2:	08 e8       	ldi	r16, 0x88	; 136
     ba4:	11 e0       	ldi	r17, 0x01	; 1
	//sram_test(); //Not working...
	//can_test(); //Not working

	while (1)
	{
		Position position = joy_get_position();
     ba6:	0e 94 69 04 	call	0x8d2	; 0x8d2 <joy_get_position>
     baa:	2f 83       	std	Y+7, r18	; 0x07
     bac:	38 87       	std	Y+8, r19	; 0x08
     bae:	49 87       	std	Y+9, r20	; 0x09
     bb0:	5a 87       	std	Y+10, r21	; 0x0a
     bb2:	6b 87       	std	Y+11, r22	; 0x0b
     bb4:	7c 87       	std	Y+12, r23	; 0x0c
		
		Msg msg;
		msg.id = 42;
     bb6:	4c 2d       	mov	r20, r12
     bb8:	c9 82       	std	Y+1, r12	; 0x01
     bba:	aa 82       	std	Y+2, r10	; 0x02
		msg.length = sizeof(position);
     bbc:	dd 82       	std	Y+5, r13	; 0x05
     bbe:	be 82       	std	Y+6, r11	; 0x06
		msg.data = (char*) &position;
     bc0:	6e 2d       	mov	r22, r14
     bc2:	fc 82       	std	Y+4, r15	; 0x04
     bc4:	eb 82       	std	Y+3, r14	; 0x03
		can_transmit(msg);
     bc6:	5a 2d       	mov	r21, r10
     bc8:	7c 81       	ldd	r23, Y+4	; 0x04
     bca:	8d 2d       	mov	r24, r13
     bcc:	9b 2d       	mov	r25, r11
     bce:	0e 94 c7 03 	call	0x78e	; 0x78e <can_transmit>
		
		//for loopback mode:
		Position position_received = *(Position*)can_receive();
     bd2:	0e 94 19 04 	call	0x832	; 0x832 <can_receive>
     bd6:	fc 01       	movw	r30, r24
		printf("x:%4d y:%4d z:%4d\r", position_received.x,position_received.y,position_received.z);
     bd8:	85 81       	ldd	r24, Z+5	; 0x05
     bda:	8f 93       	push	r24
     bdc:	84 81       	ldd	r24, Z+4	; 0x04
     bde:	8f 93       	push	r24
     be0:	83 81       	ldd	r24, Z+3	; 0x03
     be2:	8f 93       	push	r24
     be4:	82 81       	ldd	r24, Z+2	; 0x02
     be6:	8f 93       	push	r24
     be8:	81 81       	ldd	r24, Z+1	; 0x01
     bea:	8f 93       	push	r24
     bec:	80 81       	ld	r24, Z
     bee:	8f 93       	push	r24
     bf0:	1f 93       	push	r17
     bf2:	0f 93       	push	r16
     bf4:	0e 94 a3 11 	call	0x2346	; 0x2346 <printf>
	
		menu_run_display();
     bf8:	0e 94 26 09 	call	0x124c	; 0x124c <menu_run_display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 ef       	ldi	r25, 0xF0	; 240
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	f1 f7       	brne	.-4      	; 0xc00 <main+0xce>
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	cb cf       	rjmp	.-106    	; 0xba6 <main+0x74>

00000c10 <mcp_read>:
#include <avr/io.h>

#include "spi.h"
#include "MCP2515.h"

char mcp_read(char address){
     c10:	cf 93       	push	r28
     c12:	c8 2f       	mov	r28, r24
	clear_bit(PORTB, PB4);
     c14:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_READ);
     c16:	83 e0       	ldi	r24, 0x03	; 3
     c18:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <spi_master_transmit>
	spi_master_transmit(address);
     c1c:	8c 2f       	mov	r24, r28
     c1e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <spi_master_transmit>
	char data = spi_master_transmit(0x0); //0x0 = dummy value
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <spi_master_transmit>
	set_bit(PORTB,PB4);
     c28:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <mcp_write>:

void mcp_write(char address, char data){
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	d8 2f       	mov	r29, r24
     c34:	c6 2f       	mov	r28, r22
	clear_bit(PORTB, PB4);
     c36:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_WRITE);
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <spi_master_transmit>
	spi_master_transmit(address);
     c3e:	8d 2f       	mov	r24, r29
     c40:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <spi_master_transmit>
	spi_master_transmit(data);
     c44:	8c 2f       	mov	r24, r28
     c46:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <spi_master_transmit>
	set_bit(PORTB,PB4);
     c4a:	c4 9a       	sbi	0x18, 4	; 24
}
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <mcp_request_to_send>:

void mcp_request_to_send(int TXB2, int TXB1, int TXB0){
	int command = 0b10000000 | TXB0 | (TXB1 << 1) | (TXB2 << 2);
	clear_bit(PORTB, PB4);
     c52:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(data);
	set_bit(PORTB,PB4);
}

void mcp_request_to_send(int TXB2, int TXB1, int TXB0){
	int command = 0b10000000 | TXB0 | (TXB1 << 1) | (TXB2 << 2);
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	80 68       	ori	r24, 0x80	; 128
     c5e:	48 2b       	or	r20, r24
     c60:	59 2b       	or	r21, r25
     c62:	cb 01       	movw	r24, r22
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
	clear_bit(PORTB, PB4);
	spi_master_transmit(command);
     c68:	84 2b       	or	r24, r20
     c6a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <spi_master_transmit>
	set_bit(PORTB, PB4);
     c6e:	c4 9a       	sbi	0x18, 4	; 24
     c70:	08 95       	ret

00000c72 <mcp_bit_modify>:
	char status = spi_master_transmit(0x00);
	set_bit(PORTB ,PB4);
	return status;
}

void mcp_bit_modify(char address, char mask, char data){
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	18 2f       	mov	r17, r24
     c7a:	d6 2f       	mov	r29, r22
     c7c:	c4 2f       	mov	r28, r20
	clear_bit(PORTB, PB4);
     c7e:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_BITMOD);	
     c80:	85 e0       	ldi	r24, 0x05	; 5
     c82:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <spi_master_transmit>
	spi_master_transmit(address);
     c86:	81 2f       	mov	r24, r17
     c88:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <spi_master_transmit>
	spi_master_transmit(mask);
     c8c:	8d 2f       	mov	r24, r29
     c8e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <spi_master_transmit>
	spi_master_transmit(data);
     c92:	8c 2f       	mov	r24, r28
     c94:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <spi_master_transmit>
	set_bit(PORTB, PB4);
     c98:	c4 9a       	sbi	0x18, 4	; 24
}
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	08 95       	ret

00000ca2 <mcp_reset>:
		
void mcp_reset(){
	clear_bit(PORTB, PB4);
     ca2:	c4 98       	cbi	0x18, 4	; 24
	spi_master_transmit(MCP_RESET);	
     ca4:	80 ec       	ldi	r24, 0xC0	; 192
     ca6:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <spi_master_transmit>
	set_bit(PORTB, PB4);
     caa:	c4 9a       	sbi	0x18, 4	; 24
     cac:	08 95       	ret

00000cae <mcp_init>:
}
	
void mcp_init(){
	mcp_reset();
     cae:	0e 94 51 06 	call	0xca2	; 0xca2 <mcp_reset>
     cb2:	08 95       	ret

00000cb4 <draw_list>:
	}
	

	return self;
}
Menu* draw_list(Menu* self){
     cb4:	ef 92       	push	r14
     cb6:	ff 92       	push	r15
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	7c 01       	movw	r14, r24

	for(int i = 0; i < self->num_of_entries; i++){
     cc2:	dc 01       	movw	r26, r24
     cc4:	14 96       	adiw	r26, 0x04	; 4
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	15 97       	sbiw	r26, 0x05	; 5
     ccc:	18 16       	cp	r1, r24
     cce:	19 06       	cpc	r1, r25
     cd0:	e4 f4       	brge	.+56     	; 0xd0a <draw_list+0x56>
     cd2:	c0 e0       	ldi	r28, 0x00	; 0
     cd4:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_string(self->entries[i],0,i,5,0);
     cd6:	ce 01       	movw	r24, r28
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	d7 01       	movw	r26, r14
     cde:	12 96       	adiw	r26, 0x02	; 2
     ce0:	ed 91       	ld	r30, X+
     ce2:	fc 91       	ld	r31, X
     ce4:	13 97       	sbiw	r26, 0x03	; 3
     ce6:	e8 0f       	add	r30, r24
     ce8:	f9 1f       	adc	r31, r25
     cea:	00 e0       	ldi	r16, 0x00	; 0
     cec:	10 e0       	ldi	r17, 0x00	; 0
     cee:	25 e0       	ldi	r18, 0x05	; 5
     cf0:	4c 2f       	mov	r20, r28
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	91 81       	ldd	r25, Z+1	; 0x01
     cf8:	0e 94 2f 0a 	call	0x145e	; 0x145e <oled_print_string>

	return self;
}
Menu* draw_list(Menu* self){

	for(int i = 0; i < self->num_of_entries; i++){
     cfc:	21 96       	adiw	r28, 0x01	; 1
     cfe:	f7 01       	movw	r30, r14
     d00:	84 81       	ldd	r24, Z+4	; 0x04
     d02:	95 81       	ldd	r25, Z+5	; 0x05
     d04:	c8 17       	cp	r28, r24
     d06:	d9 07       	cpc	r29, r25
     d08:	34 f3       	brlt	.-52     	; 0xcd6 <draw_list+0x22>
		oled_print_string(self->entries[i],0,i,5,0);
	}

	//Where to go next
	Direction dir = joy_get_direction();
     d0a:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <joy_get_direction>
	if(!joy_moved){//THIS IS NEW
     d0e:	20 91 56 02 	lds	r18, 0x0256
     d12:	30 91 57 02 	lds	r19, 0x0257
     d16:	23 2b       	or	r18, r19
     d18:	d9 f4       	brne	.+54     	; 0xd50 <draw_list+0x9c>
		if((dir == LEFT) & (self->super_menu != NULL)){
     d1a:	d7 01       	movw	r26, r14
     d1c:	18 96       	adiw	r26, 0x08	; 8
     d1e:	2d 91       	ld	r18, X+
     d20:	3c 91       	ld	r19, X
     d22:	19 97       	sbiw	r26, 0x09	; 9
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	82 30       	cpi	r24, 0x02	; 2
     d28:	09 f0       	breq	.+2      	; 0xd2c <draw_list+0x78>
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	99 23       	and	r25, r25
     d2e:	39 f0       	breq	.+14     	; 0xd3e <draw_list+0x8a>
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	21 15       	cp	r18, r1
     d34:	31 05       	cpc	r19, r1
     d36:	09 f4       	brne	.+2      	; 0xd3a <draw_list+0x86>
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	81 11       	cpse	r24, r1
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <draw_list+0x8c>
     d3e:	97 01       	movw	r18, r14
			self = self->super_menu;
		}
		joy_moved = 1;		
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	90 93 57 02 	sts	0x0257, r25
     d48:	80 93 56 02 	sts	0x0256, r24
     d4c:	79 01       	movw	r14, r18
     d4e:	06 c0       	rjmp	.+12     	; 0xd5c <draw_list+0xa8>
	}
	else if (dir == NEUTRAL){ //THIS IS NEW
     d50:	8f 3f       	cpi	r24, 0xFF	; 255
     d52:	21 f4       	brne	.+8      	; 0xd5c <draw_list+0xa8>
		joy_moved = 0;
     d54:	10 92 57 02 	sts	0x0257, r1
     d58:	10 92 56 02 	sts	0x0256, r1
	}
	
	return self;
}
     d5c:	c7 01       	movw	r24, r14
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	ff 90       	pop	r15
     d68:	ef 90       	pop	r14
     d6a:	08 95       	ret

00000d6c <draw_menu>:
	super->entries[super->num_of_entries - 1] = malloc(strlen(sub->name) * sizeof(char));
	super->entries[super->num_of_entries - 1] = sub->name;
}

//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
     d6c:	ef 92       	push	r14
     d6e:	ff 92       	push	r15
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	7c 01       	movw	r14, r24
	
	for(int i = 0; i < self->num_of_entries; i++){
     d7a:	dc 01       	movw	r26, r24
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	8d 91       	ld	r24, X+
     d80:	9c 91       	ld	r25, X
     d82:	15 97       	sbiw	r26, 0x05	; 5
     d84:	18 16       	cp	r1, r24
     d86:	19 06       	cpc	r1, r25
     d88:	e4 f4       	brge	.+56     	; 0xdc2 <draw_menu+0x56>
     d8a:	c0 e0       	ldi	r28, 0x00	; 0
     d8c:	d0 e0       	ldi	r29, 0x00	; 0
		oled_print_string(self->entries[i],0,i,5,0);
     d8e:	ce 01       	movw	r24, r28
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	d7 01       	movw	r26, r14
     d96:	12 96       	adiw	r26, 0x02	; 2
     d98:	ed 91       	ld	r30, X+
     d9a:	fc 91       	ld	r31, X
     d9c:	13 97       	sbiw	r26, 0x03	; 3
     d9e:	e8 0f       	add	r30, r24
     da0:	f9 1f       	adc	r31, r25
     da2:	00 e0       	ldi	r16, 0x00	; 0
     da4:	10 e0       	ldi	r17, 0x00	; 0
     da6:	25 e0       	ldi	r18, 0x05	; 5
     da8:	4c 2f       	mov	r20, r28
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	91 81       	ldd	r25, Z+1	; 0x01
     db0:	0e 94 2f 0a 	call	0x145e	; 0x145e <oled_print_string>
}

//Drawing functions (change to update?)
Menu* draw_menu(Menu* self){
	
	for(int i = 0; i < self->num_of_entries; i++){
     db4:	21 96       	adiw	r28, 0x01	; 1
     db6:	f7 01       	movw	r30, r14
     db8:	84 81       	ldd	r24, Z+4	; 0x04
     dba:	95 81       	ldd	r25, Z+5	; 0x05
     dbc:	c8 17       	cp	r28, r24
     dbe:	d9 07       	cpc	r29, r25
     dc0:	34 f3       	brlt	.-52     	; 0xd8e <draw_menu+0x22>
		oled_print_string(self->entries[i],0,i,5,0);
	}
	oled_invert_rectangle(0,8*(self->cursor),64,8*((self->cursor) + 1));
     dc2:	d7 01       	movw	r26, r14
     dc4:	16 96       	adiw	r26, 0x06	; 6
     dc6:	2d 91       	ld	r18, X+
     dc8:	3c 91       	ld	r19, X
     dca:	17 97       	sbiw	r26, 0x07	; 7
     dcc:	2f 5f       	subi	r18, 0xFF	; 255
     dce:	3f 4f       	sbci	r19, 0xFF	; 255
     dd0:	22 0f       	add	r18, r18
     dd2:	33 1f       	adc	r19, r19
     dd4:	22 0f       	add	r18, r18
     dd6:	33 1f       	adc	r19, r19
     dd8:	22 0f       	add	r18, r18
     dda:	33 1f       	adc	r19, r19
     ddc:	b9 01       	movw	r22, r18
     dde:	68 50       	subi	r22, 0x08	; 8
     de0:	71 09       	sbc	r23, r1
     de2:	40 e4       	ldi	r20, 0x40	; 64
     de4:	50 e0       	ldi	r21, 0x00	; 0
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 8f 0b 	call	0x171e	; 0x171e <oled_invert_rectangle>
	
	//Where to go next
	Direction dir = joy_get_direction();
     dee:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <joy_get_direction>
	if(1){	//THIS IS NEW
		if((dir == UP) & (self->cursor != 0)){
     df2:	f7 01       	movw	r30, r14
     df4:	26 81       	ldd	r18, Z+6	; 0x06
     df6:	37 81       	ldd	r19, Z+7	; 0x07
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	09 f0       	breq	.+2      	; 0xe00 <draw_menu+0x94>
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	99 23       	and	r25, r25
     e02:	09 f4       	brne	.+2      	; 0xe06 <draw_menu+0x9a>
     e04:	4f c0       	rjmp	.+158    	; 0xea4 <draw_menu+0x138>
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	21 15       	cp	r18, r1
     e0a:	31 05       	cpc	r19, r1
     e0c:	09 f4       	brne	.+2      	; 0xe10 <draw_menu+0xa4>
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	99 23       	and	r25, r25
     e12:	09 f4       	brne	.+2      	; 0xe16 <draw_menu+0xaa>
     e14:	47 c0       	rjmp	.+142    	; 0xea4 <draw_menu+0x138>
     e16:	c0 e0       	ldi	r28, 0x00	; 0
     e18:	d0 e0       	ldi	r29, 0x00	; 0
			for (int i = 0; i < 8; i++,i++){
				oled_invert_rectangle(0,8*(self->cursor) - i - 2,64,8*((self->cursor) + 1) - i - 2);
     e1a:	d7 01       	movw	r26, r14
     e1c:	16 96       	adiw	r26, 0x06	; 6
     e1e:	6d 91       	ld	r22, X+
     e20:	7c 91       	ld	r23, X
     e22:	17 97       	sbiw	r26, 0x07	; 7
     e24:	6f 5f       	subi	r22, 0xFF	; 255
     e26:	7f 4f       	sbci	r23, 0xFF	; 255
     e28:	66 0f       	add	r22, r22
     e2a:	77 1f       	adc	r23, r23
     e2c:	66 0f       	add	r22, r22
     e2e:	77 1f       	adc	r23, r23
     e30:	66 0f       	add	r22, r22
     e32:	77 1f       	adc	r23, r23
     e34:	9b 01       	movw	r18, r22
     e36:	2c 1b       	sub	r18, r28
     e38:	3d 0b       	sbc	r19, r29
     e3a:	22 50       	subi	r18, 0x02	; 2
     e3c:	31 09       	sbc	r19, r1
     e3e:	6c 1b       	sub	r22, r28
     e40:	7d 0b       	sbc	r23, r29
     e42:	6a 50       	subi	r22, 0x0A	; 10
     e44:	71 09       	sbc	r23, r1
     e46:	40 e4       	ldi	r20, 0x40	; 64
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 8f 0b 	call	0x171e	; 0x171e <oled_invert_rectangle>
				oled_invert_rectangle(0,8*(self->cursor) - i,64,8*((self->cursor) + 1) - i);
     e52:	f7 01       	movw	r30, r14
     e54:	66 81       	ldd	r22, Z+6	; 0x06
     e56:	77 81       	ldd	r23, Z+7	; 0x07
     e58:	6f 5f       	subi	r22, 0xFF	; 255
     e5a:	7f 4f       	sbci	r23, 0xFF	; 255
     e5c:	66 0f       	add	r22, r22
     e5e:	77 1f       	adc	r23, r23
     e60:	66 0f       	add	r22, r22
     e62:	77 1f       	adc	r23, r23
     e64:	66 0f       	add	r22, r22
     e66:	77 1f       	adc	r23, r23
     e68:	9b 01       	movw	r18, r22
     e6a:	2c 1b       	sub	r18, r28
     e6c:	3d 0b       	sbc	r19, r29
     e6e:	68 50       	subi	r22, 0x08	; 8
     e70:	71 09       	sbc	r23, r1
     e72:	6c 1b       	sub	r22, r28
     e74:	7d 0b       	sbc	r23, r29
     e76:	40 e4       	ldi	r20, 0x40	; 64
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 8f 0b 	call	0x171e	; 0x171e <oled_invert_rectangle>
				oled_refresh();
     e82:	0e 94 2b 0b 	call	0x1656	; 0x1656 <oled_refresh>
	
	//Where to go next
	Direction dir = joy_get_direction();
	if(1){	//THIS IS NEW
		if((dir == UP) & (self->cursor != 0)){
			for (int i = 0; i < 8; i++,i++){
     e86:	22 96       	adiw	r28, 0x02	; 2
     e88:	c8 30       	cpi	r28, 0x08	; 8
     e8a:	d1 05       	cpc	r29, r1
     e8c:	31 f6       	brne	.-116    	; 0xe1a <draw_menu+0xae>
				oled_invert_rectangle(0,8*(self->cursor) - i - 2,64,8*((self->cursor) + 1) - i - 2);
				oled_invert_rectangle(0,8*(self->cursor) - i,64,8*((self->cursor) + 1) - i);
				oled_refresh();
			}
			self->cursor--;
     e8e:	d7 01       	movw	r26, r14
     e90:	16 96       	adiw	r26, 0x06	; 6
     e92:	8d 91       	ld	r24, X+
     e94:	9c 91       	ld	r25, X
     e96:	17 97       	sbiw	r26, 0x07	; 7
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	17 96       	adiw	r26, 0x07	; 7
     e9c:	9c 93       	st	X, r25
     e9e:	8e 93       	st	-X, r24
     ea0:	16 97       	sbiw	r26, 0x06	; 6
     ea2:	88 c0       	rjmp	.+272    	; 0xfb4 <draw_menu+0x248>
		}
		else if((dir == DOWN) & (self->cursor != (self->num_of_entries - 1))){
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	83 30       	cpi	r24, 0x03	; 3
     ea8:	09 f0       	breq	.+2      	; 0xeac <draw_menu+0x140>
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	99 23       	and	r25, r25
     eae:	09 f4       	brne	.+2      	; 0xeb2 <draw_menu+0x146>
     eb0:	54 c0       	rjmp	.+168    	; 0xf5a <draw_menu+0x1ee>
     eb2:	f7 01       	movw	r30, r14
     eb4:	44 81       	ldd	r20, Z+4	; 0x04
     eb6:	55 81       	ldd	r21, Z+5	; 0x05
     eb8:	41 50       	subi	r20, 0x01	; 1
     eba:	51 09       	sbc	r21, r1
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	24 17       	cp	r18, r20
     ec0:	35 07       	cpc	r19, r21
     ec2:	09 f4       	brne	.+2      	; 0xec6 <draw_menu+0x15a>
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	99 23       	and	r25, r25
     ec8:	09 f4       	brne	.+2      	; 0xecc <draw_menu+0x160>
     eca:	47 c0       	rjmp	.+142    	; 0xf5a <draw_menu+0x1ee>
     ecc:	c0 e0       	ldi	r28, 0x00	; 0
     ece:	d0 e0       	ldi	r29, 0x00	; 0
			
			//---NEW--- ANIMATION FOR DOWNWARDS MOVEMENT
			for (int i = 0; i < 8; i++,i++){
				oled_invert_rectangle(0,8*(self->cursor) + i,64,8*((self->cursor) + 1) + i);
     ed0:	d7 01       	movw	r26, r14
     ed2:	16 96       	adiw	r26, 0x06	; 6
     ed4:	6d 91       	ld	r22, X+
     ed6:	7c 91       	ld	r23, X
     ed8:	17 97       	sbiw	r26, 0x07	; 7
     eda:	6f 5f       	subi	r22, 0xFF	; 255
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
     ede:	66 0f       	add	r22, r22
     ee0:	77 1f       	adc	r23, r23
     ee2:	66 0f       	add	r22, r22
     ee4:	77 1f       	adc	r23, r23
     ee6:	66 0f       	add	r22, r22
     ee8:	77 1f       	adc	r23, r23
     eea:	9b 01       	movw	r18, r22
     eec:	2c 0f       	add	r18, r28
     eee:	3d 1f       	adc	r19, r29
     ef0:	68 50       	subi	r22, 0x08	; 8
     ef2:	71 09       	sbc	r23, r1
     ef4:	6c 0f       	add	r22, r28
     ef6:	7d 1f       	adc	r23, r29
     ef8:	40 e4       	ldi	r20, 0x40	; 64
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 8f 0b 	call	0x171e	; 0x171e <oled_invert_rectangle>
				oled_invert_rectangle(0,8*(self->cursor) + i + 2,64,8*((self->cursor) + 1) + i + 2);
     f04:	f7 01       	movw	r30, r14
     f06:	66 81       	ldd	r22, Z+6	; 0x06
     f08:	77 81       	ldd	r23, Z+7	; 0x07
     f0a:	6f 5f       	subi	r22, 0xFF	; 255
     f0c:	7f 4f       	sbci	r23, 0xFF	; 255
     f0e:	66 0f       	add	r22, r22
     f10:	77 1f       	adc	r23, r23
     f12:	66 0f       	add	r22, r22
     f14:	77 1f       	adc	r23, r23
     f16:	66 0f       	add	r22, r22
     f18:	77 1f       	adc	r23, r23
     f1a:	9b 01       	movw	r18, r22
     f1c:	2c 0f       	add	r18, r28
     f1e:	3d 1f       	adc	r19, r29
     f20:	2e 5f       	subi	r18, 0xFE	; 254
     f22:	3f 4f       	sbci	r19, 0xFF	; 255
     f24:	6c 0f       	add	r22, r28
     f26:	7d 1f       	adc	r23, r29
     f28:	66 50       	subi	r22, 0x06	; 6
     f2a:	71 09       	sbc	r23, r1
     f2c:	40 e4       	ldi	r20, 0x40	; 64
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 8f 0b 	call	0x171e	; 0x171e <oled_invert_rectangle>
				oled_refresh();
     f38:	0e 94 2b 0b 	call	0x1656	; 0x1656 <oled_refresh>
			self->cursor--;
		}
		else if((dir == DOWN) & (self->cursor != (self->num_of_entries - 1))){
			
			//---NEW--- ANIMATION FOR DOWNWARDS MOVEMENT
			for (int i = 0; i < 8; i++,i++){
     f3c:	22 96       	adiw	r28, 0x02	; 2
     f3e:	c8 30       	cpi	r28, 0x08	; 8
     f40:	d1 05       	cpc	r29, r1
     f42:	31 f6       	brne	.-116    	; 0xed0 <draw_menu+0x164>
				oled_invert_rectangle(0,8*(self->cursor) + i + 2,64,8*((self->cursor) + 1) + i + 2);
				oled_refresh();
			}
			//-------------
			
			self->cursor++;
     f44:	d7 01       	movw	r26, r14
     f46:	16 96       	adiw	r26, 0x06	; 6
     f48:	8d 91       	ld	r24, X+
     f4a:	9c 91       	ld	r25, X
     f4c:	17 97       	sbiw	r26, 0x07	; 7
     f4e:	01 96       	adiw	r24, 0x01	; 1
     f50:	17 96       	adiw	r26, 0x07	; 7
     f52:	9c 93       	st	X, r25
     f54:	8e 93       	st	-X, r24
     f56:	16 97       	sbiw	r26, 0x06	; 6
     f58:	2d c0       	rjmp	.+90     	; 0xfb4 <draw_menu+0x248>
		}
		else if((dir == RIGHT) & (self->sub_menus[self->cursor]->num_of_entries != 0)){ //THIS IS CHANGED
     f5a:	22 0f       	add	r18, r18
     f5c:	33 1f       	adc	r19, r19
     f5e:	d7 01       	movw	r26, r14
     f60:	1a 96       	adiw	r26, 0x0a	; 10
     f62:	ed 91       	ld	r30, X+
     f64:	fc 91       	ld	r31, X
     f66:	1b 97       	sbiw	r26, 0x0b	; 11
     f68:	e2 0f       	add	r30, r18
     f6a:	f3 1f       	adc	r31, r19
     f6c:	01 90       	ld	r0, Z+
     f6e:	f0 81       	ld	r31, Z
     f70:	e0 2d       	mov	r30, r0
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	81 11       	cpse	r24, r1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	99 23       	and	r25, r25
     f7a:	41 f0       	breq	.+16     	; 0xf8c <draw_menu+0x220>
     f7c:	91 e0       	ldi	r25, 0x01	; 1
     f7e:	24 81       	ldd	r18, Z+4	; 0x04
     f80:	35 81       	ldd	r19, Z+5	; 0x05
     f82:	23 2b       	or	r18, r19
     f84:	09 f4       	brne	.+2      	; 0xf88 <draw_menu+0x21c>
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	91 11       	cpse	r25, r1
     f8a:	11 c0       	rjmp	.+34     	; 0xfae <draw_menu+0x242>
			self = self->sub_menus[self->cursor];
		}
		else if((dir == LEFT) & (self->super_menu != NULL)){
     f8c:	f7 01       	movw	r30, r14
     f8e:	20 85       	ldd	r18, Z+8	; 0x08
     f90:	31 85       	ldd	r19, Z+9	; 0x09
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	82 30       	cpi	r24, 0x02	; 2
     f96:	09 f0       	breq	.+2      	; 0xf9a <draw_menu+0x22e>
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	99 23       	and	r25, r25
     f9c:	59 f0       	breq	.+22     	; 0xfb4 <draw_menu+0x248>
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	21 15       	cp	r18, r1
     fa2:	31 05       	cpc	r19, r1
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <draw_menu+0x23c>
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	81 11       	cpse	r24, r1
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <draw_menu+0x246>
     fac:	03 c0       	rjmp	.+6      	; 0xfb4 <draw_menu+0x248>
			//-------------
			
			self->cursor++;
		}
		else if((dir == RIGHT) & (self->sub_menus[self->cursor]->num_of_entries != 0)){ //THIS IS CHANGED
			self = self->sub_menus[self->cursor];
     fae:	7f 01       	movw	r14, r30
     fb0:	01 c0       	rjmp	.+2      	; 0xfb4 <draw_menu+0x248>
		}
		else if((dir == LEFT) & (self->super_menu != NULL)){
			self = self->super_menu;
     fb2:	79 01       	movw	r14, r18
		}
		joy_moved = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	90 93 57 02 	sts	0x0257, r25
     fbc:	80 93 56 02 	sts	0x0256, r24
		joy_moved = 0;
	}
	

	return self;
}
     fc0:	c7 01       	movw	r24, r14
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	08 95       	ret

00000fd0 <add_entries>:
	
}
//----------NO NEED TO CHANGE THINGS BEYOND THIS----------

//Functions for adding entries and nodes
void add_entries(Menu* menu, char* entries[], int num_of_new_entries){
     fd0:	af 92       	push	r10
     fd2:	bf 92       	push	r11
     fd4:	cf 92       	push	r12
     fd6:	df 92       	push	r13
     fd8:	ef 92       	push	r14
     fda:	ff 92       	push	r15
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	8c 01       	movw	r16, r24
     fe6:	e6 2e       	mov	r14, r22
     fe8:	f7 2e       	mov	r15, r23
     fea:	ea 01       	movw	r28, r20
	
	menu->entries = malloc(num_of_new_entries * sizeof(char*));	//Correct size of double pointer
     fec:	6a 01       	movw	r12, r20
     fee:	cc 0c       	add	r12, r12
     ff0:	dd 1c       	adc	r13, r13
     ff2:	c6 01       	movw	r24, r12
     ff4:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <malloc>
     ff8:	d8 01       	movw	r26, r16
     ffa:	13 96       	adiw	r26, 0x03	; 3
     ffc:	9c 93       	st	X, r25
     ffe:	8e 93       	st	-X, r24
    1000:	12 97       	sbiw	r26, 0x02	; 2
	
	for(int i = 0; i < num_of_new_entries; i++){
    1002:	1c 16       	cp	r1, r28
    1004:	1d 06       	cpc	r1, r29
    1006:	54 f5       	brge	.+84     	; 0x105c <add_entries+0x8c>
    1008:	ae 2c       	mov	r10, r14
    100a:	bf 2c       	mov	r11, r15
    100c:	c0 e0       	ldi	r28, 0x00	; 0
    100e:	d0 e0       	ldi	r29, 0x00	; 0
		menu->entries[i] = malloc(strlen(entries[i]) * sizeof(char)); //Allocate space for each string
    1010:	f8 01       	movw	r30, r16
    1012:	e2 80       	ldd	r14, Z+2	; 0x02
    1014:	f3 80       	ldd	r15, Z+3	; 0x03
    1016:	ec 0e       	add	r14, r28
    1018:	fd 1e       	adc	r15, r29
    101a:	f5 01       	movw	r30, r10
    101c:	a0 81       	ld	r26, Z
    101e:	b1 81       	ldd	r27, Z+1	; 0x01
    1020:	fd 01       	movw	r30, r26
    1022:	01 90       	ld	r0, Z+
    1024:	00 20       	and	r0, r0
    1026:	e9 f7       	brne	.-6      	; 0x1022 <add_entries+0x52>
    1028:	31 97       	sbiw	r30, 0x01	; 1
    102a:	cf 01       	movw	r24, r30
    102c:	8a 1b       	sub	r24, r26
    102e:	9b 0b       	sbc	r25, r27
    1030:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <malloc>
    1034:	d7 01       	movw	r26, r14
    1036:	8d 93       	st	X+, r24
    1038:	9c 93       	st	X, r25
		menu->entries[i] =  entries[i];								  //Adds each string
    103a:	f5 01       	movw	r30, r10
    103c:	81 91       	ld	r24, Z+
    103e:	91 91       	ld	r25, Z+
    1040:	5f 01       	movw	r10, r30
    1042:	d8 01       	movw	r26, r16
    1044:	12 96       	adiw	r26, 0x02	; 2
    1046:	ed 91       	ld	r30, X+
    1048:	fc 91       	ld	r31, X
    104a:	13 97       	sbiw	r26, 0x03	; 3
    104c:	ec 0f       	add	r30, r28
    104e:	fd 1f       	adc	r31, r29
    1050:	91 83       	std	Z+1, r25	; 0x01
    1052:	80 83       	st	Z, r24
    1054:	22 96       	adiw	r28, 0x02	; 2
//Functions for adding entries and nodes
void add_entries(Menu* menu, char* entries[], int num_of_new_entries){
	
	menu->entries = malloc(num_of_new_entries * sizeof(char*));	//Correct size of double pointer
	
	for(int i = 0; i < num_of_new_entries; i++){
    1056:	cc 16       	cp	r12, r28
    1058:	dd 06       	cpc	r13, r29
    105a:	d1 f6       	brne	.-76     	; 0x1010 <add_entries+0x40>
		//empty->name = entries[i];
		//add_sub_menu(menu, empty);
		//menu->num_of_entries+=1;
	}
	//menu->num_of_entries = num_of_new_entries;
	menu->cursor = 0; //To make sure the cursor is not something else
    105c:	f8 01       	movw	r30, r16
    105e:	17 82       	std	Z+7, r1	; 0x07
    1060:	16 82       	std	Z+6, r1	; 0x06
}
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	df 90       	pop	r13
    1070:	cf 90       	pop	r12
    1072:	bf 90       	pop	r11
    1074:	af 90       	pop	r10
    1076:	08 95       	ret

00001078 <add_sub_menu>:

void add_sub_menu(Menu* super, Menu* sub){
    1078:	ef 92       	push	r14
    107a:	ff 92       	push	r15
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	ec 01       	movw	r28, r24
    1086:	8b 01       	movw	r16, r22
	super->num_of_entries += 1;		//Num of entries in super are updated
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	9d 81       	ldd	r25, Y+5	; 0x05
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	9d 83       	std	Y+5, r25	; 0x05
    1090:	8c 83       	std	Y+4, r24	; 0x04
	
	//Pointers to and from the menus are set correctly
	sub->super_menu = super;
    1092:	fb 01       	movw	r30, r22
    1094:	d1 87       	std	Z+9, r29	; 0x09
    1096:	c0 87       	std	Z+8, r28	; 0x08
	super->sub_menus = realloc(super->sub_menus, super->num_of_entries * sizeof(Menu*));
    1098:	6c 81       	ldd	r22, Y+4	; 0x04
    109a:	7d 81       	ldd	r23, Y+5	; 0x05
    109c:	66 0f       	add	r22, r22
    109e:	77 1f       	adc	r23, r23
    10a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    10a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    10a4:	0e 94 85 10 	call	0x210a	; 0x210a <realloc>
    10a8:	9b 87       	std	Y+11, r25	; 0x0b
    10aa:	8a 87       	std	Y+10, r24	; 0x0a
	super->sub_menus[super->num_of_entries - 1] = malloc(sizeof(Menu));
    10ac:	ec 80       	ldd	r14, Y+4	; 0x04
    10ae:	fd 80       	ldd	r15, Y+5	; 0x05
    10b0:	f1 e0       	ldi	r31, 0x01	; 1
    10b2:	ef 1a       	sub	r14, r31
    10b4:	f0 e8       	ldi	r31, 0x80	; 128
    10b6:	ff 0a       	sbc	r15, r31
    10b8:	ee 0c       	add	r14, r14
    10ba:	ff 1c       	adc	r15, r15
    10bc:	e8 0e       	add	r14, r24
    10be:	f9 1e       	adc	r15, r25
    10c0:	8e e0       	ldi	r24, 0x0E	; 14
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <malloc>
    10c8:	f7 01       	movw	r30, r14
    10ca:	91 83       	std	Z+1, r25	; 0x01
    10cc:	80 83       	st	Z, r24
	super->sub_menus[super->num_of_entries - 1] = sub;
    10ce:	ec 81       	ldd	r30, Y+4	; 0x04
    10d0:	fd 81       	ldd	r31, Y+5	; 0x05
    10d2:	e1 50       	subi	r30, 0x01	; 1
    10d4:	f0 48       	sbci	r31, 0x80	; 128
    10d6:	ee 0f       	add	r30, r30
    10d8:	ff 1f       	adc	r31, r31
    10da:	8a 85       	ldd	r24, Y+10	; 0x0a
    10dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    10de:	e8 0f       	add	r30, r24
    10e0:	f9 1f       	adc	r31, r25
    10e2:	11 83       	std	Z+1, r17	; 0x01
    10e4:	00 83       	st	Z, r16
	
	//Name of entries in the super menu are updated
	super->entries = realloc(super->entries, super->num_of_entries * sizeof(char*));
    10e6:	6c 81       	ldd	r22, Y+4	; 0x04
    10e8:	7d 81       	ldd	r23, Y+5	; 0x05
    10ea:	66 0f       	add	r22, r22
    10ec:	77 1f       	adc	r23, r23
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	9b 81       	ldd	r25, Y+3	; 0x03
    10f2:	0e 94 85 10 	call	0x210a	; 0x210a <realloc>
    10f6:	9b 83       	std	Y+3, r25	; 0x03
    10f8:	8a 83       	std	Y+2, r24	; 0x02
	super->entries[super->num_of_entries - 1] = malloc(strlen(sub->name) * sizeof(char));
    10fa:	ec 80       	ldd	r14, Y+4	; 0x04
    10fc:	fd 80       	ldd	r15, Y+5	; 0x05
    10fe:	f1 e0       	ldi	r31, 0x01	; 1
    1100:	ef 1a       	sub	r14, r31
    1102:	f0 e8       	ldi	r31, 0x80	; 128
    1104:	ff 0a       	sbc	r15, r31
    1106:	ee 0c       	add	r14, r14
    1108:	ff 1c       	adc	r15, r15
    110a:	e8 0e       	add	r14, r24
    110c:	f9 1e       	adc	r15, r25
    110e:	f8 01       	movw	r30, r16
    1110:	a0 81       	ld	r26, Z
    1112:	b1 81       	ldd	r27, Z+1	; 0x01
    1114:	fd 01       	movw	r30, r26
    1116:	01 90       	ld	r0, Z+
    1118:	00 20       	and	r0, r0
    111a:	e9 f7       	brne	.-6      	; 0x1116 <add_sub_menu+0x9e>
    111c:	31 97       	sbiw	r30, 0x01	; 1
    111e:	cf 01       	movw	r24, r30
    1120:	8a 1b       	sub	r24, r26
    1122:	9b 0b       	sbc	r25, r27
    1124:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <malloc>
    1128:	f7 01       	movw	r30, r14
    112a:	91 83       	std	Z+1, r25	; 0x01
    112c:	80 83       	st	Z, r24
	super->entries[super->num_of_entries - 1] = sub->name;
    112e:	f8 01       	movw	r30, r16
    1130:	80 81       	ld	r24, Z
    1132:	91 81       	ldd	r25, Z+1	; 0x01
    1134:	ec 81       	ldd	r30, Y+4	; 0x04
    1136:	fd 81       	ldd	r31, Y+5	; 0x05
    1138:	e1 50       	subi	r30, 0x01	; 1
    113a:	f0 48       	sbci	r31, 0x80	; 128
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	2a 81       	ldd	r18, Y+2	; 0x02
    1142:	3b 81       	ldd	r19, Y+3	; 0x03
    1144:	e2 0f       	add	r30, r18
    1146:	f3 1f       	adc	r31, r19
    1148:	91 83       	std	Z+1, r25	; 0x01
    114a:	80 83       	st	Z, r24
}
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	ff 90       	pop	r15
    1156:	ef 90       	pop	r14
    1158:	08 95       	ret

0000115a <menu_init>:
	//.type = MENU,
	.draw = draw_menu
};

//The initializer - How the menus are related
void menu_init(){
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	6c 97       	sbiw	r28, 0x1c	; 28
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
	
	char* control_entr[3] = {"Player1", "Player2", "Player3"};
    116e:	86 e0       	ldi	r24, 0x06	; 6
    1170:	ec e6       	ldi	r30, 0x6C	; 108
    1172:	f1 e0       	ldi	r31, 0x01	; 1
    1174:	de 01       	movw	r26, r28
    1176:	11 96       	adiw	r26, 0x01	; 1
    1178:	01 90       	ld	r0, Z+
    117a:	0d 92       	st	X+, r0
    117c:	8a 95       	dec	r24
    117e:	e1 f7       	brne	.-8      	; 0x1178 <menu_init+0x1e>
	add_entries(&control, control_entr, 3);
    1180:	43 e0       	ldi	r20, 0x03	; 3
    1182:	50 e0       	ldi	r21, 0x00	; 0
    1184:	be 01       	movw	r22, r28
    1186:	6f 5f       	subi	r22, 0xFF	; 255
    1188:	7f 4f       	sbci	r23, 0xFF	; 255
    118a:	8e e1       	ldi	r24, 0x1E	; 30
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <add_entries>
	add_sub_menu(&options, &control);
    1192:	6e e1       	ldi	r22, 0x1E	; 30
    1194:	71 e0       	ldi	r23, 0x01	; 1
    1196:	8a e3       	ldi	r24, 0x3A	; 58
    1198:	91 e0       	ldi	r25, 0x01	; 1
    119a:	0e 94 3c 08 	call	0x1078	; 0x1078 <add_sub_menu>
	
	char* contro_entr[4] = {"Low", "Medium", "High","Ultra"};
    119e:	88 e0       	ldi	r24, 0x08	; 8
    11a0:	e2 e7       	ldi	r30, 0x72	; 114
    11a2:	f1 e0       	ldi	r31, 0x01	; 1
    11a4:	de 01       	movw	r26, r28
    11a6:	17 96       	adiw	r26, 0x07	; 7
    11a8:	01 90       	ld	r0, Z+
    11aa:	0d 92       	st	X+, r0
    11ac:	8a 95       	dec	r24
    11ae:	e1 f7       	brne	.-8      	; 0x11a8 <menu_init+0x4e>
	add_entries(&contro, contro_entr, 4);
    11b0:	44 e0       	ldi	r20, 0x04	; 4
    11b2:	50 e0       	ldi	r21, 0x00	; 0
    11b4:	be 01       	movw	r22, r28
    11b6:	69 5f       	subi	r22, 0xF9	; 249
    11b8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ba:	80 e1       	ldi	r24, 0x10	; 16
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <add_entries>
	add_sub_menu(&options, &contro);
    11c2:	60 e1       	ldi	r22, 0x10	; 16
    11c4:	71 e0       	ldi	r23, 0x01	; 1
    11c6:	8a e3       	ldi	r24, 0x3A	; 58
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	0e 94 3c 08 	call	0x1078	; 0x1078 <add_sub_menu>
	
	add_sub_menu(&main_menu, &options);
    11ce:	6a e3       	ldi	r22, 0x3A	; 58
    11d0:	71 e0       	ldi	r23, 0x01	; 1
    11d2:	86 e5       	ldi	r24, 0x56	; 86
    11d4:	91 e0       	ldi	r25, 0x01	; 1
    11d6:	0e 94 3c 08 	call	0x1078	; 0x1078 <add_sub_menu>
	
	char* diff_entr[3] = {"Easy", "Medium", "Hard"};
    11da:	86 e0       	ldi	r24, 0x06	; 6
    11dc:	ea e7       	ldi	r30, 0x7A	; 122
    11de:	f1 e0       	ldi	r31, 0x01	; 1
    11e0:	de 01       	movw	r26, r28
    11e2:	1f 96       	adiw	r26, 0x0f	; 15
    11e4:	01 90       	ld	r0, Z+
    11e6:	0d 92       	st	X+, r0
    11e8:	8a 95       	dec	r24
    11ea:	e1 f7       	brne	.-8      	; 0x11e4 <menu_init+0x8a>
	add_entries(&difficulty, diff_entr, 3);
    11ec:	43 e0       	ldi	r20, 0x03	; 3
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	be 01       	movw	r22, r28
    11f2:	61 5f       	subi	r22, 0xF1	; 241
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
    11f6:	88 e4       	ldi	r24, 0x48	; 72
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <add_entries>
	add_sub_menu(&main_menu, &difficulty);
    11fe:	68 e4       	ldi	r22, 0x48	; 72
    1200:	71 e0       	ldi	r23, 0x01	; 1
    1202:	86 e5       	ldi	r24, 0x56	; 86
    1204:	91 e0       	ldi	r25, 0x01	; 1
    1206:	0e 94 3c 08 	call	0x1078	; 0x1078 <add_sub_menu>
	
	char* high_entr[4] = {"1. Herman","2. Raoul","3. Alle andre","-inf^inf. Hans"};
    120a:	88 e0       	ldi	r24, 0x08	; 8
    120c:	e0 e8       	ldi	r30, 0x80	; 128
    120e:	f1 e0       	ldi	r31, 0x01	; 1
    1210:	de 01       	movw	r26, r28
    1212:	55 96       	adiw	r26, 0x15	; 21
    1214:	01 90       	ld	r0, Z+
    1216:	0d 92       	st	X+, r0
    1218:	8a 95       	dec	r24
    121a:	e1 f7       	brne	.-8      	; 0x1214 <menu_init+0xba>
	add_entries(&highscore, high_entr,4);
    121c:	44 e0       	ldi	r20, 0x04	; 4
    121e:	50 e0       	ldi	r21, 0x00	; 0
    1220:	be 01       	movw	r22, r28
    1222:	6b 5e       	subi	r22, 0xEB	; 235
    1224:	7f 4f       	sbci	r23, 0xFF	; 255
    1226:	8c e2       	ldi	r24, 0x2C	; 44
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <add_entries>
	add_sub_menu(&main_menu, &highscore);
    122e:	6c e2       	ldi	r22, 0x2C	; 44
    1230:	71 e0       	ldi	r23, 0x01	; 1
    1232:	86 e5       	ldi	r24, 0x56	; 86
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	0e 94 3c 08 	call	0x1078	; 0x1078 <add_sub_menu>
	
}
    123a:	6c 96       	adiw	r28, 0x1c	; 28
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	08 95       	ret

0000124c <menu_run_display>:
	//
	
Menu* current_menu = &main_menu;

void menu_run_display(){
	oled_clear_screen();
    124c:	0e 94 97 0a 	call	0x152e	; 0x152e <oled_clear_screen>
	current_menu = current_menu->draw(current_menu);
    1250:	80 91 0e 01 	lds	r24, 0x010E
    1254:	90 91 0f 01 	lds	r25, 0x010F
    1258:	dc 01       	movw	r26, r24
    125a:	1c 96       	adiw	r26, 0x0c	; 12
    125c:	ed 91       	ld	r30, X+
    125e:	fc 91       	ld	r31, X
    1260:	1d 97       	sbiw	r26, 0x0d	; 13
    1262:	09 95       	icall
    1264:	90 93 0f 01 	sts	0x010F, r25
    1268:	80 93 0e 01 	sts	0x010E, r24
	oled_refresh();
    126c:	0e 94 2b 0b 	call	0x1656	; 0x1656 <oled_refresh>
    1270:	08 95       	ret

00001272 <oled_write_data>:
    1272:	20 91 64 01 	lds	r18, 0x0164
    1276:	30 91 65 01 	lds	r19, 0x0165
    127a:	23 2b       	or	r18, r19
    127c:	f9 f0       	breq	.+62     	; 0x12bc <oled_write_data+0x4a>
    127e:	20 91 58 02 	lds	r18, 0x0258
    1282:	30 91 59 02 	lds	r19, 0x0259
    1286:	21 15       	cp	r18, r1
    1288:	94 e0       	ldi	r25, 0x04	; 4
    128a:	39 07       	cpc	r19, r25
    128c:	2c f0       	brlt	.+10     	; 0x1298 <oled_write_data+0x26>
    128e:	8c e3       	ldi	r24, 0x3C	; 60
    1290:	92 e0       	ldi	r25, 0x02	; 2
    1292:	0e 94 b7 11 	call	0x236e	; 0x236e <puts>
    1296:	08 95       	ret
    1298:	40 91 68 01 	lds	r20, 0x0168
    129c:	50 91 69 01 	lds	r21, 0x0169
    12a0:	fa 01       	movw	r30, r20
    12a2:	e2 0f       	add	r30, r18
    12a4:	f3 1f       	adc	r31, r19
    12a6:	80 83       	st	Z, r24
    12a8:	80 91 58 02 	lds	r24, 0x0258
    12ac:	90 91 59 02 	lds	r25, 0x0259
    12b0:	01 96       	adiw	r24, 0x01	; 1
    12b2:	90 93 59 02 	sts	0x0259, r25
    12b6:	80 93 58 02 	sts	0x0258, r24
    12ba:	08 95       	ret
    12bc:	e0 91 66 01 	lds	r30, 0x0166
    12c0:	f0 91 67 01 	lds	r31, 0x0167
    12c4:	80 83       	st	Z, r24
    12c6:	08 95       	ret

000012c8 <oled_print_char>:
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	68 30       	cpi	r22, 0x08	; 8
    12d6:	59 f4       	brne	.+22     	; 0x12ee <oled_print_char+0x26>
    12d8:	08 2f       	mov	r16, r24
    12da:	10 e0       	ldi	r17, 0x00	; 0
    12dc:	00 0f       	add	r16, r16
    12de:	11 1f       	adc	r17, r17
    12e0:	00 0f       	add	r16, r16
    12e2:	11 1f       	adc	r17, r17
    12e4:	00 0f       	add	r16, r16
    12e6:	11 1f       	adc	r17, r17
    12e8:	0b 50       	subi	r16, 0x0B	; 11
    12ea:	1d 4f       	sbci	r17, 0xFD	; 253
    12ec:	1a c0       	rjmp	.+52     	; 0x1322 <oled_print_char+0x5a>
    12ee:	65 30       	cpi	r22, 0x05	; 5
    12f0:	71 f4       	brne	.+28     	; 0x130e <oled_print_char+0x46>
    12f2:	08 2f       	mov	r16, r24
    12f4:	10 e0       	ldi	r17, 0x00	; 0
    12f6:	00 52       	subi	r16, 0x20	; 32
    12f8:	11 09       	sbc	r17, r1
    12fa:	c8 01       	movw	r24, r16
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	08 0f       	add	r16, r24
    1306:	19 1f       	adc	r17, r25
    1308:	06 5e       	subi	r16, 0xE6	; 230
    130a:	1d 4f       	sbci	r17, 0xFD	; 253
    130c:	0a c0       	rjmp	.+20     	; 0x1322 <oled_print_char+0x5a>
    130e:	64 30       	cpi	r22, 0x04	; 4
    1310:	41 f4       	brne	.+16     	; 0x1322 <oled_print_char+0x5a>
    1312:	08 2f       	mov	r16, r24
    1314:	10 e0       	ldi	r17, 0x00	; 0
    1316:	00 0f       	add	r16, r16
    1318:	11 1f       	adc	r17, r17
    131a:	00 0f       	add	r16, r16
    131c:	11 1f       	adc	r17, r17
    131e:	02 5e       	subi	r16, 0xE2	; 226
    1320:	1f 4f       	sbci	r17, 0xFF	; 255
    1322:	45 2b       	or	r20, r21
    1324:	31 f0       	breq	.+12     	; 0x1332 <oled_print_char+0x6a>
    1326:	e6 2e       	mov	r14, r22
    1328:	f1 2c       	mov	r15, r1
    132a:	1e 14       	cp	r1, r14
    132c:	1f 04       	cpc	r1, r15
    132e:	9c f0       	brlt	.+38     	; 0x1356 <oled_print_char+0x8e>
    1330:	1f c0       	rjmp	.+62     	; 0x1370 <oled_print_char+0xa8>
    1332:	e6 2e       	mov	r14, r22
    1334:	f1 2c       	mov	r15, r1
    1336:	1e 14       	cp	r1, r14
    1338:	1f 04       	cpc	r1, r15
    133a:	d4 f4       	brge	.+52     	; 0x1370 <oled_print_char+0xa8>
    133c:	c0 e0       	ldi	r28, 0x00	; 0
    133e:	d0 e0       	ldi	r29, 0x00	; 0
    1340:	fe 01       	movw	r30, r28
    1342:	e0 0f       	add	r30, r16
    1344:	f1 1f       	adc	r31, r17
    1346:	84 91       	lpm	r24, Z
    1348:	0e 94 39 09 	call	0x1272	; 0x1272 <oled_write_data>
    134c:	21 96       	adiw	r28, 0x01	; 1
    134e:	ce 15       	cp	r28, r14
    1350:	df 05       	cpc	r29, r15
    1352:	b4 f3       	brlt	.-20     	; 0x1340 <oled_print_char+0x78>
    1354:	0d c0       	rjmp	.+26     	; 0x1370 <oled_print_char+0xa8>
    1356:	c0 e0       	ldi	r28, 0x00	; 0
    1358:	d0 e0       	ldi	r29, 0x00	; 0
    135a:	fe 01       	movw	r30, r28
    135c:	e0 0f       	add	r30, r16
    135e:	f1 1f       	adc	r31, r17
    1360:	84 91       	lpm	r24, Z
    1362:	80 95       	com	r24
    1364:	0e 94 39 09 	call	0x1272	; 0x1272 <oled_write_data>
    1368:	21 96       	adiw	r28, 0x01	; 1
    136a:	ce 15       	cp	r28, r14
    136c:	df 05       	cpc	r29, r15
    136e:	ac f3       	brlt	.-22     	; 0x135a <oled_print_char+0x92>
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	ff 90       	pop	r15
    137a:	ef 90       	pop	r14
    137c:	08 95       	ret

0000137e <oled_read_data>:
    137e:	80 91 64 01 	lds	r24, 0x0164
    1382:	90 91 65 01 	lds	r25, 0x0165
    1386:	89 2b       	or	r24, r25
    1388:	b9 f0       	breq	.+46     	; 0x13b8 <oled_read_data+0x3a>
    138a:	80 91 58 02 	lds	r24, 0x0258
    138e:	90 91 59 02 	lds	r25, 0x0259
    1392:	81 15       	cp	r24, r1
    1394:	24 e0       	ldi	r18, 0x04	; 4
    1396:	92 07       	cpc	r25, r18
    1398:	34 f0       	brlt	.+12     	; 0x13a6 <oled_read_data+0x28>
    139a:	8c e3       	ldi	r24, 0x3C	; 60
    139c:	92 e0       	ldi	r25, 0x02	; 2
    139e:	0e 94 b7 11 	call	0x236e	; 0x236e <puts>
    13a2:	8f ef       	ldi	r24, 0xFF	; 255
    13a4:	08 95       	ret
    13a6:	20 91 68 01 	lds	r18, 0x0168
    13aa:	30 91 69 01 	lds	r19, 0x0169
    13ae:	f9 01       	movw	r30, r18
    13b0:	e8 0f       	add	r30, r24
    13b2:	f9 1f       	adc	r31, r25
    13b4:	80 81       	ld	r24, Z
    13b6:	08 95       	ret
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	08 95       	ret

000013bc <oled_goto_line>:
    13bc:	40 91 64 01 	lds	r20, 0x0164
    13c0:	50 91 65 01 	lds	r21, 0x0165
    13c4:	45 2b       	or	r20, r21
    13c6:	d1 f0       	breq	.+52     	; 0x13fc <oled_goto_line+0x40>
    13c8:	20 91 58 02 	lds	r18, 0x0258
    13cc:	30 91 59 02 	lds	r19, 0x0259
    13d0:	2f 77       	andi	r18, 0x7F	; 127
    13d2:	30 78       	andi	r19, 0x80	; 128
    13d4:	33 23       	and	r19, r19
    13d6:	34 f4       	brge	.+12     	; 0x13e4 <oled_goto_line+0x28>
    13d8:	21 50       	subi	r18, 0x01	; 1
    13da:	31 09       	sbc	r19, r1
    13dc:	20 68       	ori	r18, 0x80	; 128
    13de:	3f 6f       	ori	r19, 0xFF	; 255
    13e0:	2f 5f       	subi	r18, 0xFF	; 255
    13e2:	3f 4f       	sbci	r19, 0xFF	; 255
    13e4:	96 95       	lsr	r25
    13e6:	98 2f       	mov	r25, r24
    13e8:	88 27       	eor	r24, r24
    13ea:	97 95       	ror	r25
    13ec:	87 95       	ror	r24
    13ee:	28 0f       	add	r18, r24
    13f0:	39 1f       	adc	r19, r25
    13f2:	30 93 59 02 	sts	0x0259, r19
    13f6:	20 93 58 02 	sts	0x0258, r18
    13fa:	08 95       	ret
    13fc:	80 55       	subi	r24, 0x50	; 80
    13fe:	e0 91 6a 01 	lds	r30, 0x016A
    1402:	f0 91 6b 01 	lds	r31, 0x016B
    1406:	80 83       	st	Z, r24
    1408:	08 95       	ret

0000140a <oled_goto_column>:
    140a:	20 91 64 01 	lds	r18, 0x0164
    140e:	30 91 65 01 	lds	r19, 0x0165
    1412:	23 2b       	or	r18, r19
    1414:	c1 f0       	breq	.+48     	; 0x1446 <oled_goto_column+0x3c>
    1416:	40 91 58 02 	lds	r20, 0x0258
    141a:	50 91 59 02 	lds	r21, 0x0259
    141e:	9a 01       	movw	r18, r20
    1420:	2f 77       	andi	r18, 0x7F	; 127
    1422:	30 78       	andi	r19, 0x80	; 128
    1424:	33 23       	and	r19, r19
    1426:	34 f4       	brge	.+12     	; 0x1434 <oled_goto_column+0x2a>
    1428:	21 50       	subi	r18, 0x01	; 1
    142a:	31 09       	sbc	r19, r1
    142c:	20 68       	ori	r18, 0x80	; 128
    142e:	3f 6f       	ori	r19, 0xFF	; 255
    1430:	2f 5f       	subi	r18, 0xFF	; 255
    1432:	3f 4f       	sbci	r19, 0xFF	; 255
    1434:	42 1b       	sub	r20, r18
    1436:	53 0b       	sbc	r21, r19
    1438:	84 0f       	add	r24, r20
    143a:	95 1f       	adc	r25, r21
    143c:	90 93 59 02 	sts	0x0259, r25
    1440:	80 93 58 02 	sts	0x0258, r24
    1444:	08 95       	ret
    1446:	e0 91 6a 01 	lds	r30, 0x016A
    144a:	f0 91 6b 01 	lds	r31, 0x016B
    144e:	10 82       	st	Z, r1
    1450:	e0 91 6a 01 	lds	r30, 0x016A
    1454:	f0 91 6b 01 	lds	r31, 0x016B
    1458:	80 e1       	ldi	r24, 0x10	; 16
    145a:	80 83       	st	Z, r24
    145c:	08 95       	ret

0000145e <oled_print_string>:
    145e:	6f 92       	push	r6
    1460:	7f 92       	push	r7
    1462:	8f 92       	push	r8
    1464:	9f 92       	push	r9
    1466:	af 92       	push	r10
    1468:	bf 92       	push	r11
    146a:	cf 92       	push	r12
    146c:	df 92       	push	r13
    146e:	ef 92       	push	r14
    1470:	ff 92       	push	r15
    1472:	0f 93       	push	r16
    1474:	1f 93       	push	r17
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	ec 01       	movw	r28, r24
    147c:	96 2e       	mov	r9, r22
    147e:	74 2e       	mov	r7, r20
    1480:	82 2e       	mov	r8, r18
    1482:	86 2f       	mov	r24, r22
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 94 05 0a 	call	0x140a	; 0x140a <oled_goto_column>
    148a:	87 2d       	mov	r24, r7
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0e 94 de 09 	call	0x13bc	; 0x13bc <oled_goto_line>
    1492:	fe 01       	movw	r30, r28
    1494:	01 90       	ld	r0, Z+
    1496:	00 20       	and	r0, r0
    1498:	e9 f7       	brne	.-6      	; 0x1494 <oled_print_string+0x36>
    149a:	31 97       	sbiw	r30, 0x01	; 1
    149c:	6f 01       	movw	r12, r30
    149e:	cc 1a       	sub	r12, r28
    14a0:	dd 0a       	sbc	r13, r29
    14a2:	1c 14       	cp	r1, r12
    14a4:	1d 04       	cpc	r1, r13
    14a6:	24 f5       	brge	.+72     	; 0x14f0 <oled_print_string+0x92>
    14a8:	7e 01       	movw	r14, r28
    14aa:	c0 e0       	ldi	r28, 0x00	; 0
    14ac:	d0 e0       	ldi	r29, 0x00	; 0
    14ae:	8f e7       	ldi	r24, 0x7F	; 127
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	5c 01       	movw	r10, r24
    14b4:	a8 18       	sub	r10, r8
    14b6:	b1 08       	sbc	r11, r1
    14b8:	61 2c       	mov	r6, r1
    14ba:	a8 01       	movw	r20, r16
    14bc:	68 2d       	mov	r22, r8
    14be:	f7 01       	movw	r30, r14
    14c0:	81 91       	ld	r24, Z+
    14c2:	7f 01       	movw	r14, r30
    14c4:	0e 94 64 09 	call	0x12c8	; 0x12c8 <oled_print_char>
    14c8:	98 0c       	add	r9, r8
    14ca:	89 2d       	mov	r24, r9
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	a8 16       	cp	r10, r24
    14d0:	b9 06       	cpc	r11, r25
    14d2:	54 f4       	brge	.+20     	; 0x14e8 <oled_print_string+0x8a>
    14d4:	73 94       	inc	r7
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 05 0a 	call	0x140a	; 0x140a <oled_goto_column>
    14de:	87 2d       	mov	r24, r7
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 de 09 	call	0x13bc	; 0x13bc <oled_goto_line>
    14e6:	96 2c       	mov	r9, r6
    14e8:	21 96       	adiw	r28, 0x01	; 1
    14ea:	cc 16       	cp	r12, r28
    14ec:	dd 06       	cpc	r13, r29
    14ee:	29 f7       	brne	.-54     	; 0x14ba <oled_print_string+0x5c>
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	ff 90       	pop	r15
    14fa:	ef 90       	pop	r14
    14fc:	df 90       	pop	r13
    14fe:	cf 90       	pop	r12
    1500:	bf 90       	pop	r11
    1502:	af 90       	pop	r10
    1504:	9f 90       	pop	r9
    1506:	8f 90       	pop	r8
    1508:	7f 90       	pop	r7
    150a:	6f 90       	pop	r6
    150c:	08 95       	ret

0000150e <oled_clear_line>:
    150e:	cf 93       	push	r28
    1510:	0e 94 de 09 	call	0x13bc	; 0x13bc <oled_goto_line>
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 05 0a 	call	0x140a	; 0x140a <oled_goto_column>
    151c:	c0 e0       	ldi	r28, 0x00	; 0
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	0e 94 39 09 	call	0x1272	; 0x1272 <oled_write_data>
    1524:	cf 5f       	subi	r28, 0xFF	; 255
    1526:	c0 38       	cpi	r28, 0x80	; 128
    1528:	d1 f7       	brne	.-12     	; 0x151e <oled_clear_line+0x10>
    152a:	cf 91       	pop	r28
    152c:	08 95       	ret

0000152e <oled_clear_screen>:
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	c0 e0       	ldi	r28, 0x00	; 0
    1534:	d0 e0       	ldi	r29, 0x00	; 0
    1536:	ce 01       	movw	r24, r28
    1538:	0e 94 87 0a 	call	0x150e	; 0x150e <oled_clear_line>
    153c:	21 96       	adiw	r28, 0x01	; 1
    153e:	c8 30       	cpi	r28, 0x08	; 8
    1540:	d1 05       	cpc	r29, r1
    1542:	c9 f7       	brne	.-14     	; 0x1536 <oled_clear_screen+0x8>
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	08 95       	ret

0000154a <oled_init>:
    154a:	e0 91 6a 01 	lds	r30, 0x016A
    154e:	f0 91 6b 01 	lds	r31, 0x016B
    1552:	8e ea       	ldi	r24, 0xAE	; 174
    1554:	80 83       	st	Z, r24
    1556:	e0 91 6a 01 	lds	r30, 0x016A
    155a:	f0 91 6b 01 	lds	r31, 0x016B
    155e:	81 ea       	ldi	r24, 0xA1	; 161
    1560:	80 83       	st	Z, r24
    1562:	e0 91 6a 01 	lds	r30, 0x016A
    1566:	f0 91 6b 01 	lds	r31, 0x016B
    156a:	8a ed       	ldi	r24, 0xDA	; 218
    156c:	80 83       	st	Z, r24
    156e:	e0 91 6a 01 	lds	r30, 0x016A
    1572:	f0 91 6b 01 	lds	r31, 0x016B
    1576:	82 e1       	ldi	r24, 0x12	; 18
    1578:	80 83       	st	Z, r24
    157a:	e0 91 6a 01 	lds	r30, 0x016A
    157e:	f0 91 6b 01 	lds	r31, 0x016B
    1582:	88 ec       	ldi	r24, 0xC8	; 200
    1584:	80 83       	st	Z, r24
    1586:	e0 91 6a 01 	lds	r30, 0x016A
    158a:	f0 91 6b 01 	lds	r31, 0x016B
    158e:	88 ea       	ldi	r24, 0xA8	; 168
    1590:	80 83       	st	Z, r24
    1592:	e0 91 6a 01 	lds	r30, 0x016A
    1596:	f0 91 6b 01 	lds	r31, 0x016B
    159a:	8f e3       	ldi	r24, 0x3F	; 63
    159c:	80 83       	st	Z, r24
    159e:	e0 91 6a 01 	lds	r30, 0x016A
    15a2:	f0 91 6b 01 	lds	r31, 0x016B
    15a6:	85 ed       	ldi	r24, 0xD5	; 213
    15a8:	80 83       	st	Z, r24
    15aa:	e0 91 6a 01 	lds	r30, 0x016A
    15ae:	f0 91 6b 01 	lds	r31, 0x016B
    15b2:	80 e8       	ldi	r24, 0x80	; 128
    15b4:	80 83       	st	Z, r24
    15b6:	e0 91 6a 01 	lds	r30, 0x016A
    15ba:	f0 91 6b 01 	lds	r31, 0x016B
    15be:	81 e8       	ldi	r24, 0x81	; 129
    15c0:	80 83       	st	Z, r24
    15c2:	e0 91 6a 01 	lds	r30, 0x016A
    15c6:	f0 91 6b 01 	lds	r31, 0x016B
    15ca:	80 e5       	ldi	r24, 0x50	; 80
    15cc:	80 83       	st	Z, r24
    15ce:	e0 91 6a 01 	lds	r30, 0x016A
    15d2:	f0 91 6b 01 	lds	r31, 0x016B
    15d6:	89 ed       	ldi	r24, 0xD9	; 217
    15d8:	80 83       	st	Z, r24
    15da:	e0 91 6a 01 	lds	r30, 0x016A
    15de:	f0 91 6b 01 	lds	r31, 0x016B
    15e2:	81 e2       	ldi	r24, 0x21	; 33
    15e4:	80 83       	st	Z, r24
    15e6:	e0 91 6a 01 	lds	r30, 0x016A
    15ea:	f0 91 6b 01 	lds	r31, 0x016B
    15ee:	80 e2       	ldi	r24, 0x20	; 32
    15f0:	80 83       	st	Z, r24
    15f2:	e0 91 6a 01 	lds	r30, 0x016A
    15f6:	f0 91 6b 01 	lds	r31, 0x016B
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	80 83       	st	Z, r24
    15fe:	e0 91 6a 01 	lds	r30, 0x016A
    1602:	f0 91 6b 01 	lds	r31, 0x016B
    1606:	8b ed       	ldi	r24, 0xDB	; 219
    1608:	80 83       	st	Z, r24
    160a:	e0 91 6a 01 	lds	r30, 0x016A
    160e:	f0 91 6b 01 	lds	r31, 0x016B
    1612:	80 e3       	ldi	r24, 0x30	; 48
    1614:	80 83       	st	Z, r24
    1616:	e0 91 6a 01 	lds	r30, 0x016A
    161a:	f0 91 6b 01 	lds	r31, 0x016B
    161e:	8d ea       	ldi	r24, 0xAD	; 173
    1620:	80 83       	st	Z, r24
    1622:	e0 91 6a 01 	lds	r30, 0x016A
    1626:	f0 91 6b 01 	lds	r31, 0x016B
    162a:	10 82       	st	Z, r1
    162c:	e0 91 6a 01 	lds	r30, 0x016A
    1630:	f0 91 6b 01 	lds	r31, 0x016B
    1634:	84 ea       	ldi	r24, 0xA4	; 164
    1636:	80 83       	st	Z, r24
    1638:	e0 91 6a 01 	lds	r30, 0x016A
    163c:	f0 91 6b 01 	lds	r31, 0x016B
    1640:	86 ea       	ldi	r24, 0xA6	; 166
    1642:	80 83       	st	Z, r24
    1644:	e0 91 6a 01 	lds	r30, 0x016A
    1648:	f0 91 6b 01 	lds	r31, 0x016B
    164c:	8f ea       	ldi	r24, 0xAF	; 175
    164e:	80 83       	st	Z, r24
    1650:	0e 94 97 0a 	call	0x152e	; 0x152e <oled_clear_screen>
    1654:	08 95       	ret

00001656 <oled_refresh>:
    1656:	cf 93       	push	r28
    1658:	e0 91 6a 01 	lds	r30, 0x016A
    165c:	f0 91 6b 01 	lds	r31, 0x016B
    1660:	10 82       	st	Z, r1
    1662:	e0 91 6a 01 	lds	r30, 0x016A
    1666:	f0 91 6b 01 	lds	r31, 0x016B
    166a:	80 e1       	ldi	r24, 0x10	; 16
    166c:	80 83       	st	Z, r24
    166e:	80 91 64 01 	lds	r24, 0x0164
    1672:	90 91 65 01 	lds	r25, 0x0165
    1676:	89 2b       	or	r24, r25
    1678:	21 f1       	breq	.+72     	; 0x16c2 <oled_refresh+0x6c>
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	60 eb       	ldi	r22, 0xB0	; 176
    1680:	c0 e0       	ldi	r28, 0x00	; 0
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	e0 91 6a 01 	lds	r30, 0x016A
    1688:	f0 91 6b 01 	lds	r31, 0x016B
    168c:	60 83       	st	Z, r22
    168e:	8c 2f       	mov	r24, r28
    1690:	97 2f       	mov	r25, r23
    1692:	e0 91 66 01 	lds	r30, 0x0166
    1696:	f0 91 67 01 	lds	r31, 0x0167
    169a:	9c 01       	movw	r18, r24
    169c:	24 0f       	add	r18, r20
    169e:	35 1f       	adc	r19, r21
    16a0:	a0 91 68 01 	lds	r26, 0x0168
    16a4:	b0 91 69 01 	lds	r27, 0x0169
    16a8:	a2 0f       	add	r26, r18
    16aa:	b3 1f       	adc	r27, r19
    16ac:	2c 91       	ld	r18, X
    16ae:	20 83       	st	Z, r18
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	80 38       	cpi	r24, 0x80	; 128
    16b4:	91 05       	cpc	r25, r1
    16b6:	69 f7       	brne	.-38     	; 0x1692 <oled_refresh+0x3c>
    16b8:	6f 5f       	subi	r22, 0xFF	; 255
    16ba:	40 58       	subi	r20, 0x80	; 128
    16bc:	5f 4f       	sbci	r21, 0xFF	; 255
    16be:	68 3b       	cpi	r22, 0xB8	; 184
    16c0:	09 f7       	brne	.-62     	; 0x1684 <oled_refresh+0x2e>
    16c2:	cf 91       	pop	r28
    16c4:	08 95       	ret

000016c6 <oled_invert_pixel>:
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	eb 01       	movw	r28, r22
    16cc:	0e 94 05 0a 	call	0x140a	; 0x140a <oled_goto_column>
    16d0:	ce 01       	movw	r24, r28
    16d2:	dd 23       	and	r29, r29
    16d4:	0c f4       	brge	.+2      	; 0x16d8 <oled_invert_pixel+0x12>
    16d6:	07 96       	adiw	r24, 0x07	; 7
    16d8:	95 95       	asr	r25
    16da:	87 95       	ror	r24
    16dc:	95 95       	asr	r25
    16de:	87 95       	ror	r24
    16e0:	95 95       	asr	r25
    16e2:	87 95       	ror	r24
    16e4:	0e 94 de 09 	call	0x13bc	; 0x13bc <oled_goto_line>
    16e8:	0e 94 bf 09 	call	0x137e	; 0x137e <oled_read_data>
    16ec:	be 01       	movw	r22, r28
    16ee:	67 70       	andi	r22, 0x07	; 7
    16f0:	70 78       	andi	r23, 0x80	; 128
    16f2:	77 23       	and	r23, r23
    16f4:	34 f4       	brge	.+12     	; 0x1702 <oled_invert_pixel+0x3c>
    16f6:	61 50       	subi	r22, 0x01	; 1
    16f8:	71 09       	sbc	r23, r1
    16fa:	68 6f       	ori	r22, 0xF8	; 248
    16fc:	7f 6f       	ori	r23, 0xFF	; 255
    16fe:	6f 5f       	subi	r22, 0xFF	; 255
    1700:	7f 4f       	sbci	r23, 0xFF	; 255
    1702:	21 e0       	ldi	r18, 0x01	; 1
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	a9 01       	movw	r20, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <oled_invert_pixel+0x48>
    170a:	44 0f       	add	r20, r20
    170c:	55 1f       	adc	r21, r21
    170e:	6a 95       	dec	r22
    1710:	e2 f7       	brpl	.-8      	; 0x170a <oled_invert_pixel+0x44>
    1712:	84 27       	eor	r24, r20
    1714:	0e 94 39 09 	call	0x1272	; 0x1272 <oled_write_data>
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	08 95       	ret

0000171e <oled_invert_rectangle>:
    171e:	8f 92       	push	r8
    1720:	9f 92       	push	r9
    1722:	af 92       	push	r10
    1724:	bf 92       	push	r11
    1726:	cf 92       	push	r12
    1728:	df 92       	push	r13
    172a:	ef 92       	push	r14
    172c:	ff 92       	push	r15
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	8c 01       	movw	r16, r24
    1738:	6b 01       	movw	r12, r22
    173a:	5a 01       	movw	r10, r20
    173c:	79 01       	movw	r14, r18
    173e:	84 17       	cp	r24, r20
    1740:	95 07       	cpc	r25, r21
    1742:	b4 f4       	brge	.+44     	; 0x1770 <oled_invert_rectangle+0x52>
    1744:	86 2e       	mov	r8, r22
    1746:	9d 2c       	mov	r9, r13
    1748:	0d c0       	rjmp	.+26     	; 0x1764 <oled_invert_rectangle+0x46>
    174a:	be 01       	movw	r22, r28
    174c:	c8 01       	movw	r24, r16
    174e:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <oled_invert_pixel>
    1752:	21 96       	adiw	r28, 0x01	; 1
    1754:	ce 15       	cp	r28, r14
    1756:	df 05       	cpc	r29, r15
    1758:	c4 f3       	brlt	.-16     	; 0x174a <oled_invert_rectangle+0x2c>
    175a:	0f 5f       	subi	r16, 0xFF	; 255
    175c:	1f 4f       	sbci	r17, 0xFF	; 255
    175e:	0a 15       	cp	r16, r10
    1760:	1b 05       	cpc	r17, r11
    1762:	34 f4       	brge	.+12     	; 0x1770 <oled_invert_rectangle+0x52>
    1764:	ce 14       	cp	r12, r14
    1766:	df 04       	cpc	r13, r15
    1768:	c4 f7       	brge	.-16     	; 0x175a <oled_invert_rectangle+0x3c>
    176a:	c8 2d       	mov	r28, r8
    176c:	d9 2d       	mov	r29, r9
    176e:	ed cf       	rjmp	.-38     	; 0x174a <oled_invert_rectangle+0x2c>
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	ff 90       	pop	r15
    177a:	ef 90       	pop	r14
    177c:	df 90       	pop	r13
    177e:	cf 90       	pop	r12
    1780:	bf 90       	pop	r11
    1782:	af 90       	pop	r10
    1784:	9f 90       	pop	r9
    1786:	8f 90       	pop	r8
    1788:	08 95       	ret

0000178a <spi_master_init>:

#include "spi.h"

void spi_master_init(int node)
{
	if (node == NODE_1){
    178a:	81 30       	cpi	r24, 0x01	; 1
    178c:	91 05       	cpc	r25, r1
    178e:	41 f4       	brne	.+16     	; 0x17a0 <spi_master_init+0x16>
		DDRB |= (1<<DDB4)|(1<<DDB5)|(1<<DDB7); //Set MOSI and SCK output, all others input
    1790:	87 b3       	in	r24, 0x17	; 23
    1792:	80 6b       	ori	r24, 0xB0	; 176
    1794:	87 bb       	out	0x17, r24	; 23
		DDRB &= ~(1 << DDB6);
    1796:	be 98       	cbi	0x17, 6	; 23

		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X); //Enable SPI, Master, set clock rate fck/16
    1798:	81 e5       	ldi	r24, 0x51	; 81
    179a:	8d b9       	out	0x0d, r24	; 13
		set_bit(PORTB,PB4); //Disable chip
    179c:	c4 9a       	sbi	0x18, 4	; 24
    179e:	08 95       	ret
	}
	else if (node == NODE_2){
    17a0:	02 97       	sbiw	r24, 0x02	; 2
    17a2:	39 f4       	brne	.+14     	; 0x17b2 <spi_master_init+0x28>
		//Without setting PB0 as an output printf doesn|t work!?!?!?!?
		DDRB |= (1<<PB0)|(1 << PB1)|(1 << PB2)|(1 << PB7); //Set MOSI, SS and SCK output, all others input
    17a4:	87 b3       	in	r24, 0x17	; 23
    17a6:	87 68       	ori	r24, 0x87	; 135
    17a8:	87 bb       	out	0x17, r24	; 23
		DDRB &= ~(1 << PB3); //DO NOT TINK IS NECCSCAS RYTSR:
    17aa:	bb 98       	cbi	0x17, 3	; 23

		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); //Enable SPI, Master, set clock rate fck/16
    17ac:	81 e5       	ldi	r24, 0x51	; 81
    17ae:	8d b9       	out	0x0d, r24	; 13
		set_bit(PORTB,PB7); //Disable chip
    17b0:	c7 9a       	sbi	0x18, 7	; 24
    17b2:	08 95       	ret

000017b4 <spi_master_transmit>:
	}
}

char spi_master_transmit(char cData)
{
	SPDR = cData; //Start transmission
    17b4:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))); //Wait for transmission complete	
    17b6:	77 9b       	sbis	0x0e, 7	; 14
    17b8:	fe cf       	rjmp	.-4      	; 0x17b6 <spi_master_transmit+0x2>
	return SPDR;
    17ba:	8f b1       	in	r24, 0x0f	; 15
}
    17bc:	08 95       	ret

000017be <touch_init>:
    17be:	b8 98       	cbi	0x17, 0	; 23
    17c0:	b9 98       	cbi	0x17, 1	; 23
    17c2:	08 95       	ret

000017c4 <uart_putchar>:
	UCSR0C = (((node == NODE_1)<<URSEL0)|(1<<USBS0)|(3<<UCSZ00)); //Set frame format: 2 stop bits, 8 data bits //Asynchronous - No parity //URSEL makes sure we won't access UBRRH during operation, but UCSRC. //URSEL should not be set in node 2
	fdevopen(uart_putchar, uart_getchar);
}

void uart_putchar(char c){
	while (!( UCSR0A & (1<<UDRE0))); //Wait for empty transmit buffer
    17c4:	5d 9b       	sbis	0x0b, 5	; 11
    17c6:	fe cf       	rjmp	.-4      	; 0x17c4 <uart_putchar>
	UDR0 = c; //Put data into buffer, sends the data
    17c8:	8c b9       	out	0x0c, r24	; 12
    17ca:	08 95       	ret

000017cc <uart_getchar>:
}

unsigned char uart_getchar(){
	while (!( UCSR0A & (1<<RXC0)));
    17cc:	5f 9b       	sbis	0x0b, 7	; 11
    17ce:	fe cf       	rjmp	.-4      	; 0x17cc <uart_getchar>
	return UDR0;
    17d0:	8c b1       	in	r24, 0x0c	; 12
    17d2:	08 95       	ret

000017d4 <uart_init>:
#include <avr/io.h>
#include <stdio.h>

#include "uart.h"

void uart_init(int baudRate, int node){
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	eb 01       	movw	r28, r22
	int UBRR = ((long)F_CPU/((long)16*baudRate) - 1);
    17da:	aa 27       	eor	r26, r26
    17dc:	97 fd       	sbrc	r25, 7
    17de:	a0 95       	com	r26
    17e0:	ba 2f       	mov	r27, r26
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	aa 1f       	adc	r26, r26
    17e8:	bb 1f       	adc	r27, r27
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	aa 1f       	adc	r26, r26
    17f0:	bb 1f       	adc	r27, r27
    17f2:	9c 01       	movw	r18, r24
    17f4:	ad 01       	movw	r20, r26
    17f6:	22 0f       	add	r18, r18
    17f8:	33 1f       	adc	r19, r19
    17fa:	44 1f       	adc	r20, r20
    17fc:	55 1f       	adc	r21, r21
    17fe:	22 0f       	add	r18, r18
    1800:	33 1f       	adc	r19, r19
    1802:	44 1f       	adc	r20, r20
    1804:	55 1f       	adc	r21, r21
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	8b e4       	ldi	r24, 0x4B	; 75
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__divmodsi4>
    1812:	21 50       	subi	r18, 0x01	; 1
    1814:	31 09       	sbc	r19, r1
	UBRR0L = UBRR;
    1816:	29 b9       	out	0x09, r18	; 9
    UBRR0H = (UBRR>>8);
    1818:	30 bd       	out	0x20, r19	; 32
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); //Enable receiver and transmitter 
    181a:	88 e1       	ldi	r24, 0x18	; 24
    181c:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (((node == NODE_1)<<URSEL0)|(1<<USBS0)|(3<<UCSZ00)); //Set frame format: 2 stop bits, 8 data bits //Asynchronous - No parity //URSEL makes sure we won't access UBRRH during operation, but UCSRC. //URSEL should not be set in node 2
    181e:	21 97       	sbiw	r28, 0x01	; 1
    1820:	11 f4       	brne	.+4      	; 0x1826 <uart_init+0x52>
    1822:	8e e8       	ldi	r24, 0x8E	; 142
    1824:	01 c0       	rjmp	.+2      	; 0x1828 <uart_init+0x54>
    1826:	8e e0       	ldi	r24, 0x0E	; 14
    1828:	80 bd       	out	0x20, r24	; 32
	fdevopen(uart_putchar, uart_getchar);
    182a:	66 ee       	ldi	r22, 0xE6	; 230
    182c:	7b e0       	ldi	r23, 0x0B	; 11
    182e:	82 ee       	ldi	r24, 0xE2	; 226
    1830:	9b e0       	ldi	r25, 0x0B	; 11
    1832:	0e 94 58 11 	call	0x22b0	; 0x22b0 <fdevopen>
}
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	08 95       	ret
    183c:	63 d1       	rcall	.+710    	; 0x1b04 <__fp_pscA>
    183e:	58 f0       	brcs	.+22     	; 0x1856 <uart_init+0x82>
    1840:	80 e8       	ldi	r24, 0x80	; 128
    1842:	91 e0       	ldi	r25, 0x01	; 1
    1844:	09 f4       	brne	.+2      	; 0x1848 <uart_init+0x74>
    1846:	9e ef       	ldi	r25, 0xFE	; 254
    1848:	64 d1       	rcall	.+712    	; 0x1b12 <__fp_pscB>
    184a:	28 f0       	brcs	.+10     	; 0x1856 <uart_init+0x82>
    184c:	40 e8       	ldi	r20, 0x80	; 128
    184e:	51 e0       	ldi	r21, 0x01	; 1
    1850:	59 f4       	brne	.+22     	; 0x1868 <atan2+0xe>
    1852:	5e ef       	ldi	r21, 0xFE	; 254
    1854:	09 c0       	rjmp	.+18     	; 0x1868 <atan2+0xe>
    1856:	2e c1       	rjmp	.+604    	; 0x1ab4 <__fp_nan>
    1858:	96 c1       	rjmp	.+812    	; 0x1b86 <__fp_zero>

0000185a <atan2>:
    185a:	e9 2f       	mov	r30, r25
    185c:	e0 78       	andi	r30, 0x80	; 128
    185e:	71 d1       	rcall	.+738    	; 0x1b42 <__fp_split3>
    1860:	68 f3       	brcs	.-38     	; 0x183c <uart_init+0x68>
    1862:	09 2e       	mov	r0, r25
    1864:	05 2a       	or	r0, r21
    1866:	c1 f3       	breq	.-16     	; 0x1858 <uart_init+0x84>
    1868:	26 17       	cp	r18, r22
    186a:	37 07       	cpc	r19, r23
    186c:	48 07       	cpc	r20, r24
    186e:	59 07       	cpc	r21, r25
    1870:	38 f0       	brcs	.+14     	; 0x1880 <atan2+0x26>
    1872:	0e 2e       	mov	r0, r30
    1874:	07 f8       	bld	r0, 7
    1876:	e0 25       	eor	r30, r0
    1878:	69 f0       	breq	.+26     	; 0x1894 <atan2+0x3a>
    187a:	e0 25       	eor	r30, r0
    187c:	e0 64       	ori	r30, 0x40	; 64
    187e:	0a c0       	rjmp	.+20     	; 0x1894 <atan2+0x3a>
    1880:	ef 63       	ori	r30, 0x3F	; 63
    1882:	07 f8       	bld	r0, 7
    1884:	00 94       	com	r0
    1886:	07 fa       	bst	r0, 7
    1888:	db 01       	movw	r26, r22
    188a:	b9 01       	movw	r22, r18
    188c:	9d 01       	movw	r18, r26
    188e:	dc 01       	movw	r26, r24
    1890:	ca 01       	movw	r24, r20
    1892:	ad 01       	movw	r20, r26
    1894:	ef 93       	push	r30
    1896:	41 d0       	rcall	.+130    	; 0x191a <__divsf3_pse>
    1898:	43 d1       	rcall	.+646    	; 0x1b20 <__fp_round>
    189a:	0a d0       	rcall	.+20     	; 0x18b0 <atan>
    189c:	5f 91       	pop	r21
    189e:	55 23       	and	r21, r21
    18a0:	31 f0       	breq	.+12     	; 0x18ae <atan2+0x54>
    18a2:	2b ed       	ldi	r18, 0xDB	; 219
    18a4:	3f e0       	ldi	r19, 0x0F	; 15
    18a6:	49 e4       	ldi	r20, 0x49	; 73
    18a8:	50 fd       	sbrc	r21, 0
    18aa:	49 ec       	ldi	r20, 0xC9	; 201
    18ac:	23 c2       	rjmp	.+1094   	; 0x1cf4 <__addsf3>
    18ae:	08 95       	ret

000018b0 <atan>:
    18b0:	df 93       	push	r29
    18b2:	dd 27       	eor	r29, r29
    18b4:	b9 2f       	mov	r27, r25
    18b6:	bf 77       	andi	r27, 0x7F	; 127
    18b8:	40 e8       	ldi	r20, 0x80	; 128
    18ba:	5f e3       	ldi	r21, 0x3F	; 63
    18bc:	16 16       	cp	r1, r22
    18be:	17 06       	cpc	r1, r23
    18c0:	48 07       	cpc	r20, r24
    18c2:	5b 07       	cpc	r21, r27
    18c4:	10 f4       	brcc	.+4      	; 0x18ca <atan+0x1a>
    18c6:	d9 2f       	mov	r29, r25
    18c8:	65 d1       	rcall	.+714    	; 0x1b94 <inverse>
    18ca:	9f 93       	push	r25
    18cc:	8f 93       	push	r24
    18ce:	7f 93       	push	r23
    18d0:	6f 93       	push	r22
    18d2:	0c d2       	rcall	.+1048   	; 0x1cec <square>
    18d4:	e0 e7       	ldi	r30, 0x70	; 112
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	f0 d0       	rcall	.+480    	; 0x1aba <__fp_powser>
    18da:	22 d1       	rcall	.+580    	; 0x1b20 <__fp_round>
    18dc:	2f 91       	pop	r18
    18de:	3f 91       	pop	r19
    18e0:	4f 91       	pop	r20
    18e2:	5f 91       	pop	r21
    18e4:	6a d1       	rcall	.+724    	; 0x1bba <__mulsf3x>
    18e6:	dd 23       	and	r29, r29
    18e8:	49 f0       	breq	.+18     	; 0x18fc <atan+0x4c>
    18ea:	90 58       	subi	r25, 0x80	; 128
    18ec:	a2 ea       	ldi	r26, 0xA2	; 162
    18ee:	2a ed       	ldi	r18, 0xDA	; 218
    18f0:	3f e0       	ldi	r19, 0x0F	; 15
    18f2:	49 ec       	ldi	r20, 0xC9	; 201
    18f4:	5f e3       	ldi	r21, 0x3F	; 63
    18f6:	d0 78       	andi	r29, 0x80	; 128
    18f8:	5d 27       	eor	r21, r29
    18fa:	0d d2       	rcall	.+1050   	; 0x1d16 <__addsf3x>
    18fc:	df 91       	pop	r29
    18fe:	10 c1       	rjmp	.+544    	; 0x1b20 <__fp_round>
    1900:	08 d1       	rcall	.+528    	; 0x1b12 <__fp_pscB>
    1902:	40 f0       	brcs	.+16     	; 0x1914 <atan+0x64>
    1904:	ff d0       	rcall	.+510    	; 0x1b04 <__fp_pscA>
    1906:	30 f0       	brcs	.+12     	; 0x1914 <atan+0x64>
    1908:	21 f4       	brne	.+8      	; 0x1912 <atan+0x62>
    190a:	5f 3f       	cpi	r21, 0xFF	; 255
    190c:	19 f0       	breq	.+6      	; 0x1914 <atan+0x64>
    190e:	cc c0       	rjmp	.+408    	; 0x1aa8 <__fp_inf>
    1910:	51 11       	cpse	r21, r1
    1912:	3a c1       	rjmp	.+628    	; 0x1b88 <__fp_szero>
    1914:	cf c0       	rjmp	.+414    	; 0x1ab4 <__fp_nan>

00001916 <__divsf3x>:
    1916:	15 d1       	rcall	.+554    	; 0x1b42 <__fp_split3>
    1918:	98 f3       	brcs	.-26     	; 0x1900 <atan+0x50>

0000191a <__divsf3_pse>:
    191a:	99 23       	and	r25, r25
    191c:	c9 f3       	breq	.-14     	; 0x1910 <atan+0x60>
    191e:	55 23       	and	r21, r21
    1920:	b1 f3       	breq	.-20     	; 0x190e <atan+0x5e>
    1922:	95 1b       	sub	r25, r21
    1924:	55 0b       	sbc	r21, r21
    1926:	bb 27       	eor	r27, r27
    1928:	aa 27       	eor	r26, r26
    192a:	62 17       	cp	r22, r18
    192c:	73 07       	cpc	r23, r19
    192e:	84 07       	cpc	r24, r20
    1930:	38 f0       	brcs	.+14     	; 0x1940 <__divsf3_pse+0x26>
    1932:	9f 5f       	subi	r25, 0xFF	; 255
    1934:	5f 4f       	sbci	r21, 0xFF	; 255
    1936:	22 0f       	add	r18, r18
    1938:	33 1f       	adc	r19, r19
    193a:	44 1f       	adc	r20, r20
    193c:	aa 1f       	adc	r26, r26
    193e:	a9 f3       	breq	.-22     	; 0x192a <__divsf3_pse+0x10>
    1940:	33 d0       	rcall	.+102    	; 0x19a8 <__divsf3_pse+0x8e>
    1942:	0e 2e       	mov	r0, r30
    1944:	3a f0       	brmi	.+14     	; 0x1954 <__divsf3_pse+0x3a>
    1946:	e0 e8       	ldi	r30, 0x80	; 128
    1948:	30 d0       	rcall	.+96     	; 0x19aa <__divsf3_pse+0x90>
    194a:	91 50       	subi	r25, 0x01	; 1
    194c:	50 40       	sbci	r21, 0x00	; 0
    194e:	e6 95       	lsr	r30
    1950:	00 1c       	adc	r0, r0
    1952:	ca f7       	brpl	.-14     	; 0x1946 <__divsf3_pse+0x2c>
    1954:	29 d0       	rcall	.+82     	; 0x19a8 <__divsf3_pse+0x8e>
    1956:	fe 2f       	mov	r31, r30
    1958:	27 d0       	rcall	.+78     	; 0x19a8 <__divsf3_pse+0x8e>
    195a:	66 0f       	add	r22, r22
    195c:	77 1f       	adc	r23, r23
    195e:	88 1f       	adc	r24, r24
    1960:	bb 1f       	adc	r27, r27
    1962:	26 17       	cp	r18, r22
    1964:	37 07       	cpc	r19, r23
    1966:	48 07       	cpc	r20, r24
    1968:	ab 07       	cpc	r26, r27
    196a:	b0 e8       	ldi	r27, 0x80	; 128
    196c:	09 f0       	breq	.+2      	; 0x1970 <__divsf3_pse+0x56>
    196e:	bb 0b       	sbc	r27, r27
    1970:	80 2d       	mov	r24, r0
    1972:	bf 01       	movw	r22, r30
    1974:	ff 27       	eor	r31, r31
    1976:	93 58       	subi	r25, 0x83	; 131
    1978:	5f 4f       	sbci	r21, 0xFF	; 255
    197a:	2a f0       	brmi	.+10     	; 0x1986 <__divsf3_pse+0x6c>
    197c:	9e 3f       	cpi	r25, 0xFE	; 254
    197e:	51 05       	cpc	r21, r1
    1980:	68 f0       	brcs	.+26     	; 0x199c <__divsf3_pse+0x82>
    1982:	92 c0       	rjmp	.+292    	; 0x1aa8 <__fp_inf>
    1984:	01 c1       	rjmp	.+514    	; 0x1b88 <__fp_szero>
    1986:	5f 3f       	cpi	r21, 0xFF	; 255
    1988:	ec f3       	brlt	.-6      	; 0x1984 <__divsf3_pse+0x6a>
    198a:	98 3e       	cpi	r25, 0xE8	; 232
    198c:	dc f3       	brlt	.-10     	; 0x1984 <__divsf3_pse+0x6a>
    198e:	86 95       	lsr	r24
    1990:	77 95       	ror	r23
    1992:	67 95       	ror	r22
    1994:	b7 95       	ror	r27
    1996:	f7 95       	ror	r31
    1998:	9f 5f       	subi	r25, 0xFF	; 255
    199a:	c9 f7       	brne	.-14     	; 0x198e <__divsf3_pse+0x74>
    199c:	88 0f       	add	r24, r24
    199e:	91 1d       	adc	r25, r1
    19a0:	96 95       	lsr	r25
    19a2:	87 95       	ror	r24
    19a4:	97 f9       	bld	r25, 7
    19a6:	08 95       	ret
    19a8:	e1 e0       	ldi	r30, 0x01	; 1
    19aa:	66 0f       	add	r22, r22
    19ac:	77 1f       	adc	r23, r23
    19ae:	88 1f       	adc	r24, r24
    19b0:	bb 1f       	adc	r27, r27
    19b2:	62 17       	cp	r22, r18
    19b4:	73 07       	cpc	r23, r19
    19b6:	84 07       	cpc	r24, r20
    19b8:	ba 07       	cpc	r27, r26
    19ba:	20 f0       	brcs	.+8      	; 0x19c4 <__divsf3_pse+0xaa>
    19bc:	62 1b       	sub	r22, r18
    19be:	73 0b       	sbc	r23, r19
    19c0:	84 0b       	sbc	r24, r20
    19c2:	ba 0b       	sbc	r27, r26
    19c4:	ee 1f       	adc	r30, r30
    19c6:	88 f7       	brcc	.-30     	; 0x19aa <__divsf3_pse+0x90>
    19c8:	e0 95       	com	r30
    19ca:	08 95       	ret

000019cc <__fixsfsi>:
    19cc:	04 d0       	rcall	.+8      	; 0x19d6 <__fixunssfsi>
    19ce:	68 94       	set
    19d0:	b1 11       	cpse	r27, r1
    19d2:	da c0       	rjmp	.+436    	; 0x1b88 <__fp_szero>
    19d4:	08 95       	ret

000019d6 <__fixunssfsi>:
    19d6:	bd d0       	rcall	.+378    	; 0x1b52 <__fp_splitA>
    19d8:	88 f0       	brcs	.+34     	; 0x19fc <__fixunssfsi+0x26>
    19da:	9f 57       	subi	r25, 0x7F	; 127
    19dc:	90 f0       	brcs	.+36     	; 0x1a02 <__fixunssfsi+0x2c>
    19de:	b9 2f       	mov	r27, r25
    19e0:	99 27       	eor	r25, r25
    19e2:	b7 51       	subi	r27, 0x17	; 23
    19e4:	a0 f0       	brcs	.+40     	; 0x1a0e <__fixunssfsi+0x38>
    19e6:	d1 f0       	breq	.+52     	; 0x1a1c <__fixunssfsi+0x46>
    19e8:	66 0f       	add	r22, r22
    19ea:	77 1f       	adc	r23, r23
    19ec:	88 1f       	adc	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	1a f0       	brmi	.+6      	; 0x19f8 <__fixunssfsi+0x22>
    19f2:	ba 95       	dec	r27
    19f4:	c9 f7       	brne	.-14     	; 0x19e8 <__fixunssfsi+0x12>
    19f6:	12 c0       	rjmp	.+36     	; 0x1a1c <__fixunssfsi+0x46>
    19f8:	b1 30       	cpi	r27, 0x01	; 1
    19fa:	81 f0       	breq	.+32     	; 0x1a1c <__fixunssfsi+0x46>
    19fc:	c4 d0       	rcall	.+392    	; 0x1b86 <__fp_zero>
    19fe:	b1 e0       	ldi	r27, 0x01	; 1
    1a00:	08 95       	ret
    1a02:	c1 c0       	rjmp	.+386    	; 0x1b86 <__fp_zero>
    1a04:	67 2f       	mov	r22, r23
    1a06:	78 2f       	mov	r23, r24
    1a08:	88 27       	eor	r24, r24
    1a0a:	b8 5f       	subi	r27, 0xF8	; 248
    1a0c:	39 f0       	breq	.+14     	; 0x1a1c <__fixunssfsi+0x46>
    1a0e:	b9 3f       	cpi	r27, 0xF9	; 249
    1a10:	cc f3       	brlt	.-14     	; 0x1a04 <__fixunssfsi+0x2e>
    1a12:	86 95       	lsr	r24
    1a14:	77 95       	ror	r23
    1a16:	67 95       	ror	r22
    1a18:	b3 95       	inc	r27
    1a1a:	d9 f7       	brne	.-10     	; 0x1a12 <__fixunssfsi+0x3c>
    1a1c:	3e f4       	brtc	.+14     	; 0x1a2c <__fixunssfsi+0x56>
    1a1e:	90 95       	com	r25
    1a20:	80 95       	com	r24
    1a22:	70 95       	com	r23
    1a24:	61 95       	neg	r22
    1a26:	7f 4f       	sbci	r23, 0xFF	; 255
    1a28:	8f 4f       	sbci	r24, 0xFF	; 255
    1a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2c:	08 95       	ret

00001a2e <__floatunsisf>:
    1a2e:	e8 94       	clt
    1a30:	09 c0       	rjmp	.+18     	; 0x1a44 <__floatsisf+0x12>

00001a32 <__floatsisf>:
    1a32:	97 fb       	bst	r25, 7
    1a34:	3e f4       	brtc	.+14     	; 0x1a44 <__floatsisf+0x12>
    1a36:	90 95       	com	r25
    1a38:	80 95       	com	r24
    1a3a:	70 95       	com	r23
    1a3c:	61 95       	neg	r22
    1a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a40:	8f 4f       	sbci	r24, 0xFF	; 255
    1a42:	9f 4f       	sbci	r25, 0xFF	; 255
    1a44:	99 23       	and	r25, r25
    1a46:	a9 f0       	breq	.+42     	; 0x1a72 <__floatsisf+0x40>
    1a48:	f9 2f       	mov	r31, r25
    1a4a:	96 e9       	ldi	r25, 0x96	; 150
    1a4c:	bb 27       	eor	r27, r27
    1a4e:	93 95       	inc	r25
    1a50:	f6 95       	lsr	r31
    1a52:	87 95       	ror	r24
    1a54:	77 95       	ror	r23
    1a56:	67 95       	ror	r22
    1a58:	b7 95       	ror	r27
    1a5a:	f1 11       	cpse	r31, r1
    1a5c:	f8 cf       	rjmp	.-16     	; 0x1a4e <__floatsisf+0x1c>
    1a5e:	fa f4       	brpl	.+62     	; 0x1a9e <__floatsisf+0x6c>
    1a60:	bb 0f       	add	r27, r27
    1a62:	11 f4       	brne	.+4      	; 0x1a68 <__floatsisf+0x36>
    1a64:	60 ff       	sbrs	r22, 0
    1a66:	1b c0       	rjmp	.+54     	; 0x1a9e <__floatsisf+0x6c>
    1a68:	6f 5f       	subi	r22, 0xFF	; 255
    1a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a70:	16 c0       	rjmp	.+44     	; 0x1a9e <__floatsisf+0x6c>
    1a72:	88 23       	and	r24, r24
    1a74:	11 f0       	breq	.+4      	; 0x1a7a <__floatsisf+0x48>
    1a76:	96 e9       	ldi	r25, 0x96	; 150
    1a78:	11 c0       	rjmp	.+34     	; 0x1a9c <__floatsisf+0x6a>
    1a7a:	77 23       	and	r23, r23
    1a7c:	21 f0       	breq	.+8      	; 0x1a86 <__floatsisf+0x54>
    1a7e:	9e e8       	ldi	r25, 0x8E	; 142
    1a80:	87 2f       	mov	r24, r23
    1a82:	76 2f       	mov	r23, r22
    1a84:	05 c0       	rjmp	.+10     	; 0x1a90 <__floatsisf+0x5e>
    1a86:	66 23       	and	r22, r22
    1a88:	71 f0       	breq	.+28     	; 0x1aa6 <__floatsisf+0x74>
    1a8a:	96 e8       	ldi	r25, 0x86	; 134
    1a8c:	86 2f       	mov	r24, r22
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	2a f0       	brmi	.+10     	; 0x1a9e <__floatsisf+0x6c>
    1a94:	9a 95       	dec	r25
    1a96:	66 0f       	add	r22, r22
    1a98:	77 1f       	adc	r23, r23
    1a9a:	88 1f       	adc	r24, r24
    1a9c:	da f7       	brpl	.-10     	; 0x1a94 <__floatsisf+0x62>
    1a9e:	88 0f       	add	r24, r24
    1aa0:	96 95       	lsr	r25
    1aa2:	87 95       	ror	r24
    1aa4:	97 f9       	bld	r25, 7
    1aa6:	08 95       	ret

00001aa8 <__fp_inf>:
    1aa8:	97 f9       	bld	r25, 7
    1aaa:	9f 67       	ori	r25, 0x7F	; 127
    1aac:	80 e8       	ldi	r24, 0x80	; 128
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	60 e0       	ldi	r22, 0x00	; 0
    1ab2:	08 95       	ret

00001ab4 <__fp_nan>:
    1ab4:	9f ef       	ldi	r25, 0xFF	; 255
    1ab6:	80 ec       	ldi	r24, 0xC0	; 192
    1ab8:	08 95       	ret

00001aba <__fp_powser>:
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	1f 93       	push	r17
    1ac0:	0f 93       	push	r16
    1ac2:	ff 92       	push	r15
    1ac4:	ef 92       	push	r14
    1ac6:	df 92       	push	r13
    1ac8:	7b 01       	movw	r14, r22
    1aca:	8c 01       	movw	r16, r24
    1acc:	68 94       	set
    1ace:	05 c0       	rjmp	.+10     	; 0x1ada <__fp_powser+0x20>
    1ad0:	da 2e       	mov	r13, r26
    1ad2:	ef 01       	movw	r28, r30
    1ad4:	72 d0       	rcall	.+228    	; 0x1bba <__mulsf3x>
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e8 94       	clt
    1ada:	a5 91       	lpm	r26, Z+
    1adc:	25 91       	lpm	r18, Z+
    1ade:	35 91       	lpm	r19, Z+
    1ae0:	45 91       	lpm	r20, Z+
    1ae2:	55 91       	lpm	r21, Z+
    1ae4:	ae f3       	brts	.-22     	; 0x1ad0 <__fp_powser+0x16>
    1ae6:	ef 01       	movw	r28, r30
    1ae8:	16 d1       	rcall	.+556    	; 0x1d16 <__addsf3x>
    1aea:	fe 01       	movw	r30, r28
    1aec:	97 01       	movw	r18, r14
    1aee:	a8 01       	movw	r20, r16
    1af0:	da 94       	dec	r13
    1af2:	79 f7       	brne	.-34     	; 0x1ad2 <__fp_powser+0x18>
    1af4:	df 90       	pop	r13
    1af6:	ef 90       	pop	r14
    1af8:	ff 90       	pop	r15
    1afa:	0f 91       	pop	r16
    1afc:	1f 91       	pop	r17
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <__fp_pscA>:
    1b04:	00 24       	eor	r0, r0
    1b06:	0a 94       	dec	r0
    1b08:	16 16       	cp	r1, r22
    1b0a:	17 06       	cpc	r1, r23
    1b0c:	18 06       	cpc	r1, r24
    1b0e:	09 06       	cpc	r0, r25
    1b10:	08 95       	ret

00001b12 <__fp_pscB>:
    1b12:	00 24       	eor	r0, r0
    1b14:	0a 94       	dec	r0
    1b16:	12 16       	cp	r1, r18
    1b18:	13 06       	cpc	r1, r19
    1b1a:	14 06       	cpc	r1, r20
    1b1c:	05 06       	cpc	r0, r21
    1b1e:	08 95       	ret

00001b20 <__fp_round>:
    1b20:	09 2e       	mov	r0, r25
    1b22:	03 94       	inc	r0
    1b24:	00 0c       	add	r0, r0
    1b26:	11 f4       	brne	.+4      	; 0x1b2c <__fp_round+0xc>
    1b28:	88 23       	and	r24, r24
    1b2a:	52 f0       	brmi	.+20     	; 0x1b40 <__fp_round+0x20>
    1b2c:	bb 0f       	add	r27, r27
    1b2e:	40 f4       	brcc	.+16     	; 0x1b40 <__fp_round+0x20>
    1b30:	bf 2b       	or	r27, r31
    1b32:	11 f4       	brne	.+4      	; 0x1b38 <__fp_round+0x18>
    1b34:	60 ff       	sbrs	r22, 0
    1b36:	04 c0       	rjmp	.+8      	; 0x1b40 <__fp_round+0x20>
    1b38:	6f 5f       	subi	r22, 0xFF	; 255
    1b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b40:	08 95       	ret

00001b42 <__fp_split3>:
    1b42:	57 fd       	sbrc	r21, 7
    1b44:	90 58       	subi	r25, 0x80	; 128
    1b46:	44 0f       	add	r20, r20
    1b48:	55 1f       	adc	r21, r21
    1b4a:	59 f0       	breq	.+22     	; 0x1b62 <__fp_splitA+0x10>
    1b4c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b4e:	71 f0       	breq	.+28     	; 0x1b6c <__fp_splitA+0x1a>
    1b50:	47 95       	ror	r20

00001b52 <__fp_splitA>:
    1b52:	88 0f       	add	r24, r24
    1b54:	97 fb       	bst	r25, 7
    1b56:	99 1f       	adc	r25, r25
    1b58:	61 f0       	breq	.+24     	; 0x1b72 <__fp_splitA+0x20>
    1b5a:	9f 3f       	cpi	r25, 0xFF	; 255
    1b5c:	79 f0       	breq	.+30     	; 0x1b7c <__fp_splitA+0x2a>
    1b5e:	87 95       	ror	r24
    1b60:	08 95       	ret
    1b62:	12 16       	cp	r1, r18
    1b64:	13 06       	cpc	r1, r19
    1b66:	14 06       	cpc	r1, r20
    1b68:	55 1f       	adc	r21, r21
    1b6a:	f2 cf       	rjmp	.-28     	; 0x1b50 <__fp_split3+0xe>
    1b6c:	46 95       	lsr	r20
    1b6e:	f1 df       	rcall	.-30     	; 0x1b52 <__fp_splitA>
    1b70:	08 c0       	rjmp	.+16     	; 0x1b82 <__fp_splitA+0x30>
    1b72:	16 16       	cp	r1, r22
    1b74:	17 06       	cpc	r1, r23
    1b76:	18 06       	cpc	r1, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	f1 cf       	rjmp	.-30     	; 0x1b5e <__fp_splitA+0xc>
    1b7c:	86 95       	lsr	r24
    1b7e:	71 05       	cpc	r23, r1
    1b80:	61 05       	cpc	r22, r1
    1b82:	08 94       	sec
    1b84:	08 95       	ret

00001b86 <__fp_zero>:
    1b86:	e8 94       	clt

00001b88 <__fp_szero>:
    1b88:	bb 27       	eor	r27, r27
    1b8a:	66 27       	eor	r22, r22
    1b8c:	77 27       	eor	r23, r23
    1b8e:	cb 01       	movw	r24, r22
    1b90:	97 f9       	bld	r25, 7
    1b92:	08 95       	ret

00001b94 <inverse>:
    1b94:	9b 01       	movw	r18, r22
    1b96:	ac 01       	movw	r20, r24
    1b98:	60 e0       	ldi	r22, 0x00	; 0
    1b9a:	70 e0       	ldi	r23, 0x00	; 0
    1b9c:	80 e8       	ldi	r24, 0x80	; 128
    1b9e:	9f e3       	ldi	r25, 0x3F	; 63
    1ba0:	0d c1       	rjmp	.+538    	; 0x1dbc <__divsf3>

00001ba2 <__mulsf3>:
    1ba2:	0b d0       	rcall	.+22     	; 0x1bba <__mulsf3x>
    1ba4:	bd cf       	rjmp	.-134    	; 0x1b20 <__fp_round>
    1ba6:	ae df       	rcall	.-164    	; 0x1b04 <__fp_pscA>
    1ba8:	28 f0       	brcs	.+10     	; 0x1bb4 <__mulsf3+0x12>
    1baa:	b3 df       	rcall	.-154    	; 0x1b12 <__fp_pscB>
    1bac:	18 f0       	brcs	.+6      	; 0x1bb4 <__mulsf3+0x12>
    1bae:	95 23       	and	r25, r21
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <__mulsf3+0x12>
    1bb2:	7a cf       	rjmp	.-268    	; 0x1aa8 <__fp_inf>
    1bb4:	7f cf       	rjmp	.-258    	; 0x1ab4 <__fp_nan>
    1bb6:	11 24       	eor	r1, r1
    1bb8:	e7 cf       	rjmp	.-50     	; 0x1b88 <__fp_szero>

00001bba <__mulsf3x>:
    1bba:	c3 df       	rcall	.-122    	; 0x1b42 <__fp_split3>
    1bbc:	a0 f3       	brcs	.-24     	; 0x1ba6 <__mulsf3+0x4>

00001bbe <__mulsf3_pse>:
    1bbe:	95 9f       	mul	r25, r21
    1bc0:	d1 f3       	breq	.-12     	; 0x1bb6 <__mulsf3+0x14>
    1bc2:	95 0f       	add	r25, r21
    1bc4:	50 e0       	ldi	r21, 0x00	; 0
    1bc6:	55 1f       	adc	r21, r21
    1bc8:	62 9f       	mul	r22, r18
    1bca:	f0 01       	movw	r30, r0
    1bcc:	72 9f       	mul	r23, r18
    1bce:	bb 27       	eor	r27, r27
    1bd0:	f0 0d       	add	r31, r0
    1bd2:	b1 1d       	adc	r27, r1
    1bd4:	63 9f       	mul	r22, r19
    1bd6:	aa 27       	eor	r26, r26
    1bd8:	f0 0d       	add	r31, r0
    1bda:	b1 1d       	adc	r27, r1
    1bdc:	aa 1f       	adc	r26, r26
    1bde:	64 9f       	mul	r22, r20
    1be0:	66 27       	eor	r22, r22
    1be2:	b0 0d       	add	r27, r0
    1be4:	a1 1d       	adc	r26, r1
    1be6:	66 1f       	adc	r22, r22
    1be8:	82 9f       	mul	r24, r18
    1bea:	22 27       	eor	r18, r18
    1bec:	b0 0d       	add	r27, r0
    1bee:	a1 1d       	adc	r26, r1
    1bf0:	62 1f       	adc	r22, r18
    1bf2:	73 9f       	mul	r23, r19
    1bf4:	b0 0d       	add	r27, r0
    1bf6:	a1 1d       	adc	r26, r1
    1bf8:	62 1f       	adc	r22, r18
    1bfa:	83 9f       	mul	r24, r19
    1bfc:	a0 0d       	add	r26, r0
    1bfe:	61 1d       	adc	r22, r1
    1c00:	22 1f       	adc	r18, r18
    1c02:	74 9f       	mul	r23, r20
    1c04:	33 27       	eor	r19, r19
    1c06:	a0 0d       	add	r26, r0
    1c08:	61 1d       	adc	r22, r1
    1c0a:	23 1f       	adc	r18, r19
    1c0c:	84 9f       	mul	r24, r20
    1c0e:	60 0d       	add	r22, r0
    1c10:	21 1d       	adc	r18, r1
    1c12:	82 2f       	mov	r24, r18
    1c14:	76 2f       	mov	r23, r22
    1c16:	6a 2f       	mov	r22, r26
    1c18:	11 24       	eor	r1, r1
    1c1a:	9f 57       	subi	r25, 0x7F	; 127
    1c1c:	50 40       	sbci	r21, 0x00	; 0
    1c1e:	8a f0       	brmi	.+34     	; 0x1c42 <__mulsf3_pse+0x84>
    1c20:	e1 f0       	breq	.+56     	; 0x1c5a <__mulsf3_pse+0x9c>
    1c22:	88 23       	and	r24, r24
    1c24:	4a f0       	brmi	.+18     	; 0x1c38 <__mulsf3_pse+0x7a>
    1c26:	ee 0f       	add	r30, r30
    1c28:	ff 1f       	adc	r31, r31
    1c2a:	bb 1f       	adc	r27, r27
    1c2c:	66 1f       	adc	r22, r22
    1c2e:	77 1f       	adc	r23, r23
    1c30:	88 1f       	adc	r24, r24
    1c32:	91 50       	subi	r25, 0x01	; 1
    1c34:	50 40       	sbci	r21, 0x00	; 0
    1c36:	a9 f7       	brne	.-22     	; 0x1c22 <__mulsf3_pse+0x64>
    1c38:	9e 3f       	cpi	r25, 0xFE	; 254
    1c3a:	51 05       	cpc	r21, r1
    1c3c:	70 f0       	brcs	.+28     	; 0x1c5a <__mulsf3_pse+0x9c>
    1c3e:	34 cf       	rjmp	.-408    	; 0x1aa8 <__fp_inf>
    1c40:	a3 cf       	rjmp	.-186    	; 0x1b88 <__fp_szero>
    1c42:	5f 3f       	cpi	r21, 0xFF	; 255
    1c44:	ec f3       	brlt	.-6      	; 0x1c40 <__mulsf3_pse+0x82>
    1c46:	98 3e       	cpi	r25, 0xE8	; 232
    1c48:	dc f3       	brlt	.-10     	; 0x1c40 <__mulsf3_pse+0x82>
    1c4a:	86 95       	lsr	r24
    1c4c:	77 95       	ror	r23
    1c4e:	67 95       	ror	r22
    1c50:	b7 95       	ror	r27
    1c52:	f7 95       	ror	r31
    1c54:	e7 95       	ror	r30
    1c56:	9f 5f       	subi	r25, 0xFF	; 255
    1c58:	c1 f7       	brne	.-16     	; 0x1c4a <__mulsf3_pse+0x8c>
    1c5a:	fe 2b       	or	r31, r30
    1c5c:	88 0f       	add	r24, r24
    1c5e:	91 1d       	adc	r25, r1
    1c60:	96 95       	lsr	r25
    1c62:	87 95       	ror	r24
    1c64:	97 f9       	bld	r25, 7
    1c66:	08 95       	ret
    1c68:	11 f4       	brne	.+4      	; 0x1c6e <__mulsf3_pse+0xb0>
    1c6a:	0e f4       	brtc	.+2      	; 0x1c6e <__mulsf3_pse+0xb0>
    1c6c:	23 cf       	rjmp	.-442    	; 0x1ab4 <__fp_nan>
    1c6e:	a8 c0       	rjmp	.+336    	; 0x1dc0 <__fp_mpack>

00001c70 <sqrt>:
    1c70:	70 df       	rcall	.-288    	; 0x1b52 <__fp_splitA>
    1c72:	d0 f3       	brcs	.-12     	; 0x1c68 <__mulsf3_pse+0xaa>
    1c74:	99 23       	and	r25, r25
    1c76:	d9 f3       	breq	.-10     	; 0x1c6e <__mulsf3_pse+0xb0>
    1c78:	ce f3       	brts	.-14     	; 0x1c6c <__mulsf3_pse+0xae>
    1c7a:	9f 57       	subi	r25, 0x7F	; 127
    1c7c:	55 0b       	sbc	r21, r21
    1c7e:	87 ff       	sbrs	r24, 7
    1c80:	ad d0       	rcall	.+346    	; 0x1ddc <__fp_norm2>
    1c82:	00 24       	eor	r0, r0
    1c84:	a0 e6       	ldi	r26, 0x60	; 96
    1c86:	40 ea       	ldi	r20, 0xA0	; 160
    1c88:	90 01       	movw	r18, r0
    1c8a:	80 58       	subi	r24, 0x80	; 128
    1c8c:	56 95       	lsr	r21
    1c8e:	97 95       	ror	r25
    1c90:	28 f4       	brcc	.+10     	; 0x1c9c <sqrt+0x2c>
    1c92:	80 5c       	subi	r24, 0xC0	; 192
    1c94:	66 0f       	add	r22, r22
    1c96:	77 1f       	adc	r23, r23
    1c98:	88 1f       	adc	r24, r24
    1c9a:	20 f0       	brcs	.+8      	; 0x1ca4 <sqrt+0x34>
    1c9c:	26 17       	cp	r18, r22
    1c9e:	37 07       	cpc	r19, r23
    1ca0:	48 07       	cpc	r20, r24
    1ca2:	30 f4       	brcc	.+12     	; 0x1cb0 <sqrt+0x40>
    1ca4:	62 1b       	sub	r22, r18
    1ca6:	73 0b       	sbc	r23, r19
    1ca8:	84 0b       	sbc	r24, r20
    1caa:	20 29       	or	r18, r0
    1cac:	31 29       	or	r19, r1
    1cae:	4a 2b       	or	r20, r26
    1cb0:	a6 95       	lsr	r26
    1cb2:	17 94       	ror	r1
    1cb4:	07 94       	ror	r0
    1cb6:	20 25       	eor	r18, r0
    1cb8:	31 25       	eor	r19, r1
    1cba:	4a 27       	eor	r20, r26
    1cbc:	58 f7       	brcc	.-42     	; 0x1c94 <sqrt+0x24>
    1cbe:	66 0f       	add	r22, r22
    1cc0:	77 1f       	adc	r23, r23
    1cc2:	88 1f       	adc	r24, r24
    1cc4:	20 f0       	brcs	.+8      	; 0x1cce <sqrt+0x5e>
    1cc6:	26 17       	cp	r18, r22
    1cc8:	37 07       	cpc	r19, r23
    1cca:	48 07       	cpc	r20, r24
    1ccc:	30 f4       	brcc	.+12     	; 0x1cda <sqrt+0x6a>
    1cce:	62 0b       	sbc	r22, r18
    1cd0:	73 0b       	sbc	r23, r19
    1cd2:	84 0b       	sbc	r24, r20
    1cd4:	20 0d       	add	r18, r0
    1cd6:	31 1d       	adc	r19, r1
    1cd8:	41 1d       	adc	r20, r1
    1cda:	a0 95       	com	r26
    1cdc:	81 f7       	brne	.-32     	; 0x1cbe <sqrt+0x4e>
    1cde:	b9 01       	movw	r22, r18
    1ce0:	84 2f       	mov	r24, r20
    1ce2:	91 58       	subi	r25, 0x81	; 129
    1ce4:	88 0f       	add	r24, r24
    1ce6:	96 95       	lsr	r25
    1ce8:	87 95       	ror	r24
    1cea:	08 95       	ret

00001cec <square>:
    1cec:	9b 01       	movw	r18, r22
    1cee:	ac 01       	movw	r20, r24
    1cf0:	58 cf       	rjmp	.-336    	; 0x1ba2 <__mulsf3>

00001cf2 <__subsf3>:
    1cf2:	50 58       	subi	r21, 0x80	; 128

00001cf4 <__addsf3>:
    1cf4:	bb 27       	eor	r27, r27
    1cf6:	aa 27       	eor	r26, r26
    1cf8:	0e d0       	rcall	.+28     	; 0x1d16 <__addsf3x>
    1cfa:	12 cf       	rjmp	.-476    	; 0x1b20 <__fp_round>
    1cfc:	03 df       	rcall	.-506    	; 0x1b04 <__fp_pscA>
    1cfe:	30 f0       	brcs	.+12     	; 0x1d0c <__addsf3+0x18>
    1d00:	08 df       	rcall	.-496    	; 0x1b12 <__fp_pscB>
    1d02:	20 f0       	brcs	.+8      	; 0x1d0c <__addsf3+0x18>
    1d04:	31 f4       	brne	.+12     	; 0x1d12 <__addsf3+0x1e>
    1d06:	9f 3f       	cpi	r25, 0xFF	; 255
    1d08:	11 f4       	brne	.+4      	; 0x1d0e <__addsf3+0x1a>
    1d0a:	1e f4       	brtc	.+6      	; 0x1d12 <__addsf3+0x1e>
    1d0c:	d3 ce       	rjmp	.-602    	; 0x1ab4 <__fp_nan>
    1d0e:	0e f4       	brtc	.+2      	; 0x1d12 <__addsf3+0x1e>
    1d10:	e0 95       	com	r30
    1d12:	e7 fb       	bst	r30, 7
    1d14:	c9 ce       	rjmp	.-622    	; 0x1aa8 <__fp_inf>

00001d16 <__addsf3x>:
    1d16:	e9 2f       	mov	r30, r25
    1d18:	14 df       	rcall	.-472    	; 0x1b42 <__fp_split3>
    1d1a:	80 f3       	brcs	.-32     	; 0x1cfc <__addsf3+0x8>
    1d1c:	ba 17       	cp	r27, r26
    1d1e:	62 07       	cpc	r22, r18
    1d20:	73 07       	cpc	r23, r19
    1d22:	84 07       	cpc	r24, r20
    1d24:	95 07       	cpc	r25, r21
    1d26:	18 f0       	brcs	.+6      	; 0x1d2e <__addsf3x+0x18>
    1d28:	71 f4       	brne	.+28     	; 0x1d46 <__addsf3x+0x30>
    1d2a:	9e f5       	brtc	.+102    	; 0x1d92 <__addsf3x+0x7c>
    1d2c:	2c cf       	rjmp	.-424    	; 0x1b86 <__fp_zero>
    1d2e:	0e f4       	brtc	.+2      	; 0x1d32 <__addsf3x+0x1c>
    1d30:	e0 95       	com	r30
    1d32:	0b 2e       	mov	r0, r27
    1d34:	ba 2f       	mov	r27, r26
    1d36:	a0 2d       	mov	r26, r0
    1d38:	0b 01       	movw	r0, r22
    1d3a:	b9 01       	movw	r22, r18
    1d3c:	90 01       	movw	r18, r0
    1d3e:	0c 01       	movw	r0, r24
    1d40:	ca 01       	movw	r24, r20
    1d42:	a0 01       	movw	r20, r0
    1d44:	11 24       	eor	r1, r1
    1d46:	ff 27       	eor	r31, r31
    1d48:	59 1b       	sub	r21, r25
    1d4a:	99 f0       	breq	.+38     	; 0x1d72 <__addsf3x+0x5c>
    1d4c:	59 3f       	cpi	r21, 0xF9	; 249
    1d4e:	50 f4       	brcc	.+20     	; 0x1d64 <__addsf3x+0x4e>
    1d50:	50 3e       	cpi	r21, 0xE0	; 224
    1d52:	68 f1       	brcs	.+90     	; 0x1dae <__addsf3x+0x98>
    1d54:	1a 16       	cp	r1, r26
    1d56:	f0 40       	sbci	r31, 0x00	; 0
    1d58:	a2 2f       	mov	r26, r18
    1d5a:	23 2f       	mov	r18, r19
    1d5c:	34 2f       	mov	r19, r20
    1d5e:	44 27       	eor	r20, r20
    1d60:	58 5f       	subi	r21, 0xF8	; 248
    1d62:	f3 cf       	rjmp	.-26     	; 0x1d4a <__addsf3x+0x34>
    1d64:	46 95       	lsr	r20
    1d66:	37 95       	ror	r19
    1d68:	27 95       	ror	r18
    1d6a:	a7 95       	ror	r26
    1d6c:	f0 40       	sbci	r31, 0x00	; 0
    1d6e:	53 95       	inc	r21
    1d70:	c9 f7       	brne	.-14     	; 0x1d64 <__addsf3x+0x4e>
    1d72:	7e f4       	brtc	.+30     	; 0x1d92 <__addsf3x+0x7c>
    1d74:	1f 16       	cp	r1, r31
    1d76:	ba 0b       	sbc	r27, r26
    1d78:	62 0b       	sbc	r22, r18
    1d7a:	73 0b       	sbc	r23, r19
    1d7c:	84 0b       	sbc	r24, r20
    1d7e:	ba f0       	brmi	.+46     	; 0x1dae <__addsf3x+0x98>
    1d80:	91 50       	subi	r25, 0x01	; 1
    1d82:	a1 f0       	breq	.+40     	; 0x1dac <__addsf3x+0x96>
    1d84:	ff 0f       	add	r31, r31
    1d86:	bb 1f       	adc	r27, r27
    1d88:	66 1f       	adc	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	88 1f       	adc	r24, r24
    1d8e:	c2 f7       	brpl	.-16     	; 0x1d80 <__addsf3x+0x6a>
    1d90:	0e c0       	rjmp	.+28     	; 0x1dae <__addsf3x+0x98>
    1d92:	ba 0f       	add	r27, r26
    1d94:	62 1f       	adc	r22, r18
    1d96:	73 1f       	adc	r23, r19
    1d98:	84 1f       	adc	r24, r20
    1d9a:	48 f4       	brcc	.+18     	; 0x1dae <__addsf3x+0x98>
    1d9c:	87 95       	ror	r24
    1d9e:	77 95       	ror	r23
    1da0:	67 95       	ror	r22
    1da2:	b7 95       	ror	r27
    1da4:	f7 95       	ror	r31
    1da6:	9e 3f       	cpi	r25, 0xFE	; 254
    1da8:	08 f0       	brcs	.+2      	; 0x1dac <__addsf3x+0x96>
    1daa:	b3 cf       	rjmp	.-154    	; 0x1d12 <__addsf3+0x1e>
    1dac:	93 95       	inc	r25
    1dae:	88 0f       	add	r24, r24
    1db0:	08 f0       	brcs	.+2      	; 0x1db4 <__addsf3x+0x9e>
    1db2:	99 27       	eor	r25, r25
    1db4:	ee 0f       	add	r30, r30
    1db6:	97 95       	ror	r25
    1db8:	87 95       	ror	r24
    1dba:	08 95       	ret

00001dbc <__divsf3>:
    1dbc:	ac dd       	rcall	.-1192   	; 0x1916 <__divsf3x>
    1dbe:	b0 ce       	rjmp	.-672    	; 0x1b20 <__fp_round>

00001dc0 <__fp_mpack>:
    1dc0:	9f 3f       	cpi	r25, 0xFF	; 255
    1dc2:	31 f0       	breq	.+12     	; 0x1dd0 <__fp_mpack_finite+0xc>

00001dc4 <__fp_mpack_finite>:
    1dc4:	91 50       	subi	r25, 0x01	; 1
    1dc6:	20 f4       	brcc	.+8      	; 0x1dd0 <__fp_mpack_finite+0xc>
    1dc8:	87 95       	ror	r24
    1dca:	77 95       	ror	r23
    1dcc:	67 95       	ror	r22
    1dce:	b7 95       	ror	r27
    1dd0:	88 0f       	add	r24, r24
    1dd2:	91 1d       	adc	r25, r1
    1dd4:	96 95       	lsr	r25
    1dd6:	87 95       	ror	r24
    1dd8:	97 f9       	bld	r25, 7
    1dda:	08 95       	ret

00001ddc <__fp_norm2>:
    1ddc:	91 50       	subi	r25, 0x01	; 1
    1dde:	50 40       	sbci	r21, 0x00	; 0
    1de0:	66 0f       	add	r22, r22
    1de2:	77 1f       	adc	r23, r23
    1de4:	88 1f       	adc	r24, r24
    1de6:	d2 f7       	brpl	.-12     	; 0x1ddc <__fp_norm2>
    1de8:	08 95       	ret

00001dea <__divmodhi4>:
    1dea:	97 fb       	bst	r25, 7
    1dec:	07 2e       	mov	r0, r23
    1dee:	16 f4       	brtc	.+4      	; 0x1df4 <__divmodhi4+0xa>
    1df0:	00 94       	com	r0
    1df2:	07 d0       	rcall	.+14     	; 0x1e02 <__divmodhi4_neg1>
    1df4:	77 fd       	sbrc	r23, 7
    1df6:	09 d0       	rcall	.+18     	; 0x1e0a <__divmodhi4_neg2>
    1df8:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__udivmodhi4>
    1dfc:	07 fc       	sbrc	r0, 7
    1dfe:	05 d0       	rcall	.+10     	; 0x1e0a <__divmodhi4_neg2>
    1e00:	3e f4       	brtc	.+14     	; 0x1e10 <__divmodhi4_exit>

00001e02 <__divmodhi4_neg1>:
    1e02:	90 95       	com	r25
    1e04:	81 95       	neg	r24
    1e06:	9f 4f       	sbci	r25, 0xFF	; 255
    1e08:	08 95       	ret

00001e0a <__divmodhi4_neg2>:
    1e0a:	70 95       	com	r23
    1e0c:	61 95       	neg	r22
    1e0e:	7f 4f       	sbci	r23, 0xFF	; 255

00001e10 <__divmodhi4_exit>:
    1e10:	08 95       	ret

00001e12 <__divmodsi4>:
    1e12:	05 2e       	mov	r0, r21
    1e14:	97 fb       	bst	r25, 7
    1e16:	1e f4       	brtc	.+6      	; 0x1e1e <__divmodsi4+0xc>
    1e18:	00 94       	com	r0
    1e1a:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__negsi2>
    1e1e:	57 fd       	sbrc	r21, 7
    1e20:	07 d0       	rcall	.+14     	; 0x1e30 <__divmodsi4_neg2>
    1e22:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__udivmodsi4>
    1e26:	07 fc       	sbrc	r0, 7
    1e28:	03 d0       	rcall	.+6      	; 0x1e30 <__divmodsi4_neg2>
    1e2a:	4e f4       	brtc	.+18     	; 0x1e3e <__divmodsi4_exit>
    1e2c:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__negsi2>

00001e30 <__divmodsi4_neg2>:
    1e30:	50 95       	com	r21
    1e32:	40 95       	com	r20
    1e34:	30 95       	com	r19
    1e36:	21 95       	neg	r18
    1e38:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3a:	4f 4f       	sbci	r20, 0xFF	; 255
    1e3c:	5f 4f       	sbci	r21, 0xFF	; 255

00001e3e <__divmodsi4_exit>:
    1e3e:	08 95       	ret

00001e40 <__negsi2>:
    1e40:	90 95       	com	r25
    1e42:	80 95       	com	r24
    1e44:	70 95       	com	r23
    1e46:	61 95       	neg	r22
    1e48:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4e:	08 95       	ret

00001e50 <__udivmodhi4>:
    1e50:	aa 1b       	sub	r26, r26
    1e52:	bb 1b       	sub	r27, r27
    1e54:	51 e1       	ldi	r21, 0x11	; 17
    1e56:	07 c0       	rjmp	.+14     	; 0x1e66 <__udivmodhi4_ep>

00001e58 <__udivmodhi4_loop>:
    1e58:	aa 1f       	adc	r26, r26
    1e5a:	bb 1f       	adc	r27, r27
    1e5c:	a6 17       	cp	r26, r22
    1e5e:	b7 07       	cpc	r27, r23
    1e60:	10 f0       	brcs	.+4      	; 0x1e66 <__udivmodhi4_ep>
    1e62:	a6 1b       	sub	r26, r22
    1e64:	b7 0b       	sbc	r27, r23

00001e66 <__udivmodhi4_ep>:
    1e66:	88 1f       	adc	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	5a 95       	dec	r21
    1e6c:	a9 f7       	brne	.-22     	; 0x1e58 <__udivmodhi4_loop>
    1e6e:	80 95       	com	r24
    1e70:	90 95       	com	r25
    1e72:	bc 01       	movw	r22, r24
    1e74:	cd 01       	movw	r24, r26
    1e76:	08 95       	ret

00001e78 <__udivmodsi4>:
    1e78:	a1 e2       	ldi	r26, 0x21	; 33
    1e7a:	1a 2e       	mov	r1, r26
    1e7c:	aa 1b       	sub	r26, r26
    1e7e:	bb 1b       	sub	r27, r27
    1e80:	fd 01       	movw	r30, r26
    1e82:	0d c0       	rjmp	.+26     	; 0x1e9e <__udivmodsi4_ep>

00001e84 <__udivmodsi4_loop>:
    1e84:	aa 1f       	adc	r26, r26
    1e86:	bb 1f       	adc	r27, r27
    1e88:	ee 1f       	adc	r30, r30
    1e8a:	ff 1f       	adc	r31, r31
    1e8c:	a2 17       	cp	r26, r18
    1e8e:	b3 07       	cpc	r27, r19
    1e90:	e4 07       	cpc	r30, r20
    1e92:	f5 07       	cpc	r31, r21
    1e94:	20 f0       	brcs	.+8      	; 0x1e9e <__udivmodsi4_ep>
    1e96:	a2 1b       	sub	r26, r18
    1e98:	b3 0b       	sbc	r27, r19
    1e9a:	e4 0b       	sbc	r30, r20
    1e9c:	f5 0b       	sbc	r31, r21

00001e9e <__udivmodsi4_ep>:
    1e9e:	66 1f       	adc	r22, r22
    1ea0:	77 1f       	adc	r23, r23
    1ea2:	88 1f       	adc	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	1a 94       	dec	r1
    1ea8:	69 f7       	brne	.-38     	; 0x1e84 <__udivmodsi4_loop>
    1eaa:	60 95       	com	r22
    1eac:	70 95       	com	r23
    1eae:	80 95       	com	r24
    1eb0:	90 95       	com	r25
    1eb2:	9b 01       	movw	r18, r22
    1eb4:	ac 01       	movw	r20, r24
    1eb6:	bd 01       	movw	r22, r26
    1eb8:	cf 01       	movw	r24, r30
    1eba:	08 95       	ret

00001ebc <malloc>:
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29
    1ec0:	82 30       	cpi	r24, 0x02	; 2
    1ec2:	91 05       	cpc	r25, r1
    1ec4:	10 f4       	brcc	.+4      	; 0x1eca <malloc+0xe>
    1ec6:	82 e0       	ldi	r24, 0x02	; 2
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	e0 91 60 02 	lds	r30, 0x0260
    1ece:	f0 91 61 02 	lds	r31, 0x0261
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	a0 e0       	ldi	r26, 0x00	; 0
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	30 97       	sbiw	r30, 0x00	; 0
    1edc:	39 f1       	breq	.+78     	; 0x1f2c <malloc+0x70>
    1ede:	40 81       	ld	r20, Z
    1ee0:	51 81       	ldd	r21, Z+1	; 0x01
    1ee2:	48 17       	cp	r20, r24
    1ee4:	59 07       	cpc	r21, r25
    1ee6:	b8 f0       	brcs	.+46     	; 0x1f16 <malloc+0x5a>
    1ee8:	48 17       	cp	r20, r24
    1eea:	59 07       	cpc	r21, r25
    1eec:	71 f4       	brne	.+28     	; 0x1f0a <malloc+0x4e>
    1eee:	82 81       	ldd	r24, Z+2	; 0x02
    1ef0:	93 81       	ldd	r25, Z+3	; 0x03
    1ef2:	10 97       	sbiw	r26, 0x00	; 0
    1ef4:	29 f0       	breq	.+10     	; 0x1f00 <malloc+0x44>
    1ef6:	13 96       	adiw	r26, 0x03	; 3
    1ef8:	9c 93       	st	X, r25
    1efa:	8e 93       	st	-X, r24
    1efc:	12 97       	sbiw	r26, 0x02	; 2
    1efe:	2c c0       	rjmp	.+88     	; 0x1f58 <malloc+0x9c>
    1f00:	90 93 61 02 	sts	0x0261, r25
    1f04:	80 93 60 02 	sts	0x0260, r24
    1f08:	27 c0       	rjmp	.+78     	; 0x1f58 <malloc+0x9c>
    1f0a:	21 15       	cp	r18, r1
    1f0c:	31 05       	cpc	r19, r1
    1f0e:	31 f0       	breq	.+12     	; 0x1f1c <malloc+0x60>
    1f10:	42 17       	cp	r20, r18
    1f12:	53 07       	cpc	r21, r19
    1f14:	18 f0       	brcs	.+6      	; 0x1f1c <malloc+0x60>
    1f16:	a9 01       	movw	r20, r18
    1f18:	db 01       	movw	r26, r22
    1f1a:	01 c0       	rjmp	.+2      	; 0x1f1e <malloc+0x62>
    1f1c:	ef 01       	movw	r28, r30
    1f1e:	9a 01       	movw	r18, r20
    1f20:	bd 01       	movw	r22, r26
    1f22:	df 01       	movw	r26, r30
    1f24:	02 80       	ldd	r0, Z+2	; 0x02
    1f26:	f3 81       	ldd	r31, Z+3	; 0x03
    1f28:	e0 2d       	mov	r30, r0
    1f2a:	d7 cf       	rjmp	.-82     	; 0x1eda <malloc+0x1e>
    1f2c:	21 15       	cp	r18, r1
    1f2e:	31 05       	cpc	r19, r1
    1f30:	f9 f0       	breq	.+62     	; 0x1f70 <malloc+0xb4>
    1f32:	28 1b       	sub	r18, r24
    1f34:	39 0b       	sbc	r19, r25
    1f36:	24 30       	cpi	r18, 0x04	; 4
    1f38:	31 05       	cpc	r19, r1
    1f3a:	80 f4       	brcc	.+32     	; 0x1f5c <malloc+0xa0>
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f40:	61 15       	cp	r22, r1
    1f42:	71 05       	cpc	r23, r1
    1f44:	21 f0       	breq	.+8      	; 0x1f4e <malloc+0x92>
    1f46:	fb 01       	movw	r30, r22
    1f48:	93 83       	std	Z+3, r25	; 0x03
    1f4a:	82 83       	std	Z+2, r24	; 0x02
    1f4c:	04 c0       	rjmp	.+8      	; 0x1f56 <malloc+0x9a>
    1f4e:	90 93 61 02 	sts	0x0261, r25
    1f52:	80 93 60 02 	sts	0x0260, r24
    1f56:	fe 01       	movw	r30, r28
    1f58:	32 96       	adiw	r30, 0x02	; 2
    1f5a:	44 c0       	rjmp	.+136    	; 0x1fe4 <malloc+0x128>
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	e2 0f       	add	r30, r18
    1f60:	f3 1f       	adc	r31, r19
    1f62:	81 93       	st	Z+, r24
    1f64:	91 93       	st	Z+, r25
    1f66:	22 50       	subi	r18, 0x02	; 2
    1f68:	31 09       	sbc	r19, r1
    1f6a:	39 83       	std	Y+1, r19	; 0x01
    1f6c:	28 83       	st	Y, r18
    1f6e:	3a c0       	rjmp	.+116    	; 0x1fe4 <malloc+0x128>
    1f70:	20 91 5e 02 	lds	r18, 0x025E
    1f74:	30 91 5f 02 	lds	r19, 0x025F
    1f78:	23 2b       	or	r18, r19
    1f7a:	41 f4       	brne	.+16     	; 0x1f8c <malloc+0xd0>
    1f7c:	20 91 02 01 	lds	r18, 0x0102
    1f80:	30 91 03 01 	lds	r19, 0x0103
    1f84:	30 93 5f 02 	sts	0x025F, r19
    1f88:	20 93 5e 02 	sts	0x025E, r18
    1f8c:	20 91 00 01 	lds	r18, 0x0100
    1f90:	30 91 01 01 	lds	r19, 0x0101
    1f94:	21 15       	cp	r18, r1
    1f96:	31 05       	cpc	r19, r1
    1f98:	41 f4       	brne	.+16     	; 0x1faa <malloc+0xee>
    1f9a:	2d b7       	in	r18, 0x3d	; 61
    1f9c:	3e b7       	in	r19, 0x3e	; 62
    1f9e:	40 91 04 01 	lds	r20, 0x0104
    1fa2:	50 91 05 01 	lds	r21, 0x0105
    1fa6:	24 1b       	sub	r18, r20
    1fa8:	35 0b       	sbc	r19, r21
    1faa:	e0 91 5e 02 	lds	r30, 0x025E
    1fae:	f0 91 5f 02 	lds	r31, 0x025F
    1fb2:	e2 17       	cp	r30, r18
    1fb4:	f3 07       	cpc	r31, r19
    1fb6:	a0 f4       	brcc	.+40     	; 0x1fe0 <malloc+0x124>
    1fb8:	2e 1b       	sub	r18, r30
    1fba:	3f 0b       	sbc	r19, r31
    1fbc:	28 17       	cp	r18, r24
    1fbe:	39 07       	cpc	r19, r25
    1fc0:	78 f0       	brcs	.+30     	; 0x1fe0 <malloc+0x124>
    1fc2:	ac 01       	movw	r20, r24
    1fc4:	4e 5f       	subi	r20, 0xFE	; 254
    1fc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc8:	24 17       	cp	r18, r20
    1fca:	35 07       	cpc	r19, r21
    1fcc:	48 f0       	brcs	.+18     	; 0x1fe0 <malloc+0x124>
    1fce:	4e 0f       	add	r20, r30
    1fd0:	5f 1f       	adc	r21, r31
    1fd2:	50 93 5f 02 	sts	0x025F, r21
    1fd6:	40 93 5e 02 	sts	0x025E, r20
    1fda:	81 93       	st	Z+, r24
    1fdc:	91 93       	st	Z+, r25
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <malloc+0x128>
    1fe0:	e0 e0       	ldi	r30, 0x00	; 0
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	cf 01       	movw	r24, r30
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
    1fea:	08 95       	ret

00001fec <free>:
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <free+0xa>
    1ff4:	87 c0       	rjmp	.+270    	; 0x2104 <free+0x118>
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	32 97       	sbiw	r30, 0x02	; 2
    1ffa:	13 82       	std	Z+3, r1	; 0x03
    1ffc:	12 82       	std	Z+2, r1	; 0x02
    1ffe:	c0 91 60 02 	lds	r28, 0x0260
    2002:	d0 91 61 02 	lds	r29, 0x0261
    2006:	20 97       	sbiw	r28, 0x00	; 0
    2008:	81 f4       	brne	.+32     	; 0x202a <free+0x3e>
    200a:	20 81       	ld	r18, Z
    200c:	31 81       	ldd	r19, Z+1	; 0x01
    200e:	28 0f       	add	r18, r24
    2010:	39 1f       	adc	r19, r25
    2012:	80 91 5e 02 	lds	r24, 0x025E
    2016:	90 91 5f 02 	lds	r25, 0x025F
    201a:	82 17       	cp	r24, r18
    201c:	93 07       	cpc	r25, r19
    201e:	79 f5       	brne	.+94     	; 0x207e <free+0x92>
    2020:	f0 93 5f 02 	sts	0x025F, r31
    2024:	e0 93 5e 02 	sts	0x025E, r30
    2028:	6d c0       	rjmp	.+218    	; 0x2104 <free+0x118>
    202a:	de 01       	movw	r26, r28
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	ae 17       	cp	r26, r30
    2032:	bf 07       	cpc	r27, r31
    2034:	50 f4       	brcc	.+20     	; 0x204a <free+0x5e>
    2036:	12 96       	adiw	r26, 0x02	; 2
    2038:	4d 91       	ld	r20, X+
    203a:	5c 91       	ld	r21, X
    203c:	13 97       	sbiw	r26, 0x03	; 3
    203e:	9d 01       	movw	r18, r26
    2040:	41 15       	cp	r20, r1
    2042:	51 05       	cpc	r21, r1
    2044:	09 f1       	breq	.+66     	; 0x2088 <free+0x9c>
    2046:	da 01       	movw	r26, r20
    2048:	f3 cf       	rjmp	.-26     	; 0x2030 <free+0x44>
    204a:	b3 83       	std	Z+3, r27	; 0x03
    204c:	a2 83       	std	Z+2, r26	; 0x02
    204e:	40 81       	ld	r20, Z
    2050:	51 81       	ldd	r21, Z+1	; 0x01
    2052:	84 0f       	add	r24, r20
    2054:	95 1f       	adc	r25, r21
    2056:	8a 17       	cp	r24, r26
    2058:	9b 07       	cpc	r25, r27
    205a:	71 f4       	brne	.+28     	; 0x2078 <free+0x8c>
    205c:	8d 91       	ld	r24, X+
    205e:	9c 91       	ld	r25, X
    2060:	11 97       	sbiw	r26, 0x01	; 1
    2062:	84 0f       	add	r24, r20
    2064:	95 1f       	adc	r25, r21
    2066:	02 96       	adiw	r24, 0x02	; 2
    2068:	91 83       	std	Z+1, r25	; 0x01
    206a:	80 83       	st	Z, r24
    206c:	12 96       	adiw	r26, 0x02	; 2
    206e:	8d 91       	ld	r24, X+
    2070:	9c 91       	ld	r25, X
    2072:	13 97       	sbiw	r26, 0x03	; 3
    2074:	93 83       	std	Z+3, r25	; 0x03
    2076:	82 83       	std	Z+2, r24	; 0x02
    2078:	21 15       	cp	r18, r1
    207a:	31 05       	cpc	r19, r1
    207c:	29 f4       	brne	.+10     	; 0x2088 <free+0x9c>
    207e:	f0 93 61 02 	sts	0x0261, r31
    2082:	e0 93 60 02 	sts	0x0260, r30
    2086:	3e c0       	rjmp	.+124    	; 0x2104 <free+0x118>
    2088:	d9 01       	movw	r26, r18
    208a:	13 96       	adiw	r26, 0x03	; 3
    208c:	fc 93       	st	X, r31
    208e:	ee 93       	st	-X, r30
    2090:	12 97       	sbiw	r26, 0x02	; 2
    2092:	4d 91       	ld	r20, X+
    2094:	5d 91       	ld	r21, X+
    2096:	a4 0f       	add	r26, r20
    2098:	b5 1f       	adc	r27, r21
    209a:	ea 17       	cp	r30, r26
    209c:	fb 07       	cpc	r31, r27
    209e:	79 f4       	brne	.+30     	; 0x20be <free+0xd2>
    20a0:	80 81       	ld	r24, Z
    20a2:	91 81       	ldd	r25, Z+1	; 0x01
    20a4:	84 0f       	add	r24, r20
    20a6:	95 1f       	adc	r25, r21
    20a8:	02 96       	adiw	r24, 0x02	; 2
    20aa:	d9 01       	movw	r26, r18
    20ac:	11 96       	adiw	r26, 0x01	; 1
    20ae:	9c 93       	st	X, r25
    20b0:	8e 93       	st	-X, r24
    20b2:	82 81       	ldd	r24, Z+2	; 0x02
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	13 96       	adiw	r26, 0x03	; 3
    20b8:	9c 93       	st	X, r25
    20ba:	8e 93       	st	-X, r24
    20bc:	12 97       	sbiw	r26, 0x02	; 2
    20be:	e0 e0       	ldi	r30, 0x00	; 0
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	9b 81       	ldd	r25, Y+3	; 0x03
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	19 f0       	breq	.+6      	; 0x20d0 <free+0xe4>
    20ca:	fe 01       	movw	r30, r28
    20cc:	ec 01       	movw	r28, r24
    20ce:	f9 cf       	rjmp	.-14     	; 0x20c2 <free+0xd6>
    20d0:	ce 01       	movw	r24, r28
    20d2:	02 96       	adiw	r24, 0x02	; 2
    20d4:	28 81       	ld	r18, Y
    20d6:	39 81       	ldd	r19, Y+1	; 0x01
    20d8:	82 0f       	add	r24, r18
    20da:	93 1f       	adc	r25, r19
    20dc:	20 91 5e 02 	lds	r18, 0x025E
    20e0:	30 91 5f 02 	lds	r19, 0x025F
    20e4:	28 17       	cp	r18, r24
    20e6:	39 07       	cpc	r19, r25
    20e8:	69 f4       	brne	.+26     	; 0x2104 <free+0x118>
    20ea:	30 97       	sbiw	r30, 0x00	; 0
    20ec:	29 f4       	brne	.+10     	; 0x20f8 <free+0x10c>
    20ee:	10 92 61 02 	sts	0x0261, r1
    20f2:	10 92 60 02 	sts	0x0260, r1
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <free+0x110>
    20f8:	13 82       	std	Z+3, r1	; 0x03
    20fa:	12 82       	std	Z+2, r1	; 0x02
    20fc:	d0 93 5f 02 	sts	0x025F, r29
    2100:	c0 93 5e 02 	sts	0x025E, r28
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	08 95       	ret

0000210a <realloc>:
    210a:	a0 e0       	ldi	r26, 0x00	; 0
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	eb e8       	ldi	r30, 0x8B	; 139
    2110:	f0 e1       	ldi	r31, 0x10	; 16
    2112:	0c 94 83 14 	jmp	0x2906	; 0x2906 <__prologue_saves__+0x8>
    2116:	ec 01       	movw	r28, r24
    2118:	cb 01       	movw	r24, r22
    211a:	20 97       	sbiw	r28, 0x00	; 0
    211c:	19 f4       	brne	.+6      	; 0x2124 <realloc+0x1a>
    211e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <malloc>
    2122:	b8 c0       	rjmp	.+368    	; 0x2294 <realloc+0x18a>
    2124:	fe 01       	movw	r30, r28
    2126:	e6 0f       	add	r30, r22
    2128:	f7 1f       	adc	r31, r23
    212a:	9e 01       	movw	r18, r28
    212c:	22 50       	subi	r18, 0x02	; 2
    212e:	31 09       	sbc	r19, r1
    2130:	e2 17       	cp	r30, r18
    2132:	f3 07       	cpc	r31, r19
    2134:	08 f4       	brcc	.+2      	; 0x2138 <realloc+0x2e>
    2136:	ac c0       	rjmp	.+344    	; 0x2290 <realloc+0x186>
    2138:	d9 01       	movw	r26, r18
    213a:	0d 91       	ld	r16, X+
    213c:	1c 91       	ld	r17, X
    213e:	11 97       	sbiw	r26, 0x01	; 1
    2140:	06 17       	cp	r16, r22
    2142:	17 07       	cpc	r17, r23
    2144:	b8 f0       	brcs	.+46     	; 0x2174 <realloc+0x6a>
    2146:	05 30       	cpi	r16, 0x05	; 5
    2148:	11 05       	cpc	r17, r1
    214a:	08 f4       	brcc	.+2      	; 0x214e <realloc+0x44>
    214c:	9f c0       	rjmp	.+318    	; 0x228c <realloc+0x182>
    214e:	a8 01       	movw	r20, r16
    2150:	44 50       	subi	r20, 0x04	; 4
    2152:	51 09       	sbc	r21, r1
    2154:	46 17       	cp	r20, r22
    2156:	57 07       	cpc	r21, r23
    2158:	08 f4       	brcc	.+2      	; 0x215c <realloc+0x52>
    215a:	98 c0       	rjmp	.+304    	; 0x228c <realloc+0x182>
    215c:	02 50       	subi	r16, 0x02	; 2
    215e:	11 09       	sbc	r17, r1
    2160:	06 1b       	sub	r16, r22
    2162:	17 0b       	sbc	r17, r23
    2164:	01 93       	st	Z+, r16
    2166:	11 93       	st	Z+, r17
    2168:	6d 93       	st	X+, r22
    216a:	7c 93       	st	X, r23
    216c:	cf 01       	movw	r24, r30
    216e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <free>
    2172:	8c c0       	rjmp	.+280    	; 0x228c <realloc+0x182>
    2174:	5b 01       	movw	r10, r22
    2176:	a0 1a       	sub	r10, r16
    2178:	b1 0a       	sbc	r11, r17
    217a:	4e 01       	movw	r8, r28
    217c:	80 0e       	add	r8, r16
    217e:	91 1e       	adc	r9, r17
    2180:	a0 91 60 02 	lds	r26, 0x0260
    2184:	b0 91 61 02 	lds	r27, 0x0261
    2188:	61 2c       	mov	r6, r1
    218a:	71 2c       	mov	r7, r1
    218c:	60 e0       	ldi	r22, 0x00	; 0
    218e:	70 e0       	ldi	r23, 0x00	; 0
    2190:	10 97       	sbiw	r26, 0x00	; 0
    2192:	09 f4       	brne	.+2      	; 0x2196 <realloc+0x8c>
    2194:	49 c0       	rjmp	.+146    	; 0x2228 <realloc+0x11e>
    2196:	a8 15       	cp	r26, r8
    2198:	b9 05       	cpc	r27, r9
    219a:	c9 f5       	brne	.+114    	; 0x220e <realloc+0x104>
    219c:	ed 90       	ld	r14, X+
    219e:	fc 90       	ld	r15, X
    21a0:	11 97       	sbiw	r26, 0x01	; 1
    21a2:	67 01       	movw	r12, r14
    21a4:	42 e0       	ldi	r20, 0x02	; 2
    21a6:	c4 0e       	add	r12, r20
    21a8:	d1 1c       	adc	r13, r1
    21aa:	ca 14       	cp	r12, r10
    21ac:	db 04       	cpc	r13, r11
    21ae:	78 f1       	brcs	.+94     	; 0x220e <realloc+0x104>
    21b0:	47 01       	movw	r8, r14
    21b2:	8a 18       	sub	r8, r10
    21b4:	9b 08       	sbc	r9, r11
    21b6:	64 01       	movw	r12, r8
    21b8:	42 e0       	ldi	r20, 0x02	; 2
    21ba:	c4 0e       	add	r12, r20
    21bc:	d1 1c       	adc	r13, r1
    21be:	12 96       	adiw	r26, 0x02	; 2
    21c0:	bc 90       	ld	r11, X
    21c2:	12 97       	sbiw	r26, 0x02	; 2
    21c4:	13 96       	adiw	r26, 0x03	; 3
    21c6:	ac 91       	ld	r26, X
    21c8:	b5 e0       	ldi	r27, 0x05	; 5
    21ca:	cb 16       	cp	r12, r27
    21cc:	d1 04       	cpc	r13, r1
    21ce:	40 f0       	brcs	.+16     	; 0x21e0 <realloc+0xd6>
    21d0:	b2 82       	std	Z+2, r11	; 0x02
    21d2:	a3 83       	std	Z+3, r26	; 0x03
    21d4:	91 82       	std	Z+1, r9	; 0x01
    21d6:	80 82       	st	Z, r8
    21d8:	d9 01       	movw	r26, r18
    21da:	8d 93       	st	X+, r24
    21dc:	9c 93       	st	X, r25
    21de:	09 c0       	rjmp	.+18     	; 0x21f2 <realloc+0xe8>
    21e0:	0e 5f       	subi	r16, 0xFE	; 254
    21e2:	1f 4f       	sbci	r17, 0xFF	; 255
    21e4:	0e 0d       	add	r16, r14
    21e6:	1f 1d       	adc	r17, r15
    21e8:	f9 01       	movw	r30, r18
    21ea:	11 83       	std	Z+1, r17	; 0x01
    21ec:	00 83       	st	Z, r16
    21ee:	eb 2d       	mov	r30, r11
    21f0:	fa 2f       	mov	r31, r26
    21f2:	61 15       	cp	r22, r1
    21f4:	71 05       	cpc	r23, r1
    21f6:	31 f0       	breq	.+12     	; 0x2204 <realloc+0xfa>
    21f8:	db 01       	movw	r26, r22
    21fa:	13 96       	adiw	r26, 0x03	; 3
    21fc:	fc 93       	st	X, r31
    21fe:	ee 93       	st	-X, r30
    2200:	12 97       	sbiw	r26, 0x02	; 2
    2202:	44 c0       	rjmp	.+136    	; 0x228c <realloc+0x182>
    2204:	f0 93 61 02 	sts	0x0261, r31
    2208:	e0 93 60 02 	sts	0x0260, r30
    220c:	3f c0       	rjmp	.+126    	; 0x228c <realloc+0x182>
    220e:	6d 91       	ld	r22, X+
    2210:	7c 91       	ld	r23, X
    2212:	11 97       	sbiw	r26, 0x01	; 1
    2214:	66 16       	cp	r6, r22
    2216:	77 06       	cpc	r7, r23
    2218:	08 f4       	brcc	.+2      	; 0x221c <realloc+0x112>
    221a:	3b 01       	movw	r6, r22
    221c:	bd 01       	movw	r22, r26
    221e:	12 96       	adiw	r26, 0x02	; 2
    2220:	0d 90       	ld	r0, X+
    2222:	bc 91       	ld	r27, X
    2224:	a0 2d       	mov	r26, r0
    2226:	b4 cf       	rjmp	.-152    	; 0x2190 <realloc+0x86>
    2228:	60 91 5e 02 	lds	r22, 0x025E
    222c:	70 91 5f 02 	lds	r23, 0x025F
    2230:	68 15       	cp	r22, r8
    2232:	79 05       	cpc	r23, r9
    2234:	e9 f4       	brne	.+58     	; 0x2270 <realloc+0x166>
    2236:	68 16       	cp	r6, r24
    2238:	79 06       	cpc	r7, r25
    223a:	d0 f4       	brcc	.+52     	; 0x2270 <realloc+0x166>
    223c:	40 91 00 01 	lds	r20, 0x0100
    2240:	50 91 01 01 	lds	r21, 0x0101
    2244:	41 15       	cp	r20, r1
    2246:	51 05       	cpc	r21, r1
    2248:	41 f4       	brne	.+16     	; 0x225a <realloc+0x150>
    224a:	4d b7       	in	r20, 0x3d	; 61
    224c:	5e b7       	in	r21, 0x3e	; 62
    224e:	60 91 04 01 	lds	r22, 0x0104
    2252:	70 91 05 01 	lds	r23, 0x0105
    2256:	46 1b       	sub	r20, r22
    2258:	57 0b       	sbc	r21, r23
    225a:	e4 17       	cp	r30, r20
    225c:	f5 07       	cpc	r31, r21
    225e:	c0 f4       	brcc	.+48     	; 0x2290 <realloc+0x186>
    2260:	f0 93 5f 02 	sts	0x025F, r31
    2264:	e0 93 5e 02 	sts	0x025E, r30
    2268:	f9 01       	movw	r30, r18
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	80 83       	st	Z, r24
    226e:	0e c0       	rjmp	.+28     	; 0x228c <realloc+0x182>
    2270:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <malloc>
    2274:	7c 01       	movw	r14, r24
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	59 f0       	breq	.+22     	; 0x2290 <realloc+0x186>
    227a:	a8 01       	movw	r20, r16
    227c:	be 01       	movw	r22, r28
    227e:	0e 94 4f 11 	call	0x229e	; 0x229e <memcpy>
    2282:	ce 01       	movw	r24, r28
    2284:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <free>
    2288:	c7 01       	movw	r24, r14
    228a:	04 c0       	rjmp	.+8      	; 0x2294 <realloc+0x18a>
    228c:	ce 01       	movw	r24, r28
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <realloc+0x18a>
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	ee e0       	ldi	r30, 0x0E	; 14
    229a:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__epilogue_restores__+0x8>

0000229e <memcpy>:
    229e:	fb 01       	movw	r30, r22
    22a0:	dc 01       	movw	r26, r24
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <memcpy+0xa>
    22a4:	01 90       	ld	r0, Z+
    22a6:	0d 92       	st	X+, r0
    22a8:	41 50       	subi	r20, 0x01	; 1
    22aa:	50 40       	sbci	r21, 0x00	; 0
    22ac:	d8 f7       	brcc	.-10     	; 0x22a4 <memcpy+0x6>
    22ae:	08 95       	ret

000022b0 <fdevopen>:
    22b0:	0f 93       	push	r16
    22b2:	1f 93       	push	r17
    22b4:	cf 93       	push	r28
    22b6:	df 93       	push	r29
    22b8:	ec 01       	movw	r28, r24
    22ba:	8b 01       	movw	r16, r22
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	31 f4       	brne	.+12     	; 0x22cc <fdevopen+0x1c>
    22c0:	61 15       	cp	r22, r1
    22c2:	71 05       	cpc	r23, r1
    22c4:	19 f4       	brne	.+6      	; 0x22cc <fdevopen+0x1c>
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	38 c0       	rjmp	.+112    	; 0x233c <fdevopen+0x8c>
    22cc:	6e e0       	ldi	r22, 0x0E	; 14
    22ce:	70 e0       	ldi	r23, 0x00	; 0
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	0e 94 b6 13 	call	0x276c	; 0x276c <calloc>
    22d8:	fc 01       	movw	r30, r24
    22da:	00 97       	sbiw	r24, 0x00	; 0
    22dc:	a1 f3       	breq	.-24     	; 0x22c6 <fdevopen+0x16>
    22de:	80 e8       	ldi	r24, 0x80	; 128
    22e0:	83 83       	std	Z+3, r24	; 0x03
    22e2:	01 15       	cp	r16, r1
    22e4:	11 05       	cpc	r17, r1
    22e6:	71 f0       	breq	.+28     	; 0x2304 <fdevopen+0x54>
    22e8:	13 87       	std	Z+11, r17	; 0x0b
    22ea:	02 87       	std	Z+10, r16	; 0x0a
    22ec:	81 e8       	ldi	r24, 0x81	; 129
    22ee:	83 83       	std	Z+3, r24	; 0x03
    22f0:	80 91 62 02 	lds	r24, 0x0262
    22f4:	90 91 63 02 	lds	r25, 0x0263
    22f8:	89 2b       	or	r24, r25
    22fa:	21 f4       	brne	.+8      	; 0x2304 <fdevopen+0x54>
    22fc:	f0 93 63 02 	sts	0x0263, r31
    2300:	e0 93 62 02 	sts	0x0262, r30
    2304:	20 97       	sbiw	r28, 0x00	; 0
    2306:	c9 f0       	breq	.+50     	; 0x233a <fdevopen+0x8a>
    2308:	d1 87       	std	Z+9, r29	; 0x09
    230a:	c0 87       	std	Z+8, r28	; 0x08
    230c:	83 81       	ldd	r24, Z+3	; 0x03
    230e:	82 60       	ori	r24, 0x02	; 2
    2310:	83 83       	std	Z+3, r24	; 0x03
    2312:	80 91 64 02 	lds	r24, 0x0264
    2316:	90 91 65 02 	lds	r25, 0x0265
    231a:	89 2b       	or	r24, r25
    231c:	71 f4       	brne	.+28     	; 0x233a <fdevopen+0x8a>
    231e:	f0 93 65 02 	sts	0x0265, r31
    2322:	e0 93 64 02 	sts	0x0264, r30
    2326:	80 91 66 02 	lds	r24, 0x0266
    232a:	90 91 67 02 	lds	r25, 0x0267
    232e:	89 2b       	or	r24, r25
    2330:	21 f4       	brne	.+8      	; 0x233a <fdevopen+0x8a>
    2332:	f0 93 67 02 	sts	0x0267, r31
    2336:	e0 93 66 02 	sts	0x0266, r30
    233a:	cf 01       	movw	r24, r30
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	1f 91       	pop	r17
    2342:	0f 91       	pop	r16
    2344:	08 95       	ret

00002346 <printf>:
    2346:	a0 e0       	ldi	r26, 0x00	; 0
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e9 ea       	ldi	r30, 0xA9	; 169
    234c:	f1 e1       	ldi	r31, 0x11	; 17
    234e:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__prologue_saves__+0x20>
    2352:	fe 01       	movw	r30, r28
    2354:	35 96       	adiw	r30, 0x05	; 5
    2356:	61 91       	ld	r22, Z+
    2358:	71 91       	ld	r23, Z+
    235a:	af 01       	movw	r20, r30
    235c:	80 91 64 02 	lds	r24, 0x0264
    2360:	90 91 65 02 	lds	r25, 0x0265
    2364:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <vfprintf>
    2368:	e2 e0       	ldi	r30, 0x02	; 2
    236a:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__epilogue_restores__+0x20>

0000236e <puts>:
    236e:	0f 93       	push	r16
    2370:	1f 93       	push	r17
    2372:	cf 93       	push	r28
    2374:	df 93       	push	r29
    2376:	e0 91 64 02 	lds	r30, 0x0264
    237a:	f0 91 65 02 	lds	r31, 0x0265
    237e:	23 81       	ldd	r18, Z+3	; 0x03
    2380:	21 ff       	sbrs	r18, 1
    2382:	1b c0       	rjmp	.+54     	; 0x23ba <puts+0x4c>
    2384:	ec 01       	movw	r28, r24
    2386:	00 e0       	ldi	r16, 0x00	; 0
    2388:	10 e0       	ldi	r17, 0x00	; 0
    238a:	89 91       	ld	r24, Y+
    238c:	60 91 64 02 	lds	r22, 0x0264
    2390:	70 91 65 02 	lds	r23, 0x0265
    2394:	db 01       	movw	r26, r22
    2396:	18 96       	adiw	r26, 0x08	; 8
    2398:	ed 91       	ld	r30, X+
    239a:	fc 91       	ld	r31, X
    239c:	19 97       	sbiw	r26, 0x09	; 9
    239e:	88 23       	and	r24, r24
    23a0:	31 f0       	breq	.+12     	; 0x23ae <puts+0x40>
    23a2:	09 95       	icall
    23a4:	89 2b       	or	r24, r25
    23a6:	89 f3       	breq	.-30     	; 0x238a <puts+0x1c>
    23a8:	0f ef       	ldi	r16, 0xFF	; 255
    23aa:	1f ef       	ldi	r17, 0xFF	; 255
    23ac:	ee cf       	rjmp	.-36     	; 0x238a <puts+0x1c>
    23ae:	8a e0       	ldi	r24, 0x0A	; 10
    23b0:	09 95       	icall
    23b2:	89 2b       	or	r24, r25
    23b4:	11 f4       	brne	.+4      	; 0x23ba <puts+0x4c>
    23b6:	c8 01       	movw	r24, r16
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <puts+0x50>
    23ba:	8f ef       	ldi	r24, 0xFF	; 255
    23bc:	9f ef       	ldi	r25, 0xFF	; 255
    23be:	df 91       	pop	r29
    23c0:	cf 91       	pop	r28
    23c2:	1f 91       	pop	r17
    23c4:	0f 91       	pop	r16
    23c6:	08 95       	ret

000023c8 <vfprintf>:
    23c8:	ac e0       	ldi	r26, 0x0C	; 12
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	ea ee       	ldi	r30, 0xEA	; 234
    23ce:	f1 e1       	ldi	r31, 0x11	; 17
    23d0:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__prologue_saves__>
    23d4:	7c 01       	movw	r14, r24
    23d6:	6b 01       	movw	r12, r22
    23d8:	8a 01       	movw	r16, r20
    23da:	fc 01       	movw	r30, r24
    23dc:	17 82       	std	Z+7, r1	; 0x07
    23de:	16 82       	std	Z+6, r1	; 0x06
    23e0:	83 81       	ldd	r24, Z+3	; 0x03
    23e2:	81 ff       	sbrs	r24, 1
    23e4:	bd c1       	rjmp	.+890    	; 0x2760 <vfprintf+0x398>
    23e6:	ce 01       	movw	r24, r28
    23e8:	01 96       	adiw	r24, 0x01	; 1
    23ea:	4c 01       	movw	r8, r24
    23ec:	f7 01       	movw	r30, r14
    23ee:	93 81       	ldd	r25, Z+3	; 0x03
    23f0:	f6 01       	movw	r30, r12
    23f2:	93 fd       	sbrc	r25, 3
    23f4:	85 91       	lpm	r24, Z+
    23f6:	93 ff       	sbrs	r25, 3
    23f8:	81 91       	ld	r24, Z+
    23fa:	6f 01       	movw	r12, r30
    23fc:	88 23       	and	r24, r24
    23fe:	09 f4       	brne	.+2      	; 0x2402 <vfprintf+0x3a>
    2400:	ab c1       	rjmp	.+854    	; 0x2758 <vfprintf+0x390>
    2402:	85 32       	cpi	r24, 0x25	; 37
    2404:	39 f4       	brne	.+14     	; 0x2414 <vfprintf+0x4c>
    2406:	93 fd       	sbrc	r25, 3
    2408:	85 91       	lpm	r24, Z+
    240a:	93 ff       	sbrs	r25, 3
    240c:	81 91       	ld	r24, Z+
    240e:	6f 01       	movw	r12, r30
    2410:	85 32       	cpi	r24, 0x25	; 37
    2412:	29 f4       	brne	.+10     	; 0x241e <vfprintf+0x56>
    2414:	b7 01       	movw	r22, r14
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	0e 94 ef 13 	call	0x27de	; 0x27de <fputc>
    241c:	e7 cf       	rjmp	.-50     	; 0x23ec <vfprintf+0x24>
    241e:	51 2c       	mov	r5, r1
    2420:	31 2c       	mov	r3, r1
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	20 32       	cpi	r18, 0x20	; 32
    2426:	a0 f4       	brcc	.+40     	; 0x2450 <vfprintf+0x88>
    2428:	8b 32       	cpi	r24, 0x2B	; 43
    242a:	69 f0       	breq	.+26     	; 0x2446 <vfprintf+0x7e>
    242c:	30 f4       	brcc	.+12     	; 0x243a <vfprintf+0x72>
    242e:	80 32       	cpi	r24, 0x20	; 32
    2430:	59 f0       	breq	.+22     	; 0x2448 <vfprintf+0x80>
    2432:	83 32       	cpi	r24, 0x23	; 35
    2434:	69 f4       	brne	.+26     	; 0x2450 <vfprintf+0x88>
    2436:	20 61       	ori	r18, 0x10	; 16
    2438:	2c c0       	rjmp	.+88     	; 0x2492 <vfprintf+0xca>
    243a:	8d 32       	cpi	r24, 0x2D	; 45
    243c:	39 f0       	breq	.+14     	; 0x244c <vfprintf+0x84>
    243e:	80 33       	cpi	r24, 0x30	; 48
    2440:	39 f4       	brne	.+14     	; 0x2450 <vfprintf+0x88>
    2442:	21 60       	ori	r18, 0x01	; 1
    2444:	26 c0       	rjmp	.+76     	; 0x2492 <vfprintf+0xca>
    2446:	22 60       	ori	r18, 0x02	; 2
    2448:	24 60       	ori	r18, 0x04	; 4
    244a:	23 c0       	rjmp	.+70     	; 0x2492 <vfprintf+0xca>
    244c:	28 60       	ori	r18, 0x08	; 8
    244e:	21 c0       	rjmp	.+66     	; 0x2492 <vfprintf+0xca>
    2450:	27 fd       	sbrc	r18, 7
    2452:	27 c0       	rjmp	.+78     	; 0x24a2 <vfprintf+0xda>
    2454:	30 ed       	ldi	r19, 0xD0	; 208
    2456:	38 0f       	add	r19, r24
    2458:	3a 30       	cpi	r19, 0x0A	; 10
    245a:	78 f4       	brcc	.+30     	; 0x247a <vfprintf+0xb2>
    245c:	26 ff       	sbrs	r18, 6
    245e:	06 c0       	rjmp	.+12     	; 0x246c <vfprintf+0xa4>
    2460:	fa e0       	ldi	r31, 0x0A	; 10
    2462:	5f 9e       	mul	r5, r31
    2464:	30 0d       	add	r19, r0
    2466:	11 24       	eor	r1, r1
    2468:	53 2e       	mov	r5, r19
    246a:	13 c0       	rjmp	.+38     	; 0x2492 <vfprintf+0xca>
    246c:	8a e0       	ldi	r24, 0x0A	; 10
    246e:	38 9e       	mul	r3, r24
    2470:	30 0d       	add	r19, r0
    2472:	11 24       	eor	r1, r1
    2474:	33 2e       	mov	r3, r19
    2476:	20 62       	ori	r18, 0x20	; 32
    2478:	0c c0       	rjmp	.+24     	; 0x2492 <vfprintf+0xca>
    247a:	8e 32       	cpi	r24, 0x2E	; 46
    247c:	21 f4       	brne	.+8      	; 0x2486 <vfprintf+0xbe>
    247e:	26 fd       	sbrc	r18, 6
    2480:	6b c1       	rjmp	.+726    	; 0x2758 <vfprintf+0x390>
    2482:	20 64       	ori	r18, 0x40	; 64
    2484:	06 c0       	rjmp	.+12     	; 0x2492 <vfprintf+0xca>
    2486:	8c 36       	cpi	r24, 0x6C	; 108
    2488:	11 f4       	brne	.+4      	; 0x248e <vfprintf+0xc6>
    248a:	20 68       	ori	r18, 0x80	; 128
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <vfprintf+0xca>
    248e:	88 36       	cpi	r24, 0x68	; 104
    2490:	41 f4       	brne	.+16     	; 0x24a2 <vfprintf+0xda>
    2492:	f6 01       	movw	r30, r12
    2494:	93 fd       	sbrc	r25, 3
    2496:	85 91       	lpm	r24, Z+
    2498:	93 ff       	sbrs	r25, 3
    249a:	81 91       	ld	r24, Z+
    249c:	6f 01       	movw	r12, r30
    249e:	81 11       	cpse	r24, r1
    24a0:	c1 cf       	rjmp	.-126    	; 0x2424 <vfprintf+0x5c>
    24a2:	98 2f       	mov	r25, r24
    24a4:	9f 7d       	andi	r25, 0xDF	; 223
    24a6:	95 54       	subi	r25, 0x45	; 69
    24a8:	93 30       	cpi	r25, 0x03	; 3
    24aa:	28 f4       	brcc	.+10     	; 0x24b6 <vfprintf+0xee>
    24ac:	0c 5f       	subi	r16, 0xFC	; 252
    24ae:	1f 4f       	sbci	r17, 0xFF	; 255
    24b0:	ff e3       	ldi	r31, 0x3F	; 63
    24b2:	f9 83       	std	Y+1, r31	; 0x01
    24b4:	0d c0       	rjmp	.+26     	; 0x24d0 <vfprintf+0x108>
    24b6:	83 36       	cpi	r24, 0x63	; 99
    24b8:	31 f0       	breq	.+12     	; 0x24c6 <vfprintf+0xfe>
    24ba:	83 37       	cpi	r24, 0x73	; 115
    24bc:	71 f0       	breq	.+28     	; 0x24da <vfprintf+0x112>
    24be:	83 35       	cpi	r24, 0x53	; 83
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <vfprintf+0xfc>
    24c2:	5b c0       	rjmp	.+182    	; 0x257a <vfprintf+0x1b2>
    24c4:	22 c0       	rjmp	.+68     	; 0x250a <vfprintf+0x142>
    24c6:	f8 01       	movw	r30, r16
    24c8:	80 81       	ld	r24, Z
    24ca:	89 83       	std	Y+1, r24	; 0x01
    24cc:	0e 5f       	subi	r16, 0xFE	; 254
    24ce:	1f 4f       	sbci	r17, 0xFF	; 255
    24d0:	44 24       	eor	r4, r4
    24d2:	43 94       	inc	r4
    24d4:	51 2c       	mov	r5, r1
    24d6:	54 01       	movw	r10, r8
    24d8:	15 c0       	rjmp	.+42     	; 0x2504 <vfprintf+0x13c>
    24da:	38 01       	movw	r6, r16
    24dc:	f2 e0       	ldi	r31, 0x02	; 2
    24de:	6f 0e       	add	r6, r31
    24e0:	71 1c       	adc	r7, r1
    24e2:	f8 01       	movw	r30, r16
    24e4:	a0 80       	ld	r10, Z
    24e6:	b1 80       	ldd	r11, Z+1	; 0x01
    24e8:	26 ff       	sbrs	r18, 6
    24ea:	03 c0       	rjmp	.+6      	; 0x24f2 <vfprintf+0x12a>
    24ec:	65 2d       	mov	r22, r5
    24ee:	70 e0       	ldi	r23, 0x00	; 0
    24f0:	02 c0       	rjmp	.+4      	; 0x24f6 <vfprintf+0x12e>
    24f2:	6f ef       	ldi	r22, 0xFF	; 255
    24f4:	7f ef       	ldi	r23, 0xFF	; 255
    24f6:	c5 01       	movw	r24, r10
    24f8:	2c 87       	std	Y+12, r18	; 0x0c
    24fa:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <strnlen>
    24fe:	2c 01       	movw	r4, r24
    2500:	83 01       	movw	r16, r6
    2502:	2c 85       	ldd	r18, Y+12	; 0x0c
    2504:	2f 77       	andi	r18, 0x7F	; 127
    2506:	22 2e       	mov	r2, r18
    2508:	17 c0       	rjmp	.+46     	; 0x2538 <vfprintf+0x170>
    250a:	38 01       	movw	r6, r16
    250c:	f2 e0       	ldi	r31, 0x02	; 2
    250e:	6f 0e       	add	r6, r31
    2510:	71 1c       	adc	r7, r1
    2512:	f8 01       	movw	r30, r16
    2514:	a0 80       	ld	r10, Z
    2516:	b1 80       	ldd	r11, Z+1	; 0x01
    2518:	26 ff       	sbrs	r18, 6
    251a:	03 c0       	rjmp	.+6      	; 0x2522 <vfprintf+0x15a>
    251c:	65 2d       	mov	r22, r5
    251e:	70 e0       	ldi	r23, 0x00	; 0
    2520:	02 c0       	rjmp	.+4      	; 0x2526 <vfprintf+0x15e>
    2522:	6f ef       	ldi	r22, 0xFF	; 255
    2524:	7f ef       	ldi	r23, 0xFF	; 255
    2526:	c5 01       	movw	r24, r10
    2528:	2c 87       	std	Y+12, r18	; 0x0c
    252a:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <strnlen_P>
    252e:	2c 01       	movw	r4, r24
    2530:	2c 85       	ldd	r18, Y+12	; 0x0c
    2532:	20 68       	ori	r18, 0x80	; 128
    2534:	22 2e       	mov	r2, r18
    2536:	83 01       	movw	r16, r6
    2538:	23 fc       	sbrc	r2, 3
    253a:	1b c0       	rjmp	.+54     	; 0x2572 <vfprintf+0x1aa>
    253c:	83 2d       	mov	r24, r3
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	48 16       	cp	r4, r24
    2542:	59 06       	cpc	r5, r25
    2544:	b0 f4       	brcc	.+44     	; 0x2572 <vfprintf+0x1aa>
    2546:	b7 01       	movw	r22, r14
    2548:	80 e2       	ldi	r24, 0x20	; 32
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	0e 94 ef 13 	call	0x27de	; 0x27de <fputc>
    2550:	3a 94       	dec	r3
    2552:	f4 cf       	rjmp	.-24     	; 0x253c <vfprintf+0x174>
    2554:	f5 01       	movw	r30, r10
    2556:	27 fc       	sbrc	r2, 7
    2558:	85 91       	lpm	r24, Z+
    255a:	27 fe       	sbrs	r2, 7
    255c:	81 91       	ld	r24, Z+
    255e:	5f 01       	movw	r10, r30
    2560:	b7 01       	movw	r22, r14
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	0e 94 ef 13 	call	0x27de	; 0x27de <fputc>
    2568:	31 10       	cpse	r3, r1
    256a:	3a 94       	dec	r3
    256c:	f1 e0       	ldi	r31, 0x01	; 1
    256e:	4f 1a       	sub	r4, r31
    2570:	51 08       	sbc	r5, r1
    2572:	41 14       	cp	r4, r1
    2574:	51 04       	cpc	r5, r1
    2576:	71 f7       	brne	.-36     	; 0x2554 <vfprintf+0x18c>
    2578:	e5 c0       	rjmp	.+458    	; 0x2744 <vfprintf+0x37c>
    257a:	84 36       	cpi	r24, 0x64	; 100
    257c:	11 f0       	breq	.+4      	; 0x2582 <vfprintf+0x1ba>
    257e:	89 36       	cpi	r24, 0x69	; 105
    2580:	39 f5       	brne	.+78     	; 0x25d0 <vfprintf+0x208>
    2582:	f8 01       	movw	r30, r16
    2584:	27 ff       	sbrs	r18, 7
    2586:	07 c0       	rjmp	.+14     	; 0x2596 <vfprintf+0x1ce>
    2588:	60 81       	ld	r22, Z
    258a:	71 81       	ldd	r23, Z+1	; 0x01
    258c:	82 81       	ldd	r24, Z+2	; 0x02
    258e:	93 81       	ldd	r25, Z+3	; 0x03
    2590:	0c 5f       	subi	r16, 0xFC	; 252
    2592:	1f 4f       	sbci	r17, 0xFF	; 255
    2594:	08 c0       	rjmp	.+16     	; 0x25a6 <vfprintf+0x1de>
    2596:	60 81       	ld	r22, Z
    2598:	71 81       	ldd	r23, Z+1	; 0x01
    259a:	88 27       	eor	r24, r24
    259c:	77 fd       	sbrc	r23, 7
    259e:	80 95       	com	r24
    25a0:	98 2f       	mov	r25, r24
    25a2:	0e 5f       	subi	r16, 0xFE	; 254
    25a4:	1f 4f       	sbci	r17, 0xFF	; 255
    25a6:	2f 76       	andi	r18, 0x6F	; 111
    25a8:	b2 2e       	mov	r11, r18
    25aa:	97 ff       	sbrs	r25, 7
    25ac:	09 c0       	rjmp	.+18     	; 0x25c0 <vfprintf+0x1f8>
    25ae:	90 95       	com	r25
    25b0:	80 95       	com	r24
    25b2:	70 95       	com	r23
    25b4:	61 95       	neg	r22
    25b6:	7f 4f       	sbci	r23, 0xFF	; 255
    25b8:	8f 4f       	sbci	r24, 0xFF	; 255
    25ba:	9f 4f       	sbci	r25, 0xFF	; 255
    25bc:	20 68       	ori	r18, 0x80	; 128
    25be:	b2 2e       	mov	r11, r18
    25c0:	2a e0       	ldi	r18, 0x0A	; 10
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	a4 01       	movw	r20, r8
    25c6:	0e 94 21 14 	call	0x2842	; 0x2842 <__ultoa_invert>
    25ca:	a8 2e       	mov	r10, r24
    25cc:	a8 18       	sub	r10, r8
    25ce:	44 c0       	rjmp	.+136    	; 0x2658 <vfprintf+0x290>
    25d0:	85 37       	cpi	r24, 0x75	; 117
    25d2:	29 f4       	brne	.+10     	; 0x25de <vfprintf+0x216>
    25d4:	2f 7e       	andi	r18, 0xEF	; 239
    25d6:	b2 2e       	mov	r11, r18
    25d8:	2a e0       	ldi	r18, 0x0A	; 10
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	25 c0       	rjmp	.+74     	; 0x2628 <vfprintf+0x260>
    25de:	f2 2f       	mov	r31, r18
    25e0:	f9 7f       	andi	r31, 0xF9	; 249
    25e2:	bf 2e       	mov	r11, r31
    25e4:	8f 36       	cpi	r24, 0x6F	; 111
    25e6:	c1 f0       	breq	.+48     	; 0x2618 <vfprintf+0x250>
    25e8:	18 f4       	brcc	.+6      	; 0x25f0 <vfprintf+0x228>
    25ea:	88 35       	cpi	r24, 0x58	; 88
    25ec:	79 f0       	breq	.+30     	; 0x260c <vfprintf+0x244>
    25ee:	b4 c0       	rjmp	.+360    	; 0x2758 <vfprintf+0x390>
    25f0:	80 37       	cpi	r24, 0x70	; 112
    25f2:	19 f0       	breq	.+6      	; 0x25fa <vfprintf+0x232>
    25f4:	88 37       	cpi	r24, 0x78	; 120
    25f6:	21 f0       	breq	.+8      	; 0x2600 <vfprintf+0x238>
    25f8:	af c0       	rjmp	.+350    	; 0x2758 <vfprintf+0x390>
    25fa:	2f 2f       	mov	r18, r31
    25fc:	20 61       	ori	r18, 0x10	; 16
    25fe:	b2 2e       	mov	r11, r18
    2600:	b4 fe       	sbrs	r11, 4
    2602:	0d c0       	rjmp	.+26     	; 0x261e <vfprintf+0x256>
    2604:	8b 2d       	mov	r24, r11
    2606:	84 60       	ori	r24, 0x04	; 4
    2608:	b8 2e       	mov	r11, r24
    260a:	09 c0       	rjmp	.+18     	; 0x261e <vfprintf+0x256>
    260c:	24 ff       	sbrs	r18, 4
    260e:	0a c0       	rjmp	.+20     	; 0x2624 <vfprintf+0x25c>
    2610:	9f 2f       	mov	r25, r31
    2612:	96 60       	ori	r25, 0x06	; 6
    2614:	b9 2e       	mov	r11, r25
    2616:	06 c0       	rjmp	.+12     	; 0x2624 <vfprintf+0x25c>
    2618:	28 e0       	ldi	r18, 0x08	; 8
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	05 c0       	rjmp	.+10     	; 0x2628 <vfprintf+0x260>
    261e:	20 e1       	ldi	r18, 0x10	; 16
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	02 c0       	rjmp	.+4      	; 0x2628 <vfprintf+0x260>
    2624:	20 e1       	ldi	r18, 0x10	; 16
    2626:	32 e0       	ldi	r19, 0x02	; 2
    2628:	f8 01       	movw	r30, r16
    262a:	b7 fe       	sbrs	r11, 7
    262c:	07 c0       	rjmp	.+14     	; 0x263c <vfprintf+0x274>
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	0c 5f       	subi	r16, 0xFC	; 252
    2638:	1f 4f       	sbci	r17, 0xFF	; 255
    263a:	06 c0       	rjmp	.+12     	; 0x2648 <vfprintf+0x280>
    263c:	60 81       	ld	r22, Z
    263e:	71 81       	ldd	r23, Z+1	; 0x01
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	0e 5f       	subi	r16, 0xFE	; 254
    2646:	1f 4f       	sbci	r17, 0xFF	; 255
    2648:	a4 01       	movw	r20, r8
    264a:	0e 94 21 14 	call	0x2842	; 0x2842 <__ultoa_invert>
    264e:	a8 2e       	mov	r10, r24
    2650:	a8 18       	sub	r10, r8
    2652:	fb 2d       	mov	r31, r11
    2654:	ff 77       	andi	r31, 0x7F	; 127
    2656:	bf 2e       	mov	r11, r31
    2658:	b6 fe       	sbrs	r11, 6
    265a:	0b c0       	rjmp	.+22     	; 0x2672 <vfprintf+0x2aa>
    265c:	2b 2d       	mov	r18, r11
    265e:	2e 7f       	andi	r18, 0xFE	; 254
    2660:	a5 14       	cp	r10, r5
    2662:	50 f4       	brcc	.+20     	; 0x2678 <vfprintf+0x2b0>
    2664:	b4 fe       	sbrs	r11, 4
    2666:	0a c0       	rjmp	.+20     	; 0x267c <vfprintf+0x2b4>
    2668:	b2 fc       	sbrc	r11, 2
    266a:	08 c0       	rjmp	.+16     	; 0x267c <vfprintf+0x2b4>
    266c:	2b 2d       	mov	r18, r11
    266e:	2e 7e       	andi	r18, 0xEE	; 238
    2670:	05 c0       	rjmp	.+10     	; 0x267c <vfprintf+0x2b4>
    2672:	7a 2c       	mov	r7, r10
    2674:	2b 2d       	mov	r18, r11
    2676:	03 c0       	rjmp	.+6      	; 0x267e <vfprintf+0x2b6>
    2678:	7a 2c       	mov	r7, r10
    267a:	01 c0       	rjmp	.+2      	; 0x267e <vfprintf+0x2b6>
    267c:	75 2c       	mov	r7, r5
    267e:	24 ff       	sbrs	r18, 4
    2680:	0d c0       	rjmp	.+26     	; 0x269c <vfprintf+0x2d4>
    2682:	fe 01       	movw	r30, r28
    2684:	ea 0d       	add	r30, r10
    2686:	f1 1d       	adc	r31, r1
    2688:	80 81       	ld	r24, Z
    268a:	80 33       	cpi	r24, 0x30	; 48
    268c:	11 f4       	brne	.+4      	; 0x2692 <vfprintf+0x2ca>
    268e:	29 7e       	andi	r18, 0xE9	; 233
    2690:	09 c0       	rjmp	.+18     	; 0x26a4 <vfprintf+0x2dc>
    2692:	22 ff       	sbrs	r18, 2
    2694:	06 c0       	rjmp	.+12     	; 0x26a2 <vfprintf+0x2da>
    2696:	73 94       	inc	r7
    2698:	73 94       	inc	r7
    269a:	04 c0       	rjmp	.+8      	; 0x26a4 <vfprintf+0x2dc>
    269c:	82 2f       	mov	r24, r18
    269e:	86 78       	andi	r24, 0x86	; 134
    26a0:	09 f0       	breq	.+2      	; 0x26a4 <vfprintf+0x2dc>
    26a2:	73 94       	inc	r7
    26a4:	23 fd       	sbrc	r18, 3
    26a6:	13 c0       	rjmp	.+38     	; 0x26ce <vfprintf+0x306>
    26a8:	20 ff       	sbrs	r18, 0
    26aa:	06 c0       	rjmp	.+12     	; 0x26b8 <vfprintf+0x2f0>
    26ac:	5a 2c       	mov	r5, r10
    26ae:	73 14       	cp	r7, r3
    26b0:	18 f4       	brcc	.+6      	; 0x26b8 <vfprintf+0x2f0>
    26b2:	53 0c       	add	r5, r3
    26b4:	57 18       	sub	r5, r7
    26b6:	73 2c       	mov	r7, r3
    26b8:	73 14       	cp	r7, r3
    26ba:	68 f4       	brcc	.+26     	; 0x26d6 <vfprintf+0x30e>
    26bc:	b7 01       	movw	r22, r14
    26be:	80 e2       	ldi	r24, 0x20	; 32
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	2c 87       	std	Y+12, r18	; 0x0c
    26c4:	0e 94 ef 13 	call	0x27de	; 0x27de <fputc>
    26c8:	73 94       	inc	r7
    26ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    26cc:	f5 cf       	rjmp	.-22     	; 0x26b8 <vfprintf+0x2f0>
    26ce:	73 14       	cp	r7, r3
    26d0:	10 f4       	brcc	.+4      	; 0x26d6 <vfprintf+0x30e>
    26d2:	37 18       	sub	r3, r7
    26d4:	01 c0       	rjmp	.+2      	; 0x26d8 <vfprintf+0x310>
    26d6:	31 2c       	mov	r3, r1
    26d8:	24 ff       	sbrs	r18, 4
    26da:	12 c0       	rjmp	.+36     	; 0x2700 <vfprintf+0x338>
    26dc:	b7 01       	movw	r22, r14
    26de:	80 e3       	ldi	r24, 0x30	; 48
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	2c 87       	std	Y+12, r18	; 0x0c
    26e4:	0e 94 ef 13 	call	0x27de	; 0x27de <fputc>
    26e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    26ea:	22 ff       	sbrs	r18, 2
    26ec:	17 c0       	rjmp	.+46     	; 0x271c <vfprintf+0x354>
    26ee:	21 ff       	sbrs	r18, 1
    26f0:	03 c0       	rjmp	.+6      	; 0x26f8 <vfprintf+0x330>
    26f2:	88 e5       	ldi	r24, 0x58	; 88
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <vfprintf+0x334>
    26f8:	88 e7       	ldi	r24, 0x78	; 120
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	b7 01       	movw	r22, r14
    26fe:	0c c0       	rjmp	.+24     	; 0x2718 <vfprintf+0x350>
    2700:	82 2f       	mov	r24, r18
    2702:	86 78       	andi	r24, 0x86	; 134
    2704:	59 f0       	breq	.+22     	; 0x271c <vfprintf+0x354>
    2706:	21 fd       	sbrc	r18, 1
    2708:	02 c0       	rjmp	.+4      	; 0x270e <vfprintf+0x346>
    270a:	80 e2       	ldi	r24, 0x20	; 32
    270c:	01 c0       	rjmp	.+2      	; 0x2710 <vfprintf+0x348>
    270e:	8b e2       	ldi	r24, 0x2B	; 43
    2710:	27 fd       	sbrc	r18, 7
    2712:	8d e2       	ldi	r24, 0x2D	; 45
    2714:	b7 01       	movw	r22, r14
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	0e 94 ef 13 	call	0x27de	; 0x27de <fputc>
    271c:	a5 14       	cp	r10, r5
    271e:	38 f4       	brcc	.+14     	; 0x272e <vfprintf+0x366>
    2720:	b7 01       	movw	r22, r14
    2722:	80 e3       	ldi	r24, 0x30	; 48
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	0e 94 ef 13 	call	0x27de	; 0x27de <fputc>
    272a:	5a 94       	dec	r5
    272c:	f7 cf       	rjmp	.-18     	; 0x271c <vfprintf+0x354>
    272e:	aa 94       	dec	r10
    2730:	f4 01       	movw	r30, r8
    2732:	ea 0d       	add	r30, r10
    2734:	f1 1d       	adc	r31, r1
    2736:	80 81       	ld	r24, Z
    2738:	b7 01       	movw	r22, r14
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 ef 13 	call	0x27de	; 0x27de <fputc>
    2740:	a1 10       	cpse	r10, r1
    2742:	f5 cf       	rjmp	.-22     	; 0x272e <vfprintf+0x366>
    2744:	33 20       	and	r3, r3
    2746:	09 f4       	brne	.+2      	; 0x274a <vfprintf+0x382>
    2748:	51 ce       	rjmp	.-862    	; 0x23ec <vfprintf+0x24>
    274a:	b7 01       	movw	r22, r14
    274c:	80 e2       	ldi	r24, 0x20	; 32
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	0e 94 ef 13 	call	0x27de	; 0x27de <fputc>
    2754:	3a 94       	dec	r3
    2756:	f6 cf       	rjmp	.-20     	; 0x2744 <vfprintf+0x37c>
    2758:	f7 01       	movw	r30, r14
    275a:	86 81       	ldd	r24, Z+6	; 0x06
    275c:	97 81       	ldd	r25, Z+7	; 0x07
    275e:	02 c0       	rjmp	.+4      	; 0x2764 <vfprintf+0x39c>
    2760:	8f ef       	ldi	r24, 0xFF	; 255
    2762:	9f ef       	ldi	r25, 0xFF	; 255
    2764:	2c 96       	adiw	r28, 0x0c	; 12
    2766:	e2 e1       	ldi	r30, 0x12	; 18
    2768:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__epilogue_restores__>

0000276c <calloc>:
    276c:	0f 93       	push	r16
    276e:	1f 93       	push	r17
    2770:	cf 93       	push	r28
    2772:	df 93       	push	r29
    2774:	86 9f       	mul	r24, r22
    2776:	80 01       	movw	r16, r0
    2778:	87 9f       	mul	r24, r23
    277a:	10 0d       	add	r17, r0
    277c:	96 9f       	mul	r25, r22
    277e:	10 0d       	add	r17, r0
    2780:	11 24       	eor	r1, r1
    2782:	c8 01       	movw	r24, r16
    2784:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <malloc>
    2788:	ec 01       	movw	r28, r24
    278a:	00 97       	sbiw	r24, 0x00	; 0
    278c:	29 f0       	breq	.+10     	; 0x2798 <calloc+0x2c>
    278e:	a8 01       	movw	r20, r16
    2790:	60 e0       	ldi	r22, 0x00	; 0
    2792:	70 e0       	ldi	r23, 0x00	; 0
    2794:	0e 94 dd 13 	call	0x27ba	; 0x27ba <memset>
    2798:	ce 01       	movw	r24, r28
    279a:	df 91       	pop	r29
    279c:	cf 91       	pop	r28
    279e:	1f 91       	pop	r17
    27a0:	0f 91       	pop	r16
    27a2:	08 95       	ret

000027a4 <strnlen_P>:
    27a4:	fc 01       	movw	r30, r24
    27a6:	05 90       	lpm	r0, Z+
    27a8:	61 50       	subi	r22, 0x01	; 1
    27aa:	70 40       	sbci	r23, 0x00	; 0
    27ac:	01 10       	cpse	r0, r1
    27ae:	d8 f7       	brcc	.-10     	; 0x27a6 <strnlen_P+0x2>
    27b0:	80 95       	com	r24
    27b2:	90 95       	com	r25
    27b4:	8e 0f       	add	r24, r30
    27b6:	9f 1f       	adc	r25, r31
    27b8:	08 95       	ret

000027ba <memset>:
    27ba:	dc 01       	movw	r26, r24
    27bc:	01 c0       	rjmp	.+2      	; 0x27c0 <memset+0x6>
    27be:	6d 93       	st	X+, r22
    27c0:	41 50       	subi	r20, 0x01	; 1
    27c2:	50 40       	sbci	r21, 0x00	; 0
    27c4:	e0 f7       	brcc	.-8      	; 0x27be <memset+0x4>
    27c6:	08 95       	ret

000027c8 <strnlen>:
    27c8:	fc 01       	movw	r30, r24
    27ca:	61 50       	subi	r22, 0x01	; 1
    27cc:	70 40       	sbci	r23, 0x00	; 0
    27ce:	01 90       	ld	r0, Z+
    27d0:	01 10       	cpse	r0, r1
    27d2:	d8 f7       	brcc	.-10     	; 0x27ca <strnlen+0x2>
    27d4:	80 95       	com	r24
    27d6:	90 95       	com	r25
    27d8:	8e 0f       	add	r24, r30
    27da:	9f 1f       	adc	r25, r31
    27dc:	08 95       	ret

000027de <fputc>:
    27de:	0f 93       	push	r16
    27e0:	1f 93       	push	r17
    27e2:	cf 93       	push	r28
    27e4:	df 93       	push	r29
    27e6:	18 2f       	mov	r17, r24
    27e8:	09 2f       	mov	r16, r25
    27ea:	eb 01       	movw	r28, r22
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	81 fd       	sbrc	r24, 1
    27f0:	03 c0       	rjmp	.+6      	; 0x27f8 <fputc+0x1a>
    27f2:	8f ef       	ldi	r24, 0xFF	; 255
    27f4:	9f ef       	ldi	r25, 0xFF	; 255
    27f6:	20 c0       	rjmp	.+64     	; 0x2838 <fputc+0x5a>
    27f8:	82 ff       	sbrs	r24, 2
    27fa:	10 c0       	rjmp	.+32     	; 0x281c <fputc+0x3e>
    27fc:	4e 81       	ldd	r20, Y+6	; 0x06
    27fe:	5f 81       	ldd	r21, Y+7	; 0x07
    2800:	2c 81       	ldd	r18, Y+4	; 0x04
    2802:	3d 81       	ldd	r19, Y+5	; 0x05
    2804:	42 17       	cp	r20, r18
    2806:	53 07       	cpc	r21, r19
    2808:	7c f4       	brge	.+30     	; 0x2828 <fputc+0x4a>
    280a:	e8 81       	ld	r30, Y
    280c:	f9 81       	ldd	r31, Y+1	; 0x01
    280e:	9f 01       	movw	r18, r30
    2810:	2f 5f       	subi	r18, 0xFF	; 255
    2812:	3f 4f       	sbci	r19, 0xFF	; 255
    2814:	39 83       	std	Y+1, r19	; 0x01
    2816:	28 83       	st	Y, r18
    2818:	10 83       	st	Z, r17
    281a:	06 c0       	rjmp	.+12     	; 0x2828 <fputc+0x4a>
    281c:	e8 85       	ldd	r30, Y+8	; 0x08
    281e:	f9 85       	ldd	r31, Y+9	; 0x09
    2820:	81 2f       	mov	r24, r17
    2822:	09 95       	icall
    2824:	89 2b       	or	r24, r25
    2826:	29 f7       	brne	.-54     	; 0x27f2 <fputc+0x14>
    2828:	2e 81       	ldd	r18, Y+6	; 0x06
    282a:	3f 81       	ldd	r19, Y+7	; 0x07
    282c:	2f 5f       	subi	r18, 0xFF	; 255
    282e:	3f 4f       	sbci	r19, 0xFF	; 255
    2830:	3f 83       	std	Y+7, r19	; 0x07
    2832:	2e 83       	std	Y+6, r18	; 0x06
    2834:	81 2f       	mov	r24, r17
    2836:	90 2f       	mov	r25, r16
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	1f 91       	pop	r17
    283e:	0f 91       	pop	r16
    2840:	08 95       	ret

00002842 <__ultoa_invert>:
    2842:	fa 01       	movw	r30, r20
    2844:	aa 27       	eor	r26, r26
    2846:	28 30       	cpi	r18, 0x08	; 8
    2848:	51 f1       	breq	.+84     	; 0x289e <__ultoa_invert+0x5c>
    284a:	20 31       	cpi	r18, 0x10	; 16
    284c:	81 f1       	breq	.+96     	; 0x28ae <__ultoa_invert+0x6c>
    284e:	e8 94       	clt
    2850:	6f 93       	push	r22
    2852:	6e 7f       	andi	r22, 0xFE	; 254
    2854:	6e 5f       	subi	r22, 0xFE	; 254
    2856:	7f 4f       	sbci	r23, 0xFF	; 255
    2858:	8f 4f       	sbci	r24, 0xFF	; 255
    285a:	9f 4f       	sbci	r25, 0xFF	; 255
    285c:	af 4f       	sbci	r26, 0xFF	; 255
    285e:	b1 e0       	ldi	r27, 0x01	; 1
    2860:	3e d0       	rcall	.+124    	; 0x28de <__ultoa_invert+0x9c>
    2862:	b4 e0       	ldi	r27, 0x04	; 4
    2864:	3c d0       	rcall	.+120    	; 0x28de <__ultoa_invert+0x9c>
    2866:	67 0f       	add	r22, r23
    2868:	78 1f       	adc	r23, r24
    286a:	89 1f       	adc	r24, r25
    286c:	9a 1f       	adc	r25, r26
    286e:	a1 1d       	adc	r26, r1
    2870:	68 0f       	add	r22, r24
    2872:	79 1f       	adc	r23, r25
    2874:	8a 1f       	adc	r24, r26
    2876:	91 1d       	adc	r25, r1
    2878:	a1 1d       	adc	r26, r1
    287a:	6a 0f       	add	r22, r26
    287c:	71 1d       	adc	r23, r1
    287e:	81 1d       	adc	r24, r1
    2880:	91 1d       	adc	r25, r1
    2882:	a1 1d       	adc	r26, r1
    2884:	20 d0       	rcall	.+64     	; 0x28c6 <__ultoa_invert+0x84>
    2886:	09 f4       	brne	.+2      	; 0x288a <__ultoa_invert+0x48>
    2888:	68 94       	set
    288a:	3f 91       	pop	r19
    288c:	2a e0       	ldi	r18, 0x0A	; 10
    288e:	26 9f       	mul	r18, r22
    2890:	11 24       	eor	r1, r1
    2892:	30 19       	sub	r19, r0
    2894:	30 5d       	subi	r19, 0xD0	; 208
    2896:	31 93       	st	Z+, r19
    2898:	de f6       	brtc	.-74     	; 0x2850 <__ultoa_invert+0xe>
    289a:	cf 01       	movw	r24, r30
    289c:	08 95       	ret
    289e:	46 2f       	mov	r20, r22
    28a0:	47 70       	andi	r20, 0x07	; 7
    28a2:	40 5d       	subi	r20, 0xD0	; 208
    28a4:	41 93       	st	Z+, r20
    28a6:	b3 e0       	ldi	r27, 0x03	; 3
    28a8:	0f d0       	rcall	.+30     	; 0x28c8 <__ultoa_invert+0x86>
    28aa:	c9 f7       	brne	.-14     	; 0x289e <__ultoa_invert+0x5c>
    28ac:	f6 cf       	rjmp	.-20     	; 0x289a <__ultoa_invert+0x58>
    28ae:	46 2f       	mov	r20, r22
    28b0:	4f 70       	andi	r20, 0x0F	; 15
    28b2:	40 5d       	subi	r20, 0xD0	; 208
    28b4:	4a 33       	cpi	r20, 0x3A	; 58
    28b6:	18 f0       	brcs	.+6      	; 0x28be <__ultoa_invert+0x7c>
    28b8:	49 5d       	subi	r20, 0xD9	; 217
    28ba:	31 fd       	sbrc	r19, 1
    28bc:	40 52       	subi	r20, 0x20	; 32
    28be:	41 93       	st	Z+, r20
    28c0:	02 d0       	rcall	.+4      	; 0x28c6 <__ultoa_invert+0x84>
    28c2:	a9 f7       	brne	.-22     	; 0x28ae <__ultoa_invert+0x6c>
    28c4:	ea cf       	rjmp	.-44     	; 0x289a <__ultoa_invert+0x58>
    28c6:	b4 e0       	ldi	r27, 0x04	; 4
    28c8:	a6 95       	lsr	r26
    28ca:	97 95       	ror	r25
    28cc:	87 95       	ror	r24
    28ce:	77 95       	ror	r23
    28d0:	67 95       	ror	r22
    28d2:	ba 95       	dec	r27
    28d4:	c9 f7       	brne	.-14     	; 0x28c8 <__ultoa_invert+0x86>
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	61 05       	cpc	r22, r1
    28da:	71 05       	cpc	r23, r1
    28dc:	08 95       	ret
    28de:	9b 01       	movw	r18, r22
    28e0:	ac 01       	movw	r20, r24
    28e2:	0a 2e       	mov	r0, r26
    28e4:	06 94       	lsr	r0
    28e6:	57 95       	ror	r21
    28e8:	47 95       	ror	r20
    28ea:	37 95       	ror	r19
    28ec:	27 95       	ror	r18
    28ee:	ba 95       	dec	r27
    28f0:	c9 f7       	brne	.-14     	; 0x28e4 <__ultoa_invert+0xa2>
    28f2:	62 0f       	add	r22, r18
    28f4:	73 1f       	adc	r23, r19
    28f6:	84 1f       	adc	r24, r20
    28f8:	95 1f       	adc	r25, r21
    28fa:	a0 1d       	adc	r26, r0
    28fc:	08 95       	ret

000028fe <__prologue_saves__>:
    28fe:	2f 92       	push	r2
    2900:	3f 92       	push	r3
    2902:	4f 92       	push	r4
    2904:	5f 92       	push	r5
    2906:	6f 92       	push	r6
    2908:	7f 92       	push	r7
    290a:	8f 92       	push	r8
    290c:	9f 92       	push	r9
    290e:	af 92       	push	r10
    2910:	bf 92       	push	r11
    2912:	cf 92       	push	r12
    2914:	df 92       	push	r13
    2916:	ef 92       	push	r14
    2918:	ff 92       	push	r15
    291a:	0f 93       	push	r16
    291c:	1f 93       	push	r17
    291e:	cf 93       	push	r28
    2920:	df 93       	push	r29
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
    2926:	ca 1b       	sub	r28, r26
    2928:	db 0b       	sbc	r29, r27
    292a:	0f b6       	in	r0, 0x3f	; 63
    292c:	f8 94       	cli
    292e:	de bf       	out	0x3e, r29	; 62
    2930:	0f be       	out	0x3f, r0	; 63
    2932:	cd bf       	out	0x3d, r28	; 61
    2934:	09 94       	ijmp

00002936 <__epilogue_restores__>:
    2936:	2a 88       	ldd	r2, Y+18	; 0x12
    2938:	39 88       	ldd	r3, Y+17	; 0x11
    293a:	48 88       	ldd	r4, Y+16	; 0x10
    293c:	5f 84       	ldd	r5, Y+15	; 0x0f
    293e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2940:	7d 84       	ldd	r7, Y+13	; 0x0d
    2942:	8c 84       	ldd	r8, Y+12	; 0x0c
    2944:	9b 84       	ldd	r9, Y+11	; 0x0b
    2946:	aa 84       	ldd	r10, Y+10	; 0x0a
    2948:	b9 84       	ldd	r11, Y+9	; 0x09
    294a:	c8 84       	ldd	r12, Y+8	; 0x08
    294c:	df 80       	ldd	r13, Y+7	; 0x07
    294e:	ee 80       	ldd	r14, Y+6	; 0x06
    2950:	fd 80       	ldd	r15, Y+5	; 0x05
    2952:	0c 81       	ldd	r16, Y+4	; 0x04
    2954:	1b 81       	ldd	r17, Y+3	; 0x03
    2956:	aa 81       	ldd	r26, Y+2	; 0x02
    2958:	b9 81       	ldd	r27, Y+1	; 0x01
    295a:	ce 0f       	add	r28, r30
    295c:	d1 1d       	adc	r29, r1
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	ed 01       	movw	r28, r26
    296a:	08 95       	ret

0000296c <_exit>:
    296c:	f8 94       	cli

0000296e <__stop_program>:
    296e:	ff cf       	rjmp	.-2      	; 0x296e <__stop_program>
